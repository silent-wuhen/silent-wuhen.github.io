<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>幻想奇术师</title>
      <link href="/2024/01/11/100.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/"/>
      <url>/2024/01/11/100.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是看了B站UP：幻想奇术师，之后的逻辑问题思考和记录。</p><h1 id="1-黑白帽子之题"><a href="#1-黑白帽子之题" class="headerlink" title="1.黑白帽子之题"></a>1.黑白帽子之题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV1Uz4y1p7uH/?vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">外星人谜题</a></p><p><strong>问题分析：</strong>在允许错误为一的情况下，只需要有一个特定的编码来传递信息即可。</p><p>现在将问题简单化：首先假设只有4个人，身高从高到低编号1~4（1号身高最高），帽子和人对应为：</p><p>1（黑），2（白），3（黑），4（黑）</p><p><strong>问题解答：</strong>将黑帽子为奇数定义为黑色</p><p><strong>step1：</strong>1号看见前面有2个黑帽子，所以1号说<strong>白色</strong>（1号错误，但条件允许出错一个）</p><p><strong>step2：</strong>2号明白1号前有偶数个黑帽子，自己看见是偶数，所以2号是白色（正确）</p><p><strong>step3：</strong>3号明白2号前有偶数个黑帽子，自己看见是奇数，所以3号是黑色（正确）</p><p><strong>step4：</strong>4号明白从3号回答，判断3号前有奇数个黑帽子，自己看见是0（偶数），所以1号是黑色（正确）</p><p>综上所述：白-白-黑-黑（只有第一位出错）</p><h1 id="2-绿眼睛谜题"><a href="#2-绿眼睛谜题" class="headerlink" title="2.绿眼睛谜题"></a>2.绿眼睛谜题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV16z4y1p7aW/?spm_id_from=333.337.search-card.all.click">绿眼睛谜题</a></p><p><strong>问题分析：</strong>问题简化：首先假设只有2个人，那么眼睛颜色不排列只组合的话，有3种情况：</p><p>红-红，红-绿，绿-绿</p><p>只需要排除：红-红，绿-绿，中的一个情况问题就解决了</p><p><strong>问题解答：</strong>你的回答是：你们之中至少有一个绿眼睛</p><p><strong>step1：</strong>红-红（通过这句话，可以直接排除掉）</p><p><strong>step2：</strong>红-绿。假设1（红），2（绿）。2号看见1号为红色，可以断定自己是绿色。1号暂时不能判断，需要等到第二天2号是否离开判断（step3解答）</p><p><strong>step3：</strong>绿-绿。</p><ul><li>第一天白天：1号看见2号为绿色，如果2号看见自己是红色，那么2号晚上必定离开。</li><li>第二天白天：1号看见了2号，可以判断2号看见1号是绿。同理2号看见了1号，可以判断1号看见2号是绿。两人知道自己是绿色</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本博客搭建</title>
      <link href="/2024/01/01/99.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/01/99.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的搭建方法有两种：</p><ol><li>hexo + gitee（国内，网页加载速度快）</li><li>hexo + github（国外，网页加载速度慢）</li></ol><p><strong>安装工具：</strong></p><ol><li><p><strong>node.js：</strong><a href="https://nodejs.org/">https://nodejs.org</a></p></li><li><p><strong>git：</strong><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>（官网下载比较慢）</p></li><li><p><strong>Typora：</strong>编辑网页文档使用的工具</p></li></ol><p>注意修改安装路径。</p><h1 id="方法一：hexo-gitee"><a href="#方法一：hexo-gitee" class="headerlink" title="方法一：hexo + gitee"></a>方法一：hexo + gitee</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>服务器在国内，别人的访问自己的网页速度快。</p></li><li><p><strong>缺点：</strong></p><p>需要身份证验证（身份证正反面，手持身份证正反面），以及等待备案通过。</p></li></ul><h1 id="方法二：hexo-github"><a href="#方法二：hexo-github" class="headerlink" title="方法二：hexo + github"></a>方法二：hexo + github</h1><p>建议先看一遍：hexo + gitee 的推荐视频<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>只需要有邮箱，不需要身份验证。</p></li><li><p><strong>缺点：</strong></p><p>服务器在国外，不使用加速器可能连自己都访问不了。</p></li></ul><p>推荐加速器：watt toolkit（微软商店可以下载，无毒，开源）</p><p><strong>接下来是正式搭建：</strong></p><p>在安装好node.js，git，Typora，watt toolkit（可选）之后，</p><ul><li><strong>环境检测：</strong></li></ul><ol><li><p>在任意位置新建hexo文件夹</p></li><li><p>右键 - 显示更多选项 - Open Git Bash here</p><p>输入：</p><p>node -v<br>npm -v（这个是node附带的）<br>git -v </p></li><li><p>输入</p><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo s</p></li></ol><ul><li><strong>搭建仓库</strong></li></ul><p>1.注册登入github（提示注册名字和创建好的网站名有关）：<a href="https://github.com/">https://github.com/</a></p><p>2.点击Create a new repository进入新建仓库页面</p><p>​GitHub: Let’s build from here</p><p>3.点击Create a new repository进入新建仓库页面</p><p>​仓库名输入：用户名.github.io(我已经试过了，必须是这种格式后面才能够访问)</p><p>​勾选Public</p><p>​勾选 Add a README file</p><p>​拉到下面点击create创建</p><ul><li><p><strong>生成SSH Keys</strong></p><p>1.在任意文件夹，右键 - Git bush here</p><p>2.输入：ssh-keygen -t rsa -C “邮件地址”</p><p>3.敲4次Enter</p><p>4.进入C:\Users\用户名，在里面进入.ssh文件</p><p>5.用记事本打开id_rsa.pub,全选复制</p><p>6.打开github，点击头像 - setting - 左边找到SSH相关字样 - new SSH keys，名称随意，在下面粘贴代码，然后创建</p><p>7.测试是否成功，在Git bush here中输入：ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a>，回车，然后再输入yes</p></li><li><p><strong>本地生成博客内容</strong></p></li></ul><ol><li><p>关闭Git bush here，进入hexo,blog文件夹，右键打开Git bush here</p></li><li><p>输入：</p><p>hexo g<br>hexo s</p><p>然后会输出一个网址，该网址为本地网址（不能联网访问）</p></li></ol><ul><li><strong>上线博客</strong></li></ul><ol><li><p>进入blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><p> type: git<br> repository:<br> branch: main </p><p>（每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！）</p></li></ol><p>​    2.去github，在之前生成的仓库页面点code，复制https链接</p><p>​将其粘贴到我们记事本中的repository：后面</p><p>​然后保存退出</p><p>​3.在Git bush here中输入</p><p>​npm install hexo-deployer-git –save</p><p>​hexo g</p><p>​hexo d</p><p>​然后在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p>到这里我们就搭建好了自己的网站，</p><p>网址为：<strong>用户名.github.io</strong></p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>虽然，到现在网站已经搭建好了，但是博客的主题需要自己去hexo的官网探索，推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><p>下载好以后，就是个人博客的参数配置。每次配置完成在Git bush here中输入：</p><p>hexo clean  (清除以前网页初始化)</p><p>hexo g  (生成网页)</p><p>hexo d （上传网页到github）</p><p>hexo s  (本地运行网页)</p>]]></content>
      
      
      <categories>
          
          <category> DIY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop大数据处理</title>
      <link href="/2023/11/18/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/3.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB/18.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2023/11/18/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/3.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB/18.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频推荐：<a href="https://www.bilibili.com/video/BV1WY4y197g7/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>为了让我快速搭建Hadoop集群，因为学习的过程中总会有配置出错的时候，再加上Hadoop集群搭建一次需要消耗的时间实在是太长了，所以写了这个笔记。当然，我也省略了很多操作，比如打开vim之后，输入i开始编辑，按esc退出编辑模式，:wq保存退出。所以需要熟悉一点点Linux命令。</p><p>温馨提示：建议每次搭建好了一个集群之后，就拍摄一次快照（虽然一个快照3个G大小左右）。</p><h1 id="第一章-搭建Hadoop集群"><a href="#第一章-搭建Hadoop集群" class="headerlink" title="第一章 搭建Hadoop集群"></a>第一章 搭建Hadoop集群</h1><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.下载vmware</span><br><span class="line">2.下载centos镜像</span><br><span class="line">3.配置vmware虚拟机的网络设置</span><br><span class="line">4.安装好centos，命名为hadoop01</span><br><span class="line">5.打开终端，输入：</span><br><span class="line">ping www.baidu.com</span><br><span class="line">6.有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br></pre></td></tr></table></figure><p>以上配置如果不会可以看视频：<a href="https://www.bilibili.com/video/BV1Kf4y1z7Nw?p=1&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">Hadoop安装</a></p><h2 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">以下正式开始，注意root登录：</span><br><span class="line"><span class="number">1.</span>创建/export目录，在export目录下创建data，servers,software三个目录：</span><br><span class="line">mkdir -p /export/data /export/servers /export/software</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>克隆两个虚拟机并命名为hadoop02，hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>配置主机名，修改后重新打开终端可以查看：(<span class="number">3</span>个都要操作)</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname 主机名</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>IP映射配置（<span class="number">3</span>个，IP地址参考自己的）</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span> hadoop01</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.135</span> hadoop02</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.136</span> hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>设置静态IP(最后ens33可能不同，输入en然后TAB键补齐),<span class="number">3</span>个修改：</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">修改（没有的需要自己打）：</span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.121</span><span class="number">.2</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">DNS1=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>可选，修改时区并配置自动时间同步（<span class="number">3</span>个）：</span><br><span class="line">安装ntp软件</span><br><span class="line">yum install -y ntp</span><br><span class="line">更新时区</span><br><span class="line">rm -f /etc/localtime;sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">同步时间</span><br><span class="line">ntpdate -u ntp.aliyun.com</span><br><span class="line">开启ntp服务并设置开机自启</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>重启（<span class="number">3</span>个），输入：</span><br><span class="line">reboot</span><br><span class="line">ping www.baidu.com</span><br><span class="line">有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>SSH免密登录，输入：</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">连续<span class="number">4</span>次回车</span><br><span class="line">cd ~/.ssh</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop01</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop02</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop03</span><br><span class="line">ssh hadoop01</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop02</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop03</span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line"><span class="number">9.J</span>DK和Hadoop安装,注意以下版本号请根据实际版本号：</span><br><span class="line">使用xFTP上传JDK和Hadoop安装包到/export/software/</span><br><span class="line">cd /export/software/</span><br><span class="line">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /export/servers/</span><br><span class="line">tar -zxvf hadoop-<span class="number">2.10</span><span class="number">.0</span>.tar.gz -C /export/servers/</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv jdk-8u241-linux-x64 jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">mv hadoop-<span class="number">2.10</span><span class="number">.0</span> hadoop-<span class="number">2.10</span><span class="number">.0</span> (这里解压后文件名一样，可以不修改)</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>配置环境变量：</span><br><span class="line">vim /etc/profile</span><br><span class="line">在文件最底部输入：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/<span class="built_in">bin</span></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/export/servers/hadoop-<span class="number">2.10</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/<span class="built_in">bin</span>:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line">退出后：</span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p>到此没有出现错误的话，那么恭喜，可以接着往下一步进行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">接下来对主节点hadoop01进行配置：</span><br><span class="line">（1）</span><br><span class="line">cd /export/servers/hadoop-2.10.0/etc/hadoop</span><br><span class="line">vim hadoop-env.sh </span><br><span class="line">找到export JAVA_HOME，修改为：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-1.8.0</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">vim core-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/export/servers/hadoop-2.10.0/tmp&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（3）</span><br><span class="line">vim hdfs-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop02:5009&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（4）</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（5）</span><br><span class="line">vim yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（6）</span><br><span class="line"> vim slaves </span><br><span class="line"> </span><br><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br><span class="line"></span><br><span class="line">（7）</span><br><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line">scp -r /export/ hadoop02:/</span><br><span class="line">scp -r /export/ hadoop03:/</span><br><span class="line"></span><br><span class="line">然后3个需要输入：</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">需要对主节点hadoop01操作</span><br><span class="line">（8）必须格式化处理一次</span><br><span class="line">cd /export/servers/hadoop-2.10.0</span><br><span class="line">ls -l</span><br><span class="line">如果有tmp目录</span><br><span class="line">需要输入：rm -rf /export/servers/hadoop-2.10.0/tmp/</span><br><span class="line">格式化：</span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>如果到此没有出错，那么需要进行一下最最最重要的一步：</p><p><strong>拍摄快照</strong>，<strong>拍摄快照</strong>，<strong>拍摄快照</strong></p><p>重要的事情说三遍。</p><h2 id="Hadoop集群测试"><a href="#Hadoop集群测试" class="headerlink" title="Hadoop集群测试"></a>Hadoop集群测试</h2><p><strong>注：每次开机需要启动一次服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）启动服务</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">注：start换成stop停止服务</span><br><span class="line"></span><br><span class="line">（2）查看服务</span><br><span class="line">jps</span><br><span class="line"></span><br><span class="line">（3）通过UI查看Hadoop运行状态</span><br><span class="line">在浏览器网址栏输入：</span><br><span class="line">HDFS的UI端口：</span><br><span class="line">hadoop01:50070</span><br><span class="line">YARN的UI端口：</span><br><span class="line">hadoop01:8088</span><br></pre></td></tr></table></figure><h2 id="Hadoop集群初体验"><a href="#Hadoop集群初体验" class="headerlink" title="Hadoop集群初体验"></a>Hadoop集群初体验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">（1）在/export/data目录下，输入：</span><br><span class="line">cd /export/data</span><br><span class="line">vim word.txt</span><br><span class="line">编写内容：</span><br><span class="line">hello world</span><br><span class="line">hello computer</span><br><span class="line">hello hadoop</span><br><span class="line"></span><br><span class="line">（2）在HDFS上创建/wordcount/input,并上传word.txt:</span><br><span class="line">hadoop fs -mkdir -p /wordcount/input</span><br><span class="line">hadoop fs -put /export/data/word.txt /wordcount/input</span><br><span class="line"></span><br><span class="line">（3）HDFS的UI端口查看：</span><br><span class="line">hadoop01:50070</span><br><span class="line"></span><br><span class="line">（4）查看MapReduce实例程序：</span><br><span class="line">cd /export/servers/hadoop-2.10.0/share/hadoop/mapreduce</span><br><span class="line">ls -l</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.10.0.jar wordcount /wordcount/input /wordcount/output</span><br><span class="line"></span><br><span class="line">（5）HDFS的UI端口查看结果：</span><br><span class="line">hadoop01:50070</span><br></pre></td></tr></table></figure><h1 id="第二章-初识Hadoop"><a href="#第二章-初识Hadoop" class="headerlink" title="第二章 初识Hadoop"></a>第二章 初识Hadoop</h1><ol><li><p>什么是大数据？</p><p>大数据是数字化时代、信息化时代的基础（技术）支撑，以数据为生活赋能。</p></li><li><p>大数据的4个主要特征（4v）：</p><p>大量（volume）</p><p>多样（variety）：结构化数据，非结构化数据，半结构化数据</p><p>高速（velocity）：</p><p>价值（value）：价值密度的高低和数据总量的大小成反比。</p></li><li><p>大数据的应用场景：医疗行业的应用，金融行业的应用，零售业的应用</p></li><li><p>Hadoop的优势：</p><p>扩容能力强</p><p>成本低</p><p>高效率</p><p>可靠性</p><p>高容错率</p></li><li><p>Hadoop的生态体系：</p><ol><li><p>分布式存储系统（HDFS）：</p><p>Hadoop分布式文件系统的简称</p></li><li><p>MapReduce分布式计算框架：</p><p>是一种计算模型，用于大规模数据集的并行计算</p></li><li><p>YARN资源管理平台：</p><p>Hadoop2.0中的资源管理器，为上层的应用提供统一的资源管理和调度</p></li><li><p>Sqoop数据迁移工具：</p><p>用于Hadoop和传统数据库间进行数据的转换。</p></li><li><p>Mahout数据挖掘算法库：</p><p>方便快捷地创建智能应用程序</p></li><li><p>HBase分布式数据库：</p><p>针对结构化数据的可伸缩、高可靠、高性能、分布式和面向列的动态模型数据库</p></li><li><p>Zookeeper分布式协调服务：</p><p>分布式应用程序协调服务</p></li><li><p>Hive基于Hadoop的数据仓库：</p><p>可以将结构化的数据文件映射为一张数据表</p></li><li><p>Flume日志收集工具：</p><p>是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。支持在日志系统中定制各类数据发送方用于收集数据。</p></li></ol></li><li><p>大数据的核心工作：数据存储，数据计算，数据传输</p><ul><li><p>数据存储：</p><p>HDFS</p><p>HBase是大数据体系内使用非常广泛的NoSQL KV型数据库技术HBase是基于HDFS之上构建的。</p></li><li><p>数据计算：</p><p>MapReduce：组件是最早一代的大数据分布式计算引擎对大数据的发展做出了卓越的贡献</p><p> Hive：是一款以SQL为要开发语言的分布式计算框架。</p><p>Spark：是目前全球范围内最火热的分布式内存计算引擎。是大数据体系中的明星计算产品</p><p>Flink：同样也是一款明星级的大数据分布式内存计算引擎。</p></li><li><p>数据传输：</p><p>Flume：是一款流式数据采集工具，可以从非常多的数据源中完成数据采集传输的任务。</p><p> Sqoop：是一款ETL工具，可以协助大数据体系和关系型数据库之间进行数据传输。</p><p>Kafka：是一款分布式的消息系统，可以完成海量规模的数据传输工作。</p><p>Pulsar：同样是一款分布式的消息系统。</p></li></ul></li><li><p>大数据软件生态</p><ul><li>存储：Apache Hadoop HDFS、Apache HBase、Apache Kudu、云平台</li><li>计算：Apache Hadoop MapReduce、Apache Spark、Apache Flink</li><li>传输：Apache Kafka、Apache Pulsar、Apache Flume、Apache Sqoop</li></ul></li><li><p>商业发行版本：CDH，HDP，星环</p></li></ol><h1 id="第三章-HDFS分布式文件系统"><a href="#第三章-HDFS分布式文件系统" class="headerlink" title="第三章 HDFS分布式文件系统"></a>第三章 HDFS分布式文件系统</h1><p>Hadoop三大组件（HDFS，MapReduce，YARN）</p><h2 id="HDFS的基本概念"><a href="#HDFS的基本概念" class="headerlink" title="HDFS的基本概念"></a>HDFS的基本概念</h2><ol><li>NameNode（名称节点&#x2F;主节点）：是HDFS集群的主服务器</li><li>DataNode（数据节点）：是HDFS集群的从服务器</li><li>Secondary NameNode（辅助名称节点）：通过http从NameNode拉取数据（edits和fsimage）然后合并完成后提供给NameNode使用</li><li>Block（数据块）</li><li>Rack（机架）</li><li>Metadata（元数据）：<ul><li>维护HDFS中文件和目录的信息</li><li>记录文件内容，存储相关信息</li><li>用来记录HDFS中所有DataNode的信息</li></ul></li></ol><h2 id="HDFS的特点"><a href="#HDFS的特点" class="headerlink" title="HDFS的特点"></a>HDFS的特点</h2><ol><li>优点<ul><li>高容错</li><li>流式数据访问</li><li>支持超大文件</li><li>高数据吞吐量：一旦写入就不能进行修改了，只能追加或者删除。</li><li>可构建在廉价的机器上</li></ul></li><li>缺点<ul><li>高延迟</li><li>不适合小文件存取场景</li><li>不适合并发写入：不支持并发多用户的写操作</li></ul></li></ol><h2 id="HDFS存储架构"><a href="#HDFS存储架构" class="headerlink" title="HDFS存储架构"></a>HDFS存储架构</h2><ol><li><p>大数据体系中，分布式的调度主要有2类架构模式：</p><ul><li>去中心化模式</li><li>中心化模式（主从架构&#x2F;主从模式）：就是中心化模式，表示有一个主节点来作为管理者，管理协调下属一批从节点工作。</li></ul></li><li><p>NameNode：：存储的是元数据信息。</p><p>DataNode：存储真正的数据信息</p><p>SecondaryNameNode：主要帮助NameNode完成元数据整理工作。</p></li><li><p>HDFS文件的读写原理（略）</p></li></ol><h2 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h2><h3 id="一键启停脚本"><a href="#一键启停脚本" class="headerlink" title="一键启停脚本"></a>一键启停脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><h3 id="HDFS文件系统基本信息"><a href="#HDFS文件系统基本信息" class="headerlink" title="HDFS文件系统基本信息"></a>HDFS文件系统基本信息</h3><p>HDFS同Linux系统一样，均是以 &#x2F; 作为根目录的组织形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs 新版命令，只是前缀不同</span><br><span class="line"></span><br><span class="line">1.创建文件夹</span><br><span class="line">hadoop fs -mkdir [-p] &lt;path&gt; ...</span><br><span class="line">    path 为待创建的目录</span><br><span class="line">    -p选项的行为与Linux mkdir -p一致，它会沿着路径创建父目录。</span><br><span class="line"></span><br><span class="line">2.查看目录内容</span><br><span class="line">hadoop fs -ls [-h] [-R] [&lt;path&gt; ...] </span><br><span class="line">path 指定目录路径</span><br><span class="line">-h 人性化显示文件size</span><br><span class="line">-R 递归查看指定目录及其子目录</span><br><span class="line"></span><br><span class="line">3.上传文件到HDFS指定目录下</span><br><span class="line">hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">-f 覆盖目标文件（已存在下）</span><br><span class="line">-p 保留访问和修改时间，所有权和权限。</span><br><span class="line">localsrc 本地文件系统（客户端所在机器）</span><br><span class="line">dst 目标文件系统（HDFS）</span><br><span class="line"></span><br><span class="line">4.查看HDFS文件内容</span><br><span class="line">hadoop fs -cat &lt;src&gt; ... </span><br><span class="line">    读取指定文件全部内容，显示在标准输出控制台</span><br><span class="line">    </span><br><span class="line">    读取大文件可以使用管道符配合more</span><br><span class="line">        hadoop fs -cat &lt;src&gt; | more</span><br><span class="line">        hdfs dfs -cat &lt;src&gt; | more</span><br><span class="line"></span><br><span class="line">5.下载HDFS文件</span><br><span class="line">hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</span><br><span class="line">    下载文件到本地文件系统指定目录，localdst必须是目录</span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line">    -p 保留访问和修改时间，所有权和权限。</span><br><span class="line"></span><br><span class="line">6.拷贝HDFS文件</span><br><span class="line">hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt; </span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line"></span><br><span class="line">7.追加数据到HDFS文件中</span><br><span class="line">hadoop fs -appendToFile &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">    将所有给定本地文件的内容追加到给定dst文件。 </span><br><span class="line">    dst如果文件不存在，将创建该文件。 </span><br><span class="line">    如果&lt;localSrc&gt;为-，则输入为从标准输入中读取。</span><br><span class="line"></span><br><span class="line">8.HDFS数据移动操作</span><br><span class="line">hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</span><br><span class="line">    移动文件到指定文件夹下</span><br><span class="line">    可以使用该命令移动数据，重命名文件的名称</span><br><span class="line"></span><br><span class="line">9.HDFS数据删除操作</span><br><span class="line">hadoop fs -rm -r [-skipTrash] URI </span><br><span class="line">[URI ...] 删除指定路径的文件或文件夹</span><br><span class="line">    -skipTrash 跳过回收站，直接删除（默认回收站是关闭状态）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HDFS shell其它命令：<a href="https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html">官方命令指导文档</a></p><h2 id="HDFS分布式文件存储"><a href="#HDFS分布式文件存储" class="headerlink" title="HDFS分布式文件存储"></a>HDFS分布式文件存储</h2><ol><li><p>问题：文件大小不一，不利于统一管理</p><p>解决：设定统一的管理单位，block块</p></li><li><p>NameNode基于一批edits和一个fsimage文件的配合完成整个文件系统的管理和维护</p><ul><li>edits文件：是一个流水账文件，记录了hdfs中的每一次操作，以及本次操作影响的文件其对应的block</li><li>FSImage文件：将全部的edits文件，合并为最终结果</li></ul></li></ol><h1 id="第四章-MapReduce分布式计算框架"><a href="#第四章-MapReduce分布式计算框架" class="headerlink" title="第四章 MapReduce分布式计算框架"></a>第四章 MapReduce分布式计算框架</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><ol><li>MapReduce核心思想是：分而治之</li><li>MapReduce作为一种分布式计算模型，它主要用于解决海量数据的计算问题。<ul><li>Map阶段：负责将任务分解，并行处理</li><li>Reduce阶段：负责将任务合并，即把Map阶段的结果进行全局汇总</li></ul></li><li>从数据格式上看map（）函数接受键值对数据，输出键值对数据。reduce（）函数将map（）输出的键值对作为输入，把相同的key的value进行汇总输出新的键值对。</li></ol><h2 id="MapReduce工作原理"><a href="#MapReduce工作原理" class="headerlink" title="MapReduce工作原理"></a>MapReduce工作原理</h2><p>（见课本：P73页- P100）</p><h1 id="第五章-Zookeeper分布式协调服务"><a href="#第五章-Zookeeper分布式协调服务" class="headerlink" title="第五章 Zookeeper分布式协调服务"></a>第五章 Zookeeper分布式协调服务</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1M741137qY?p=74">黑马程序员</a></p><h2 id="初识Zookeeper"><a href="#初识Zookeeper" class="headerlink" title="初识Zookeeper"></a>初识Zookeeper</h2><ol><li><p>Zookeeper简介</p><ul><li>Zookeeper是进行分布式服务的协调</li><li>本质上是一个分布式的小文件存储系统</li></ul></li><li><p>Zookeeper的特性：其他特性都是为了满足Zookeeper全局数据一致性</p><ul><li>全局数据一致性：每个服务器都保存一份相同的数据副本，客户端连接到集群的任意节点上，看到的数据都是一致的。</li><li>可靠性</li><li>顺序性</li><li>数据更新原子性</li><li>实时性</li></ul></li><li><p>Zookeeper集群的角色</p><p>每一个Zookeeper都是由多台服务器节点组成，这些节点通过复制保证各个服务器节点之间的数据一致。<strong>只要这些服务器节点过半数可用，那么整个Zookeeper集群就可用。</strong></p><ol><li>leader：Zookeeper集群工作的核心，也是事务性请求的唯一调度者和处理者。</li><li>follower：负责处理客户端的非事务请求。</li><li>observer：负责观察Zookeeper集群的最新状态变化，并将这些状态进行同步。</li></ol></li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ol><li>数据采用树状层次结构</li><li>Znode的类型：<ul><li>临时节点：生命周期依赖于创建它们的会话</li><li>永久节点：生命周期<strong>不</strong>依赖于创建它们的会话</li></ul></li><li>Znode的属性：其中重要的概念是<code>Zxid(Zookeeper Transaction ID)</code>，<code>Zookeeper</code>结点的每一次更改都具有唯一的<code>Zxid</code>，如果<code>Zxid-1</code> 小于<code> Zxid-2</code> ，则<code>Zxid-1</code> 的更改发生在 <code>Zxid-2 </code>更改之前<ul><li><code>czxid</code>：数据结点创建时的事务ID——针对于<code>zookeeper</code>数据结点的管理：我们对结点数据的一些写操作都会导致<code>zookeeper</code>自动地为我们去开启一个事务，并且自动地去为每一个事务维护一个事务<code>ID</code></li><li><code>ctime</code>数据结点创建时的时间</li><li><code>mZxid</code>数据结点最后一次更新时的事务ID</li><li><code>mtime</code>数据结点最后一次更新时的时间</li><li><code>pZxid</code>数据节点最后一次修改此<code>znode</code>子节点更改的<code>zxid</code></li><li><code>cversion</code>子结点的更改次数</li><li><code>dataVersion</code>结点数据的更改次数</li><li><code>aclVersion</code>结点的ACL更改次数——类似<code>linux</code>的权限列表，维护的是当前结点的权限列表被修改的次数</li><li><code>ephemeralOwner</code>如果结点是临时结点，则表示创建该结点的会话的<code>SessionID</code>；如果是持久结点，该属性值为0</li><li><code>dataLength</code>数据内容的长度</li><li><code>numChildren</code>数据结点当前的子结点个数</li></ul></li></ol><h2 id="Zookeeper的Watch机制"><a href="#Zookeeper的Watch机制" class="headerlink" title="Zookeeper的Watch机制"></a>Zookeeper的Watch机制</h2><p>Watch机制：实现分布式的通知功能。</p><ol><li>Watch机制的特点<ul><li>一次性触发：后续发生同样的事件，也不会再次触发。</li><li>事件封装：</li><li>异步发送</li><li>先注册，再触发</li></ul></li><li>Watch机制的通知状态和事件类型（107）</li></ol><h2 id="Zookeeper的选举机制"><a href="#Zookeeper的选举机制" class="headerlink" title="Zookeeper的选举机制"></a>Zookeeper的选举机制</h2><ol><li>选举机制：<ul><li>服务器ID：设置myid参数文件，编号越大，在算法中的权重越大</li><li>选举状态：4种。竞选，随从，观察，领导者。</li><li>数据ID：选举过程中，数据越新，权重越大</li><li>逻辑时钟：投票次数。</li></ul></li><li>选举机制的类型<ul><li>全新集群选举</li><li>非全新集群选举</li></ul></li></ol><h2 id="Zookeeper的集群部署"><a href="#Zookeeper的集群部署" class="headerlink" title="Zookeeper的集群部署"></a>Zookeeper的集群部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1.上传文件到：/export/softwere</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">cd /export/software/</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line">cd ../servers/</span><br><span class="line">mv apache-zookeeper-3.7.0-bin/ zookeeper-3.7.0</span><br><span class="line"></span><br><span class="line">5.</span><br><span class="line">cd zookeeper-3.7.0/conf/</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg </span><br><span class="line">找到并修改：dataDir=/export/data/zookeeper/zkdata</span><br><span class="line">最下方输入：</span><br><span class="line">server.1=hadoop01:2888:3888</span><br><span class="line">server.2=hadoop02:2898:3898</span><br><span class="line">server.3=hadoop03:2889:3889</span><br><span class="line"></span><br><span class="line">6.</span><br><span class="line">mkdir -p /export/data/zookeeper/zkdata</span><br><span class="line">cd /export/data/zookeeper/zkdata</span><br><span class="line">echo 1 &gt;myid</span><br><span class="line"></span><br><span class="line">7.</span><br><span class="line">vim /etc/profile</span><br><span class="line">最下面输入：</span><br><span class="line">export ZK_HOME=/export/servers/zookeeper-3.7.0</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$ZK_HOME/bin</span><br><span class="line">保存退出</span><br><span class="line"></span><br><span class="line">8.</span><br><span class="line">scp -r /export/servers/zookeeper-3.7.0/ hadoop02:/export/servers/</span><br><span class="line">scp -r /export/servers/zookeeper-3.7.0/ hadoop03:/export/servers/</span><br><span class="line"></span><br><span class="line">scp -r /export/data/zookeeper/ hadoop02:/export/data/</span><br><span class="line">scp -r /export/data/zookeeper/ hadoop03:/export/data/</span><br><span class="line"></span><br><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line"></span><br><span class="line">3个输入：</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">在Hadoop02输入：</span><br><span class="line">cd /export/data/zookeeper/zkdata/</span><br><span class="line">echo 2 &gt;myid</span><br><span class="line"></span><br><span class="line">在Hadoop03输入：</span><br><span class="line">cd /export/data/zookeeper/zkdata/</span><br><span class="line">echo 3 &gt;myid</span><br><span class="line"></span><br><span class="line">9.</span><br><span class="line">启动服务，3个依次输入：</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line">查看角色：</span><br><span class="line">zkServer.sh status</span><br><span class="line">注意：在输入这个命令的时候报错，无法查看mode的话，极大的可能性是没有关闭防火墙（究极折磨，我配置了10多次才找到问题，问老师真问题的边都没找到）</span><br><span class="line">如果出错输入：</span><br><span class="line">systemctl stop firewalld  #停止firewall防火墙</span><br><span class="line">systemctl disable firewalld  #禁止firewall开机启动</span><br><span class="line">（详细解决方案；https://blog.csdn.net/white_mvlog/article/details/112878757）</span><br><span class="line"></span><br><span class="line">关闭服务：</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure><h2 id="Zookeeper的shell操作"><a href="#Zookeeper的shell操作" class="headerlink" title="Zookeeper的shell操作"></a>Zookeeper的shell操作</h2><table><thead><tr><th align="center">常用命令</th><th align="center">命令描述</th></tr></thead><tbody><tr><td align="center">ls &#x2F;</td><td align="center">查看Zookeeper中所包含的内容</td></tr><tr><td align="center">ls2 &#x2F;</td><td align="center">查看当前节点数据，并能看见更新次数等数据</td></tr><tr><td align="center">create &#x2F;zk “test”</td><td align="center">创建一个新的节点zk以及与他关联的字符串</td></tr><tr><td align="center">get &#x2F;zk</td><td align="center">获取zk所包含的信息</td></tr><tr><td align="center">set &#x2F;zk “zkbak”</td><td align="center">对zk所关联的字符串进行设置</td></tr><tr><td align="center">delete &#x2F;zk</td><td align="center">删除节点</td></tr><tr><td align="center">rmr</td><td align="center">递归删除节点</td></tr><tr><td align="center">help</td><td align="center">帮助命令</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.启动服务：</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line">2.连接zookeeoper服务：</span><br><span class="line">zkCli.sh -server localhost:2181</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">ls /</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line">ls2 /</span><br><span class="line"></span><br><span class="line">5.create [-s] [-e] path data acl</span><br><span class="line">-s:是否开启节点的序列化特性</span><br><span class="line">-e:开启临时节点特性，不指定则是永久节点</span><br><span class="line">path：创建的路径</span><br><span class="line">data：创建节点的数据</span><br><span class="line">acl:权限控制，，一般了解</span><br><span class="line"></span><br><span class="line">6.监听节点</span><br><span class="line">get /testnode-tem watch</span><br><span class="line">set /testnode-tem testwatch</span><br></pre></td></tr></table></figure><h1 id="第六章-YARN资源管理框架"><a href="#第六章-YARN资源管理框架" class="headerlink" title="第六章 YARN资源管理框架"></a>第六章 YARN资源管理框架</h1><h2 id="YARN体系结构"><a href="#YARN体系结构" class="headerlink" title="YARN体系结构"></a>YARN体系结构</h2><p>YARN：是一个通用的资源管理系统和调度平台</p><p>YARN的三大核心组件：</p><ol><li>ResourceManager：是一个全局的资源管理系统，负责整个YARN集群资源的监控、分配和管理工作。<ul><li>负责处理客户端请求</li><li>接收和监控NodeManager的资源情况</li><li>启动和监控ApplicationMaster</li><li>资源的分配和调度</li></ul></li><li>NodeManager：是每个节点上的资源和任务管理器。</li><li>ApplicationMaster：</li></ol><h1 id="第七章-Hive数据仓库"><a href="#第七章-Hive数据仓库" class="headerlink" title="第七章 Hive数据仓库"></a>第七章 Hive数据仓库</h1><h2 id="数据仓库简介"><a href="#数据仓库简介" class="headerlink" title="数据仓库简介"></a>数据仓库简介</h2><ol><li><p>数据仓库是一个面向主题的，集成的，随时间变化的，但信息本身相对稳定的数据集合。</p><p>数据处理大致分为2类：</p><ul><li>联机事务处理（OLTP）：传统关系数据库的主要应用</li><li>联机分析处理（OLAP）：数据仓库的主要应用</li></ul></li><li><p>数据仓库的结构：数据源，数据存储及管理，OLAP服务器，前端工具。</p></li><li><p>数据仓库的数据模型</p><ul><li>星型模型</li><li>雪花模型：星型模型的扩展</li></ul></li><li><p>事务表，维度表</p></li></ol><h2 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h2><ol><li><p>Hive是建立再Hadoop文件系统上的数据仓库，是一种可以存储，查询和分析存储在Hadoop中的大规模数据的工具。</p></li><li><p>Hive使用的是HQL查询语言</p><table><thead><tr><th>对比项</th><th>Hive</th><th>MySQL</th></tr></thead><tbody><tr><td>查询语言</td><td>HQL</td><td>SQL</td></tr><tr><td>数据更新</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>多表插入</td><td>支持</td><td>不支持</td></tr></tbody></table></li><li><p>Hive系统架构</p><ul><li>用户接口：CLI，JDBC&#x2F;ODBC，webUI。CLI为Shell终端命令行。</li><li>跨语言服务</li><li>底层的驱动引擎：编译器，优化器，执行器。</li><li>元数据存储系统</li></ul></li><li><p>Hive数据模型：Hive中所有的数据都存储在HDFS中。包含：</p><ul><li>数据库</li><li>表</li><li>分区</li><li>桶表</li></ul></li></ol><h2 id="Hive的安装"><a href="#Hive的安装" class="headerlink" title="Hive的安装"></a>Hive的安装</h2><p>安装分为3种模式：嵌入模式，本地模式，远程模式。</p><p><strong>注：</strong>要先启动HDFS服务：start-dfs.sh</p><ol><li><p>嵌入模式（可忽略，只测试使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">嵌入模式：使用的内嵌Derby数据库存储元数据。一次只能连接一个客户端。</span><br><span class="line"></span><br><span class="line">1.上传文件到/export/software</span><br><span class="line"></span><br><span class="line">2.解压</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv apache-hive-3.1.2-bin/ hive-3.1.2</span><br><span class="line">cd hive-3.1.2</span><br><span class="line"></span><br><span class="line">4.启动Hive程序</span><br><span class="line">bin/hive</span><br></pre></td></tr></table></figure></li><li><p>本地模式，远程模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">本地模式，远程模式</span><br><span class="line">1.安装MySQL服务</span><br><span class="line">yum install mysql mysql-server mysql-devel</span><br><span class="line">systemctl start mysqld</span><br><span class="line">mysql</span><br><span class="line">use mysql;</span><br><span class="line">update user set host=&quot;%&quot;;</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &quot;root&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">2.在/export/software下，解压</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">3.复制MySQL安装包(JDBC的jar包)</span><br><span class="line">cp mysql-connector-java-8.0.17.jar /export/servers/apache-hive-3.1.2-bin/lib/</span><br><span class="line"></span><br><span class="line">4.重命名</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv apache-hive-3.1.2-bin/ hive-3.1.2</span><br><span class="line"></span><br><span class="line">5.Hive的配置</span><br><span class="line">（1）</span><br><span class="line">cd hive-3.1.2/conf/</span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">vim hive-env.sh</span><br><span class="line">添加</span><br><span class="line">export HADOOP_HOME=/export/servers/hadoop-2.10.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（2）vim hive-site.xml</span><br><span class="line">输入：</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">&lt;value&gt; jdbc:mysql://hadoop01:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">&lt;description&gt;Mysql 连接协议&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">        &lt;dеѕсrірtіоn&gt;JDВС连接驱动&lt;/dеѕсrірtіоn&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;用户名&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;密码&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.初始化，在hive-3.1.2/bin目录下：</span><br><span class="line">./schematool -dbType mysql -initSchemayu</span><br></pre></td></tr></table></figure></li><li><p>远程服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.复制hive:</span><br><span class="line">scp -r /scp -r /export/servers/hive-3.1.2/ hadoop02:/export/servers/</span><br><span class="line">scp -r /export/servers/hive-3.1.2/ hadoop03:/export/servers/</span><br><span class="line"></span><br><span class="line">2.在Hive目录下，启动服务（注意启动dfs,yarn服务）：</span><br><span class="line">bin/hiveserver2</span><br><span class="line">(输入完成后，命令行将无法进行其他操作)</span><br><span class="line"></span><br><span class="line">3.进入Hadoop02，输入:</span><br><span class="line">ssh hadoop01</span><br><span class="line">cd /export/servers/hive-3.1.2/</span><br><span class="line">bin/beeline</span><br><span class="line">! connect jdbc:hive2://hadoop01:10000</span><br><span class="line">如果出错：</span><br><span class="line">cd /export/servers/hadoop-2.10.0/etc/hadoop/</span><br><span class="line">vim core-site.xml </span><br><span class="line">添加：</span><br><span class="line">        &lt;!--置超级代理--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crash Course Computer Science</title>
      <link href="/2023/11/04/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/4.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.Crash%20Course%20Computer%20Science/"/>
      <url>/2023/11/04/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/4.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.Crash%20Course%20Computer%20Science/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>视频1：<a href="https://www.bilibili.com/video/BV1EW411u7th/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">B站</a></p><p>视频2：<a href="https://github.com/1c7/crash-course-computer-science-chinese">GitHub</a></p><p>一个科普向系列视频，在短短 8 个小时里非常生动且全面地科普了关于计算机科学的方方面面：计算机的历史、计算机是如何运作的、组成计算机的各个重要模块、计算机科学中的重要思想等。正如它的口号所说的 <em>Computers are not magic!</em></p><h2 id="课程目标："><a href="#课程目标：" class="headerlink" title="课程目标："></a>课程目标：</h2><p>从高层次总览一系列计算机话题，快速入门计算机科学。</p><h1 id="第一课：计算机早期历史"><a href="#第一课：计算机早期历史" class="headerlink" title="第一课：计算机早期历史"></a>第一课：计算机早期历史</h1><h2 id="1、计算机技术的影响——进入信息时代"><a href="#1、计算机技术的影响——进入信息时代" class="headerlink" title="1、计算机技术的影响——进入信息时代"></a>1、计算机技术的影响——进入信息时代</h2><ul><li><p>出现自动化农业设备与医疗设备</p></li><li><p>全球通信和全球教育机会变得普遍</p></li><li><p>出现意想不到的虚拟现实&#x2F;无人驾驶&#x2F;人工智能等新领域</p></li></ul><h2 id="2、计算机的实质："><a href="#2、计算机的实质：" class="headerlink" title="2、计算机的实质："></a>2、计算机的实质：</h2><p>极其简单的组件，通过一层层的抽象，来做出复杂的操作。</p><p>计算机中的很多东西，底层其实都很简单，让人难以理解的，是一层层精妙的抽象。像一个越来越小的俄罗斯套娃。</p><h2 id="3、关于计算的历史："><a href="#3、关于计算的历史：" class="headerlink" title="3、关于计算的历史："></a>3、关于计算的历史：</h2><ol><li>公元前 2500 年：算盘出现，为十进制，功能类似一个计数器。</li><li>公元前 2500 年-公元 1500年：星盘、计算尺等依靠机械运动的计算设备出现</li><li>公元 1613 年：computer 的概念出现，当时指的是专门做计算的职业，</li><li>1694 年：步进计算器出现，是世界上第一台能自动完成加减乘除的计算器。</li><li>1694-1900 年：计算表兴起，类似于字典，可用于查找各种庞大的计算值。</li><li>1823 年：差分机的设想出现，可以做函数计算，但计划最后失败。</li><li>19 世纪中期：分析机的设想出现，设想存在可计算一切的通用计算机。</li><li>1890 年：打孔卡片制表机。原理：在纸上打孔→孔穿过针→针泡入汞→电路连通→齿轮使计数+1。</li></ol><h1 id="第二课：电子计算机的发展史"><a href="#第二课：电子计算机的发展史" class="headerlink" title="第二课：电子计算机的发展史"></a>第二课：电子计算机的发展史</h1><h2 id="1、电子计算机元器件变化："><a href="#1、电子计算机元器件变化：" class="headerlink" title="1、电子计算机元器件变化："></a>1、电子计算机元器件变化：</h2><p>继电器→真空管→晶体管</p><h2 id="2、计算机的出现背景："><a href="#2、计算机的出现背景：" class="headerlink" title="2、计算机的出现背景："></a>2、计算机的出现背景：</h2><p>20世纪人口暴增，科学与工程进步迅速，航天计划成形。以上导致数据的复杂度急剧上升、计算量暴增，对于计算的自动化、高速有迫切的需求。</p><h2 id="3、电子计算机的发展："><a href="#3、电子计算机的发展：" class="headerlink" title="3、电子计算机的发展："></a>3、电子计算机的发展：</h2><p>1945年 哈佛马克1：使用继电器，用电磁效应，控制机械开关，缺点为有磨损和延迟。</p><p>*最早还因为有虫子飞进去导致故障，引申出bug&#x3D;故障的意思。</p><p>1943年 巨人1号：使用真空管（三极管），制造出世界上第一个可编程的计算机。</p><p>1946年 ENIAC：第一个电子数值积分计算机，为第一台通用计算机。</p><p>1947年 晶体管出现：使用的是固态的半导体材料，相对真空管更可靠。</p><p>1950s 空军ANFSQ-7： 真空管到达计算极限。</p><p>1957年 IBM 608： 第一个消费者可购买的晶体管计算机出现。</p><h1 id="第三课：布尔逻辑与逻辑门"><a href="#第三课：布尔逻辑与逻辑门" class="headerlink" title="第三课：布尔逻辑与逻辑门"></a>第三课：布尔逻辑与逻辑门</h1><h2 id="1、计算机为什么使用二进制："><a href="#1、计算机为什么使用二进制：" class="headerlink" title="1、计算机为什么使用二进制："></a>1、计算机为什么使用二进制：</h2><ol><li>计算机的元器件晶体管只有2种状态，通电（1）&amp;  断电（0），用二进制可直接根据元器件的状态来设计计算机。</li><li>而且，数学中的“布尔代数”分支，可以用True和False（可用1代表True，0代表False）进行逻辑运算，代替实数进行计算。</li><li>进制数越多（十进制等），信号越容易混淆，影响计算。对于当时每秒运算百万次以上的晶体管，信号混淆是特别让人头疼的的。</li></ol><h2 id="2、布尔代数-布尔代数在计算机中的实现"><a href="#2、布尔代数-布尔代数在计算机中的实现" class="headerlink" title="2、布尔代数&amp;布尔代数在计算机中的实现"></a>2、布尔代数&amp;布尔代数在计算机中的实现</h2><ol><li>变量：没有常数，仅True和False这两个变量。</li><li>三个基本操作：NOT&#x2F;AND&#x2F;OR。</li></ol><h3 id="1）NOT操作："><a href="#1）NOT操作：" class="headerlink" title="1）NOT操作："></a>1）NOT操作：</h3><ol><li>命名：称为NOT门&#x2F;非门。</li><li>作用：将输入布尔值反转。输入的True或False，输出为False或True。</li><li>晶体管的实现方式：<ul><li>半导体通电True，则线路<strong>接地</strong>，无输出电流，为False。</li><li>半导体不通电False，则输出电流从右边输出，为True。</li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/1.png?raw=true" alt="1.png"></p><h3 id="2）AND操作"><a href="#2）AND操作" class="headerlink" title="2）AND操作"></a>2）AND操作</h3><ol><li><p>命名：AND门&#x2F;与门</p></li><li><p>作用：由2个输入控制输出，仅当2个输入input1和input2都为True时，输出才为True，2个输入的其余情况，输出均为False。</p><p>*可以理解为，输入有假，输出为假，反之（输入为真-真，输出才为真）。</p></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/2.png?raw=true" alt="2.png"></p><p>3.用晶体管实现的方式：</p><p>串联两个晶体管，仅当2个晶体管都通电，输出才有电流（True）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/3.png?raw=true" alt="3.png"></p><h3 id="3）OR操作"><a href="#3）OR操作" class="headerlink" title="3）OR操作"></a>3）OR操作</h3><p>1.命名：OR门&#x2F;或门</p><p>2.作用：由2个输入控制输出，只要其中一个输入为True，则输出True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/4.png?raw=true" alt="4.png"></p><p>3.用晶体管实现的方式：</p><p>使用2个晶体管，将它们并联到电路中，只要有一个晶体管通电，则输出有电流（True）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/5.png?raw=true" alt="5.png"></p><h2 id="3、特殊的逻辑运算——异或"><a href="#3、特殊的逻辑运算——异或" class="headerlink" title="3、特殊的逻辑运算——异或"></a>3、特殊的逻辑运算——异或</h2><p>1.命名：XOR门&#x2F;异或门</p><p>2.作用：2个输入控制一个输出。当2个输入相同（均为True时，输出False），输出false。反之，输入不同（一个True时，一个False），输出为True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/6.png?raw=true" alt="6.png"></p><p>3.图示：</p><p>先用一个OR门，将其与AND门并联，AND门与NOT门串联，最后让NOT与AND门并联，获得输出。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/7.png?raw=true" alt="7.png"></p><h2 id="4、逻辑门的符号表示"><a href="#4、逻辑门的符号表示" class="headerlink" title="4、逻辑门的符号表示"></a>4、逻辑门的符号表示</h2><p>1.作用：将逻辑门简化，将逻辑门用于构建更大的组件，而不至于太复杂。</p><p>2.图示：</p><ul><li><p>非门：用三角形+圆圈表示</p></li><li><p>与门：用D型图案表示</p></li><li><p>或门：用类似D向右弯曲的图案表示</p></li><li><p>异或门：用或门+一个圆弧表示</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/8.png?raw=true" alt="8.png"></p><h2 id="5、抽象的好处"><a href="#5、抽象的好处" class="headerlink" title="5、抽象的好处"></a>5、抽象的好处</h2><p>使得分工明确，不同职业的工程师各司其职,而不用担心其他细节。</p><h1 id="第四课：二进制"><a href="#第四课：二进制" class="headerlink" title="第四课：二进制"></a>第四课：二进制</h1><h2 id="1、二进制的原理，存储单元MB-GB-TB解释"><a href="#1、二进制的原理，存储单元MB-GB-TB解释" class="headerlink" title="1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释"></a>1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释</h2><p>0.计算机中的二进制表示：</p><p>单个数字1或0，1位二进制数字命名为位(bit),也称1比特。</p><p>1.字节（byte）的概念：</p><p>1byte&#x3D;8bit，即1byte代表8位二进制数。最早期的电脑为八位的，即以八位二进制为单位处理数据。为了方便，将八位二进制命名为1字节（1byte）.</p><p>2.十进制与二进制的区别：</p><p>十进制有10个数字，0-9，逢10进1（不存在10这个数字），则每向左进一位，数字大10倍。<br>二进制有2个数字，0-1，逢2进1,（不存在2这个数字），则每向左进一位，数字大2倍。</p><p>如何进行二进制与十进制联系起来？</p><p>将十进制与二进制的位数提取出来，编上单位：<br>eg：二进制的1011&#x3D;1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3&#x3D; 11（从右往左数）</p><p>eg：十进制的1045&#x3D; 1 * 10^3 + 0 * 10^2 + 4 * 10^1 + 5 *10^0</p><p>3.十进制与二进制的图示：</p><p>十进制的263</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/9.png?raw=true" alt="9.png"></p><p>二进制的10110111</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/10.png?raw=true" alt="10.png"></p><p>4.二进制的运算：</p><p>相同的位数相加，逢2进1</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/11.png?raw=true" alt="11.png"></p><p>5.byte在电脑中的单位换算：</p><p>1kb&#x3D;2^10bit &#x3D; 1024bit &#x3D;1000b</p><p>1TB&#x3D;1000GB</p><p>1GB&#x3D;十亿字节&#x3D;1000MB&#x3D;10^6KB</p><p>6.32位与64位电脑的区别</p><p>32位的最大数为43亿左右</p><p>64位的最大数为9.2*10^18</p><h2 id="2、正数、负数、正数、浮点数的表示"><a href="#2、正数、负数、正数、浮点数的表示" class="headerlink" title="2、正数、负数、正数、浮点数的表示"></a>2、正数、负数、正数、浮点数的表示</h2><p>1）计算机中表示数字的方法</p><p>1.整数：</p><p>表示方法:</p><p>第1位：表示正负 1是负，0是正（补码）<br>其余31位&#x2F;63位： 表示实数</p><p>2.浮点数（Floating Point Numbers）：</p><p>定义：小数点可在数字间浮动的数（非整数）</p><p>表示方法：IEEE 754标准下</p><p>用类似科学计数法的方式，存储十进制数值</p><p>浮点数&#x3D;有效位数<em>指数<br>32位数字中：第1位表示正负，第2-9位存指数。剩下23位存有效位数<br>eg：625.9&#x3D;0.6259（有效位数）</em>10^3（指数）</p><h2 id="3、美国信息交换标准代码-ASCⅡ，用来表示字符"><a href="#3、美国信息交换标准代码-ASCⅡ，用来表示字符" class="headerlink" title="3、美国信息交换标准代码-ASCⅡ，用来表示字符"></a>3、美国信息交换标准代码-ASCⅡ，用来表示字符</h2><p>1.全称：美国信息交换标准代码</p><p>2.作用：用数字给英文字母及符号编号</p><p>3.内容：7位代码，可存放128个不同的值。</p><p>4.图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/12.png?raw=true" alt="12.png"></p><h2 id="4、UNICODE，统一所有字符编码的标准"><a href="#4、UNICODE，统一所有字符编码的标准" class="headerlink" title="4、UNICODE，统一所有字符编码的标准"></a>4、UNICODE，统一所有字符编码的标准</h2><p>1.诞生背景：1992诞生，随着计算机在亚洲兴起，需要解决ASCⅡ不够表达所有语言的问题。</p><p>为提高代码的互用性，而诞生的编码标准。</p><p>2.内容：UNICODE为17组的16位数字，有超过100万个位置，可满足所有语言的字符需求。</p><h1 id="第五课：算术逻辑单元"><a href="#第五课：算术逻辑单元" class="headerlink" title="第五课：算术逻辑单元"></a>第五课：算术逻辑单元</h1><h2 id="1、什么是算术逻辑单元"><a href="#1、什么是算术逻辑单元" class="headerlink" title="1、什么是算术逻辑单元"></a>1、什么是算术逻辑单元</h2><p>1.命名：简称ALU，Arithmetic&amp;Logic Unit</p><p>2.组成：ALU有2个单元，1个算术单元和1个逻辑单元（Arithmetic Unit和Logic Unit）</p><p>3.作用：计算机中负责运算的组件，处理数字&#x2F;逻辑运算的最基本单元。</p><h2 id="2、算术单元"><a href="#2、算术单元" class="headerlink" title="2、算术单元"></a>2、算术单元</h2><p>1）基本组件：</p><ul><li><p>由半加器、全加器组成</p></li><li><p>半加器、全加器由AND、OR、NOT、XOR门组成</p></li></ul><p>2）加法运算</p><p>1.组件：AND、OR、NOT、XOR门</p><p>2.元素：输入A，输入B，输出（均为1个bit，即0或1）</p><p>3.半加器：</p><ul><li><p>作用：用于计算个位的数字加减。</p></li><li><p>输入：A，B</p></li><li><p>输出：总和，进位</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/13.png?raw=true" alt="13.png"></p><ul><li>抽象：</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/14.png?raw=true" alt="14.png"></p><p>4.全加器：</p><p>作用：用于计算超过1位的加法，由于涉及进位，因此有3个输入（C充当进位）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/15.png?raw=true" alt="15.png"></p><p>原理图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/16.png?raw=true" alt="16.png"></p><p>3）如何用半加器与全加器做8位数的加法</p><p>说明：以8位行波加法器为例</p><ol><li>用半加器处理第1位数（个位）的加法，得到的和为结果的第1位。</li><li>将输出的进位，输入到第2位用的全加器的输入C中。</li><li>将第2位的2个数用全加器计算，得到的和为结果的第2位（sum）。</li><li>将第2位计算的进位连接到百位的全加器输入C中。</li><li>在第3-8位上，循环第3-4步的操作。</li></ol><p>*现在电脑使用的加法器叫“超前进位加法器”</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/17.png?raw=true" alt="17.png"></p><p>4）算术单元支持的其他运算</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/18.png?raw=true" alt="18.png"></p><h2 id="3、溢出的概念"><a href="#3、溢出的概念" class="headerlink" title="3、溢出的概念"></a>3、溢出的概念</h2><p>内容：在有限的空间内，无法存储位数过大的数，则称为溢出。</p><p>说明：第8位的进位如果为1，则无法存储，此时容易引发错误，所以应该尽量避免溢出。</p><h2 id="4、逻辑单元"><a href="#4、逻辑单元" class="headerlink" title="4、逻辑单元"></a>4、逻辑单元</h2><p>作用：执行逻辑操作，如NOT、AND、OR等操作，以及做简单的数值测试。</p><h2 id="5、ALU的抽象"><a href="#5、ALU的抽象" class="headerlink" title="5、ALU的抽象"></a>5、ALU的抽象</h2><p>1）作用：ALU的抽象让工程师不再考虑逻辑门层面的组成，简化工作。</p><p>2）图示：</p><p>像一个大“V”。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/19.png?raw=true" alt="19.png"></p><p>3）说明：</p><p>图示内容包括：</p><ul><li><p>输入A，B</p></li><li><p>输出</p></li><li><p>标志：溢出、零、负数</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/20.png?raw=true" alt="20.png"></p><h1 id="第六课-寄存器与内存"><a href="#第六课-寄存器与内存" class="headerlink" title="第六课 寄存器与内存"></a>第六课 寄存器与内存</h1><h2 id="0、课程导入"><a href="#0、课程导入" class="headerlink" title="0、课程导入"></a>0、课程导入</h2><p>当玩游戏、写文档时如果断电，进度会丢失，这是为什么？</p><ul><li><p>原因是这是电脑使用的是RAM（随机存取存储器），俗称内存，内存只能在通电情况下存储数据。</p></li><li><p>本节课程将讲述内存的工作原理。</p></li></ul><h2 id="1、概念梳理"><a href="#1、概念梳理" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><p>锁存器：锁存器是利用AND、OR、NOT逻辑门，实现存储1位数字的器件。</p><p>寄存器：1组并排的锁存器</p><p>矩阵：以矩阵的方式来存放锁存器的组合件，n<em>n门锁矩阵可存放n^2个锁存器，但同一时间只能写入&#x2F;读取1个数字。（早期为16</em>16矩阵）</p><p>位址：锁存器在矩阵中的行数与列数。eg.12行 8列</p><p>多路复用器：一组电线，输入2进制的行址&amp;列址，可启用矩阵中某个锁存器</p><p>内存（RAM）：随机存取存储器，由一系列矩阵以及电路组成的器件，可根据地址来写入、读取数据。类似于人类的短期记忆，记录当前在做什么事情。</p><h2 id="2、锁存器"><a href="#2、锁存器" class="headerlink" title="2、锁存器"></a>2、锁存器</h2><p>作用：存储1位数字。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/21.png?raw=true" alt="21.png"></p><h2 id="2-5、门锁："><a href="#2-5、门锁：" class="headerlink" title="2.5、门锁："></a>2.5、门锁：</h2><p>锁存器需要同时输入2个数字，不太方便。</p><p>为了使用更方便，只用1根电线控制数据输入，发展了门锁这个器件。另外，用另一根电线来控制整个结构的开关。（和复位作用不同）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/22.png?raw=true" alt="22.png"></p><h2 id="3、寄存器"><a href="#3、寄存器" class="headerlink" title="3、寄存器"></a>3、寄存器</h2><p>作用：并排使用门锁，存储多位数字</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/23.png?raw=true" alt="23.png"></p><h2 id="4、门锁矩阵"><a href="#4、门锁矩阵" class="headerlink" title="4、门锁矩阵"></a>4、门锁矩阵</h2><p>作用：</p><p>n*n的矩阵有n^2个位址，则可以存储n^2个数。但1个矩阵只可记录1位数字，n个矩阵组合在一起，才可记录n位数。如1个8位数，会按位数分成8个数，分别存储在8个矩阵的同一个位址中。</p><p>8个矩阵，则可以记录256个8位数字。</p><p>通俗理解：</p><p>16*16的门锁矩阵，可理解为1个公寓，1个公寓256个房间。</p><p>8个门锁矩阵并排放，则有了8个公寓。</p><p>规定每一个公寓同一个编号的房间，都有一样的标记（地址），共同组成8位数字。</p><p>那么8个公寓就能存 （8*256 &#x2F; 8）个数字。</p><p>原因：</p><p>16*16的门锁矩阵虽然有256个位置，但每次只能存&#x2F;取其中1个位置的数字。因此，要表示8位数字，就需要同时调用8个门锁矩阵。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/24.png?raw=true" alt="24.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/25.png?raw=true" alt="25.png"></p><p>使用方法：在多路复用器中输入位址，x行x列（2进制），即可点亮x行x列的锁存器。</p><p>举例：</p><table><thead><tr><th>行列数</th><th>矩阵1</th><th>矩阵2</th><th>矩阵3</th><th>矩阵4</th><th>矩阵5</th><th>矩阵6</th><th>矩阵7</th><th>矩阵8</th></tr></thead><tbody><tr><td>1行5列</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>2行3列</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><h2 id="5、内存"><a href="#5、内存" class="headerlink" title="5、内存"></a>5、内存</h2><p>粗略定义：将一堆独立的存储模块和电路看做1个单元，组成内存方块，n个内存方块组成内存模块。在一个电路板上所有的内存方块统称为内存(RAM)。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/26.png?raw=true" alt="26.png"></p><h1 id="第七课-中央处理器（CPU）"><a href="#第七课-中央处理器（CPU）" class="headerlink" title="第七课 中央处理器（CPU）"></a>第七课 中央处理器（CPU）</h1><h2 id="1、概念梳理-1"><a href="#1、概念梳理-1" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>CPU（Central Processing Unit）：中央处理单元，负责执行程序。通常由寄存器&#x2F;控制单元&#x2F;ALU&#x2F;时钟组成。与RAM配合，执行计算机程序。CPU和RAM之间用“地址线”、“数据线”和“允许读&#x2F;写线”进行通信。</p></li><li><p>指令：指示计算机要做什么，多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>时钟：负责管理CPU运行的节奏，以精确地间隔，触发电信号，控制单元用这个信号，推动CPU的内部操作。</p></li><li><p>时钟速度：CPU执行“取指令→解码→执行”中每一步的速度叫做“时钟速度”，单位赫兹Hz，表示频率。</p></li><li><p>超频&#x2F;降频：</p></li><li><p>超频，修改时钟速度，加快CPU的速度，超频过多会让CPU过热或产生乱码。</p></li><li><p>降频，降低时钟速度，达到省电的效果，对笔记本&#x2F;手机很重要。</p></li><li><p>微体系框架：以高层次视角看计算机，如当我们用一条线链接2个组件时，这条线只是所有必须线路的抽象。</p></li></ul><h2 id="2、CPU工作原理"><a href="#2、CPU工作原理" class="headerlink" title="2、CPU工作原理"></a>2、CPU工作原理</h2><h3 id="1）必要组件："><a href="#1）必要组件：" class="headerlink" title="1）必要组件："></a>1）必要组件：</h3><ul><li><p>指令表：给CPU支持的所有指令分配ID</p></li><li><p>控制单元：像指挥部，有序的控制指令的读取、运行与写入。</p></li><li><p>指令地址寄存器：类似于银行取号。该器件只按顺序通报地址，让RAM按顺序将指令交给指令寄存器。</p></li><li><p>指令寄存器：存储具体的指令代码。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/27.png?raw=true" alt="27.png"></p><h3 id="2）过程"><a href="#2）过程" class="headerlink" title="2）过程"></a>2）过程</h3><ul><li><p>取指令：指令地址寄存器发地址给RAM→RAM发该地址内的数据给指令寄存器→指令寄存器接受数据</p></li><li><p>解码：指令寄存器根据数据发送指令给控制单元 →控制单元解码（逻辑门确认操作码）</p></li><li><p>执行阶段：控制单元执行指令(→涉及计算时→调用所需寄存器→传输入&amp;操作码给ALU执行）→调用RAM特定地址的数据→RAM将结果传入寄存器→指令地址寄存器+1</p></li></ul><h3 id="3）图示："><a href="#3）图示：" class="headerlink" title="3）图示："></a>3）图示：</h3><p>第一个CPU</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/28.png?raw=true" alt="28.png"></p><h1 id="第八课-指令和程序"><a href="#第八课-指令和程序" class="headerlink" title="第八课 指令和程序"></a>第八课 指令和程序</h1><h2 id="1、概念梳理-2"><a href="#1、概念梳理-2" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>指令：指示计算机要做什么的代码（机器码），多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>注:指令和数据都是存在同一个内存里的。</p></li><li><p>指令集：记录指令名称、用法、操作码以及所需RAM地址位数的表格。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/29.png?raw=true" alt="29.png"></p><p>程序</p><h2 id="2、指令的执行"><a href="#2、指令的执行" class="headerlink" title="2、指令的执行"></a>2、指令的执行</h2><ul><li><p>原则：</p></li><li><p>RAM每一个地址中，都存放0或1个数据。</p></li><li><p>特定的数字组合，就表示为一个指令，否则表示一个值。</p></li><li><p>LOAD指令：</p></li><li><p>计算机会按地址的顺序，读取RAM中所记录的指令&#x2F;数据。</p></li><li><p>计算机接受到指令后，如LOAD_A，则通过数据线将数据传至寄存器A。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/30.png?raw=true" alt="30.png"></p><ul><li><p>ADD指令：</p></li><li><p>ADD B A指令告诉ALU，把寄存器B和寄存器中的数字加起来，存到寄存器A中。</p></li><li><p>JUMP指令：</p></li><li><p>遇到JUMP指令，程序会跳转至对应的RAM地址读取数据。</p></li><li><p>JUMP指令可以有条件跳转（如JUMP-negative），也可以无条件跳转。</p></li></ul><h2 id="3、计算机指令长度"><a href="#3、计算机指令长度" class="headerlink" title="3、计算机指令长度"></a>3、计算机指令长度</h2><p>由于早期计算机每个字只有8位，指令只占4位，意味着只能有16个指令，这远远不够。</p><p>现代计算机有两种方式解决指令不够用的问题：</p><p>最直接的是用更多位来表示指令，如32位或64位。</p><p>采用“可变指令长度”，令不同的指令的长度不同，尽量节约位数。</p><p>假设1个字为16位，如果某指令不需要操作内存，则可以省去寻址的位数。</p><p>该情况下，部分指令后面需要跟数据，如JUMP，称为立即值。</p><h1 id="第九课-高级CPU设计"><a href="#第九课-高级CPU设计" class="headerlink" title="第九课 高级CPU设计"></a>第九课 高级CPU设计</h1><h2 id="0、概念梳理"><a href="#0、概念梳理" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><ul><li><p>缓存：在CPU中的小块RAM，用于存储批量指令。</p></li><li><p>缓存命中：想要的数据已经在缓存里</p></li><li><p>缓存未命中：想要的数据不在缓存里</p></li><li><p>脏位：缓存里每块空间，有个特殊标记，叫脏位，用于检测缓存内的数据是否与RAM一致。</p></li><li><p>多核处理器：一个CPU芯片中，有多个独立处理单元。</p></li></ul><h2 id="1、现代CPU如何提升性能："><a href="#1、现代CPU如何提升性能：" class="headerlink" title="1、现代CPU如何提升性能："></a>1、现代CPU如何提升性能：</h2><p>早期通过加快晶体管速度，来提升CPU速度。但很快该方法到达了极限。</p><p>后来给CPU设计了专门除法电路+其他电路来做复杂操作：如游戏，视频解码</p><h2 id="2、缓存："><a href="#2、缓存：" class="headerlink" title="2、缓存："></a>2、缓存：</h2><p>为了不让CPU空等数据，在CPU内部设置了一小块内存，称为缓存，让RAM可以一次传输一批数据到CPU中。（不加缓存，CPU没位置放大量数据）</p><p>缓存也可以当临时空间，存一些中间值，适合长&#x2F;复杂的运算。</p><p>空等原因：从RAM到CPU的数据传输有延迟（要通过总线，RAM还要时间找地址、取数据、配置、输出数据）。</p><h2 id="3、缓存同步："><a href="#3、缓存同步：" class="headerlink" title="3、缓存同步："></a>3、缓存同步：</h2><p>缓存同步一般发生在CPU缓存已满，但CPU仍需往缓存内输入数据。此时，被标记为脏位的数据会优先传输回RAM,腾出位置以防被覆盖，导致计算结果有误。</p><h2 id="4、指令流水线："><a href="#4、指令流水线：" class="headerlink" title="4、指令流水线："></a>4、指令流水线：</h2><p>作用：让取址→解码→执行三个步骤同时进行。并行执行指令，提升CPU性能。</p><p>原本需要3个时钟周期执行1个指令，现在只需要1个时钟周期。</p><p>设计难点：数据具有依赖性。</p><p>数据依赖性解决方法：</p><p>动态排序、乱序运行、预测分支（高端CPU）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/31.png?raw=true" alt="31.png"></p><h2 id="5、一次性处理多条指令"><a href="#5、一次性处理多条指令" class="headerlink" title="5、一次性处理多条指令"></a>5、一次性处理多条指令</h2><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/32.png?raw=true" alt="32.png"></p><h2 id="6、同时运行多个指令流（多核CPU）"><a href="#6、同时运行多个指令流（多核CPU）" class="headerlink" title="6、同时运行多个指令流（多核CPU）"></a>6、同时运行多个指令流（多核CPU）</h2><p>多核处理器：一个CPU芯片中，有多个独立处理单元。但因为它们整合紧密，可以共享一些资源。</p><h2 id="7、超级计算机（多个CPU）"><a href="#7、超级计算机（多个CPU）" class="headerlink" title="7、超级计算机（多个CPU）"></a>7、超级计算机（多个CPU）</h2><p>在一台计算机中，用无数个CPU，做怪兽级的复杂运算，如模拟宇宙形成。</p><h1 id="第十课-早期的编程方式"><a href="#第十课-早期的编程方式" class="headerlink" title="第十课 早期的编程方式"></a>第十课 早期的编程方式</h1><h2 id="1、早期，程序如何进入计算机"><a href="#1、早期，程序如何进入计算机" class="headerlink" title="1、早期，程序如何进入计算机"></a>1、早期，程序如何进入计算机</h2><p>程序必须人为地输入计算机。早期，电脑无内存的概念，人们通过打孔纸卡等物理手段，输入数据（数字），进入计算机。</p><h2 id="2、早期计算机的编程"><a href="#2、早期计算机的编程" class="headerlink" title="2、早期计算机的编程"></a>2、早期计算机的编程</h2><ul><li><p>打孔纸卡&#x2F;纸带：在纸卡上打孔，用读卡器读取连通电路，进行编程。原因，穿孔纸卡便宜、可靠也易懂。62500张纸卡&#x3D;5MB数据</p></li><li><p>插线板：通过插拔线路的方式，改变器件之间的连接方式，进行编程。</p></li><li><p>面板拨开关（1980s前）：通过拨动面板上的开关，进行编程。输入二进制操作码，按存储按钮，推进至下一个内存位，直至操作完内存，按运行键执行程序。（内存式电脑）</p></li></ul><h2 id="3、现代计算机基础结构——冯诺依曼计算机"><a href="#3、现代计算机基础结构——冯诺依曼计算机" class="headerlink" title="3、现代计算机基础结构——冯诺依曼计算机"></a>3、现代计算机基础结构——冯诺依曼计算机</h2><p>冯诺依曼计算机的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存</p><h1 id="第十一课-编程语言发展史"><a href="#第十一课-编程语言发展史" class="headerlink" title="第十一课 编程语言发展史"></a>第十一课 编程语言发展史</h1><h2 id="0、概念梳理-1"><a href="#0、概念梳理-1" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><p>伪代码：用自然语言（中文、英语等）对程序的高层次描述，称为“伪代码”</p><p>汇编器：用于将汇编语言装换成机器语言。一条汇编语句对应一条机器指令。</p><p>助记符（汇编器）：</p><p>软件</p><h2 id="1、早期二进制写代码"><a href="#1、早期二进制写代码" class="headerlink" title="1、早期二进制写代码"></a>1、早期二进制写代码</h2><p>先前都是硬件层面的编程，硬件编程非常麻烦，所以程序员想要一种更通用的编程方法，就是软件。</p><p>早期，人们先在纸上写伪代码，用”操作码表”把伪代码转成二进制机器码，翻译完成后，程序可以喂入计算机并运行。</p><h2 id="2、汇编器-助记符"><a href="#2、汇编器-助记符" class="headerlink" title="2、汇编器&amp;助记符"></a>2、汇编器&amp;助记符</h2><p>背景：1940~1950s，程序员开发出一种新语言， 更可读 更高层次。每个操作码分配一个简单名字，叫”助记符”。但计算机不能读懂“助记符”，因此人们写了二进制程序“汇编器来帮忙”</p><p>作用：汇编器读取用”汇编语言”写的程序，然后转成”机器码”。</p><h2 id="3、最早高级编程语言“A-0”"><a href="#3、最早高级编程语言“A-0”" class="headerlink" title="3、最早高级编程语言“A-0”"></a>3、最早高级编程语言“A-0”</h2><p>汇编只是修饰了一下机器码，一般来说，一条汇编指令对应一条机器指令，所以汇编码和底层硬件的连接很紧密，汇编器仍然强迫程序员思考底层逻辑。</p><p>1950s，为释放超算潜力，葛丽丝·霍普博士，设计了一个高级编程语言，叫 “Arithmetic Language Version 0”，一行高级编程语言 可以转成几十条二进制指令。但由于当时人们认为，计算机只能做计算，而不能做程序，A-0未被广泛使用。</p><p>过程：高级编程语言→编译器→汇编码&#x2F;机器码</p><h2 id="4、开始广泛应用的高级编程语言FORTRAN"><a href="#4、开始广泛应用的高级编程语言FORTRAN" class="headerlink" title="4、开始广泛应用的高级编程语言FORTRAN"></a>4、开始广泛应用的高级编程语言FORTRAN</h2><p>1957年由IBM1957年发布，平均来说，FORTRAN 写的程序，比等同的手写汇编代码短 20 倍， FORTRAN 编译器会把代码转成机器码。</p><h2 id="5、通用编程语言——COBOL"><a href="#5、通用编程语言——COBOL" class="headerlink" title="5、通用编程语言——COBOL"></a>5、通用编程语言——COBOL</h2><p>1959年，研发可以在不同机器上通用编程语言。</p><p>最后研发出一门高级语言：”普通面向商业语言”，简称 COBOL</p><p>每个计算架构需要一个 COBOL 编译器，不管是什么电脑都可以运行相同的代码，得到相同结果。</p><h2 id="6、现代编程语言-1960s-2000"><a href="#6、现代编程语言-1960s-2000" class="headerlink" title="6、现代编程语言:1960s-2000"></a>6、现代编程语言:1960s-2000</h2><p>1960s起，编程语言设计进入黄金时代。</p><p>1960 ：LGOL, LISP 和 BASIC 等语言</p><p>70年代有：Pascal，C 和 Smalltalk</p><p>80年代有：C++，Objective-C 和 Perl</p><p>90年代有：Python，Ruby 和 Java</p><h2 id="7、安全漏洞-补丁由来："><a href="#7、安全漏洞-补丁由来：" class="headerlink" title="*7、安全漏洞&amp;补丁由来："></a>*7、安全漏洞&amp;补丁由来：</h2><p>在1940年代，是用打孔纸带进行的，但程序出现了问题（也就是漏洞），为了节约时间，只能贴上胶带也就是打补丁来填补空隙，漏洞和补丁因此得名。</p><h1 id="第十二课-编程基础-语句和函数"><a href="#第十二课-编程基础-语句和函数" class="headerlink" title="第十二课 编程基础-语句和函数"></a>第十二课 编程基础-语句和函数</h1><h2 id="1、变量、赋值语句"><a href="#1、变量、赋值语句" class="headerlink" title="1、变量、赋值语句"></a>1、变量、赋值语句</h2><p>如a&#x3D;5 ，其中a为可赋值的量，叫做变量。把数字 5 放a里面.这叫”赋值语句”，即把一个值赋给一个变量</p><h2 id="2、if判断"><a href="#2、if判断" class="headerlink" title="2、if判断"></a>2、if判断</h2><p>可以想成是 “如果 X 为真，那么执行 Y，反之，则不执行Y”，if语句就像岔路口，走哪条路取决于条件的真假。</p><h2 id="3、while循环"><a href="#3、while循环" class="headerlink" title="3、while循环"></a>3、while循环</h2><p>当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环。</p><h2 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h2><p>for循环不判断条件，判断次数，会循环特定次数，不判断条件。for 的特点是，每次结束， i 会 +1</p><h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><p>当一个代码很常用的时候，我们把它包装成一个函数（也叫方法或者子程序），其他地方想用这个代码，只需要写函数名即可。</p><h1 id="第13课-算法入门"><a href="#第13课-算法入门" class="headerlink" title="第13课 算法入门"></a>第13课 算法入门</h1><p>0、基本慨念</p><p> 算法：解决问题的基本步骤</p><h2 id="1、选择排序"><a href="#1、选择排序" class="headerlink" title="1、选择排序"></a>1、选择排序</h2><p>数组：一组数据</p><p>选择排序的复杂度为O(n²)</p><h2 id="2、大O表示法"><a href="#2、大O表示法" class="headerlink" title="2、大O表示法"></a>2、大O表示法</h2><p>大O表示法（算法）的复杂度：算法的输入大小和运行步骤之间的关系，来表示运行速度的量级</p><h2 id="3、归并排序"><a href="#3、归并排序" class="headerlink" title="3、归并排序"></a>3、归并排序</h2><p>归并排序的算法复杂度为O（n*log n），n是需要比较+合并的次数，和数组大小成正比，log n是合并步骤所需要的的次数，归并排序比选择排序更有效率</p><h2 id="4、Dijkstra算法"><a href="#4、Dijkstra算法" class="headerlink" title="4、Dijkstra算法"></a>4、Dijkstra算法</h2><p>一开始复杂度为O(n²)，后来复杂度为O（nlog n +I），在下图中，n表示节点数，I表示有多少条线。</p><p><img src="https://uploader.shimo.im/f/ImlyyiTnRAcamLST.PNG?sm_xform=image/crop,x_1,y_65,w_599,h_340/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第十四集-数据结构"><a href="#第十四集-数据结构" class="headerlink" title="第十四集 数据结构"></a>第十四集 数据结构</h1><h2 id="1、数组-下标"><a href="#1、数组-下标" class="headerlink" title="1、数组 下标"></a>1、数组 下标</h2><p>数组（Array），也叫列表（list）或向量（Vector），是一种数据结构。为了拿出数组中某个值，我们要指定一个下标（index），大多数编程语言里，数组下标都从 0 开始，用方括号 [ ] 代表访问数组。注意：很容易混淆 “数组中第 5 个数” 和 “数组下标为 5 的数”，数组下标为5的数是数组里面的第6个数</p><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><p>即字母 数字 标点等组成的数组，字符串在内存里以0结尾。</p><h2 id="3、矩阵"><a href="#3、矩阵" class="headerlink" title="3、矩阵"></a>3、矩阵</h2><p>可以把矩阵看成数组的数组</p><h2 id="4、结构体"><a href="#4、结构体" class="headerlink" title="4、结构体"></a>4、结构体</h2><p> 把几个有关系的变量存在一起叫做结构体</p><h2 id="5、指针"><a href="#5、指针" class="headerlink" title="5、指针"></a>5、指针</h2><p>指针是一种特殊变量，指向一个内存地址，因此得名。</p><h2 id="6、节点"><a href="#6、节点" class="headerlink" title="6、节点"></a>6、节点</h2><p>以指针为变量的结构体叫节点</p><h2 id="7、链表"><a href="#7、链表" class="headerlink" title="7、链表"></a>7、链表</h2><p>用节点可以做链表，链表是一种灵活数据结构，能存很多个 节点 (node)，灵活性是通过每个节点 指向 下一个节点实现的。链表可以是循环的也可以是非循环的，非循环的最后一个指针是0</p><h2 id="8、队列"><a href="#8、队列" class="headerlink" title="8、队列"></a>8、队列</h2><p>“队列” 就像邮局排队，谁先来就排前面，这叫 先进先出（FIFO——first in first out），可以把”栈”想成一堆松饼,做好一个新松饼，就堆在之前上面,吃的时候，是从最上面开始</p><h2 id="9、栈"><a href="#9、栈" class="headerlink" title="9、栈"></a>9、栈</h2><p>栈是后进先出(LIFO)</p><h2 id="10、树"><a href="#10、树" class="headerlink" title="10、树"></a>10、树</h2><p><img src="https://uploader.shimo.im/f/7atIzqy3EJk8PP9s.PNG!thumbnail" alt="img"></p><h2 id="11、图"><a href="#11、图" class="headerlink" title="11、图"></a>11、图</h2><p>如果数据随意连接，有循环，我们称之为图，如下图</p><p><img src="https://uploader.shimo.im/f/aTSwzmtN8HxXC9Pf.PNG?sm_xform=image/crop,x_0,y_72,w_605,h_333/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第15课-阿兰图灵"><a href="#第15课-阿兰图灵" class="headerlink" title="第15课 阿兰图灵"></a>第15课 阿兰图灵</h1><h2 id="0-可判定性问题"><a href="#0-可判定性问题" class="headerlink" title="0.可判定性问题"></a>0.可判定性问题</h2><p>是否存在一种算法，输入正式逻辑语句 输出准确的”是”或”否”答案？</p><ol><li>阿隆佐邱奇，Lambda算子</li></ol><p>美国数学家 阿隆佐·丘奇，开发了一个叫”Lambda 算子”的数学表达系统，证明其不存在。</p><ol><li>图灵机</li></ol><p>只要有足够的规则，状态和纸带，图灵机可以解决一切<strong>计算</strong>问题。和图灵机一样完备，叫做图灵完备。</p><ol><li>停机问题</li></ol><p>证明图灵机不能解决所有问题。</p><ol><li>图灵测试</li></ol><p>向人和机器同时发信息，收到的回答无法判断哪个是人，哪个是计算机，则计算机达到了智能程度。</p><h1 id="第16课-软件工程"><a href="#第16课-软件工程" class="headerlink" title="第16课 软件工程"></a>第16课 软件工程</h1><h2 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h2><p>当任务庞大，函数太多，我们需要把函数打包成层级，把相关代码都放一起，打包成<strong>对象</strong>。对象可以包括其他对象，函数和变量。把函数打包成对象的思想叫做“面向对象编程”，面向对象的核心是隐藏复杂度，选择性的公布功能。</p><h2 id="3、API"><a href="#3、API" class="headerlink" title="3、API"></a>3、API</h2><p>当团队接收到子团队编写的对象时，需要文档和程序编程接口（API）来帮助合作。API控制哪些函数和数据让外部访问，哪些仅供内部。</p><h2 id="4、集成开发环境（IDE）"><a href="#4、集成开发环境（IDE）" class="headerlink" title="4、集成开发环境（IDE）"></a>4、集成开发环境（IDE）</h2><p>程序员用来专门写代码的工具</p><h2 id="6、调试（debug）"><a href="#6、调试（debug）" class="headerlink" title="6、调试（debug）"></a>6、调试（debug）</h2><p>IDE帮你检查错误，并提供信息，帮你解决问题，这个过程叫调试</p><h2 id="7、文档与注释"><a href="#7、文档与注释" class="headerlink" title="7、文档与注释"></a>7、文档与注释</h2><p>文档一般放在一个叫做README的文件里，文档也可以直接写成“注释”，放在源代码里，注释是标记过的一段文字，编译代码时，注释会被忽略。注释的唯一作用是帮助开发者理解代码。</p><h2 id="8、版本控制"><a href="#8、版本控制" class="headerlink" title="8、版本控制"></a>8、版本控制</h2><p>版本控制，又称源代码管理。大型软件公司会把会把代码放到一个中心服务器上，叫”代码仓库”，程序员可以把想修改的代码借出，修改后再提交回代码仓库。版本控制可以跟踪所有变化，如果发现bug，全部或部分代码，可以”回滚”到之前的稳定版。</p><h2 id="9、质量控制"><a href="#9、质量控制" class="headerlink" title="9、质量控制"></a>9、质量控制</h2><p>测试可以统称“质量保证测试”（QA），作用是找bug</p><h2 id="10、beta-alpha"><a href="#10、beta-alpha" class="headerlink" title="10、beta alpha"></a>10、beta alpha</h2><p>beta版软件，即是软件接近完成，但没有完全被测试过，公司有时会向公众发布beta版，以帮助发现问题。alpha是beta前的版本，一般很粗糙，只在内部测试</p><h1 id="第17课-集成电路与摩尔定律（硬件的发展）"><a href="#第17课-集成电路与摩尔定律（硬件的发展）" class="headerlink" title="第17课 集成电路与摩尔定律（硬件的发展）"></a>第17课 集成电路与摩尔定律（硬件的发展）</h1><ol><li>分立元件与数字暴政</li></ol><p>一开始，计算机都有独立组件构成，叫**”分立元件”** ， 然后不同组件再用线连在一起，这会导致计算机的构成很复杂，这个问题叫做<strong>数字暴政</strong>。</p><ol><li>集成电路与仙童半导体</li></ol><p>封装复杂性：与其把多个独立部件用电线连起来，拼装出计算机，不如把多个组件包在一起，变成一个新的独立组件。这种新的独立组件就叫集成电路（IC），仙童半导体（用硅做成）让集成电路变成了现实。为了不用焊接或用一大堆线，发明了印刷电路板（PCB），他通过蚀刻金属线的方式把零件连接到一起</p><ol><li>光刻0421</li></ol><p>即用光把复杂图案印到材料上。我们把一片薄片状的硅叫做<strong>晶圆</strong>，通过一系列生产步骤，将晶圆表面薄膜的特定部分除去的工艺叫做<strong>光刻</strong>。</p><p><img src="https://uploader.shimo.im/f/k5wCIRpRewG9dG8X.PNG!thumbnail" alt="img"></p><p>光刻组件示意图</p><p><img src="https://uploader.shimo.im/f/JGAgwsnJMLBk2L9Z.PNG!thumbnail" alt="img"></p><p>光刻成品示意图</p><ol><li>摩尔定律</li></ol><p>每两年左右，得益于材料和制造技术的发展 ，同样大小的空间，能塞进两倍数量的晶体管。</p><ol><li>进一步小型化会碰到的问题</li></ol><p>1、由于光的波长限制，精度已到极限。</p><p>2、量子隧穿效应：当晶体管非常小，电极之间可能只距离几个原子，电子会跳过间隙，会产生漏电问题</p><h1 id="第18课-操作系统"><a href="#第18课-操作系统" class="headerlink" title="第18课 操作系统"></a>第18课 操作系统</h1><ol><li>操作系统(OS)</li></ol><p>操作系统也是一种程序，不过它有操作硬件的特殊权限，可以运行和管理其他程序。</p><ol><li>批处理</li></ol><p>一个程序运行后会自动运行下一个程序。</p><ol><li>外部设备</li></ol><p>和计算机连着的其他设备，如打印机。</p><ol><li>设备驱动程序</li></ol><p>为了使所写程序和不同类型的电脑兼容，我们需要操作系统充当软件和硬件之间的媒介，更具体地说，操作系统提供程序编程接口(API)来抽象硬件,叫“设备驱动程序”。程序员可以用标准化机制，和输入输出硬件（I&#x2F;O）交互，</p><ol><li>多任务处理</li></ol><p>操作系统能使多个程序在单个CPU上同时进行的能力，叫做“多任务处理”</p><ol><li>虚拟内存</li></ol><p>多程序处理带来了一个程序所占用内存可能不连续的问题，导致程序员难以追踪一个程序，为了解决这个问题操作系统会把内存地址虚拟化，这叫“虚拟内存”。</p><ol><li>动态内存分配</li></ol><p>虚拟内存的机制使程序的内存大小可以灵活增减，叫做“动态内存分配”，对程序来说，内存看上去是连续的。</p><ol><li>内存保护</li></ol><p>给每个程序分配单独的内存，那当这个程序出现混乱时，它不会影响到其他程序的内存，同时也能有效地防止恶意程序篡改其他程序，这叫做内存保护。</p><ol><li>多用户分时操作系统（Multics）</li></ol><p>用来处理多用户同时使用一台计算机的情况，即每个用户只能用一小部分处理器，内存等，</p><ol><li>Unix</li></ol><p>把操作系统分成两个部分，一个是操作系统的核心部分，如内存管理，多任务和输入&#x2F;输出处理，这叫做“内核”，第二部分是一堆有用的工具，比如程序和运行库。</p><h1 id="第19课-内存和储存介质（存储技术的发展）"><a href="#第19课-内存和储存介质（存储技术的发展）" class="headerlink" title="第19课 内存和储存介质（存储技术的发展）"></a>第19课 内存和储存介质（存储技术的发展）</h1><ol><li>纸卡 纸带</li></ol><p>问题：读取慢 难修改 难存临时值</p><ol><li>延迟线存储器</li></ol><p>利用线的延迟在线里存储数据，又叫顺序存储器或者循环存储器。</p><p>存在问题：1 不能随意调出数据</p><p>​                 2 难以增加内存密度</p><ol><li>磁芯</li></ol><p>利用电磁感应原理</p><p>问题 成本高</p><ol><li>磁带</li></ol><p>问题 访问速度慢</p><ol><li>磁鼓</li></ol><p>与磁带相似</p><ol><li>硬盘</li></ol><p>与磁带相似</p><ol><li>内存层次结构</li></ol><p>在计算机中，高速昂贵和低速便宜的内存混合使用以取得一个平衡</p><ol><li>软盘</li></ol><p>除了磁盘是软的，其他都和硬盘一样，好处是便携</p><ol><li>光盘</li></ol><p>原理：光盘表面有很多小坑，造成光的不同反射，光学传感器会捕获到，并解码为 1 和 0</p><ol><li>固定硬盘（SSD）</li></ol><p>里面是集成电路</p><h1 id="第-20-课-文件系统"><a href="#第-20-课-文件系统" class="headerlink" title="第 20 课 文件系统"></a>第 20 课 文件系统</h1><h2 id="0-为什么要采用文件格式："><a href="#0-为什么要采用文件格式：" class="headerlink" title="0.为什么要采用文件格式："></a>0.为什么要采用文件格式：</h2><p>可以随便存文件数据，但按格式存会更方便</p><ol><li>TXT 文本文件</li></ol><p>用ASCII解码</p><ol><li>WAV 音频文件</li></ol><p>记录的是振幅</p><ol><li>BMP 图片文件：</li></ol><p>记录每个像素的红绿蓝 RGB 值</p><ol><li>目录文件：</li></ol><p>用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等</p><ol><li>平面文件系统 - Flat File System</li></ol><p>文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用</p><ol><li><p>解决文件紧密的排序造成的问题</p></li><li><p>把空间划分成一块块</p></li><li><p>文件拆分存在多个块里</p></li><li><p>碎片整理</p></li></ol><p>文件的增删改查会不可避免的造成文件散落在各个块里，如果是磁带这样的存储介质就会造成          问题，所以需要碎片整理——计算机把文件内容调换位置</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ol><li>分层文件系统 - Hierarchical File System：</li></ol><p>有不同文件夹，文件夹可以层层嵌套</p><h1 id="第21课-压缩"><a href="#第21课-压缩" class="headerlink" title="第21课 压缩"></a>第21课 压缩</h1><h2 id="0-压缩的好处"><a href="#0-压缩的好处" class="headerlink" title="0.压缩的好处"></a>0.压缩的好处</h2><p>能存更多文件，传输也更快</p><ol><li>游程编码 Run-Length Encoding</li></ol><p>适合经常出现相同值的文件，以吃豆人游戏为例：</p><p><img src="https://uploader.shimo.im/f/f8HTIVw8tvdIQPUI.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/C1HLIgWl3n3n7BQJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/A143LH7jFJEldvsg.PNG!thumbnail" alt="img"></p><ol><li>无损压缩 Lossless compression</li></ol><p>没有损失任何数据的压缩。</p><ol><li>霍夫曼树 Huffman Tree和字典编码 Dictionary coders</li></ol><p>一种高效的编码模式，以压缩图片为例</p><p><img src="https://uploader.shimo.im/f/aN7KFqbuHQoEQftu.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/SU1TRtYsTihjVmhx.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/B5CKTbb77ICVyY5T.PNG?sm_xform=image/crop,x_0,y_6,w_616,h_339/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/mBxWwpvw493swdbY.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/4C4ZzPs0GQUHOZgo.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/ThiTl2pFphNnofw1.PNG!thumbnail" alt="img"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><ol><li>感知编码 Perceptual coding和有损压缩 jpeg 格式</li></ol><p>删掉人类无法感知的数据的有损压缩方法，叫做“感知编码”，如音频文件，人类听不到超声波，所以可以舍去，MP3就是音频的一种压缩形式。</p><p>有损压缩的一个例子就是jpeg模式，如图：<img src="https://uploader.shimo.im/f/AyTzvKHDbR8xxbpk.png?sm_xform=image/crop,x_0,y_181,w_1920,h_1069/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/pkOTkVcNjH0MRgpJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/NLikalps4ttAEWhr.PNG!thumbnail" alt="img"></p><ol><li>时间冗余 Temporal redundancy</li></ol><p>一个视频由很多图片构成，其中很多图片的背景一样，这就构成了时间冗余，很多视频编码格式，只存变化的部分。进阶的视频压缩模式会找到帧与帧的相似性，然后打补丁，MPEG-4 是视频压缩的常见标准。</p><h1 id="第-22-课-命令行界面"><a href="#第-22-课-命令行界面" class="headerlink" title="第 22 课 命令行界面"></a>第 22 课 命令行界面</h1><ol><li>人机交互 （Human-Computer Interaction）发展史</li></ol><p>计算机早期同时输入程序和数据（用纸卡&#x2F;纸带）</p><p>运行开始直到结束，中间没有人类进行操作，</p><p>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上 (02:34)</p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行</p><p>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机 (02:44~05:38)</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配 (07:24)</p><ol><li>人机交互工具的变化</li></ol><p>1 早期输出数据是打印到纸上，而输入是用纸卡&#x2F;纸带一次性把程序和数据都给进去</p><p>2 QWERTY 打字机的发展</p><p>3 电传打字机 Teletype machine</p><p>   作用：用于发电报，使两人可以远距离沟通</p><ol><li>命令行界面 Command line interface</li></ol><p>输入命令，计算机会给予回应</p><h1 id="第-23课-屏幕与-2D-图形显示"><a href="#第-23课-屏幕与-2D-图形显示" class="headerlink" title="第 23课 屏幕与 2D 图形显示"></a>第 23课 屏幕与 2D 图形显示</h1><ol><li><p>PDP-1 计算机、键盘和显示器分开，屏幕显示临时值</p></li><li><p>阴极射线管 Cathode Ray Tube (CRT)</p></li></ol><p> CRT 有两种绘图方式：</p><p>​       矢量扫描 Vector Scanning</p><p><img src="https://uploader.shimo.im/f/3mKGVA1g7c1eAaja.PNG!thumbnail" alt="img"></p><p>​       光栅扫描 Raster Scanning</p><p><img src="https://uploader.shimo.im/f/dmmLkIlqiFvUxzji.PNG!thumbnail" alt="img"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><ol><li>02:14 液晶显示器 Liquid Crystal Displays (LCD)，像素 (Pixel)</li></ol><p>随着显示技术的发展，出现了LCD，LCD 也用光栅扫描。在屏幕上显示的清晰的点，叫”像素”</p><ol><li>03:32 字符生成器 Character generator，</li></ol><p>相比于像素，为了减少内存，人们更喜欢使用字符，计算机需要额外硬件，来从内存读取字符，转换成光栅图形 \N 这样才能显示到屏幕上个硬件叫 “字符生成器”，基本算是第一代显卡。它内部有一小块只读存储器，简称 ROM，存着每个字符的图形，叫”点阵图案”，</p><ol><li>屏幕缓冲区 Screen buffer</li></ol><p>为了显示，”字符生成器” 会访问内存中一块特殊区域 这块区域专为图形保留，叫 屏幕缓冲区，程序想显示文字时，修改这块区域里的值就行。</p><ol><li>05:09 矢量命令画图</li></ol><p>概念非常简单：所有东西都由线组成,矢量指令可以画出线，把许多矢量指令存在硬盘上，就能画出很多由线组成的复杂图形。</p><ol><li>06:34 Sketchpad, 光笔 (Light pen)，位图显示和画矩形</li></ol><p><strong>Sketchpad</strong> ，一个交互式图形界面，用途是计算机辅助设计 (CAD)。</p><p><strong>光笔</strong>，就是一个有线连着电脑的触控笔，有了它们，用户可以画出很完美的线条并进行缩放等操作。</p><p><strong>位图显示</strong>，内存中的位对应着屏幕上显示的像素。</p><p>想画更复杂的图形，如<strong>画矩形</strong>，我们需要四个值，起点的x y坐标，高度和宽度。</p><h1 id="第-24-课-冷战和消费主义"><a href="#第-24-课-冷战和消费主义" class="headerlink" title="第 24 课 冷战和消费主义"></a>第 24 课 冷战和消费主义</h1><p>本课概括：政府和消费者推动了计算机的发展</p><p>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展</p><p>冷战导致美国往计算机领域投入大量资源 (00:00~01:43)</p><p>范内瓦·布什 预见了计算机的潜力，提出假想机器 Memex</p><p>帮助建立 国家科学基金会，给科学研究提供资金 (01:43~03:43)</p><p>1950 年代消费者开始买晶体管设备，收音机大卖</p><p>日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子 (03:43~04:29）</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月</p><p>NASA 预算大大增加，用集成电路来制作登月计算机 (04:29~06:27)</p><p>集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次</p><p>美国造超级计算机进一步推进集成电路 (04:29~07:11)</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败</p><p>很多公司倒闭，英特尔转型处理器 (07:11~08:23)</p><h1 id="第-25-课-个人计算机革命"><a href="#第-25-课-个人计算机革命" class="headerlink" title="第 25 课 个人计算机革命"></a>第 25 课 个人计算机革命</h1><p>本集概括：继续讲计算机发展史</p><p>00:18 1970年代初成本下降，个人计算机变得可行</p><p>​           RAM：random-access memory 随机访问存储器</p><p>​           ROM：read-only memory 只读存储器</p><p>01:51 Altair 8800 第一台取得商业成功的个人计算机</p><p>02:32 比尔·盖茨 和 保罗·艾伦写 BASIC 解释器，解释器和编译器类似，区别是解释器运行时转换，而编译器提前转换</p><p>03:45 乔布斯提议卖组装好的计算机，Apple-I 诞生</p><p>04:40 1977年出现3款开箱即用计算机：</p><p>“Apple-II”，”TRS-80 Model I”，”Commodore PET 2001”</p><p>06:26 IBM 意识到个人计算机市场</p><p>IBM PC 发布，采用<strong>开放架构</strong>，兼容的机器都叫 IBM Compatible (IBM 兼容)</p><p>生态系统产生雪球效应：</p><p>因为用户多，软硬件开发人员更愿意花精力在这个平台</p><p>因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机</p><p>08:44 苹果选<strong>封闭架构</strong>，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额</p><h1 id="第-26-集：图形用户界面-GUI"><a href="#第-26-集：图形用户界面-GUI" class="headerlink" title="第 26 集：图形用户界面 (GUI)"></a>第 26 集：图形用户界面 (GUI)</h1><p>——GUI是“事件驱动编程”，代码可以在任意时间执行以响应事件，而不像传统代码一样自上而下。</p><p>01:10 图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart）——设想计算机成为未来知识性员工应对问题的工具，并发明了鼠标。</p><p>03:20 1970年成立 帕洛阿尔托研究中心（Palo Alto Research Center）</p><p>03:29 1973年完成 Xerox Alto(施乐奥托) 计算机——创立了桌面，窗口等计算机概念</p><p>06:38 1981年的 Xerox Star system(<strong>施乐之星系统</strong>)</p><p>​         创建了文档概念</p><p>07:45 所见即所得 WYSIWYG——施乐打印出来的东西和计算机上一样，并发明了剪切 复制 黏贴等计算机概念</p><p>08:18 史蒂夫·乔布斯去施乐参观</p><p>09:15 1983年推出 Apple Lisa</p><p>09:31 1984年推出 Macintosh 成功</p><p>10:12 1985年推出 Windows 1.0，之后出到 3.1</p><p>10:43 1995年推出 Windows 95 提供新的图形界面，并有Mac没有的新功能，如多任务和受保护内存</p><p>11:08 1995年微软做失败的 Microsoft Bob——类似于房子的设计</p><h1 id="第-27-集：3D-图形"><a href="#第-27-集：3D-图形" class="headerlink" title="第 27 集：3D 图形"></a>第 27 集：3D 图形</h1><h2 id="1-线框渲染-Wireframe-Rendering"><a href="#1-线框渲染-Wireframe-Rendering" class="headerlink" title="1.线框渲染 Wireframe Rendering"></a>1.线框渲染 Wireframe Rendering</h2><p>有图形算法 负责把3D坐标”拍平”显示到2D屏幕上，这叫3D投影(包括正交投影和透视投影)，所有的点都从3D转成2D后，就可以用画2D线段的函数来连接这些点，这叫线框渲染，</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="2-网格-Mesh"><a href="#2-网格-Mesh" class="headerlink" title="2.网格 Mesh"></a>2.网格 Mesh</h2><p>如果我们需要画比立方体复杂的图形，三角形比线段更好，在3D图形学中我们叫三角形”多边形”(Polygons)，一堆多边形的集合叫 网格，网格越密，表面越光滑，细节越多，</p><h2 id="3-三角形更常用因为能定义唯一的平面"><a href="#3-三角形更常用因为能定义唯一的平面" class="headerlink" title="3.三角形更常用因为能定义唯一的平面"></a>3.三角形更常用因为能定义唯一的平面</h2><h2 id="4-扫描线渲染-Scanline-Rendering——填充图形的经典算法"><a href="#4-扫描线渲染-Scanline-Rendering——填充图形的经典算法" class="headerlink" title="4. 扫描线渲染 Scanline Rendering——填充图形的经典算法"></a>4. 扫描线渲染 Scanline Rendering——填充图形的经典算法</h2><p>​          填充的速度叫做<strong>填充速率</strong></p><p><img src="https://uploader.shimo.im/f/mr2JAWcJ3gFXXRwH.PNG!thumbnail" alt="img"></p><p>​          <strong>抗锯齿</strong>——边缘羽化，如果像素在多边形内部，就直接涂颜色，如果多边形划过像素，颜色就浅一些</p><p><img src="https://uploader.shimo.im/f/jkKX3F6kzl8i7qdw.PNG!thumbnail" alt="img"></p><h2 id="5-遮挡-Occlusion"><a href="#5-遮挡-Occlusion" class="headerlink" title="5.遮挡 Occlusion"></a>5.遮挡 Occlusion</h2><p>用排序算法，从远到近排列，然后从远到近渲染，这叫<strong>画家算法</strong></p><h2 id="6-深度缓冲-Z-Buffering"><a href="#6-深度缓冲-Z-Buffering" class="headerlink" title="6. 深度缓冲 Z Buffering"></a>6. 深度缓冲 Z Buffering</h2><p>另一种画遮挡的方法，简而言之，Z-buffering 算法会记录场景中每个像素和摄像机的距离，在内存里存一个数字矩阵，首先，每个像素的距离被初始化为”无限大”，然后 Z-buffering 从列表里第一个多边形开始处理，也就是A，它和扫描线算法逻辑相同，但不是给像素填充颜色，而是把多边形的距离和 Z-Buffer 里的距离进行对比，它总是记录更低的值，因为没对多边形排序，所以后处理的多边形并不总会覆盖前面的。</p><p>07:45 Z Fighting 错误</p><p>采用深度缓冲算法，哪个图形在前将会变化</p><p>07:51 背面剔除 Back Face Culling</p><p>由于游戏角色的头部或地面，只能看到朝外的一面，所以为了节省处理时间，会忽略多边形背面，这很好,但有个bug是 如果进入模型内部往外看，头部和地面会消失</p><p>08:53 表面法线 Surface Normal</p><p>在3D图形上任取一小个区域，它面对的方向叫“表面法线”</p><p>09:33 平面着色 Flat Shading</p><p>基本的照明算法，缺点是使多边形边界明显，看上去不光滑</p><p>09:43 高洛德着色 Gouraud shading, 冯氏着色 Phong Shading</p><p>不只用一种颜色上色</p><p>10:06 纹理映射 Texture Mapping</p><p>纹理在图形学中指外观，纹理有多种算法来达到花哨效果，最经典的是纹理映射。</p><p><img src="https://uploader.shimo.im/f/VXjgN5i6k5eDAh5n.PNG!thumbnail" alt="img"></p><p>纹理映射示意图</p><p>11:24 图形处理单元 GPU, Graphics Processing Unit</p><p>方便并行处理多个图形，并把图形分成一个个小块来处理。</p><p>（28-30：介绍网络的发展和支撑他们的基础原理和技术）</p><h1 id="第-28-集：计算机网络"><a href="#第-28-集：计算机网络" class="headerlink" title="第 28 集：计算机网络"></a>第 28 集：计算机网络</h1><h2 id="1-局域网-Local-Area-Networks-LAN"><a href="#1-局域网-Local-Area-Networks-LAN" class="headerlink" title="1. 局域网 Local Area Networks - LAN"></a>1. 局域网 Local Area Networks - LAN</h2><p>计算机近距离构成的小型网络，叫局域网（LAN），以太网是经典的局域网</p><h2 id="2-媒体访问控制地址-Media-Access-Control-address-MAC"><a href="#2-媒体访问控制地址-Media-Access-Control-address-MAC" class="headerlink" title="2.媒体访问控制地址 Media Access Control address - MAC"></a>2.媒体访问控制地址 Media Access Control address - MAC</h2><p>用于确认局域网和WiFi传输的对象</p><h2 id="3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA"><a href="#3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA" class="headerlink" title="3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA"></a>3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA</h2><p>多台电脑共享一个传输媒介，叫做载波侦听多路访问，共享媒介又称载体，如WiFi的载体是空气，以太网的载体是电线。载体传输数据的速度叫带宽，</p><h2 id="4-指数退避-Exponential-Backoff"><a href="#4-指数退避-Exponential-Backoff" class="headerlink" title="4.指数退避 Exponential Backoff"></a>4.指数退避 Exponential Backoff</h2><p>当多台计算机同时想要传输数据时，就会发生冲突，当计算机检测到冲突 就会在重传之前等待一小段时间，，这一段时间包括固定时间+随机时间，再次堵塞时固定时间将会指数级增加，这叫做指数退避。</p><h2 id="5-冲突域-Collision-Domain"><a href="#5-冲突域-Collision-Domain" class="headerlink" title="5.冲突域 Collision Domain"></a>5.冲突域 Collision Domain</h2><p>载体和其中的设备总称为“冲突域”，为了避免冲突，可以用<strong>交换器</strong></p><p>07:08 电路交换 Circuit Switching</p><p>缺点：不灵活且数量昂贵</p><p><img src="https://uploader.shimo.im/f/hJq9a6Aagi0SsyRH.PNG!thumbnail" alt="img"></p><h2 id="6-报文交换-Message-Switching"><a href="#6-报文交换-Message-Switching" class="headerlink" title="6. 报文交换 Message Switching"></a>6. 报文交换 Message Switching</h2><p>报文的具体格式简称IP，每一个电脑都会有一个IP地址</p><p>好处，可以用不同路由，通信更可靠也更能容错。</p><p>坏处，当报文比较大的时候，会堵塞线路。解决方法是 将大报文分成很多小块，叫”<strong>数据包</strong>“，来进行运输，这叫“<strong>分组交换</strong>”。路由器会平衡与其他路由器之间的负载  以确保传输可以快速可靠，这叫”<strong>阻塞控制</strong>“</p><p>消息沿着路由跳转的次数 叫”<strong>跳数</strong>“(hop count)，看到哪条线路的跳数很高，说明出了故障，这叫跳数限制。</p><p><img src="https://uploader.shimo.im/f/aqKJCrYbYM99btzH.PNG!thumbnail" alt="img"></p><h1 id="第-29-集：互联网"><a href="#第-29-集：互联网" class="headerlink" title="第 29 集：互联网"></a>第 29 集：互联网</h1><h2 id="1。电脑连接互联网的过程"><a href="#1。电脑连接互联网的过程" class="headerlink" title="1。电脑连接互联网的过程"></a>1。电脑连接互联网的过程</h2><p>你所用的电脑首先要连接到局域网，家里WiFi路由器连着的所有设备，组成了<strong>局域网</strong>，局域网再连到<strong>广域网（WAN）</strong>，广域网的路由器一般属于你的<strong>互联网服务提供商（ISP）</strong>，再连更大的WAN，往复几次，最后连到互联网主干。</p><h2 id="2-IP-互联网协议-Internet-Protocol"><a href="#2-IP-互联网协议-Internet-Protocol" class="headerlink" title="2.IP - 互联网协议 - Internet Protocol"></a>2.IP - 互联网协议 - Internet Protocol</h2><p>IP负责把数据包送到正确的计算机</p><h2 id="3-UDP-用户数据报协议-User-Datagram-Protocol"><a href="#3-UDP-用户数据报协议-User-Datagram-Protocol" class="headerlink" title="3. UDP - 用户数据报协议 - User Datagram Protocol"></a>3. UDP - 用户数据报协议 - User Datagram Protocol</h2><p>UDP负责把数据包传送到正确的程序，有端口号（哪个程序），校验和（数据是否损坏）</p><h2 id="4-校验和-Checksum"><a href="#4-校验和-Checksum" class="headerlink" title="4.校验和 - Checksum"></a>4.校验和 - Checksum</h2><p>UDP校验和只有16位，超过这个数，弃高位。</p><h2 id="5-TCP-传输控制协议-Transmission-Control-Protocol"><a href="#5-TCP-传输控制协议-Transmission-Control-Protocol" class="headerlink" title="5.TCP - 传输控制协议 - Transmission Control Protocol"></a>5.TCP - 传输控制协议 - Transmission Control Protocol</h2><p>如果要控制所有数据必须到达，就用传输控制协议</p><h3 id="TCP的特点"><a href="#TCP的特点" class="headerlink" title="TCP的特点"></a>TCP的特点</h3><p>1 控制发送的文件按顺序到达</p><p>2 要求接收方确认无误后发送确认码（ACK），确认码的成功率和来回时间可以用来推测网络的拥堵程度，TCP可以根据这个调整传输率。由于这个特点，TCP对时间要求高的程序不适用</p><h2 id="6-DNS-域名系统-Domain-Name-System"><a href="#6-DNS-域名系统-Domain-Name-System" class="headerlink" title="6 DNS - 域名系统 - Domain Name System"></a>6 DNS - 域名系统 - Domain Name System</h2><p>计算机访问网站时需要两样，IP地址和端口号，但记数字很难，所以互联网通过域名系统把域名和IP地址一一对应。域名系统是树状结构</p><p><img src="https://uploader.shimo.im/f/FCIyLhtvPZsSZzCA.PNG!thumbnail" alt="img"></p><p>10:47 OSI - 开放式系统互联通信参考模型 - Open System Interconnection</p><p><img src="https://uploader.shimo.im/f/FOLq1XgUBomAvLQu.PNG!thumbnail" alt="img"></p><h1 id="第-30-集：万维网（WWW）"><a href="#第-30-集：万维网（WWW）" class="headerlink" title="第 30 集：万维网（WWW）"></a>第 30 集：万维网（WWW）</h1><h2 id="1-基本单位"><a href="#1-基本单位" class="headerlink" title="1.基本单位"></a>1.基本单位</h2><p>万维网在互联网上运行，它的基本单位是页面</p><h2 id="2-超链接-Hyperlinks"><a href="#2-超链接-Hyperlinks" class="headerlink" title="2.超链接 Hyperlinks"></a>2.超链接 Hyperlinks</h2><p>点超链接可以去到另一个页面，文字超链接又叫超文本</p><p><img src="https://uploader.shimo.im/f/LSiZMkwxeCJMvmby.PNG!thumbnail" alt="img"></p><p>超链接工作过程中示意</p><h2 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3.状态码"></a>3.状态码</h2><p>状态码代表所访问网页的状态</p><h2 id="4-URL-统一资源定位器-Uniform-Resource-Locator"><a href="#4-URL-统一资源定位器-Uniform-Resource-Locator" class="headerlink" title="4.URL - 统一资源定位器 - Uniform Resource Locator"></a>4.URL - 统一资源定位器 - Uniform Resource Locator</h2><p>网页的唯一网址</p><h2 id="5-HTTP-超文本传输协议-HyperText-Transfer-Protocol"><a href="#5-HTTP-超文本传输协议-HyperText-Transfer-Protocol" class="headerlink" title="5.HTTP - 超文本传输协议 - HyperText Transfer Protocol"></a>5.HTTP - 超文本传输协议 - HyperText Transfer Protocol</h2><h2 id="6-HTML-超文本标记语言-HyperText-Markup-Language"><a href="#6-HTML-超文本标记语言-HyperText-Markup-Language" class="headerlink" title="6.HTML - 超文本标记语言 - HyperText Markup Language"></a>6.HTML - 超文本标记语言 - HyperText Markup Language</h2><h2 id="7-万维网发展史"><a href="#7-万维网发展史" class="headerlink" title="7.万维网发展史"></a>7.万维网发展史</h2><p>1 第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的</p><p>2 1991年万维网就此诞生</p><p>3  Jerry 和 David 的万维网指南 后来改名成 Yahoo</p><p>4 搜索引擎 JumpStation</p><p>（包括爬虫 索引 用法）</p><p>5 搜索引擎 Google</p><p>   改进排序方法，按照链接指向的多少来排序</p><h2 id="8-网络中立性"><a href="#8-网络中立性" class="headerlink" title="8.网络中立性"></a>8.网络中立性</h2><p>平等地对待每个数据包</p><h1 id="第-31-集：计算机安全"><a href="#第-31-集：计算机安全" class="headerlink" title="第 31 集：计算机安全"></a>第 31 集：计算机安全</h1><h2 id="1-保密性-完整性-可用性-Secrecy-Integrity-Availability"><a href="#1-保密性-完整性-可用性-Secrecy-Integrity-Availability" class="headerlink" title="1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability"></a>1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability</h2><p>计算机为了安全，要实现三性</p><p>保密性：只有有权限的人，才能读取计算机系统和数据</p><p>完整性：只有有权限的人，才能使用和修改系统和数据</p><p>可用性：有权限的人，可以随时访问计算机系统和数据</p><h2 id="2-Threat-Model-威胁模型"><a href="#2-Threat-Model-威胁模型" class="headerlink" title="2.Threat Model 威胁模型"></a>2.Threat Model 威胁模型</h2><p>为了实现这三个目标，安全专家会从 \N 抽象层面想象”敌人”可能是谁，这叫”威胁模型分析”，模型会对攻击者有个大致描述：\N 能力如何，目标可能是什么，可能用什么手段，攻击手段又叫”攻击矢量”，”威胁模型分析”让你能为特定情境做准备，不被可能的攻击手段数量所淹没。</p><p>很多安全问题可以总结成两个：</p><p>你是谁？你能访问什么？</p><h2 id="3-身份验证-Authentication-的三种方式："><a href="#3-身份验证-Authentication-的三种方式：" class="headerlink" title="3.身份验证 (Authentication) 的三种方式："></a>3.身份验证 (Authentication) 的三种方式：</h2><p>What you know, 你知道什么 ex、用户名和密码</p><p>What you have, 你有什么      </p><p>What you are, 你是什么</p><h2 id="4-访问控制-Access-Control"><a href="#4-访问控制-Access-Control" class="headerlink" title="4.访问控制 Access Control"></a>4.访问控制 Access Control</h2><p>Bell LaPadula model <strong>不能向上读取，不能向下写入</strong></p><h2 id="5-安全内核"><a href="#5-安全内核" class="headerlink" title="5.安全内核"></a><strong>5.安全内核</strong></h2><p>安全内核应该有一组尽可能少的操作系统软件，和尽量少的代码。</p><h2 id="6-独立安全检查和质量验证"><a href="#6-独立安全检查和质量验证" class="headerlink" title="6.独立安全检查和质量验证"></a>6.独立安全检查和质量验证</h2><p>最有效的验证手段</p><h2 id="7-隔离-Isolation-沙盒-Sandbox"><a href="#7-隔离-Isolation-沙盒-Sandbox" class="headerlink" title="7.隔离 Isolation, 沙盒 Sandbox"></a>7.隔离 Isolation, 沙盒 Sandbox</h2><p>优秀的开发人员，应该计划当程序被攻破后，\N如何限制损害，控制损害的最大程度，并且不让它危害到计算机上其他东西，这叫”隔离”。要实现隔离，我们可以”沙盒”程序，这好比把生气的小孩放在沙箱里，他们只能摧毁自己的沙堡，不会影响到其他孩子，方法是给每个程序独有的内存块，其他程序不能动。一台计算机可以运行多个虚拟机，如果一个程序出错，最糟糕的情况是它自己崩溃，或者搞坏它处于的虚拟机。</p><h1 id="第-32-集：黑客与攻击"><a href="#第-32-集：黑客与攻击" class="headerlink" title="第 32 集：黑客与攻击"></a>第 32 集：黑客与攻击</h1><h2 id="1-社会工程学-Social-Engineering"><a href="#1-社会工程学-Social-Engineering" class="headerlink" title="1.社会工程学 Social Engineering"></a>1.社会工程学 Social Engineering</h2><p>欺骗别人获得信息，或让人安装易于攻击的系统</p><h2 id="2-钓鱼-Phishing"><a href="#2-钓鱼-Phishing" class="headerlink" title="2.钓鱼 Phishing"></a>2.钓鱼 Phishing</h2><h2 id="3-假托-Pretexting"><a href="#3-假托-Pretexting" class="headerlink" title="3.假托 Pretexting"></a>3.假托 Pretexting</h2><h2 id="4-木马-Trojan-Horses"><a href="#4-木马-Trojan-Horses" class="headerlink" title="4.木马 Trojan Horses"></a>4.木马 Trojan Horses</h2><h2 id="5-NAND镜像-NAND-Mirroring"><a href="#5-NAND镜像-NAND-Mirroring" class="headerlink" title="5.NAND镜像 NAND Mirroring"></a>5.NAND镜像 NAND Mirroring</h2><p>——来避免输错密码后等待</p><h2 id="6-漏洞利用-Exploit"><a href="#6-漏洞利用-Exploit" class="headerlink" title="6.漏洞利用 Exploit"></a>6.漏洞利用 Exploit</h2><h2 id="7-缓冲区溢出-Buffer-Overflow"><a href="#7-缓冲区溢出-Buffer-Overflow" class="headerlink" title="7. 缓冲区溢出 Buffer Overflow"></a>7. 缓冲区溢出 Buffer Overflow</h2><p>——一种常见的漏洞利用</p><h2 id="9-边界检查-Bounds-Checking和金丝雀"><a href="#9-边界检查-Bounds-Checking和金丝雀" class="headerlink" title="9.边界检查 Bounds Checking和金丝雀"></a>9.边界检查 Bounds Checking和金丝雀</h2><p>——防止缓冲区溢出的手段，金丝雀，留出一些不用的空间，当空间变少时，说明有攻击者乱来。</p><p>​      </p><h2 id="10-代码注入-Code-Injection"><a href="#10-代码注入-Code-Injection" class="headerlink" title="10. 代码注入 Code Injection"></a>10. 代码注入 Code Injection</h2><p>把代码注入到程序中，造成混乱</p><h2 id="11-零日漏洞-Zero-Day-Vulnerability"><a href="#11-零日漏洞-Zero-Day-Vulnerability" class="headerlink" title="11.零日漏洞 Zero Day Vulnerability"></a>11.零日漏洞 Zero Day Vulnerability</h2><p>当软件制造者不知道软件有新漏洞被发现了，这个漏洞被称为“零日漏洞”</p><h2 id="12-计算机蠕虫-Worms"><a href="#12-计算机蠕虫-Worms" class="headerlink" title="12.计算机蠕虫 Worms"></a>12.计算机蠕虫 Worms</h2><p>如果有足够多的电脑有漏洞，让恶意程序可以在电脑间互相传播，这种恶意程序叫做蠕虫</p><h2 id="13-僵尸网络-Botnet"><a href="#13-僵尸网络-Botnet" class="headerlink" title="13.僵尸网络 Botnet"></a>13.僵尸网络 Botnet</h2><p>如果黑客掌握足够多电脑，那他们可以组成“僵尸网络”</p><h1 id="第-33-集：加密"><a href="#第-33-集：加密" class="headerlink" title="第 33 集：加密"></a>第 33 集：加密</h1><h2 id="1-加密-Encryption，解密-Decryption"><a href="#1-加密-Encryption，解密-Decryption" class="headerlink" title="1. 加密 - Encryption，解密 - Decryption"></a>1. 加密 - Encryption，解密 - Decryption</h2><p>01:11 凯撒加密 Caesar cipher——一种替换加密  Substitution cipher，把字母替换成其他字母</p><p>01:59 移位加密 Permutation cipher</p><p><img src="https://uploader.shimo.im/f/nuMi5nxzR4tm7n0B.PNG!thumbnail" alt="img"></p><p> 列移位加密 Columnar transposition cipher</p><p>02:37 德国 Enigma 加密机 一种进阶的替换加密，每一次的映射都不同。</p><p>04:54 1977年”数据加密标准” - Data Encryption Standard (DES)</p><p>05:24 2001年”高级加密标准” - Advanced Encryption Standard (AES)</p><h2 id="2-密钥交换-Key-exchange"><a href="#2-密钥交换-Key-exchange" class="headerlink" title="2. 密钥交换 - Key exchange"></a>2. 密钥交换 - Key exchange</h2><p><img src="https://uploader.shimo.im/f/ZIH2mA0XASRyEZJ6.PNG!thumbnail" alt="img"></p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/tdQzQBGdJZeJ84Ch.PNG!thumbnail" alt="img"></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/LoC5ZUDOgkDD2qvT.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_341/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/QFokhbpbQMRrmOqf.PNG!thumbnail" alt="img"></p><p> 用颜色来举例”单向函数”和”密钥加密”的原理</p><p>实例：迪菲-赫尔曼密钥交换 - Diffie-Hellman Key Exchange</p><p>用模幂计算来得到秘钥</p><h2 id="3-非对称加密-Asymmetric-encryption"><a href="#3-非对称加密-Asymmetric-encryption" class="headerlink" title="3. 非对称加密 - Asymmetric encryption"></a>3. 非对称加密 - Asymmetric encryption</h2><p>以上的例子，双方用一样的秘钥加密和解密信息，叫对称解密。也可以人们用公钥加密信息，只有有私钥的人能解密，或者反过来，这叫非对称解密。最有名的非对称加密算法是RSA</p><h1 id="第-34-集：机器学习与人工智能"><a href="#第-34-集：机器学习与人工智能" class="headerlink" title="第 34 集：机器学习与人工智能"></a>第 34 集：机器学习与人工智能</h1><h2 id="以区分飞蛾为例"><a href="#以区分飞蛾为例" class="headerlink" title="以区分飞蛾为例"></a>以区分飞蛾为例</h2><h3 id="1-分类-Classification"><a href="#1-分类-Classification" class="headerlink" title="1. 分类 Classification"></a>1. 分类 Classification</h3><h3 id="2-做分类的算法-分类器-Classifier"><a href="#2-做分类的算法-分类器-Classifier" class="headerlink" title="2.做分类的算法 分类器 Classifier"></a>2.做分类的算法 分类器 Classifier</h3><h3 id="3-用于分类的值是特征-Feature"><a href="#3-用于分类的值是特征-Feature" class="headerlink" title="3.用于分类的值是特征 Feature"></a>3.用于分类的值是特征 Feature</h3><h3 id="4-特征值-种类叫做标记数据-Labeled-data"><a href="#4-特征值-种类叫做标记数据-Labeled-data" class="headerlink" title="4. 特征值+种类叫做标记数据 Labeled data"></a>4. 特征值+种类叫做标记数据 Labeled data</h3><p><img src="https://uploader.shimo.im/f/a9Ah3JjIXKXZ28ni.PNG!thumbnail" alt="img"></p><p>标记数据</p><h3 id="5-决策边界-Decision-boundaries"><a href="#5-决策边界-Decision-boundaries" class="headerlink" title="5. 决策边界 Decision boundaries"></a>5. 决策边界 Decision boundaries</h3><p><img src="https://uploader.shimo.im/f/IzBKYfZaW7WtLbSj.PNG!thumbnail" alt="img"></p><p>虚线为决策边界</p><h3 id="6-混淆矩阵-Confusion-matrix"><a href="#6-混淆矩阵-Confusion-matrix" class="headerlink" title="6.混淆矩阵 Confusion matrix"></a>6.混淆矩阵 Confusion matrix</h3><p><img src="https://uploader.shimo.im/f/okVZ8JqZA6pWxhpS.PNG!thumbnail" alt="img"></p><p>右下角表为混淆矩阵</p><h3 id="7-03-49-决策树-Decision-tree"><a href="#7-03-49-决策树-Decision-tree" class="headerlink" title="7.03:49 决策树 Decision tree"></a>7.03:49 决策树 Decision tree</h3><p><img src="https://uploader.shimo.im/f/7uyq1kVlmi43tbqE.PNG!thumbnail" alt="img"></p><h3 id="8-支持向量机-Support-Vector-Machines"><a href="#8-支持向量机-Support-Vector-Machines" class="headerlink" title="8.支持向量机 Support Vector Machines"></a>8.支持向量机 Support Vector Machines</h3><p>本质上是用任意线段来切分决策空间，不一定是直线。</p><h3 id="9-人工神经网络-Artificial-Neural-Network"><a href="#9-人工神经网络-Artificial-Neural-Network" class="headerlink" title="9.人工神经网络 Artificial Neural Network"></a>9.人工神经网络 Artificial Neural Network</h3><p>不用统计学的算法。模拟人类学习的过程，将数据进行加权求和修正等一系列处理。</p><h3 id="10-深度学习-Deep-learning"><a href="#10-深度学习-Deep-learning" class="headerlink" title="10.深度学习 Deep learning"></a>10.深度学习 Deep learning</h3><p><img src="https://uploader.shimo.im/f/ukyADGkYjWhrb0pL.PNG!thumbnail" alt="img"></p><p>得名原因：有很多的隐藏层</p><ol start="11"><li>弱AI, 窄AI Weak AI, Narrow AI</li></ol><p>只能做指定内容的内容</p><h3 id="12-强AI-Strong-AI"><a href="#12-强AI-Strong-AI" class="headerlink" title="12. 强AI Strong AI"></a>12. 强AI Strong AI</h3><p>通用的，和人一样智能的AI叫做强AI，目前没有人能做到。</p><h3 id="14-强化学习-Reinforcement-Learning"><a href="#14-强化学习-Reinforcement-Learning" class="headerlink" title="14.强化学习 Reinforcement Learning"></a>14.强化学习 Reinforcement Learning</h3><p>学习什么管用，什么不管用，自己发现成功的策略，这叫强化学习。</p><h1 id="第-35-集：计算机视觉"><a href="#第-35-集：计算机视觉" class="headerlink" title="第 35 集：计算机视觉"></a>第 35 集：计算机视觉</h1><h2 id="1-颜色跟踪算法——跟踪一个像素"><a href="#1-颜色跟踪算法——跟踪一个像素" class="headerlink" title="1.颜色跟踪算法——跟踪一个像素"></a>1.颜色跟踪算法——跟踪一个像素</h2><h2 id="2-检测垂直边缘的算法"><a href="#2-检测垂直边缘的算法" class="headerlink" title="2. 检测垂直边缘的算法"></a>2. 检测垂直边缘的算法</h2><p>物体的边缘有多个色素，不适合颜色跟踪算法。要识别边缘，可以判断其两边像素的颜色差异程度</p><h2 id="3-核-过滤器-kernel-or-filter"><a href="#3-核-过滤器-kernel-or-filter" class="headerlink" title="3. 核&#x2F;过滤器 kernel or filter"></a>3. 核&#x2F;过滤器 kernel or filter</h2><p>——用来检测垂直边缘的算法的数学符号，如下绿色的图。</p><p><img src="https://uploader.shimo.im/f/k3LX2p7wLd9R8OlD.PNG!thumbnail" alt="img"></p><p>核或过滤器图示</p><p><img src="https://uploader.shimo.im/f/PsMwdbwYAM4fx6VN.PNG!thumbnail" alt="img"></p><p>算法示例</p><h2 id="4-卷积-convolution"><a href="#4-卷积-convolution" class="headerlink" title="4. 卷积 convolution"></a>4. 卷积 convolution</h2><p>把核应用于像素块</p><h2 id="5-Prewitt-算子-Prewitt-Operators"><a href="#5-Prewitt-算子-Prewitt-Operators" class="headerlink" title="5.Prewitt 算子 Prewitt Operators"></a>5.Prewitt 算子 Prewitt Operators</h2><p>水平和垂直边缘增强的核叫Prewitt 算子 </p><ol start="6"><li>维奥拉·琼斯 人脸检测 Viola-Jones Face Detection</li></ol><h2 id="7-卷积神经网络-Convolutional-Neural-Networks"><a href="#7-卷积神经网络-Convolutional-Neural-Networks" class="headerlink" title="7.卷积神经网络 Convolutional Neural Networks"></a>7.卷积神经网络 Convolutional Neural Networks</h2><p>用一层层不同的核来识别复杂场景，用脸来举例，先识别边缘，然后形状，器官…直至某一层把所有特征堆积在一起，识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息</p><h1 id="第-36-集：自然语言处理-NLP"><a href="#第-36-集：自然语言处理-NLP" class="headerlink" title="第 36 集：自然语言处理 NLP"></a>第 36 集：自然语言处理 NLP</h1><h2 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h2><p>通过<strong>词性 Parts of speech</strong>和<strong>短语结构规则 Phrase structure rules</strong>构建<strong>分析树 Parse tree，</strong>并结合<strong>语言模型 Language Model</strong>来实现<strong>语音识别 Speech recognition</strong></p><h2 id="2-实现原理："><a href="#2-实现原理：" class="headerlink" title="2.实现原理："></a>2.实现原理：</h2><p><strong>快速傅立叶变换 Fast Fourier Transform，</strong>把波形转换成频率 </p><h2 id="3-音素-Phonemes"><a href="#3-音素-Phonemes" class="headerlink" title="3. 音素 Phonemes"></a>3. 音素 Phonemes</h2><p>构成单词的声音片段</p><h2 id="4-语音合成-Speech-Synthesis"><a href="#4-语音合成-Speech-Synthesis" class="headerlink" title="4.语音合成 Speech Synthesis"></a>4.语音合成 Speech Synthesis</h2><h1 id="第-37-集：机器人"><a href="#第-37-集：机器人" class="headerlink" title="第 37 集：机器人"></a>第 37 集：机器人</h1><h2 id="1-机器人发展中的例子"><a href="#1-机器人发展中的例子" class="headerlink" title="1.机器人发展中的例子"></a>1.机器人发展中的例子</h2><p>02:08 法国吃饭鸭 - Digesting Duck, Canard Digerateur</p><p>02:23 土耳其行棋傀儡, 下国际象棋(假的，有人控制)</p><p>02:43 第一台计算机控制的机器出现在1940年代晚期，叫数控机器, Computer Numerical Control(CNC)</p><p>03:32 1960年 Unimate，第一个商业贩卖的 可编程工业机器人</p><h2 id="2-机器人控制的回路"><a href="#2-机器人控制的回路" class="headerlink" title="2.机器人控制的回路"></a>2.机器人控制的回路</h2><p>04:08 负反馈回路 negative feedback loop</p><p>05:17 比例-积分-导数控制器 Proportional–Integral–Derivative controller <strong>PID 控制器</strong></p><p> 通过控制三个值，比例值——实际值和理想值差多少，积分值——一段时间误差的总和，前两者用来修正错误：导数值（微分值）——期望值和实际值之间的变化率，用来避免未来的错误，这也叫预期控制，来控制进程。</p><h2 id="3-机器人三定律-Three-Laws-of-Robotics"><a href="#3-机器人三定律-Three-Laws-of-Robotics" class="headerlink" title="3. 机器人三定律 Three Laws of Robotics"></a>3. 机器人三定律 Three Laws of Robotics</h2><p>——让机器人不要伤害人类</p><h1 id="第38课-计算机心理学"><a href="#第38课-计算机心理学" class="headerlink" title="第38课 计算机心理学"></a>第38课 计算机心理学</h1><h2 id="0、计算机中用到的心理学原理"><a href="#0、计算机中用到的心理学原理" class="headerlink" title="0、计算机中用到的心理学原理"></a>0、计算机中用到的心理学原理</h2><p>社会心理学 认知心理学 行为心理学 感知信息学</p><h2 id="1、易用度"><a href="#1、易用度" class="headerlink" title="1、易用度"></a>1、易用度</h2><p>指人造物体，比如软件，达到目的的效率有多高</p><h2 id="2、颜色强度排序和颜色排序"><a href="#2、颜色强度排序和颜色排序" class="headerlink" title="2、颜色强度排序和颜色排序"></a>2、颜色强度排序和颜色排序</h2><p>人类擅长给颜色强度排序，所以颜色强度很适合现实连续值；而人类不擅长给颜色排序，所以如果数据没有顺序，用不同颜色就很合适，如分类数据。</p><h2 id="3、分组更好记"><a href="#3、分组更好记" class="headerlink" title="3、分组更好记"></a>3、分组更好记</h2><p>信息分块会更好记。分块是指把信息分成更小，更有意义的块，如电话号码分块，界面设计分块。</p><h2 id="4、直观功能"><a href="#4、直观功能" class="headerlink" title="4、直观功能"></a>4、直观功能</h2><p>直观功能为如何操作物体提供线索，如平板用于推，旋钮用来转，直观功能做得好，用户只需要看一眼就知道怎么搞，而不需要其他东西来说明。ex.门把手让人想拉开门，但如果门需要推开，那这就是个不好的直观功能，不如直接采用平板门来的好。</p><h2 id="5、认出VS回想"><a href="#5、认出VS回想" class="headerlink" title="5、认出VS回想"></a>5、认出VS回想</h2><p>和直观功能相关的一个心理学概念是认出和回想，这就是选择题比填空题简单的原因。一般来说，用感觉触发记忆会容易得多，比如文字、图片和声音，所以我们用图标表示功能，如垃圾桶表示回收站。但是，让所有菜单选项好找好记，有时候意味着用的时候会慢一些。这与另一个心理学概念冲突：”专业知识”，当你用界面熟悉之后，速度会更快一些，所以 好的界面应该提供多种方法来实现目标，一个好例子是复制粘贴，可以在”编辑”的下拉菜单中找到，也可以用快捷键，两者都不耽误，鱼与熊掌兼得。</p><h2 id="6、让机器有一定的情商以及Facebook的研究"><a href="#6、让机器有一定的情商以及Facebook的研究" class="headerlink" title="6、让机器有一定的情商以及Facebook的研究"></a>6、让机器有一定的情商以及Facebook的研究</h2><p>我们也希望电脑能有一点情商，能根据用户的状态做出合适地反应，让使用电脑更加愉快。因为情绪会影响日常活动，比如学习，沟通和决策，情感系统会用传感器，录声音，录像（你的脸）以及生物指标，比如出汗和心率，得到的数据和计算模型结合使用，模型会估算用户的情绪，给最好的回应用户。</p><h2 id="7、用软件修正注视位"><a href="#7、用软件修正注视位" class="headerlink" title="7、用软件修正注视位"></a>7、用软件修正注视位</h2><p>心理学研究也表明，如果想说服，讲课，或引起注意 ，眼神注视非常重要。为此，研究人员开发了计算机视觉和图形软件  来纠正头部和眼睛，看视频的人会觉得对方在直视他们</p><h2 id="8、把机器人做得像人"><a href="#8、把机器人做得像人" class="headerlink" title="8、把机器人做得像人"></a>8、把机器人做得像人</h2><p>人也喜欢像人的机器人。人机交互，简称HRI，是一个研究人类和计算机交互的领域。</p><p><img src="https://uploader.shimo.im/f/j4Yisrm3WQ3oxnYS.jpg?sm_xform=image/crop,x_0,y_143,w_1440,h_795/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p>​                                                                  恐怖谷原理</p><h2 id="9、开放性问题"><a href="#9、开放性问题" class="headerlink" title="9、开放性问题"></a>9、开放性问题</h2><p>计算机该不该对人类说谎等</p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><h1 id="第-39-集：教育科技"><a href="#第-39-集：教育科技" class="headerlink" title="第 39 集：教育科技"></a>第 39 集：教育科技</h1><h2 id="1-通过调速，暂停等技巧，加强学习效率"><a href="#1-通过调速，暂停等技巧，加强学习效率" class="headerlink" title="1. 通过调速，暂停等技巧，加强学习效率"></a>1. 通过调速，暂停等技巧，加强学习效率</h2><h2 id="2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC"><a href="#2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC" class="headerlink" title="2.大型开放式在线课程 - Massive Open Online Courses (MOOC)"></a>2.大型开放式在线课程 - Massive Open Online Courses (MOOC)</h2><h2 id="3-智能辅导系统-Intelligent-Tutoring-Systems"><a href="#3-智能辅导系统-Intelligent-Tutoring-Systems" class="headerlink" title="3.智能辅导系统 - Intelligent Tutoring Systems"></a>3.智能辅导系统 - Intelligent Tutoring Systems</h2><h2 id="4-判断规则-Production-rule"><a href="#4-判断规则-Production-rule" class="headerlink" title="4.判断规则 - Production rule"></a>4.判断规则 - Production rule</h2><h2 id="5-域模型-Domain-Model"><a href="#5-域模型-Domain-Model" class="headerlink" title="5.域模型 - Domain Model"></a>5.域模型 - Domain Model</h2><p>判断规则和选择算法，组合在一起成为域模型</p><h2 id="6-贝叶斯知识追踪-Bayesian-knowledge-tracing"><a href="#6-贝叶斯知识追踪-Bayesian-knowledge-tracing" class="headerlink" title="6.贝叶斯知识追踪 Bayesian knowledge tracing"></a>6.贝叶斯知识追踪 Bayesian knowledge tracing</h2><p>把学生的知识掌握当成隐藏变量，根据学生答题的正确度，更新学生掌握程度的估算值。具体而言，贝叶斯知识追踪有一组方程，会用这四个概率，更新学生模型，评估其掌握程度。</p><p>学生已经学会的概率</p><p>瞎猜的概率</p><p>失误的概率</p><p>做题过程中学会的概率</p><h2 id="7-自适应性程序"><a href="#7-自适应性程序" class="headerlink" title="7.自适应性程序"></a>7.自适应性程序</h2><p>一种算法，选择适合学生的问题，让学生学。</p><h2 id="8-教育数据挖掘-Educational-Data-Mining"><a href="#8-教育数据挖掘-Educational-Data-Mining" class="headerlink" title="8. 教育数据挖掘 Educational Data Mining"></a>8. 教育数据挖掘 Educational Data Mining</h2><p>看学生答题时停顿的时间，观察学生停顿和加速视频的时间段，看论坛问题，来评估学生的程度。</p><h1 id="第-40-集：奇点，天网，计算机的未来"><a href="#第-40-集：奇点，天网，计算机的未来" class="headerlink" title="第 40 集：奇点，天网，计算机的未来"></a>第 40 集：奇点，天网，计算机的未来</h1><h2 id="1-普适计算-Ubiquitous-Computing"><a href="#1-普适计算-Ubiquitous-Computing" class="headerlink" title="1. 普适计算 Ubiquitous Computing"></a>1. 普适计算 Ubiquitous Computing</h2><p>计算机融入生活的方方面面</p><h2 id="2-奇点-Singularity"><a href="#2-奇点-Singularity" class="headerlink" title="2.奇点 Singularity"></a>2.奇点 Singularity</h2><p>——智能科技的失控性发展</p><p><img src="https://uploader.shimo.im/f/N9exVZGxSDnTyUm1.PNG?sm_xform=image/crop,x_0,y_58,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h2 id="3-把工作分为4个象限，讨论自动化带来的影响"><a href="#3-把工作分为4个象限，讨论自动化带来的影响" class="headerlink" title="3.把工作分为4个象限，讨论自动化带来的影响"></a>3.把工作分为4个象限，讨论自动化带来的影响</h2><p><img src="https://uploader.shimo.im/f/mVxPWiKkDzby1Vt1.PNG!thumbnail" alt="img"></p><h2 id="4-机器人的存在时间可能长过人类，可以长时间探索宇宙"><a href="#4-机器人的存在时间可能长过人类，可以长时间探索宇宙" class="headerlink" title="4.机器人的存在时间可能长过人类，可以长时间探索宇宙"></a>4.机器人的存在时间可能长过人类，可以长时间探索宇宙</h2><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>整个视频看完后，感觉质量很高。对于计算机的结构了解更加的透彻了。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NoSQL</title>
      <link href="/2023/11/02/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/2.%E6%95%B0%E6%8D%AE%E5%BA%93/3.NoSQL/"/>
      <url>/2023/11/02/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/2.%E6%95%B0%E6%8D%AE%E5%BA%93/3.NoSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​“数据库非常的重要。”这是我遇到的10个学长，9个都是这样给我说的。不管是软件专业，还是大数据专业，还有计科的学长们，都在提醒我要学好数据库。上网查一下路线，就会发现，不管是Java软件开发，还是大数据等等都是会用到数据库的。</p><p>​NoSQL数据库实在是太多了，我查看了B站大部分的教程。也没有找到一个UP把我想学习的几个NoSQL数据库一起讲了的。所以，不出意外的话每一个章节的视频可能都会不一样。</p><p>​</p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p>不推荐视频，这部分大多是念PPT。</p><p>所有的关系型数据库，和非关系型数据库第一章都是在介绍数据库的概念。</p><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><ol><li>数据库系统（DBS） &#x3D;  数据库管理系统（DBMS）     +     数据库（DB）</li><li>数据库（DB）：是按照一定的数据模型来组织、存储和管理数据的仓库。</li><li>数据模型：把现实世界中的人、物、活动、概念等用【数据模型】来抽象、表示成计算机能识别和处理的数字。（传统数据库主要模型：层次型（树）、网状型（图），关系型（二维表））</li><li>数据库管理系统(DBMS)：是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。</li><li>SQL包含：<ul><li>数据定义语言（DDL）：供用户定义，创建和修改数据库的结构，包含CREATE，DROP，ALTER等。</li><li>数据查询语言（DQL）：负责数据查询</li><li>数据操作语言（DML）：INSERT，UPDATA，DELETE。即增删查改</li><li>数据控制语言（DCL）：对数据访问权进行控制的指令。</li></ul></li><li>关系型数据库：<ul><li>优点：容易理解。使用方便。易于维护。</li><li>缺点：高并发读写能力差。对海量数据的读写效率低。扩展性差。</li></ul></li><li>NoSQL数据库的特点：<ul><li>灵活的数据模型</li><li>可伸缩性强</li><li>自动分片</li><li>自动复制</li></ul></li></ol><h2 id="分布式数据库的数据管理"><a href="#分布式数据库的数据管理" class="headerlink" title="分布式数据库的数据管理"></a>分布式数据库的数据管理</h2><ol><li><p>分布式数据处理，特点：</p><ul><li><p>分布式的透明管理</p></li><li><p>复制数据的透明管理</p></li><li><p>事物的可靠性</p></li></ul></li><li><p>CAP理论：一致性（C）、可用性（A）、分区容错性（P）。三者不可兼得，并且最多只能满足其中两个。</p><ul><li>一致性（C）：更新操作成功后，所有节点在同一时间的数据完全一致性。</li><li>可用性（A）：每个请求都能在确定时间内返回一个响应，无论请求是成功或失败。</li><li>分区容错性（P）：指当出现网络分区故障时，仍然能够对外提供满足一致性和可用性的服务。</li></ul></li><li><p>相互关系：</p><ul><li>CA：也就是强调一致性（C）和可用性（A），放弃分区容忍性（P），最简单的做法是把所有与事务相关的内容都放到同一台机器上。</li><li>CP：也就是强调一致性（C）和分区容忍性（P），放弃可用性（A），当出现网络分区的情况时，受影响的服务需要等待数据一致，因此在等待期间就无法对外提供服务</li><li>AP：也就是强调可用性（A）和分区容忍性（P），放弃一致性（C），允许系统返回不一致的数据</li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/1.png?raw=true" alt="1.png"></p><h3 id="重新理解CAP："><a href="#重新理解CAP：" class="headerlink" title="重新理解CAP："></a>重新理解CAP：</h3><ol><li>P发生的概率很小，不应该在设计之初直接放弃A或者C。</li><li>即使在AC之间进行取舍，也不应该粗暴地在系统层面取A舍C或 取C舍A，应该针对不同粒度，子系统差异化。</li><li>三者之间也不是非此即彼，应看做连续互相影响，因此可以采用如下策略：绝大多数未分区的情况下，尽可能保证CA，当发生网络分区时，系统应能识别P状况，降低CA并进行相应处理。</li></ol><h2 id="ACID与BASE"><a href="#ACID与BASE" class="headerlink" title="ACID与BASE"></a>ACID与BASE</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ol><li>原子性（A）：一个事务的所有系列操作步骤被看成是一个动作，所有的步骤要么全部完成要么都不会完成。</li><li>一致性（C）：事务执行前后，数据库的状态都满足所有的完整性约束。不能发生表与表之间存在外键约束，但是有数据却违背这种约束性。</li><li>隔离性（I）：并发执行的事务是隔离的，保证多个事务互不影响，隔离能够确保并发执行的事务能够顺序一个接一个执行，通过隔离，一个未完成事务不会影响另外一个未完成事务。</li><li>持久性（D）：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，不会因为和其他操作冲突而取消这个事务。</li></ol><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>BASE原则 &#x3D;   基本可用性（Basically Available）  +  软状态（Soft state）  +  最终一致性（Eventuallyconsistent）</p><ol><li>基本可用性：分布式系统在出现故障的时候，允许损失部分可用性，即保证核心功能或者当前最重要功能可用，但是其他功能会被削弱。</li><li>软状态：允许系统数据存在中间状态，但不会影响到系统的整体可用性，即允许系统在不同节点的数据副本之间存在暂时的不一情况。</li><li>最终一致性：要求系统数据副本最终能够一致，而不需要实时保证数据副本一致。最终一致性是弱一致性的一种特殊情况。</li></ol><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>在实际工程实践中，最终一致性分为5种：因果一致性、读己之所写(因果一致性特例)、会话一致性、单调读一致性、单调写一致性。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/2.png?raw=true" alt="2.png"></p><p><strong>问题：</strong>用什么办法才能实现数据的一致性？</p><p><strong>答：</strong>Quorum系统NRW策略、SequoiaDB采用的Raft算法等。</p><p>NWR是一种在分布式存储系统中用于控制一致性级别的一种策略。</p><p>三个关键字N、R、W。</p><ol><li>N —  数据复制的份数 </li><li>W — 更新数据时需要保证写完成的节点数 </li><li>R —  读取数据时需要保证读完成的节点数</li></ol><p><strong>NRW策略：</strong></p><ol><li>如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。</li><li>如果W+R&lt;&#x3D;N，不能保证读写有重叠，则是弱一致性</li><li>如果W&#x3D;N,R&#x3D;1，全部节点写入成功才算有效，任何一个写节点失效，都会导致写失败，因此写可用性会降低。只读取1个节点，读性能提高，适合读比写多的场景。</li><li>如果R&#x3D;N,W&#x3D;1，全部节点读出成功才算有效，任何一个读节点失效，都会导致读失败，因此读可用性会降低。只写入1个节点就算成功，写性能提高，适合读取要求不高的场景。</li></ol><h2 id="NoSQL数据库的分类"><a href="#NoSQL数据库的分类" class="headerlink" title="NoSQL数据库的分类"></a>NoSQL数据库的分类</h2><table><thead><tr><th align="center"><strong>分类</strong></th><th align="center"><strong>举例</strong></th><th align="center"><strong>典型应用场景</strong></th><th align="center"><strong>数据模型</strong></th><th align="center"><strong>优点</strong></th><th align="center"><strong>缺点</strong></th></tr></thead><tbody><tr><td align="center">键值数据库</td><td align="center">Redis, Voldemort, Oracle BDB</td><td align="center">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td align="center">Key 指向 Value 的键值对，通常用hash table来实现</td><td align="center">查找速度快</td><td align="center">数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td align="center">列族数据库</td><td align="center">Cassandra, HBase, Riak</td><td align="center">分布式的文件系统</td><td align="center">以列簇式存储，将同一列族数据存在一起</td><td align="center">吞吐量大，可扩展性强，更容易进行分布式扩展</td><td align="center">功能相对局限</td></tr><tr><td align="center">文档型数据库</td><td align="center">CouchDB, MongoDB</td><td align="center">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td align="center">Key-Value对应的键值对，Value为结构化数据</td><td align="center">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td align="center">查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td align="center">图形数据库</td><td align="center">Neo4J, InfoGrid, Infinite Graph</td><td align="center">社交网络，推荐系统等。专注于构建关系图谱</td><td align="center">图结构</td><td align="center">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td align="center">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td></tr></tbody></table><ol><li>键值数据库：使用一个哈希表，这个表中有一个特定的key和一个指针指向特定的value</li><li>列族数据库：采用的是列族数据模型，由多个行构成，每行数据包含多个列族，不同行可以有不同数量的列族。</li><li>文档型数据库：数据模型是结构化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。</li><li>图型数据库：以图论为基础，一个图是一个数学概念，用来表示一个对象集合，包括顶点及连接顶点的边。图数据库使用图作为数据模型来存储数据。</li></ol><p><strong>问题：</strong>分别说出类型名称和代表产品？</p><p><strong>答：</strong></p><ol><li>键值数据库：Redis</li><li>列族数据库：HBase</li><li>文档数据库：MongoDB</li><li>图形数据库：Neo4j</li></ol><h1 id="第二章-MongoDB文档数据库"><a href="#第二章-MongoDB文档数据库" class="headerlink" title="第二章 MongoDB文档数据库"></a>第二章 MongoDB文档数据库</h1><p> 推荐视频1：<a href="https://www.bilibili.com/video/BV1bJ411x7mq/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>推荐视频2：<a href="https://www.bilibili.com/video/BV16u4y1y7Fm/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">Geek Hour</a></p><p>​MongoDB是一个开源文档数据库，是用C++语言编写的非关系型数据库。其特点是高性能、高可用、可伸缩、易部署、易使用，存储数据十分方便</p><p>​主要特性有：面向集合存储，易于存储对象类型的数据，模式自由，支持动态查询，支持完全索引，支持复制和故障恢复，使用高效的二进制数据存储，文件存储格式为BSON（一种JSON的扩展）等。</p><p>业务场景：</p><ol><li>对数据库高并发读写要求。</li><li>对海量数据的高效率存储和访问需求。</li><li>对数据库的高可扩展和高可用性的需求。</li></ol><p>​  </p><p>​MongoDB的Replication 集提供自动故障转移和数据冗余服务，Replication 结构可以保证数据库中的全部数据都会有多份备份，这与HDFS分布式文件系统的备份机制比较类似。采用副本集的集群中具有主（Master）、从（Slaver）、仲裁（Arbiter）三种角色。主从关系（Master-Slaver）负责数据的同步和读写分离；Arbiter服务负责心跳（Heartbeat）监控，Master宕机时可将Slaver切换到Master状态，继续提供数据的服务，完成了数据的高可用需求。</p><h2 id="MongoDB基础"><a href="#MongoDB基础" class="headerlink" title="MongoDB基础"></a>MongoDB基础</h2><h3 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h3><h4 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h4><ol><li>在文档数据库中，文档是处理信息的基本单位。</li><li>多个键及其关联的值有序地放置在一起便是文档。</li><li>文档是一个个键值(key-value)对(即BSON)。</li><li>MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别。</li></ol><p>文档的特点：</p><ol><li>文档中的键值对是有序的：</li><li>值区分字符串和数字</li><li>键区分大小写：</li></ol><h4 id="文档存储结构"><a href="#文档存储结构" class="headerlink" title="文档存储结构"></a>文档存储结构</h4><p>文档数据库的存储结构分为四个层次，从小到大依次是：键值对、文档（document）、集合（collection）、数据库（database）。</p><p>MongoDB中的文档、集合、数据库对应于关系数据库中的行数据、表、数据库。</p><ol><li><p>键值对：文档数据库存储结构的基本单位是键值对，具体包含数据和类型。键值对的数据包含键和值，键的格式一般为字符串，值的格式可以包含字符串、数值、数组、文档等类型。可以将键值对分为<strong>基本键值</strong>对和<strong>嵌套键值对</strong>。</p><ul><li>UTF-8格式字符串。</li><li>不用有“\0”的字符串，习惯上不用“. ”和“$”。</li><li>以“_”开头的多为保留键，自定义时一般不以“_”开头。</li><li>文档键值对是有序的，MongoDB中严格区分大小写。</li></ul></li><li><p>文档：一组有序的键值对集合。文档的数据结构与JSON基本相同，所有存储在集合中的数据都是BSON格式。BSON是一种类JSON的二进制存储格式。</p><p>文档与文档之间的关系包括嵌入和引用两种。</p></li><li><p>集合：是一些文档构成的对象。文档类似于关系型数据库中的“行”，那么集合就如同“表”。集合存在于数据库中，没有固定的结构，这意味着用户对集合可以插入不同格式和类型的数据。通常情况下插入集合的数据都会有一定的关联性，即一个集合中的文档应该具有相关性。</p></li><li><p>数据库：由集合组成。开发过程中，通常将一个应用的所有数据存储到同一个数据库中。</p></li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>​BSON目前主要用于MongoDB中，选择JSON进行改造的原因主要是JSON的通用性及JSON的schemaless的特性。BSON改进的主要特性有下面三点。</p><ul><li><p>更快的遍历速度</p></li><li><p>操作更简易</p></li><li><p>支持更多的数据类型</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/3.png?raw=true" alt="3.png"></p></li></ul><h4 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">windows版：</span><br><span class="line">下载安装包直接安装</span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">1.管理员运行cmd,输入：</span><br><span class="line">cd D:\mongodb\data\bin</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot;    # 命令行不能关闭</span><br><span class="line">2.另外打开一个cmd，输入：</span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">1.管理员运行cmd,输入：</span><br><span class="line">cd D:\mongodb\data\bin</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot; --install --serviceName &quot;MongoDB&quot;</span><br><span class="line"></span><br><span class="line">2.开启/关闭服务</span><br><span class="line">net start/stop MongoDB</span><br><span class="line"></span><br><span class="line">3.移除MongoDB开机自启（先关闭服务）：</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot; --remove --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><h3 id="数据库与集合的基本操作"><a href="#数据库与集合的基本操作" class="headerlink" title="数据库与集合的基本操作"></a>数据库与集合的基本操作</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ol><li><p>数据库的命名规则：要符合UTF-8标准的字符串</p><table><thead><tr><th align="center"><strong>序号</strong></th><th align="center"><strong>注意事项</strong></th></tr></thead><tbody><tr><td align="center"><strong>1</strong></td><td align="center"><strong>不能是空串</strong></td></tr><tr><td align="center"><strong>2</strong></td><td align="center"><strong>不得含有&#x2F;、\、？、$、空格、空字符等，基本只能使用ASCII中的字母和数字</strong></td></tr><tr><td align="center"><strong>3</strong></td><td align="center"><strong>区分大小写，建议全部小写</strong></td></tr><tr><td align="center"><strong>4</strong></td><td align="center"><strong>名称最多为64字节</strong></td></tr><tr><td align="center"><strong>5</strong></td><td align="center"><strong>不得使用保留的数据库名，如：admin、local、config</strong></td></tr></tbody></table></li><li><p>MongoDB系统保留的数据库</p><table><thead><tr><th align="center"><strong>库名</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>admin</strong></td><td align="center"><strong>权限<strong><strong>数据库，添加用户到该数据库中，该用户会自动继承数据库</strong></strong>的所有****权限</strong></td></tr><tr><td align="center"><strong>local</strong></td><td align="center"><strong>数据库中的数据永远不会被复制</strong></td></tr><tr><td align="center"><strong>config</strong></td><td align="center"><strong>分片时，config数据库在内部使用，保存分片信息</strong></td></tr><tr><td align="center"><strong>test</strong></td><td align="center"><strong>默认数据库，可以用来做各种测试等</strong></td></tr><tr><td align="center"><strong>自定义数据库</strong></td><td align="center"><strong>根据应用系统的需要建立的业务数据库</strong></td></tr></tbody></table></li><li><p>数据库操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">2.创建自定义数据库:如果数据库不存在，MongoDB会在第一次使用该数据库时创建数据库</span><br><span class="line">use test</span><br><span class="line"></span><br><span class="line">3.统计数据库信息:使用stats()方法查看,一定要用use切换至数据库</span><br><span class="line">use test</span><br><span class="line">db.stats()</span><br><span class="line"></span><br><span class="line">4.删除数据库:使用dropDatabase()方法</span><br><span class="line">db.dropDatabase()</span><br><span class="line"></span><br><span class="line">5.查看集合:使用getCollectionNames()方法</span><br><span class="line">use test</span><br><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure></li></ol><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><ol><li><p>集合命名规则：集合名称要求符合UTF-8标准的字符串</p><table><thead><tr><th><strong>序号</strong></th><th><strong>注意事项</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>集合名不能是空串</strong></td></tr><tr><td><strong>2</strong></td><td><strong>不能含有空字符\0</strong></td></tr><tr><td><strong>3</strong></td><td><strong>不能以“system.”开头，这是系统集合保留的前缀</strong></td></tr><tr><td><strong>4</strong></td><td><strong>集合名不能含保留字符$</strong></td></tr></tbody></table></li><li><p>集合操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.展示所有集合</span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line">2.创建集合</span><br><span class="line">显示：</span><br><span class="line">db.createCollection(name, options)</span><br><span class="line">options(可选项):</span><br><span class="line">            cappedBoolean（可选）如果为true，则启用封闭的集合。如果指定true，则还需要指定size参数</span><br><span class="line">            size数字（可选）指定上限集合的最大大小（以字节为单位）。如果capped为true，那么还需要指定此字段的值</span><br><span class="line">            max数字（可选）指定上限集合中允许的最大文档数</span><br><span class="line">        eg:db.createCollection(&quot;myDB&quot;,&#123;capped:true,size:6142800,max:10000&#125;)</span><br><span class="line">隐式：插入文档时，如果集合不存在，隐式自动创建</span><br><span class="line">db.myDB.insert(&#123;&quot;name&quot;:&quot;tom&quot;&#125;)</span><br><span class="line"></span><br><span class="line">3.集合重命名：renamecollection()方法</span><br><span class="line">Show collections；</span><br><span class="line">db.myDB.renameCollection( &quot;orders2014&quot; )；</span><br><span class="line"></span><br><span class="line">4.删除集合：使用drop()方法</span><br><span class="line">db.orders2014.drop()</span><br><span class="line"></span><br><span class="line">5.查看文档</span><br><span class="line">db.test.find()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="文档的基本操作"><a href="#文档的基本操作" class="headerlink" title="文档的基本操作"></a>文档的基本操作</h3><ul><li>文档是MongoDB中存储的基本单元，是一组有序的键值对集合。文档中存储的文档键的格式是符合UTF-8标准的字符串。</li></ul><table><thead><tr><th><strong>1</strong></th><th><strong>不能包含\0字符（空字符），因为这个字符表示键的结束</strong></th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>不能包含“$”和“.”，因为“.”和“$”是被保留的，只能在特定环境下使用</strong></td></tr><tr><td><strong>3</strong></td><td><strong>区分类型（如字符串和整数等），同时也区分大小写</strong></td></tr><tr><td><strong>4</strong></td><td><strong>键不能重复，在一条文档里起唯一的作用</strong></td></tr></tbody></table><ul><li>文档的操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1.插入操作</span><br><span class="line">(1)insert()方法</span><br><span class="line">    db.collection.insert(//collection为集合名，</span><br><span class="line">    &lt;document or array of documents&gt;,//表示可设置插入一条或多条文档</span><br><span class="line">    &#123;</span><br><span class="line">        writeConcern: &lt;document&gt;,//可选字段，自定义写出错级别</span><br><span class="line">        ordered: &lt;boolean&gt;     //可选字段</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    eg:</span><br><span class="line">        //插入不指定_id字段的文档</span><br><span class="line">        db.test.insert(&#123;&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        //插入不指定_id字段的文档</span><br><span class="line">        db.test.insert(&#123;_id:10,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        //使用变量方式插入文档</span><br><span class="line">        a=(&#123;&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        db.test.insert(a)</span><br><span class="line">        //有序插入多条文档</span><br><span class="line">        db.test.insert([</span><br><span class="line">        &#123;_id:11,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;</span><br><span class="line">        &#123;_id:12,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;</span><br><span class="line">        ],</span><br><span class="line">        &#123;ordered:true&#125;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        (2)insertOne(), 插入一条文档。</span><br><span class="line">        (3)insertMany(), 插入多条文档。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.更新操作：update()和save()方法</span><br><span class="line">(1)update()</span><br><span class="line">db.collection.update(</span><br><span class="line">    &lt;query&gt;,//设置查询条件</span><br><span class="line">    &lt;update&gt;,//更新操作符</span><br><span class="line">    &#123;</span><br><span class="line">      Upsert,//布尔可选项，</span><br><span class="line">        multi,</span><br><span class="line">        writeConcern,</span><br><span class="line">        collation</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    eg:</span><br><span class="line">    db.test.update(</span><br><span class="line">    &#123;</span><br><span class="line">    item:&quot;card&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;$set:&#123;qty:35&#125;&#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    (2)save()</span><br><span class="line">    db.collection.save（obj）// _id已存在则更新，不存在则插入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.删除操作：永久删除</span><br><span class="line">(1)remove()</span><br><span class="line">db.collection.remove( </span><br><span class="line">    &lt;query&gt;, //设置文档的删除条件</span><br><span class="line">    &#123; </span><br><span class="line">        justOne: &lt;boolean&gt;, writeConcern: &lt;document&gt; </span><br><span class="line">    &#125;)</span><br><span class="line">    eg:</span><br><span class="line">    db.test.remove(&#123;&quot;name&quot;:&quot;hbk&quot;&#125;)</span><br><span class="line">    </span><br><span class="line">(2)delete:deleteOne()和deleteMany()方法删除文档</span><br><span class="line">db.collection.deleteMany(&#123;&#125;)//删除集合下所有的文档</span><br><span class="line">    db.collection.deleteMany(&#123; status : &quot;A&quot; &#125;)//删除status等于A的全部文档</span><br><span class="line">    db.collection.deleteOne( &#123; status: &quot;D&quot; &#125;)//删除status等于D的一个文档 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.查询操作</span><br><span class="line">(1)find()方法,findOne()</span><br><span class="line">语法：db.collection.find(query, projection) </span><br><span class="line">query：设置条件</span><br><span class="line">projection：投影操作符，返回指定字段</span><br><span class="line">注：可使用.pretty()格式化显示所有文档，更直观</span><br><span class="line">eg: db.test.find()</span><br><span class="line"></span><br><span class="line">(2)查询条件</span><br><span class="line">见下表：</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>操作符</strong></th><th align="center"><strong>格式</strong></th><th align="center"><strong>实例</strong></th><th align="center"><strong>与RDBMS where语句比较</strong></th></tr></thead><tbody><tr><td align="center"><strong>等于(&#x3D;)</strong></td><td align="center"><strong>{<key>:{<value>}</strong></td><td align="center"><strong>db.test.find({price:24 })</strong></td><td align="center"><strong>where price&#x3D;24</strong></td></tr><tr><td align="center"><strong>大于(&gt;)</strong></td><td align="center"><strong>{<key>:{$gt:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$gt:24}})</strong></td><td align="center"><strong>where price&gt;24</strong></td></tr><tr><td align="center"><strong>小于(&lt;)</strong></td><td align="center"><strong>{<key>:{$lt:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$lt:24}})</strong></td><td align="center"><strong>where price&lt;24</strong></td></tr><tr><td align="center"><strong>大于等于(&gt;&#x3D;)</strong></td><td align="center"><strong>{<key>:{$gte:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$gte:24}})</strong></td><td align="center"><strong>where price&gt;&#x3D;24</strong></td></tr><tr><td align="center"><strong>小于等于(&lt;&#x3D;)</strong></td><td align="center"><strong>{<key>:{$lte:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$lte:24}})</strong></td><td align="center"><strong>where price&lt;&#x3D;24</strong></td></tr><tr><td align="center"><strong>不等于(!&#x3D;)</strong></td><td align="center"><strong>{<key>:{$ne:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$ne:24}})</strong></td><td align="center"><strong>where price!&#x3D;24</strong></td></tr><tr><td align="center"><strong>与(and)</strong></td><td align="center"><strong>{key01:value01,key02:value02,…}</strong></td><td align="center"><strong>db.test.find({name:”《MongoDB教程》”,price:24})</strong></td><td align="center"><strong>where name&#x3D;”《MongoDB教程》”and price&#x3D;24</strong></td></tr><tr><td align="center"><strong>或(or)</strong></td><td align="center"><strong>{$or:[{key01:value01},{key02:value02},…]}</strong></td><td align="center"><strong>db.test.find({$or:[{name:”《MongoDB教程》”},{price:24}]})</strong></td><td align="center"><strong>where name&#x3D;”《MongoDB教程》”or price&#x3D;24</strong></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(3)特定类型查询</span><br><span class="line"> //查询age为null的字段，还会返回不包含这个键的文档</span><br><span class="line"> db.test.find(&#123;age:null&#125;)  </span><br><span class="line"> //查询有3个元素的数组</span><br><span class="line"> db.test.find(&#123;tags:&#123;$size:3&#125;&#125;)</span><br><span class="line">     //查询数组里的某一个值代码</span><br><span class="line">     db.test.find(&#123;tags:&quot;MongoDB&quot;&#125;)</span><br><span class="line">     //限制查询个数</span><br><span class="line">     db.test.find().limit(3)</span><br><span class="line">     //掠过指定文档</span><br><span class="line">     db.test.find().skip(1)</span><br><span class="line">     //对查询结果进行排序，1是升序，-1是降序</span><br><span class="line">     db.test.find().sort(&#123;&quot;price&quot;:1&#125;)</span><br><span class="line">     //使用正则表达式</span><br><span class="line">     db.test.find(&#123;tags:&#123;$regex:&quot;MongoDB&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">5.游标：指对数据一行一行的进行操作</span><br><span class="line">三种情况会让游标被销毁。</span><br><span class="line">① 客户端保存的游标变量不在作用域内。</span><br><span class="line">② 游标遍历完成后，或者客户端主动发送终止消息。</span><br><span class="line">③ 在服务器端10分钟内未对游标进行操作。</span><br><span class="line"></span><br><span class="line">见下表</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>hasNext</strong></th><th align="center"><strong>判断是否有更多的文档</strong></th></tr></thead><tbody><tr><td align="center"><strong>next</strong></td><td align="center"><strong>用来获取下一条文档</strong></td></tr><tr><td align="center"><strong>toArray</strong></td><td align="center"><strong>将查询结果放到数组中</strong></td></tr><tr><td align="center"><strong>count</strong></td><td align="center"><strong>查询的结果为文档的总数量</strong></td></tr><tr><td align="center"><strong>limit</strong></td><td align="center"><strong>限制查询结果返回数量</strong></td></tr><tr><td align="center"><strong>skip</strong></td><td align="center"><strong>跳过指定数目的文档</strong></td></tr><tr><td align="center"><strong>sort</strong></td><td align="center"><strong>对查询结果进行排序</strong></td></tr><tr><td align="center"><strong>objsLeftlnBatch</strong></td><td align="center"><strong>查看当前批次剩余的未被迭代的文档数量</strong></td></tr><tr><td align="center"><strong>addOption</strong></td><td align="center"><strong>为游标设置辅助选项，修改游标的默认行为</strong></td></tr><tr><td align="center"><strong>hint</strong></td><td align="center"><strong>为查询强制使用指定索引</strong></td></tr><tr><td align="center"><strong>explain</strong></td><td align="center"><strong>用于获取查询执行过程报告</strong></td></tr><tr><td align="center"><strong>snapshot</strong></td><td align="center"><strong>对查询结果使用快照</strong></td></tr></tbody></table><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li><p>索引可以提升文档的查询速度，但建立索引的过程需要使用计算与存储资源，在已经建立索引的前提下，插入新的文档会引起索引顺序的重排</p></li><li><p>索引的类型大致包含单键索引、复合索引、多键值索引、地理索引、全文索引、散列索引等</p><ul><li><p>单键索引：对于单字段索引和排序操作，索引键的排序顺序（即升序或降序）无关紧要。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/4.png?raw=true" alt="4.png"></p></li><li><p>复合索引：复合索引可以支持在多个字段上进行的匹配查询。（db.collection.createIndex( { <key1>: <type>, <key2>: <type2>, … } )）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/5.png?raw=true" alt="5.png"></p></li><li><p>多键值索引</p></li><li><p>地理索引</p></li><li><p>其他索引：全文索引、散列索引（哈希索引）</p></li></ul></li><li><p>索引的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.创建索引单键索引</span><br><span class="line">db.collection.createIndex( &#123; key: 1 &#125; )//1为升序，-1为降序</span><br><span class="line"></span><br><span class="line">2.创建索引复合索引</span><br><span class="line">db.collection.createIndex( &#123; &lt;key1&gt;: 1, &lt;key2&gt;:-1, ... &#125; )</span><br><span class="line"></span><br><span class="line">3.查看现有的索引</span><br><span class="line">db.records.getIndexes()</span><br><span class="line"></span><br><span class="line">4.删除索引</span><br><span class="line">db.collection.dropIndex(&#123;score:1&#125;)</span><br><span class="line">db.collection.dropIndexes()//删除所有索引</span><br><span class="line"></span><br><span class="line">5.修改索引</span><br><span class="line">只能删除后，重新创建</span><br></pre></td></tr></table></figure></li></ol><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>具体见书P120</p><ol><li><p>聚合：用于处理数据并返回计算结果。聚合操作将来自多个文档的值组合在一起，按条件分组后，再进行一系列操作（如求和、平均值、最大值、最小值）以返回单个结果。</p></li><li><p>聚合的方法：聚合管道、map-reduce和单一目标聚合方法。</p><ul><li><p>聚合管道：最基本的管道阶段提供过滤器，其操作类似查询和文档转换，可以修改输出文档的形式。</p></li><li><p>map-reduce：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">db.collection.mapReduce(</span><br><span class="line">function() &#123;emit(key,value);&#125;,</span><br><span class="line">function(key,values) &#123;return reduceFunction&#125;</span><br><span class="line">&#123; query: document,out: collection&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="MongoDB进阶"><a href="#MongoDB进阶" class="headerlink" title="MongoDB进阶"></a>MongoDB进阶</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><p>MongoDB有三种集群部署模式，分别为</p><ol><li>主从复制（Master-Slaver）：（目前已不推荐使用）集群中只能有一个主节点，主节点提供所有的增、删、查、改服务，从节点不提供任何服务，但是可以通过设置使从节点提供查询服务，这样可以减少主节点的压力。</li><li>副本集（Replica Set）：取代了Master-Slaver模式，是一种互为主从的关系。副本集与主从复制的区别在于，当集群中主节点发生故障时，副本集可以自动投票，选举出新的主节点，并引导其余的从节点连接新的主节点，而且这个过程对应用是透明的。</li><li>分片（Sharding）模式：是指将数据拆分并分散存放在不同机器上的过程。有时也用分区来表示这个概念。将数据分散到不同的机器上，不需要功能强大的大型计算机就可以存储更多的数据，处理更大的负载。适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。构建分片模式需要三个组件：分片服务器（Shard Server）、配置服务器（Config Server）和路由服务器（Route Server）。</li></ol><h3 id="MongoDB分布式集群部署"><a href="#MongoDB分布式集群部署" class="headerlink" title="MongoDB分布式集群部署"></a>MongoDB分布式集群部署</h3><h4 id="分布式集群架构"><a href="#分布式集群架构" class="headerlink" title="分布式集群架构"></a>分布式集群架构</h4><ol><li><p>在实际生产环境中，MongoDB的集群架构是分布式的，集群会结合副本集和分片机制保证生产过程的高可靠性和高可扩展性。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/6.png?raw=true" alt="6.png"></p></li><li><p>副本集和分片联合部署的基本思路是先建立副本集，然后将每个副本集作为整体建立分片</p></li></ol><h4 id="部署副本集"><a href="#部署副本集" class="headerlink" title="部署副本集"></a>部署副本集</h4><p>标准副本集一般会部署三个成员，即一个Primary和两个Secondary，实现数据的冗余和容错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.启动副本集</span><br><span class="line"></span><br><span class="line">（1）修改配置文件</span><br><span class="line">启动mongod实例前先修改配置文件/etc/mongodrs1.conf，主要是对path、dbpath、port的修改。</span><br><span class="line"></span><br><span class="line">（2）启动mongod副本集</span><br><span class="line">在Shell终端执行：mongod --shardsvr --replSet rs1 --config /etc/mongodrs1.conf </span><br><span class="line"></span><br><span class="line">（3）初始化副本集</span><br><span class="line"> 启动MongoDB的副本集服务后，可在任意一台机器上连接MongoDB的服务，例如，在Node1节点上执行以下命令连接Node2节点上的mongod服务。</span><br><span class="line">mongo --host 10.90.9.102 --port 27018</span><br><span class="line">使用rs.initiate()对副本集进行初始化，经过初始化后，执行rs.status()查看副本集状态</span><br><span class="line"></span><br><span class="line">（4）添加成员</span><br><span class="line">目前rs1副本集还只有Node2这个Primary节点，需要将Node1、Node3节点添加到副本集中，执行以下命令添加副本集成员：</span><br><span class="line">rs.add(&quot;10.90.9.101：27018&quot;)</span><br><span class="line">rs.add(&quot;10.90.9.103：27018&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.测试副本集复制功能</span><br><span class="line">（1）在Primary节点上添加数据</span><br><span class="line">在Primary节点上创建myDB数据库，在此数据库中创建集合myCollection，并插入5个文档.</span><br><span class="line"></span><br><span class="line">2）在Secondary节点上查看副本数据</span><br><span class="line">使用mongo命令连接Secondary节点，Secondary节点上的数据默认是不允许读写的，可以通过以下命令设置副本节点允许查询。</span><br><span class="line">db.getMongo().setSlaveOk() </span><br><span class="line"></span><br><span class="line">3）管理副本集</span><br><span class="line">通过rs.config()命令可以查看副本集中每个成员的属性</span><br><span class="line">修改副本集属性可通过如下命令实现：</span><br><span class="line">con=rs.conf()</span><br><span class="line">con.members[1].priority=2</span><br><span class="line">rs.reconfig(con)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="部署分片集群"><a href="#部署分片集群" class="headerlink" title="部署分片集群"></a>部署分片集群</h4><p>分片集群由配置服务器、路由服务器、分片服务器和客户端组成。客户端可以是Shell终端，也可以是具体的应用程序。配置服务器（Config Server）是普通的mongod服务器，保存着集群的配置信息：集群中有哪些分片、分片的是哪些集合，以及数据块的分布。分片服务器（Shard Server）存储具体的分片数据。启动集群后，路由服务器（Route Server）加载Config Server中的分片信息，客户端通过连接Route Server来获取集群中的数据信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.启动分片机制</span><br><span class="line">（1）配置Config Server</span><br><span class="line">Config Server相当于集群的大脑，保存着集群和分片的元数据，即各分片包含哪些数据的信息。鉴于它所包含数据的极端重要性，必须启用其日志功能，并确保其数据保存在非易失性驱动器上。</span><br><span class="line">配置服务器是独立的mongod进程，所以可以像启动“普通的”mongod进程一样启动配置服务器：</span><br><span class="line">mongod --replSet config --configsvr --dbpath /home/ubuntu/mongodb/data/config --port 27030 –logpath </span><br><span class="line">/home/ubuntu/mongodb/data/config.log --logappend --fork</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（2）配置Route Server</span><br><span class="line">三个配置服务器均处于运行状态后，启动一个mongos进程供应用程序连接。因为mongos进程需要知道配置服务器的地址，所以必须使用--configdb选项启动mongos：</span><br><span class="line">mongos --configdb config/10.90.9.101:27030,10.90.9.102:27030,10.90.9.103:27030 –logpath </span><br><span class="line">/home/ubuntu/mongodb/data/mongos.log --logappend --fork</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.测试分片机制</span><br><span class="line">（1）添加分片</span><br><span class="line">为了将副本集转换为分片，需告知mongos副本集名称和副本集成员列表。</span><br><span class="line">（2）数据分片</span><br><span class="line">除非明确指定规则，否则MongoDB不会自动对数据进行拆分。如有必要，必须明确告知数据库和集合。</span><br><span class="line">假设希望对myDB数据库中的Mytest集合按照_id键进行分片。首先对myDB数据库执行以下命令启用分片：</span><br><span class="line">sh.enableSharding(&quot;myDB&quot;)</span><br><span class="line">命令执行成功后，用sh.status()查询分片状态，数据库myDB的patitioned属性值为true。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MongoDB编程方法"><a href="#MongoDB编程方法" class="headerlink" title="MongoDB编程方法"></a>MongoDB编程方法</h3><h4 id="通过Java访问MongoDB"><a href="#通过Java访问MongoDB" class="headerlink" title="通过Java访问MongoDB"></a>通过Java访问MongoDB</h4><p>详细代码见P138</p><ol><li>安装Java语言驱动包<ul><li>（1）Maven方式</li><li>（2）手动导入</li></ul></li><li>编程实现<ul><li>（1）import基础类库</li><li>（2）连接数据库</li><li>（3）切换至集合</li><li>（4）插入文档</li><li>（5）删除文档</li><li>（6）更新数据</li><li>（7）查询数据</li><li>（8）其他方法</li></ul></li></ol><h4 id="通过Python访问MongoDB"><a href="#通过Python访问MongoDB" class="headerlink" title="通过Python访问MongoDB"></a>通过Python访问MongoDB</h4><p>详细代码见P141</p><ol><li><p>安装pymongo驱动可使用pip方式：</p><p>pip install pymongo</p></li><li><p>建立连接</p><ul><li>（1）模块引用</li><li>（2）访问数据库</li></ul></li><li><p>集合操作</p><ul><li>（1）插入文档</li><li>（2）检索文档</li><li>（3）更新数据</li><li>（4）删除数据</li></ul></li></ol><h4 id="MongoDB的可视化工具Robomongo"><a href="#MongoDB的可视化工具Robomongo" class="headerlink" title="MongoDB的可视化工具Robomongo"></a>MongoDB的可视化工具Robomongo</h4><p> Robomongo是一个界面友好且免费的MongoDB可视化工具，可在Robomongo官网下载此软件。</p><h1 id="第三章-HBase列族数据库"><a href="#第三章-HBase列族数据库" class="headerlink" title="第三章 HBase列族数据库"></a>第三章 HBase列族数据库</h1><h2 id="认识HBase"><a href="#认识HBase" class="headerlink" title="认识HBase"></a>认识HBase</h2><h2 id="HBase数据模型与使用"><a href="#HBase数据模型与使用" class="headerlink" title="HBase数据模型与使用"></a>HBase数据模型与使用</h2><h2 id="HBase原理实现"><a href="#HBase原理实现" class="headerlink" title="HBase原理实现"></a>HBase原理实现</h2><h1 id="第四章-Redis、Memcached键值数据库"><a href="#第四章-Redis、Memcached键值数据库" class="headerlink" title="第四章 Redis、Memcached键值数据库"></a>第四章 Redis、Memcached键值数据库</h1><h1 id="第五章-Neo4j图形数据库"><a href="#第五章-Neo4j图形数据库" class="headerlink" title="第五章 Neo4j图形数据库"></a>第五章 Neo4j图形数据库</h1><h1 id="第六章-New-SQL数据库"><a href="#第六章-New-SQL数据库" class="headerlink" title="第六章 New SQL数据库"></a>第六章 New SQL数据库</h1><h1 id="第七章-综合实验"><a href="#第七章-综合实验" class="headerlink" title="第七章 综合实验"></a>第七章 综合实验</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库</title>
      <link href="/2023/11/02/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/2.%E6%95%B0%E6%8D%AE%E5%BA%93/2.Oracle/"/>
      <url>/2023/11/02/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/2.%E6%95%B0%E6%8D%AE%E5%BA%93/2.Oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ZV411c7rs/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">千峰</a></p><p>与MySQL语法非常接近，学习速度会非常快。</p><h1 id="第一章-概论"><a href="#第一章-概论" class="headerlink" title="第一章 概论"></a>第一章 概论</h1><h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li><p>数据(Data)：是事物的符号表示，数据的种类有数字、文字、图像、声音等，可以用数字化后的二进制形式存入计算机来进行处理。数据的含义称为信息，数据是信息的载体，信息是数据的内涵，是对数据的语义解释。</p></li><li><p>数据库（DB）：是长期存放在计算机内的有组织的可共享的数据集合，数据库中的数据按一定的数据模型组织、描述和储存，具有尽可能小的冗余度、较高的数据独立性和易扩张性。</p><p>特性：</p><p>● 共享性，数据库中的数据能被多个应用程序的用户所使用。</p><p>● 独立性，提高了数据和程序的独立性，有专门的语言支持。</p><p>● 完整性，指数据库中数据的正确性、一致性和有效性。</p><p>● 减少数据冗余。</p></li><li><p>数据库管理系统(DBMS)：是数据库系统的核心组成部分，它是在操作系统支持下的系统软件，是对数据进行管理的大型系统软件，用户在数据库系统中的一些操作都是由数据库管理系统来实现的。</p></li><li><p>数据库系统(DBS)：是在计算机系统中引入数据库后的系统构成，数据库系统由数据库、操作系统、数据库管理系统、应用程序、用户、数据库管理员(DBA)组成。</p><ul><li>C&#x2F;S模式</li></ul><p>  应用程序直接与用户打交道，数据库管理系统不直接与用户打交道，因此，应用程序称为前台，数据库管理系统称为后台。</p><p>  <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/1.png?raw=true" alt="1.png"></p><ul><li>B&#x2F;S模式</li></ul><p>  基于Web的数据库应用采用三层客户-服务器模式( B&#x2F;S)，第一层为浏览器，第二层为Web服务器，第三层为数据库服务器。</p><p>  <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/2.png?raw=true" alt="2.png"></p></li><li><p>数据管理技术的发展：</p><ul><li><p>人工管理阶段</p></li><li><p>文件系统阶段</p></li><li><p>数据库系统阶段</p><p>（1）数据结构化</p><p>（2）数据的共享度高，冗余度小</p><p>（3）有较高的数据独立性</p><p>（4）由数据库管理系统对数据进行管理</p></li></ul></li></ol><h2 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h2><h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p>模式(Schema)指对数据的逻辑结构或物理结构、数据特征，数据约束的定义和描述，它是对数据的一种抽象，模式反映数据的本质、核心或型的方面。</p><p>数据库系统的标准结构是三级模式结构，它包括：</p><ol><li>外模式（子模式或用户模式）：于三级模式的最外层，对应于用户级，它是某个或某几个用户所看到的数据视图，是与某一应用有关的数据的逻辑表示。（一个数据库可以有多个外模式，同一外模式也可以为某一用户的多个应用系统所用，但一个应用程序只能使用一个外模式）</li><li>模式（概念模式，逻辑模式）：位于三级模式的中间层，对应于概念级，它是由数据库设计者综合所有用户的数据，按照统一观点构造的全局逻辑结构。（一个数据库只有一个模式）</li><li>内模式（存储模式）：位于三级模式的底层，对应于物理级，它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。一个数据库只有一个内模式。</li></ol><h3 id="数据库的二级映像功能和数据独立性"><a href="#数据库的二级映像功能和数据独立性" class="headerlink" title="数据库的二级映像功能和数据独立性"></a>数据库的二级映像功能和数据独立性</h3><ol><li>外模式&#x2F;模式映象 ：保证数据逻辑独立性。</li><li>模式&#x2F;内模式映象 ：保证数据物理独立性。</li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h3><ol><li><p>第一类是概念模型</p><p>按用户的观点对数据和信息建模，是对现实世界的第一层抽象，又称信息模型，它通过各种概念来描述现实世界的事物以及事物之间的联系，主要用于数据库设计。</p></li><li><p>第二类是逻辑模型、物理模型。</p><ul><li><p>逻辑模型</p><p>是概念模型的数据化，是事物以及事物之间联系的数据描述，提供了表示和组织数据的方法，主要的逻辑模型有层次模型、网状模型、关系模型。</p></li><li><p>物理模型</p><p>是对数据最底层的抽象，它描述数据在系统内部的表示方式和存取方法，如数据在磁盘上的存储方式和存取方法，是面向计算机系统的，由数据库管理系统具体实现。</p></li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/3.png?raw=true" alt="3.png"></p><h3 id="数据模型组成要素"><a href="#数据模型组成要素" class="headerlink" title="数据模型组成要素"></a>数据模型组成要素</h3><ol><li>数据结构：用于描述系统的静态特性，是所研究的对象类型的集合，数据模型按其数据结构分为层次模型、网状模型和关系模型等。</li><li>数据操作：用于描述系统的动态特性，是指对数据库中各种对象及对象的实例允许执行的操作的集合，包括对象的创建、修改和删除，对对象实例的检索、插入、删除、修改及其它有关操作等。</li><li>数据完整性约束：是一组完整性约束规则的集合，完整性约束规则是给定数据模型中数据及其联系所具有的制约和依存的规则。</li></ol><h3 id="层次，网状，关系模型"><a href="#层次，网状，关系模型" class="headerlink" title="层次，网状，关系模型"></a>层次，网状，关系模型</h3><ol><li>层次模型：树</li><li>网状模型：图</li><li>关系模型：二维表。二维表由行和列组成。</li></ol><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>关系：关系就是表(Table),在关系数据库中，一个关系存储为一个数据表。 </p></li><li><p>元组：表中一行(Row)为一个元组（记录），元组的各个分量对应于关系的各个属性。</p></li><li><p>属性：表中的列称为属性，对应数据表中的字段。 </p></li><li><p>域：属性的取值范围。 </p></li><li><p>关系模式：对关系的描述称为关系模式。</p><p>格式：关系名(属性名1,属性名2,…属性名n)</p></li><li><p>候选码：属性或属性组，其值可唯一标识其对应元组。</p></li><li><p>主关键字（主键）：在候选码中选择一个作为主键(Primary Key)。</p></li><li><p>外关键字（外键）：在一个关系中的属性或属性组不是该关系的主键，但它是另一个关系的主键，称为外键(Foreign Key)。</p></li></ol><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><ol><li>选择：指选出满足给定条件的记录，它是从行的角度进行的单目运算，运算对象是一个表，运算结果形成一个新表。</li><li>投影：是选择表中满足条件的列，它是从列的角度进行的单目运算。</li><li>连接：是将两个表中的行按照一定的条件横向结合生成的新表。</li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库的设计基本步骤"><a href="#数据库的设计基本步骤" class="headerlink" title="数据库的设计基本步骤"></a>数据库的设计基本步骤</h3><ol><li>需求分析阶段</li><li>概念结构设计阶段：形成一个独立于具体数据库管理系统的概念模型，即设计E-R模型。</li><li>逻辑结构设计阶段：将概念结构转换为某个具体的数据库管理系统所支持的数据模型。</li><li>物理结构设计阶段：为逻辑数据模型选取一个最适合应用环境的物理结构，包括存储结构和存取方法等。</li><li>数据库实施阶段：根据逻辑设计和物理设计的结果建立数据库。</li><li>数据库运行和维护阶段</li></ol><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><ol><li>实体：客观存在并可相互区别的事物称为实体，实体用矩形框表示，框内为实体名。</li><li>属性：实体所具有的某一特性称为属性，属性采用椭圆框表示，框内为属性名，并用无向边与其相应实体连接。</li><li>实体型：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。例如，学生(学号, 姓名, 性别, 出生日期, 专业, 班号, 总学分)就是一个实体型。</li><li>实体集：同型实体的集合称为实体集，例如全体学生记录就是一个实体集。</li><li>联系：实体之间的联系，可分为一对一的联系、一对多的联系、多对多的联系。实体间的联系采用菱形框表示，联系以适当的含义命名，名字写在菱形框中，用无向边将参加联系的实体矩形框分别与菱形框相连，并在连线上标明联系的类型，即1—1、1—n或m—n。如果联系也具有属性，则将属性与菱形也用无向边连上。<ul><li>(1) 一对一的联系(1:1)例如，一个班只有一个正班长，而一个正班长只属于一个班，班级与正班长两个实体间具有一对一的联系。</li><li>(2) 一对多的联系(1:n)例如，一个班可有若干学生，一个学生只能属于一个班，班级与学生两个实体间具有一对多的联系。</li><li>(3) 多对多的联系(m:n)例如，一个学生可选多门课程，一门课程可被多个学生选修， 学生与课程两个实体间具有多对多的联系。</li></ul></li></ol><h1 id="第二章-Oracle数据库"><a href="#第二章-Oracle数据库" class="headerlink" title="第二章 Oracle数据库"></a>第二章 Oracle数据库</h1><h2 id="Oracle-12c数据库的特性"><a href="#Oracle-12c数据库的特性" class="headerlink" title="Oracle 12c数据库的特性"></a>Oracle 12c数据库的特性</h2><ol><li>. 云端数据库整合的全新多租户架构</li><li>支持行式存储与列式存储并存的内存数据库</li><li>与大数据的高度集成</li><li>使Oracle数据库成为私有云和公有云部署的理想平台</li><li>数据自动优化</li><li>深度安全防护</li><li></li></ol><h2 id="Oracle-12c数据库安装与卸载（未完成）"><a href="#Oracle-12c数据库安装与卸载（未完成）" class="headerlink" title="Oracle 12c数据库安装与卸载（未完成）"></a>Oracle 12c数据库安装与卸载（未完成）</h2><p>参考视频：</p><p><a href="https://www.bilibili.com/video/BV1fZ4y1C7HS/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">安装</a></p><p><a href="https://www.bilibili.com/video/BV1Hp4y1y7F9/?spm_id_from=333.337.search-card.all.click">卸载</a>：建议跟着书上卸载，亲测有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.保存脚本文件</span><br><span class="line">select name from score where grade = 92;</span><br><span class="line">save D:\name.sql</span><br><span class="line"></span><br><span class="line">2.调用脚本文件</span><br><span class="line">get D:\name.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-创建数据库"><a href="#第三章-创建数据库" class="headerlink" title="第三章 创建数据库"></a>第三章 创建数据库</h1><h2 id="Oracle-数据库的体系结构"><a href="#Oracle-数据库的体系结构" class="headerlink" title="Oracle 数据库的体系结构"></a>Oracle 数据库的体系结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>逻辑结构包括表空间、段、盘区、数据块、表、其他逻辑对象等。</p><ol><li>表空间：是Oracle数据库中数据的逻辑组织单位，通过表空间来组织数据库中的数据，数据库逻辑上由一个或多个表空间组成，表空间物理上是由一个或多个数据文件组成。</li><li>段、盘区和数据块<ul><li>段：是按照不同的处理性质，在表空间划分出不同区域，用于存放不同的数据。</li><li>盘区：由连续分配的相邻数据块组成。</li><li>数据块：是数据库中最小的、最基本的存储单位。</li></ul></li><li>表：是数据库中存放用户数据的对象，它包含一组固定的列，表中的列描述该表所跟踪的实体的属性，每个列都有一个名字和若干个属性。</li><li>索引：是帮助用户在表中快速地查找记录的数据库结构，既可以提高数据库性能，又能够保证列值的唯一性。</li><li>用户：账号虽然不是数据库中的一个物理结构，但它与数据库中的对象有着重要的关系，这是因为用户拥有数据库的对象。</li><li>用户的方案：用户账号拥有的对象集</li></ol><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><ol><li>数据文件：是用来存放数据库数据的物理文件,文件后缀名为”.DBF”。</li><li>重做日志文件</li><li>控制文件：用于记录和维护整个数据库的全局物理结构，它是一个二进制文件，文件后缀名为”.CTL”。</li></ol><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><ol><li>实例</li><li>内存结构</li><li>进程：是操作系统中一个独立的可以调度的活动，用于完成指定的任务，进程可看作由一段可执行的程序、程序所需要的相关数据和进程控制块组成。有用户进程、服务器进程、后台进程。</li></ol><h2 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h2><p>书上P63</p><h1 id="第四章-创建和使用表"><a href="#第四章-创建和使用表" class="headerlink" title="第四章 创建和使用表"></a>第四章 创建和使用表</h1><h2 id="表的基本概念"><a href="#表的基本概念" class="headerlink" title="表的基本概念"></a>表的基本概念</h2><h3 id="表与表结构"><a href="#表与表结构" class="headerlink" title="表与表结构"></a>表与表结构</h3><ol><li>表：是数据库中存储数据的数据库对象，每个数据库包含了若干个表，表由行和列组成。</li><li>表结构：包含一组固定的列，列由数据类型、长度、允许Null值等组成。</li><li>记录 ：每个表包含若干行数据，一行为一个记录。</li><li>字段： 表中每列称为字段。</li><li>空值(Null)：通常表示未知、不可用或将在以后添加的数据。</li><li>关键字：用于唯一标识记录</li><li>候选关键字：如果表中记录的某一字段或字段组合能唯一标识记录，则该字段或字段组合称为候选关键字。</li><li>主关键字（主键）：合能唯一标识记录，则该字段或字段组合称为候选关键字(Candidate Key)。如果一个表有多个候选关键字，则选定其中的一个为主关键字</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>数值型</li></ol><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>NUMBER[(&lt;总位数&gt;[, &lt;小数点右边的位数&gt;)]</td><td>可变长度数值列，允许值为0、正数和负数，总位数默认为38，小数点右边的位数默认为0。</td></tr><tr><td>float</td><td>FLOAT[(&lt;数值位数&gt;)]</td><td>浮点型数值列</td></tr></tbody></table><ol start="2"><li><p>字符型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>CHAR[(&lt;长度&gt;[BYTE|CHAR])]</td><td>固定长度字符域，最大长度为2000字节。</td></tr><tr><td>nchar</td><td>NCHAR[(&lt;长度&gt;)]</td><td>多字节字符集的固定长度字符域，最多为2000个字符或2000字节。</td></tr><tr><td>varchar2</td><td>VARCHAR2[(&lt;长度&gt;[BYTE|CHAR])]</td><td>可变长度字符域，最大长度为4000字节。</td></tr><tr><td>nvarchar2</td><td>NVARCHAR2[(&lt;长度&gt;)]</td><td>多字节字符集的可变长度字符域，最多为4000个字符或4000字节。</td></tr><tr><td>long</td><td>LONG</td><td>可变长度字符域，最大长度为2GB。</td></tr></tbody></table></li><li><p>日期型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>DATE</td><td>存储全部日期和时间的固定长度字符域，长度为7字节，查询时日期默认格式为DD-MON-RR，除非通过设置NLS_DATE_FORMAT参数取代默认格式。</td></tr><tr><td>timestamp</td><td>TIMESTAMP  [(&lt;位数&gt;)]</td><td>用亚秒的粒度存储一个日期和时间，参数是亚秒粒度的位数，默认为6，范围为0~9。</td></tr></tbody></table></li><li><p>其他数据类型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>blob</td><td>BLOB</td><td>二进制大对象，最大长度为4GB.</td></tr><tr><td>clob</td><td>CLOB</td><td>字符大对象，最大长度为4GB.</td></tr><tr><td>bfile</td><td>BFILE</td><td>外部二进制文件，大小由操作系统决定。</td></tr></tbody></table></li></ol><h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><p>创建表的核心是定义表结构及设置表和列的属性，创建表以前，首先要确定表名和表的属性，表所包含的列名、列的数据类型、长度、是否为空、是否主键等，这些属性构成表结构。</p><h2 id="创建表、修改表和删除表"><a href="#创建表、修改表和删除表" class="headerlink" title="创建表、修改表和删除表"></a>创建表、修改表和删除表</h2><p>图形化操作,比较简单：见P73-P77</p><h2 id="表数据的操作"><a href="#表数据的操作" class="headerlink" title="表数据的操作"></a>表数据的操作</h2><p>图形化操作,比较简单：见P77-P79</p><h1 id="第五章-PL-SQL基础"><a href="#第五章-PL-SQL基础" class="headerlink" title="第五章 PL&#x2F;SQL基础"></a>第五章 PL&#x2F;SQL基础</h1><h2 id="SQL-和-PL-SQL"><a href="#SQL-和-PL-SQL" class="headerlink" title="SQL 和 PL&#x2F;SQL"></a>SQL 和 PL&#x2F;SQL</h2><ol><li><p>SQL语言的分类</p><ul><li>数据定义语言（DDL）：用于定义数据库对象，对数据库、数据库中的表、视图、索引等数据库对象进行建立和删除，DDL包括CREATE、ALTER、DROP等语句。</li><li>数据操纵语言（DML）：用于对数据库中的数据进行插入、修改、删除等操作，DML包括INSERT、UPDATE、DELETE等语句。</li><li>数据查询语言（ DQL）：用于对数据库中的数据进行查询操作，例如用 SELECT语句进行查询操作。</li><li>数据控制语言（ DCL）：用于控制用户对数据库的操作权限，DCL包括GRANT、REVOKE等语句。</li></ul></li><li><p>SQL语言的特点：</p><ul><li>高度非过程化</li><li>应用于数据库的语言</li><li>面向集合的操作方式</li><li>既是自含式语言、又是嵌入式语言</li><li>综合统一</li><li>语言简洁，易学易用</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/4.png?raw=true" alt="4.png"></p></li></ol><h2 id="在PL-SQL中的数据定义语言"><a href="#在PL-SQL中的数据定义语言" class="headerlink" title="在PL&#x2F;SQL中的数据定义语言"></a>在PL&#x2F;SQL中的数据定义语言</h2><h3 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h3><p>一般情况下使用图形界面创建数据库</p><ol><li><p>创建数据库</p><ul><li>设定实例标识符</li><li>设定数据库管理员的验证方法</li><li>创建初始化参数</li><li>启动SQL*Plus并以SYSDBA连接到Oracle实例</li><li>启动实例</li><li>使用CREATE DATABASE语句创建数据库</li></ul></li><li><p>修改数据库 </p><p>修改数据库使用ALTER DATABASE语句</p></li><li><p>删除数据库，语法格式：</p><p>DROP DATABASE database_name</p></li></ol><h3 id="表空间操作语句"><a href="#表空间操作语句" class="headerlink" title="表空间操作语句"></a>表空间操作语句</h3><ol><li>创建表空间：CREATE TABLESPACE &lt;表空间名&gt;</li><li>管理表空间：ALTER TABLESPACE &lt;表空间名&gt;</li><li>删除表空间：DROP TABLESPACE &lt;表空间名&gt;</li></ol><h3 id="表操作语句"><a href="#表操作语句" class="headerlink" title="表操作语句"></a>表操作语句</h3><ol><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [&lt;用户方案名&gt;.] &lt;表名&gt;(    </span><br><span class="line"></span><br><span class="line">&lt;列名1&gt;  &lt;数据类型&gt;  [DEFAULT &lt;默认值&gt;]  [&lt;列约束&gt;] </span><br><span class="line"></span><br><span class="line">&lt;列名2&gt;  &lt;数据类型&gt;  [DEFAULT &lt;默认值&gt;]  [&lt;列约束&gt;]    </span><br><span class="line"></span><br><span class="line">[,…n]    </span><br><span class="line"></span><br><span class="line">&lt;表约束&gt;[,…n]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">create table student(</span><br><span class="line">  sno char(6) not null primary key,</span><br><span class="line">  sname char(12) not null,</span><br><span class="line">  ssex char(3) not null,</span><br><span class="line">  sbirthday date not null,</span><br><span class="line">  speciality char(18) null,</span><br><span class="line">  sclass char(6) null,</span><br><span class="line">  tc number null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE [&lt;用户方案名&gt;.] &lt;表名&gt;</span><br><span class="line">[ ADD(&lt;新列名&gt; &lt;数据类型&gt; [DEFAULT &lt;默认值&gt;][列约束],…n) ]/*增加新列*/</span><br><span class="line">[ MODIFY([ &lt;列名&gt; [&lt;数据类型&gt;] [DEFAULT &lt;默认值&gt;][列约束],…n) ]  /*修改已有列的属性*/</span><br><span class="line">[ STORAGE &lt;存储参数&gt; ]  /*修改存储特征*/</span><br><span class="line">[&lt;DROP子句&gt; ]/*删除列或约束条件*/</span><br><span class="line"></span><br><span class="line">其中，&lt;DROP子句&gt;用于从表中删除列或约束。</span><br><span class="line">&lt;DROP子句&gt;::=</span><br><span class="line">DROP </span><br><span class="line">&#123;</span><br><span class="line">COLUMN &lt;列名&gt;</span><br><span class="line">∣PRIMARY [KEY]</span><br><span class="line">∣UNIQUE (&lt;列名&gt;,…n) </span><br><span class="line">∣CONSTRAINT &lt;约束名&gt;</span><br><span class="line">∣[ CASCADE ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">(1)在student表中增加一列remarks(备注)。</span><br><span class="line">ALTER TABLE student ADD remarks varchar(100);</span><br><span class="line"></span><br><span class="line">(3)在student表中删除列remarks。</span><br><span class="line"></span><br><span class="line">ALTER TABLE student DROP COLUMN remarks;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP TABLE table_name</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure></li></ol><h2 id="在PL-SQL中的数据操作语言"><a href="#在PL-SQL中的数据操作语言" class="headerlink" title="在PL&#x2F;SQL中的数据操作语言"></a>在PL&#x2F;SQL中的数据操作语言</h2><ol><li><p>插入语句：INSERT语句用于向数据库的表插入一行，由VALUES给定该行各列的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">INSERT INTO &lt;表名&gt;[(&lt;列名1&gt;,&lt;列名2&gt;,…n)] VALUES(&lt;列值1&gt;,&lt;列值2&gt;,…n)</span><br><span class="line"></span><br><span class="line">INSERT INTO student VALUES(&#x27;181001&#x27;,&#x27;宋德成&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19971105&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,52);</span><br><span class="line">INSERT INTO student VALUES(&#x27;181002&#x27;,&#x27;何静&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19980427&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,50);</span><br><span class="line">INSERT INTO student VALUES(&#x27;181004&#x27;,&#x27;刘文韬&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19980513&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,52);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184001&#x27;,&#x27;李浩宇&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19971024&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,50);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184002&#x27;,&#x27;谢丽君&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19980116&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,48);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184003&#x27;,&#x27;陈春玉&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19970809&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,52);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改语句：UPDATE语句用于修改表中指定记录的列值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">UPDATE &lt;表名&gt; </span><br><span class="line">SET &lt;列名&gt;=&#123;&lt;新值&gt;|&lt;表达式&gt;&#125; [,…n] </span><br><span class="line">[WHERE &lt;条件表达式&gt;]</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">update student set tc=tc+2;</span><br><span class="line"></span><br><span class="line">update student set tc=tc+2</span><br><span class="line">  WHERE sname=&#x27;谢丽君&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>删除语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.DELETE语句</span><br><span class="line">语法格式：</span><br><span class="line">DELETE FROM &lt;表名&gt; [WHERE &lt;条件表达式&gt;];</span><br><span class="line">若省略WHERE子句，则删除所有行。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">DELETE FROM student</span><br><span class="line">   WHERE sno=&#x27;184003&#x27;;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2.TRANCATE TABLE语句（不删除表）：删除一个表里的全部记录，释放表的存储空间</span><br><span class="line">语法格式：</span><br><span class="line">TRUNCATE TABLE &lt;表名&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="在PL-SQL中的数据查询语言"><a href="#在PL-SQL中的数据查询语言" class="headerlink" title="在PL&#x2F;SQL中的数据查询语言"></a>在PL&#x2F;SQL中的数据查询语言</h2><p>实现选择、投影和连接等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">SELECT &lt;列&gt;           /*SELECT子句，指定列*/</span><br><span class="line">   FROM  &lt;表或视图&gt;          /*FROM子句，指定表或视图*/</span><br><span class="line">   [ WHERE  &lt;条件表达式&gt; ]     /*WHERE子句，指定行*/</span><br><span class="line">   [ GROUP BY &lt;分组表达式&gt; ]      /*GROUP BY子句，指定分组表达式*/</span><br><span class="line">   [ HAVING &lt;分组条件表达式&gt; ]        /*HAVING子句，指定分组统计条件*/</span><br><span class="line">   [ ORDER BY &lt;排序表达式&gt; [ ASC | DESC ]]/*ORDER子句，指定排序表达式和顺序*/</span><br></pre></td></tr></table></figure><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><ol><li><p>投影指定的列：使用SELECT语句可选择表中的一个列或多个列，如果是多个列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式</span><br><span class="line">SELECT &lt;列名1&gt; [ , &lt;列名2&gt; [,…n] ]</span><br><span class="line">   FROM &lt;表名&gt;</span><br><span class="line">   [WHERE &lt;条件表达式&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT sno, sname, sclass</span><br><span class="line">  FROM student;</span><br></pre></td></tr></table></figure></li><li><p>投影全部列：使用*号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student;</span><br></pre></td></tr></table></figure></li><li><p>修改查询结果的列标题：取别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实例：：</span><br><span class="line">SELECT sno AS 学号, sname AS 姓名, speciality AS 专业</span><br><span class="line">  FROM student;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>计算列值：使用SELECT子句对列进行查询时，可以对数字类型的列进行计算，可以使用加(＋)、减(－)、乘(*)、除(&#x2F;)等算术运送符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">SELECT &lt;表达式&gt; [ , &lt;表达式&gt; ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>去掉重复行：掉结果集中的重复行可使用DISTINCT关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">SELECT DISTINCT &lt;列名&gt; [ , &lt;列名&gt;…]</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT DISTINCT sclass</span><br><span class="line">FROM student;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="选择查询"><a href="#选择查询" class="headerlink" title="选择查询"></a>选择查询</h3><p>投影查询用于选择行，选择查询通过WHERE子句实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">WHERE &lt;条件表达式&gt;</span><br><span class="line"></span><br><span class="line">（下面的不用看）</span><br><span class="line">其中，&lt;条件表达式&gt;为查询条件，格式为：</span><br><span class="line">&lt;条件表达式&gt;::=</span><br><span class="line">     &#123; [ NOT ] &lt;判定运算&gt; | (&lt;条件表达式&gt; ) &#125;</span><br><span class="line">     [ &#123; AND | OR &#125; [ NOT ] &#123; &lt;判定运算&gt; | (&lt;条件表达式&gt;) &#125; ]</span><br><span class="line">     [ ,…n ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>表达式比较：共有7个运算符：&#x3D;（等于）、&lt;（小于）、&lt;&#x3D;（小于等于）、&gt;（大于）、&gt;&#x3D;（大于等于）、&lt;&gt;（不等于）、!&#x3D;（不等于）</p></li><li><p>指定范围 ：BETWEEN、NOT BETWEEN、IN是用于指定范围的三个关键字，用于查找字段值在（或不在）指定范围的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">&lt;表达式&gt; [ NOT ] BETWEEN &lt;表达式1&gt; AND &lt;表达式2&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sbirthday NOT BETWEEN TO_DATE(&#x27;19980101&#x27;,&#x27;YYYYMMDD&#x27;) AND TO_DATE(&#x27;19981231&#x27;,&#x27;YYYYMMDD&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>模式匹配：使用LIKE谓词，LIKE谓词用于指出一个字符串是否与指定的字符串相匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">&lt;字符串表达式1&gt; [ NOT ] LIKE &lt;字符串表达式2&gt; [ ESCAPE &#x27;&lt;转义字符&gt;’ ]</span><br><span class="line"></span><br><span class="line">在使用LIKE谓词时，&lt;字符串表达式2&gt;可以含有通配符，通配符有以下两种（模糊查询）：</span><br><span class="line">    %：代表0或多个字符。</span><br><span class="line">    _：代表一个字符。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sname LIKE &#x27;谢%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>空值判断：判定一个表达式的值是否为空值时，使用IS NULL关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表达式&gt; IS [ NOT ] NULL</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT * </span><br><span class="line">  FROM score</span><br><span class="line">  WHERE grade IS null;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分组查询和统计计算"><a href="#分组查询和统计计算" class="headerlink" title="分组查询和统计计算"></a>分组查询和统计计算</h3><ol><li><p>聚合函数：包括COUNT、SUM、AVG、MAX、MIN等函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.COUNT函数;组中满足条件的行数或总行</span><br><span class="line">语法格式：</span><br><span class="line">COUNT ( &#123; [ ALL | DISTINCT ] &lt;表达式&gt; &#125; | * )</span><br><span class="line">    ALL表示对所有值进行计算，ALL为默认值，</span><br><span class="line">    DISTINCT指去掉重复值，</span><br><span class="line">    COUNT函数用于计算时忽略NULL值。</span><br><span class="line">实例：</span><br><span class="line">SELECT COUNT(*) AS 总人数</span><br><span class="line">  FROM student;</span><br><span class="line"></span><br><span class="line">2.SUM和AVG函数</span><br><span class="line">SUM函数用于求出一组数据的总和</span><br><span class="line">AVG函数用于求出一组数据的平均值</span><br><span class="line">SUM / AVG函数用于计算时忽略NULL值。</span><br><span class="line">语法格式：</span><br><span class="line">SUM / AVG ( [ ALL | DISTINCT ] &lt;表达式&gt; )</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT SUM(stockqt) AS课程1201总分</span><br><span class="line">  FROM score</span><br><span class="line">  WHERE cno=’1201’;</span><br><span class="line"></span><br><span class="line">3.MAX和MIN函数</span><br><span class="line">语法格式：</span><br><span class="line">MAX / MIN ( [ ALL | DISTINCT ] &lt;表达式&gt; )</span><br></pre></td></tr></table></figure></li><li><p>GROUP BY子句：用于指定需要分组的列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">GROUP BY [ ALL ] &lt;分组表达式&gt; [,…n]</span><br><span class="line">其中，分组表达式通常包含字段名，ALL显示所有分组。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT cno AS 课程号, MAX(grade)AS 最高分,MIN (grade)AS 最低分, AVG(grade)AS 平均成绩</span><br><span class="line">  FROM score</span><br><span class="line">  WHERE NOT grade IS null</span><br><span class="line">  GROUP BY cno;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>HAVING子句：对分组按指定条件进一步进行筛选。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ HAVING &lt;条件表达式&gt; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当WHERE子句、GROUP BY子句、HAVING子句、ORDER BY子句在一个SELECT语句中时，执行顺序如下：</span><br><span class="line">（1）执行WHERE子句，在表中选择行。</span><br><span class="line">（2）执行GROUP BY子句，对选取行进行分组。</span><br><span class="line">（3）执行聚合函数。</span><br><span class="line">（4）执行HAVING子句，筛选满足条件的分组。</span><br><span class="line">（5）执行ORDER BY子句，进行排序。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>ORDER BY子句进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">order by &lt;排序表达式&gt; [asc|desc]</span><br><span class="line">asc为升序，desc为降序</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sclass=&#x27;201836&#x27;</span><br><span class="line">  ORDER BY sbirthday DESC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第六章-PL-SQL查询高级"><a href="#第六章-PL-SQL查询高级" class="headerlink" title="第六章 PL&#x2F;SQL查询高级"></a>第六章 PL&#x2F;SQL查询高级</h1><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ol><li><p>使用连接谓词指定的连接：连接条件由比较运算符在WHERE子句中给出（连接谓词）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[&lt;表名1.&gt;] &lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2.&gt;] &lt;列名2&gt;</span><br><span class="line"></span><br><span class="line">1.等值连接：表之间通过比较运算符“=”连接起来</span><br><span class="line">SELECT student.*, score.*</span><br><span class="line">  FROM student, score</span><br><span class="line">  WHERE student.sno=score.sno;</span><br><span class="line"></span><br><span class="line">2.自然连接：目标列中去除相同的字段名</span><br><span class="line">SELECT student.*, score.cno, score.grade</span><br><span class="line">  FROM student, score</span><br><span class="line">  WHERE student.sno=score.sno;</span><br><span class="line"></span><br><span class="line">3.自连接：将同一个表进行连接</span><br><span class="line">SELECT a.cno, a.sno, a.grade</span><br><span class="line">  FROM score a, score b</span><br><span class="line">  WHERE a.cno=&#x27;1201&#x27; AND a.grade&gt;b.grade AND b.sno=&#x27;181002&#x27; AND b.cno=&#x27;1201&#x27;</span><br><span class="line">  ORDER BY a.grade DESC;</span><br></pre></td></tr></table></figure></li><li><p>使用JOIN关键字指定的连接：增强了表的连接运算能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表名&gt; &lt;连接类型&gt; &lt;表名&gt; ON &lt;条件表达式&gt;</span><br><span class="line">| &lt;表名&gt; CROSS JOIN &lt;表名&gt;</span><br><span class="line">| &lt;连接表&gt;</span><br><span class="line"></span><br><span class="line">其中，&lt;连接类型&gt;的格式为：</span><br><span class="line">&lt;连接类型&gt;::=</span><br><span class="line">      [ INNER | &#123; LEFT | RIGHT | FULL &#125; [ OUTER ] CROSS JOIN</span><br><span class="line">用JOIN关键字指定连接的多个表的表名，用ON子句指定连接条件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.内连接（INNER）：内连接是系统默认的，可省略INNER关键字。</span><br><span class="line">SELECT a.sno, a.sname, c.cname, b.grade</span><br><span class="line">  FROM student a JOIN score b ON a.sno=b.sno JOIN course c ON b.cno=c.cno</span><br><span class="line">  WHERE c.cname=&#x27;数据库系统&#x27; AND b.grade&gt;=84;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.外连接（OUTER）</span><br><span class="line">●  左外连接（LEFT OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括左表的所有行；</span><br><span class="line">SELECT tname, cno</span><br><span class="line">  FROM teacher LEFT JOIN lecture ON (teacher.tno=lecture.tno);</span><br><span class="line"></span><br><span class="line">●  右外连接（RIGHT OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括右表的所有行；</span><br><span class="line">SELECT tno, cname</span><br><span class="line">  FROM lecture RIGHT JOIN course ON (course.cno=lecture.cno);</span><br><span class="line"></span><br><span class="line">●  完全外连接（FULL OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括两个表的所有行。</span><br><span class="line">SELECT EmplName, DeptName</span><br><span class="line">  FROM Employee FULL JOIN Department ON Employee.DeptID=Department.DeptID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.交叉连接（CROSS）</span><br><span class="line">SELECT EmplName, DeptName</span><br><span class="line">  FROM Employee CROSS JOIN Department;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><p>集合查询将两个或多个SQL语句的查询结果集合并起来，利用集合进行查询处理以完成特定的任务，使用四个集合操作符(Set Operator) UNION、UNION ALL、INTERSECT和MINUS，将两个或多个SQL查询语句结合成一个单独SQL查询语句。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/5.png?raw=true" alt="5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;SELECT查询语句1&gt;</span><br><span class="line">&#123;UNION | UNION A LL | INTERSECT | MINUS&#125;</span><br><span class="line">&lt;SELECT查询语句2&gt;</span><br><span class="line">说明：</span><br><span class="line">●  在集合查询中，需要遵循的规则为：</span><br><span class="line">●  在构成复合查询的各个单独的查询中，列数和列的顺序必须匹配，数据类型必须兼容。</span><br><span class="line">●  用户不许在复合查询所包含的任何单独的查询中使用ORDER BY子句</span><br><span class="line">●  用户不许在BLOB、LONG等大数据对象上使用集合操作符</span><br><span class="line">●  用户不许在集合操作符SELECT列表中使用嵌套表或者数组集合。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.UNION操作符：将第一个查询中的所有行与第二个查询的所有行相加，消除重复行并且返回结果。</span><br><span class="line">SELECT sno, sname, ssex</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE ssex=&#x27;女&#x27;</span><br><span class="line">UNION</span><br><span class="line">SELECT a.sno, a.sname, a.ssex </span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br><span class="line"></span><br><span class="line">2.INTERSECT操作符：获取两个查询，对值进行汇总，并且返回同时存在于两个结果集中的行。</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;8001&#x27;</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br><span class="line"></span><br><span class="line">3.MINUS操作符：返回所有从第一个查询中有但是第二个查询中没有的那些行。</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;8001&#x27;</span><br><span class="line">MINUS</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询（嵌套查询）：将一个查询块嵌套在另一个查询块的子句指定条件中的查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">SELECT * </span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sno IN</span><br><span class="line">    (SELECT sno </span><br><span class="line">       FROM score </span><br><span class="line">       WHERE cno=&#x27;1004&#x27;</span><br><span class="line">     );</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>IN子查询：使用IN谓词实现子查询和父查询的连接。</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查询选修了课程号为8001的课程的学生情况。</span><br><span class="line"></span><br><span class="line">SELECT * </span><br><span class="line">FROM student</span><br><span class="line">WHERE sno IN</span><br><span class="line">  (SELECT sno </span><br><span class="line">    FROM score </span><br><span class="line">    WHERE cno=&#x27;8001&#x27; </span><br><span class="line">   );</span><br></pre></td></tr></table></figure><ol start="2"><li><p>比较子查询：比较子查询是指父查询与子查询之间用比较运算符进行关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表达式&gt; &#123; &lt; | &lt;= | = | &gt; | &gt;= | != | &lt;&gt;  &#125; &#123; ALL | SOME | ANY &#125; ( &lt;子查询&gt; )</span><br><span class="line">ALL指定表达式要与子查询结果集中每个值都进行比较，当表达式与子查询结果集中每个值都满足比较关系时，才返回TRUE，否则返回FALSE；</span><br><span class="line">SOME和ANY指定表达式要只要与子查询结果集中某个值满足比较关系时，就返回TRUE，否则返回FALSE。</span><br><span class="line"></span><br><span class="line">查询比所有通信专业学生年龄都小的学生。</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sbirthday &gt;ALL</span><br><span class="line">    (SELECT sbirthday </span><br><span class="line">       FROM student  </span><br><span class="line">       WHERE speciality=&#x27;通信&#x27;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>EXISTS子查询（NOT EXISTS相反）：只用于测试子查询是否返回行，若子查询返回一个或多个行，则EXISTS返回TRUE，否则返回FALSE。</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ NOT ] EXISTS ( &lt;子查询&gt; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询选修1004课程的学生姓名。</span><br><span class="line"></span><br><span class="line">SELECT sname AS 姓名</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE EXISTS </span><br><span class="line">    (SELECT *</span><br><span class="line">       FROM score</span><br><span class="line">       WHERE score.sno=student.sno AND cno=&#x27;1004&#x27;</span><br><span class="line">     );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第七章-视图（View）"><a href="#第七章-视图（View）" class="headerlink" title="第七章 视图（View）"></a>第七章 视图（View）</h1><p>视图(View)通过SELECT查询语句定义，它是从一个或多个表(或视图)导出的，用来导出视图的表称为基表(Base Table)，导出的视图称为虚表。在数据库中，只存储视图的定义，不存放视图对应的数据，这些数据仍然存放在原来的基表中。</p><p>视图有以下优点:</p><ul><li>方便用户的查询和处理，简化数据操作。</li><li>简化用户的权限管理，增加安全性。</li><li>便于数据共享。</li><li>屏蔽数据库的复杂性。</li><li>可以重新组织数据。</li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CREATE [OR REPLACE] VIEW [ schema_name . ] view_name [ (column [ ,...n ] ) ]</span><br><span class="line">[ WITH &lt;view_attribute&gt;[ ,…n ] ]</span><br><span class="line">    AS select_statement</span><br><span class="line">    [ WITH CHECK OPTION ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"> ● view_name：视图名称；scheme是数据库架构名</span><br><span class="line"> ● column：列名，此为视图中包含的列，最多可引用1024个列。</span><br><span class="line"> ● WITH 子句：指出视图的属性</span><br><span class="line"> ● select_statement：定义视图的SELECT语句，可在该语句中使用多个表或视图。</span><br><span class="line"> ● WITH CHECK OPTION：指出在视图上进行的修改都要符合select_statement所指定的准则。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建vwStudentScore视图，包括学号、姓名、性别、专业、课程号、成绩，且专业为计算机。</span><br><span class="line">CREATE OR REPLACE VIEW vwStudentScore</span><br><span class="line">  AS </span><br><span class="line">  SELECT a.sno, a.sname, a.ssex, a.speciality, b.cno, b.grade </span><br><span class="line">    FROM student a, score b</span><br><span class="line">    WHERE a.sno=b.sno AND a.speciality=&#x27;计算机&#x27;</span><br><span class="line">    WITH CHECK OPTION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用SELECT语句对vwStudentScore视图进行查询：</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">  FROM vwStudentScore;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改视图定义"><a href="#修改视图定义" class="headerlink" title="修改视图定义"></a>修改视图定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alter view 只是用于重新编译和验证视图，修改视图的定义就是重新创建视图。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW vwStudentScore</span><br><span class="line">  AS </span><br><span class="line">  SELECT a.sno, a.sname, a.ssex, a.speciality, b.cno, b.grade </span><br><span class="line">    FROM student a, score b</span><br><span class="line">    WHERE a.sno=b.sno</span><br><span class="line">    WITH CHECK OPTION;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP VIEW &lt;视图名&gt;</span><br><span class="line"></span><br><span class="line">DROP VIEW vwStudentCourseScore;</span><br></pre></td></tr></table></figure><p>注：删除视图时，应该由该视图导出的其他视图删去。删除基表时，应该由该视图导出的其他视图删去。</p><h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><ol><li><p>更新视图数据，可更新基表数据。但需要满足以下条件：</p><ul><li>视图没有包含只读属性</li><li>没有使用连接函数，集合函数，组函数。</li><li>创建视图的select语句中没有GROUP BY，ONNECT BY，START WITH子句，DISTINCT关键字。</li><li>创建视图的SELECT语句中不包含从基表列通过计算所得的列。</li></ul></li><li><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用INSERT语句通过视图向基表插入数据。</span><br><span class="line"></span><br><span class="line">INSERT INTO vwCommSpecialityStudent VALUES (&#x27;184006&#x27;,&#x27;吴维明&#x27;,&#x27;男&#x27;,&#x27;1998-03-14&#x27;,&#x27;通信&#x27;,&#x27;201836&#x27;,50);</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用UPDATE语句通过视图修改基表数据。</span><br><span class="line"></span><br><span class="line">UPDATE vwCommSpecialityStudent SET tc=tc+2 </span><br><span class="line">  WHERE sno=&#x27;184006&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用DELETE语句通过视图向基表删除数据。</span><br><span class="line"></span><br><span class="line">DELETE FROM vwCommSpecialityStudent</span><br><span class="line">  WHERE sno=&#x27;184006&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第八章-索引（INDEX）和序列（sequence）"><a href="#第八章-索引（INDEX）和序列（sequence）" class="headerlink" title="第八章 索引（INDEX）和序列（sequence）"></a>第八章 索引（INDEX）和序列（sequence）</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引与书中的目录类似，就像先找到书的目录章节的页数，然后根据页数找到正文中的章节一样，索引也先找到符合条件的行，再直接找到数据库行所对应个的物理地址，从而找到数据库行。</p><ol><li>索引的分类：<ul><li>按存储方法分类，索引可分为B*树索引和位图索引两类。</li><li>按功能和索引对象分类，索引可分为：<ul><li>唯一索引和非唯一索引</li><li>单列索引和复合索引</li><li>逆序索引</li><li>基于函数的索引</li></ul></li></ul></li><li>建立索引的原则：<ul><li>建立索引的作用如下：<ul><li>提高查询速度。</li><li>保证列值的唯一性。</li><li>查询优化依靠索引起作用。</li><li>提高ORDER BY、GROUP BY执行速度。</li></ul></li><li>代价：<ul><li>索引需要占用数据表以外的物理存储空间。</li><li>创建和维护索引要花费一定的时间。</li><li>当对表进行更新操作时，索引需要被重建，这样就降低了数据的维护速度。</li></ul></li><li>建立索引的一般原则<ul><li>根据列的特征合理创建索引</li><li>根据表的大小来创建索引</li><li>限制表中索引的数量</li><li>在表中插入数据后创建索引。</li></ul></li></ul></li></ol><h2 id="创建索引、修改索引和删除索引"><a href="#创建索引、修改索引和删除索引" class="headerlink" title="创建索引、修改索引和删除索引"></a>创建索引、修改索引和删除索引</h2><ol><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">CREATE [UNIQUE∣BITMAP] INDEX        /*索引类型*/</span><br><span class="line">      [&lt;用户方案名&gt;.]&lt;索引名&gt; </span><br><span class="line">  ON  &lt;表名&gt;(&lt;列名&gt; | &lt;列名表达式&gt; [ASC∣DESC] [,…n])</span><br><span class="line">[LOGGING | NOLOGGING]           /*指定是否创建相应的日志记录*/</span><br><span class="line">[COMPUTE STATISTICS]              /*生成统计信息*/</span><br><span class="line">[COMPAESS | NOCOMPRESS]     /*对复合索引进行压缩*/</span><br><span class="line">[TABLESPACE &lt;表空间名&gt;]           /*索引所属表空间*/</span><br><span class="line">[SORT | NOSORT]                      /*指定是否对表进行排序*/</span><br><span class="line">[REVERSE]</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">●  UNIQUE：指定所基于的列(或多列)值必须唯一，默认的索引是非唯一的。</span><br><span class="line">●  BITMAP：指定创建位图索引。</span><br><span class="line">●  &lt;用户方案名&gt;.：包含索引的方案。</span><br><span class="line">●  ON：在指定表的列中创建索引。</span><br><span class="line">●  &lt;列名表达式&gt;：用指定表的列、常数、SQL函数和自定义函数的表达式创建基于函数的索引。</span><br><span class="line">●  [LOGGING | NOLOGGING]：LOGGING选项指规定创建索引时，创建相应的日志。NO LOGGING选项在创建索引时不产生重做日志信息，默认为LOGGING。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">在stsys数据库中score表的grade列上，创建一个索引ixGrade。</span><br><span class="line">CREATE INDEX ixGrade ON score(grade);</span><br><span class="line"></span><br><span class="line">在stsys数据库中student表的sname列和tc列，创建一个复合索引ixNameTc。</span><br><span class="line">CREATE INDEX ixNameTc ON student(sname,tc);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">ALTER INDEX [&lt;用户方案名&gt;.]&lt;索引名&gt;</span><br><span class="line">[LOGGING | NOLOGGING]</span><br><span class="line">[TABLESPACE &lt;表空间名&gt;]</span><br><span class="line">[SORT | NOSORT]</span><br><span class="line">[REVERSE]</span><br><span class="line">[RENAME TO &lt;新索引名&gt;]</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">RENAME TO子句用于修改索引的名称,其余选项与CREATE INDEX语句相同。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">修改创建的索引ixGrade。</span><br><span class="line">ALTER INDEX ixGrade</span><br><span class="line">  RENAME TO ixGradeScore;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP INDEX</span><br><span class="line">&#123; index_name ON  table_or_view_name [ ,...n ] </span><br><span class="line">  | table_or_view_name.index_name [ ,...n ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">删除已建索引ixGradeScore。</span><br><span class="line">DROP INDEX ixGradeScore;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="序列概述"><a href="#序列概述" class="headerlink" title="序列概述"></a>序列概述</h2><p>序列(sequence)是一种数据库对象，定义在数据字典中，用来自动产生一组唯一的序号。序列是一种共享式的对象，多个用户可以共同使用序列中的序号。</p><p>一般序列所生成的整数通常可以用来填充数字类型的主键列，这样当向表中插入数据时，主键列就使用了序列中的序号，从而保证主键的列值不会重复。</p><p>序列的类型:</p><ol><li><p>升序</p><p>序列值由初始值向最大值递增,此为创建序列的默认设置。</p></li><li><p>降序</p><p>序列值由初始值向最小值递减。</p></li></ol><h2 id="创建、使用、修改和删除序列"><a href="#创建、使用、修改和删除序列" class="headerlink" title="创建、使用、修改和删除序列"></a>创建、使用、修改和删除序列</h2><ol><li><p>创建序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE [用户方案名.] &lt;序列名&gt;/*将要创建的序列名称*/</span><br><span class="line">  [INCREMENT BY &lt;数字值&gt;]        /*递增或递减值*/</span><br><span class="line">  [START WITH &lt;数字值&gt;]/*初始值*/</span><br><span class="line">  [MAXVALUE &lt;数字值&gt; | NOMAXVALUE]/*最大值*/</span><br><span class="line">  [MINVALUE &lt;数字值&gt; | NOMINVALUE]    /*最小值*/</span><br><span class="line">  [CYCLE | NOCYCLE]          /*是否循环*/</span><br><span class="line">  [CACHE &lt;数字值&gt; | NOCACHE]/*高速缓冲区设置*/</span><br><span class="line">  [ORDER | NOORDER]                  /*序列号是序列否，按照顺序生成*/</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">● INCREMENT BY</span><br><span class="line">指定该序列每次增加的整数增量。指定为正值则创建升序序列，负值则创建降序序列。</span><br><span class="line">● START WITH</span><br><span class="line">序列的起始值。如果不指定该值，对升序序列使用该序列默认的最小值，对降序序列使用该序列默认的最大值。</span><br><span class="line"> ● MAXVALUE</span><br><span class="line">序列可允许的最大值。如果指定为NOMAXVALUE，则对升序序列使用默认值1.0E27，对降序序序列使用默认值－1。</span><br><span class="line">● MINVALUE</span><br><span class="line">序列可允许的最小值。如果指定为NOMINVALUE，则对升序序列使用默认值1，对降序序序列使用默认值－1.0E26。</span><br><span class="line">● CYCLE</span><br><span class="line">指定该序列即使已经达到最大值或最小值也继续生成整数。当升序序列达到最大值时，下一个生成的值是最小值。当降序序列达到最小值时，下一个生成的值是最大值。如果指定为NOCYCLE，则序列在达到最大值或最小值之后停止生成任何值。</span><br><span class="line">● CACHE</span><br><span class="line">指定要保留在内存中整数的个数。默认要缓存的整数为20个，可以缓存的整数最少为2个。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">创建一个升序序列seqCustomer。</span><br><span class="line">CREATE SEQUENCE seqCustomer</span><br><span class="line">INCREMENT BY 1</span><br><span class="line">START WITH 100001</span><br><span class="line">MAXVALUE 999999</span><br><span class="line">NOCYCLE</span><br><span class="line">NOCACHE</span><br><span class="line">ORDER;</span><br><span class="line"></span><br><span class="line">简单方式：</span><br><span class="line">CREATE SEQUENCE seqCustomer;</span><br></pre></td></tr></table></figure></li><li><p>使用序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1.）nextval：用于获取序列的下一个序号值</span><br><span class="line">语法格式：</span><br><span class="line"> &lt;sequence_name&gt;.nextval</span><br><span class="line"></span><br><span class="line">（2）currval：用于获取序列的当前序号值。</span><br><span class="line">语法格式：</span><br><span class="line">&lt;sequence_name&gt;.currval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"> 向customer表添加记录时，使用创建的序列seqCustomer为表中的主键customerID自动赋值。</span><br><span class="line">创建customer表语句如下。</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer</span><br><span class="line">(</span><br><span class="line">customerID number(6) NOT NULL PRIMARY KEY,</span><br><span class="line">cname char(8) NOT NULL,</span><br><span class="line">address char(40) NULL</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改序列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改序列seqCustomer。</span><br><span class="line">ALTER SEQUENCE seqCustomer</span><br><span class="line">  INCREMENT BY 2;</span><br></pre></td></tr></table></figure></li><li><p>删除序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP SEQUENCE &lt;序列名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">DROP SEQUENCE seqCustomer;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第九章-数据完整性"><a href="#第九章-数据完整性" class="headerlink" title="第九章 数据完整性"></a>第九章 数据完整性</h1><h2 id="数据完整性概述"><a href="#数据完整性概述" class="headerlink" title="数据完整性概述"></a>数据完整性概述</h2><p>通过完整性约束实现数据完整性规则有以下优点：</p><ul><li>完整性规则定义在表上，存储在数据字典中，应用程序的任何数据都必须遵守表的完整性约束。</li><li>当定义或修改完整性约束时，不需要额外编程。</li><li>用户可指定完整性约束是启用或禁用。</li><li>当由完整性约束所实施的事务规则改变时，只需改变完整性约束的定义，所有应用自动地遵守所修改的约束。</li></ul><ol><li><p>域完整性</p><p>域完整性指列数据输入的有效性，又称列完整性，通过CHECK约束、DEFALUT约束、NOT NULL约束、数据类型和规则等实现域完整性。</p></li><li><p>实体完整性</p><p>实体完整性要求表中有一个主键，其值不能为空且能唯一地标识对应的记录，又称为行完整性，通过PRIMARY KEY约束、UNIQUE约束、索引或 IDENTITY 属性等实现数据的实体完整性。</p></li><li><p>参照完整性</p><p>参照完整性保证主表中的数据与从表中数据的一致性，又称为引用完整性，参照完整性确保键值在所有表中一致，通过定义主键(PRIMARY KEY)与外键(FOREIGN KEY)之间的对应关系实现参照完整性。</p></li></ol><p>Oracle数据库中的数据完整性包括域完整性、实体完整性、参照完整性，和实现上述完整性的约束，其中：</p><ul><li>CHECK约束，检查约束，实现域完整性。</li><li>NOT NULL约束，非空约束，实现域完整性。</li><li>PRIMARY KEY约束，主键约束，实现实体完整性。</li><li>UNIQUE KEY约束，唯一性约束，实现实体完整性。</li><li>FOREIGN KEY约束，外键约束，实现参照完整性。</li></ul><h2 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h2><ol><li><p>在创建表时创建CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;</span><br><span class="line">( &lt;列名&gt; &lt;数据类型&gt; [DEFAULT &lt;默认值&gt;] [NOT NULL | NULL]</span><br><span class="line">  [CONSTRAINT &lt;CHECK约束名&gt;] CHECK(&lt;CHECK约束表达式&gt;)      /*定义为列的约束*/</span><br><span class="line">  [,…n]</span><br><span class="line">  [CONSTRAINT &lt;CHECK约束名&gt;] CHECK(&lt;CHECK约束表达式&gt;)      /*定义为表的约束*/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CONSTRAINT关键字为CHECK约束定义名称，CHECK约束表达式为逻辑表达式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">CREATE TABLE goods2 </span><br><span class="line">(</span><br><span class="line">  gid char(6) NOT NULL PRIMARY KEY,              /*商品号*/</span><br><span class="line">  gname char(20) NOT NULL,                        /*商品名*/</span><br><span class="line">  gclass char(6) NOT NULL,                         /*类型*/</span><br><span class="line">  price number NOT NULL CHECK(price&lt;=8000),       /*价格*/</span><br><span class="line">  tradeprice number NOT NULL,                      /*批发价格*/</span><br><span class="line">  stockqt number NOT NULL,                        /*库存量*/</span><br><span class="line">  orderqt number NULL                             /*订货尚未到货商品数量*/</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在修改表时创建CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  ADD( CONSTRAINT &lt;CHECK约束名&gt; CHECK(&lt;CHECK约束表达式&gt;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods2 </span><br><span class="line">  ADD CONSTRAINT CK_tradeprice CHECK(tradeprice&lt;=6000);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;CHECK约束名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods2</span><br><span class="line">  DROP CONSTRAINT CK_tradeprice;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p>实体完整性通过PRIMARY KEY约束、UNIQUE约束等实现。通过PRIMARY KEY约束定义主键，一个表只能有一个PRIMARY KEY约束，且PRIMARY KEY约束不能取空值，Oracle为主键自动创建唯一性索引，实现数据的唯一性。</p><p>PRIMARY KEY约束与UNIQUE约束主要区别如下：</p><ul><li>一个表只能创建一个PRIMARY KEY约束，但可创建多个UNIQUE约束。</li><li>PRIMARY KEY约束的列值不允许为NULL，UNIQUE约束的列值可取NULL。</li><li>创建PRIMARY KEY约束时，系统自动创建聚集索引，创建UNIQUE约束时，系统自动创建非聚集索引。</li></ul><ol><li><p>使用PL&#x2F;SQL语句在创建表时创建PRIMARY KEY约束、UNIQUE约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CREATE TABLE &lt;表名&gt;                           /*指定表名*/</span><br><span class="line">  (&lt;列名&gt; &lt;数据类型&gt; [NULL |NOT NULL]          /*定义字段*/</span><br><span class="line">    &#123;[CONSTRAINT &lt;约束名&gt;]                    /*定义约束名*/</span><br><span class="line">    PRIMARY KEY | UNIQUE  &#125;                  /*定义约束类型*/</span><br><span class="line">    [,…n]</span><br><span class="line">  [, [CONSTRAINT &lt;约束名&gt;] &#123;PRIMARY KEY | UNIQUE&#125;(&lt;列名&gt;,[,…n]) ] </span><br><span class="line">      /*在所有列定义完毕后定义约束名和约束类型*/</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">商品号列创建PRIMARY KEY约束，对商品名称列创建UNIQUE约束。</span><br><span class="line">CREATE TABLE goods3</span><br><span class="line">(</span><br><span class="line">  gid char(6) NOT NULL CONSTRAINT PK_gid PRIMARY KEY,</span><br><span class="line">  gname char(20) NOT NULL CONSTRAINT UK_gname UNIQUE,</span><br><span class="line">  gclass char(6) NOT NULL,</span><br><span class="line">  price number NOT NULL CONSTRAINT CK_price CHECK(price&lt;=8000),</span><br><span class="line">  tradeprice number NOT NULL,</span><br><span class="line">  stockqt number NOT NULL,</span><br><span class="line">  orderqt number NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改表时创建PRIMARY KEY约束或UNIQUE约束   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：  </span><br><span class="line">ALTER TABLE &lt;表名&gt;  </span><br><span class="line">ADD([CONSTRAINT &lt;约束名&gt;] &#123;PRIMARY KEY | UNIQUE&#125; (&lt;列名&gt;[,…n])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  ADD (CONSTRAINT PK_goodsgid PRIMARY KEY (gid));</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  ADD (CONSTRAINT UK_goodsgname UNIQUE (gname));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除PRIMARY KEY约束、UNIQUE约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;约束名&gt;[,…n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  DROP CONSTRAINT PK_goodsgid;</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  DROP CONSTRAINT UK_goodsgname;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><p>外键约束定义了表与表之间的关系，通过将一个表中一列或多列添加到另一个表中，创建两个表之间的连接，这个列就成为第二个表的外键，通过定义FOREIGN KEY约束来创建外键。</p><p>使用PRIMARY KEY约束或UNIQUE约束来定义主表主键或唯一键，FOREIGN KEY约束来定义从表外键，可实现主表与从表之间的参照完整性。</p><ol><li><p>创建表间参照关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：   </span><br><span class="line">CREATE TABLE &lt;从表名&gt;</span><br><span class="line">(   &lt;列定义&gt; [ CONSTRAINT &lt;约束名&gt; ] REFERENCES &lt;主表名&gt;[ ( &lt;列名&gt; [ ,...n ] ) ]</span><br><span class="line">   [,…n]</span><br><span class="line"> [ [ CONSTRAINT &lt;约束名&gt; ] [ FOREIGN KEY ( &lt;列名&gt; [,...n ] ) [&lt;参照表达式&gt;]]</span><br><span class="line">)</span><br><span class="line">其中</span><br><span class="line">&lt;参照表达式&gt;::=</span><br><span class="line">REFERENCES &lt;主表名&gt;[ ( &lt;列名&gt; [ ,...n ] ) ] </span><br><span class="line"> [ ON DELETE &#123; CASCADE | SET NULL &#125; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">(1)</span><br><span class="line"></span><br><span class="line">CREATE TABLE stu</span><br><span class="line">(</span><br><span class="line">  sno char(6) NOT NULL REFERENCES student(sno),</span><br><span class="line">  sname char(8) NOT NULL,</span><br><span class="line">  sbirthday date NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">(2)</span><br><span class="line">CREATE TABLE sco</span><br><span class="line">(</span><br><span class="line">  sno char(6)NOT NULL,</span><br><span class="line">  cno char(4)NOT NULL,</span><br><span class="line">  grade int NULL,</span><br><span class="line">  CONSTRAINT FK_sco FOREIGN KEY(sno,cno) REFERENCES score (sno,cno)</span><br><span class="line">     ON DELETE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表定义外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  ADD CONSTRAINT &lt;约束名&gt;</span><br><span class="line">    FOREIGN KEY( &lt;列名&gt;[,…n])</span><br><span class="line">    REFERENCES &lt;主表名&gt;(&lt;列名&gt;[,…n]) &lt;参照表达式&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE score</span><br><span class="line">  ADD CONSTRAINT FK_score_course FOREIGN KEY(cno)</span><br><span class="line">  REFERENCES course(cno);</span><br></pre></td></tr></table></figure></li><li><p>删除表间参照关系 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式： </span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;约束名&gt;[,…n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE score</span><br><span class="line">  DROP CONSTRAINT FK_score_course;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="第十章-PL-SQL程序设计"><a href="#第十章-PL-SQL程序设计" class="headerlink" title="第十章 PL&#x2F;SQL程序设计"></a>第十章 PL&#x2F;SQL程序设计</h1><h2 id="PL-SQL编程"><a href="#PL-SQL编程" class="headerlink" title="PL&#x2F;SQL编程"></a>PL&#x2F;SQL编程</h2><p>PL&#x2F;SQL具有以下优点：</p><ul><li><p>模块化</p><p>能够使一组SQL语句的功能更具模块化，便于维护。 </p></li><li><p>可移植性</p><p>PL&#x2F;SQL块可以被命名和存储在ORACLE服务器中，能被其他的PL&#x2F;SQL程序或SQL命令调用，具有很好的可移植性。 </p></li><li><p>安全性</p><p>可以使用ORACLE数据工具来管理存储在服务器中的PL&#x2F;SQL程序的安全性，可以对程序中的错误进行自动处理。 </p></li><li><p>便利性</p><p>集成在数据库中，调用更加方便快捷</p></li><li><p>高性能</p><p>PL&#x2F;SQL是一种高性能的基于事务处理的语言，能运行在ORACLE环境中，支持所有的数据处理命令，不占用额外的传输资源，降低了网络拥挤。</p></li></ul><h2 id="PL-SQL字符集"><a href="#PL-SQL字符集" class="headerlink" title="PL&#x2F;SQL字符集"></a>PL&#x2F;SQL字符集</h2><table><thead><tr><th><strong>符  号</strong></th><th><strong>意  义</strong></th><th><strong>样  例</strong></th></tr></thead><tbody><tr><td>()</td><td>列表分隔</td><td>(‘Edward’, ‘Jane’)</td></tr><tr><td>;</td><td>语句结束</td><td>Procedure_name(arg1,arg2);</td></tr><tr><td>.</td><td>项分离（在例子中分离area与table_name）</td><td>Select * from  ares.table_name</td></tr><tr><td>‘</td><td>字符串界定符</td><td>If var1&#x3D; ‘x+1’</td></tr><tr><td><strong>:&#x3D;</strong></td><td><strong>赋值</strong></td><td><strong>x:&#x3D;x+1</strong></td></tr><tr><td>| |</td><td>并置</td><td>Full_name:&#x3D; ‘Jane’|  | ‘ ‘ | | ‘Eyre’</td></tr><tr><td>- -</td><td>单行注释符</td><td>- -Success!</td></tr><tr><td>&#x2F;<em>和</em>&#x2F;</td><td>多行注释起始符和终止符</td><td>&#x2F;<em>Continue loop.</em>&#x2F;</td></tr></tbody></table><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ol><li>VARCHAR类型：VARCHAR与VARCHAR2均为可变长的字符数据类型，含义完全相同。</li><li>NUMBER类型：可用来表示所有的数值类型。</li><li>DATE类型：用来存放日期时间类型数据。</li><li>BOOLEAN类型：逻辑型（布尔型）变量的值为true（真）或false（假）。</li></ol><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li><p>自动转换</p></li><li><p>转换函数：</p><ol><li><p>TO_CHAR：将NUMBER类型转换成CHAR类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECLARE/*  自动将结束符转换为/  */</span><br><span class="line">  st_num CHAR (6);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT TO_CHAR(MAX(sno)) INTO st_num FROM student;</span><br><span class="line">END;</span><br><span class="line">/ /*在命令行输入时*/</span><br></pre></td></tr></table></figure></li><li><p>TO_DATE：CHAR转换为DATE</p></li><li><p>TO_NUMBER：CHAR转换NUMBER</p></li></ol></li></ul><h2 id="标识符、常量、变量"><a href="#标识符、常量、变量" class="headerlink" title="标识符、常量、变量"></a>标识符、常量、变量</h2><ol><li><p>标识符：</p><ul><li>标识符必须由字母开头。</li><li>标识符可以包含字母、数字、下划线、$、#。</li><li>标识符长度不能超过30个字符。</li><li>标识符不能是PL&#x2F;SQL的关键字。</li><li>标识符不区分大小写。</li></ul></li><li><p>常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;常量名&gt; CONSTANT &lt;数据类型&gt;: = &lt;值&gt;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">num CONSTANT NUMBER(2):=80;</span><br><span class="line">str CONSTANT CHAR:= &#x27;World&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式： </span><br><span class="line">&lt;变量名&gt; &lt;数据类型&gt; [&lt;(宽度): = &lt;初始值&gt;]；</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">name VARCHAR2(10) : = ‘Smith’;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol><li>赋值表达式</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;变量&gt; := &lt;表达式&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">var_number:=200;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数值表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6*(var_number+2)-5</span><br></pre></td></tr></table></figure></li><li><p>关系表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_number &lt;500</span><br></pre></td></tr></table></figure></li><li><p>逻辑表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(var_number &gt;=150) AND (var_number &lt;=500) </span><br></pre></td></tr></table></figure></li></ol><h2 id="PL-SQL基本结构和控制语句"><a href="#PL-SQL基本结构和控制语句" class="headerlink" title="PL&#x2F;SQL基本结构和控制语句"></a>PL&#x2F;SQL基本结构和控制语句</h2><p>基本逻辑结构包括顺序结构、条件结构和循环结构。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>流程控制语句</strong></th><th><strong>说  明</strong></th></tr></thead><tbody><tr><td>1</td><td>IF-THEN</td><td>IF后条件表达式为TRUE，则执行THEN后的语句</td></tr><tr><td>2</td><td>IF-THEN-ELSE</td><td>IF后条件表达式为TRUE，则执行THEN后的语句；否则执行ELSE后的语句</td></tr><tr><td>3</td><td>IF-THEN-ELSIF-THEN-ELSE</td><td>IF-THEN-ELSE语句嵌套</td></tr><tr><td>4</td><td>LOOP-EXIT-END</td><td>在LOOP和END  LOOP中，IF后条件表达式为TRUE，执行EXIT退出循环；否则继续循环</td></tr><tr><td>5</td><td>LOOP-EXIT-WHEN-END</td><td>在LOOP和END LOOP中，WHEN后条件表达式为TRUE，执行EXIT退出循环；否则继续循环</td></tr><tr><td>6</td><td>WHILE-LOOP-END</td><td>WHILE后条件表达式为TRUE，继续循环；否则退出循环</td></tr><tr><td>7</td><td>FOR-IN-LOOP-END</td><td>FOR后循环变量的值小于终值，继续循环；否则退出循环</td></tr><tr><td>8</td><td>CASE</td><td>通过多分支结构作出选择</td></tr><tr><td>9</td><td>GOTO</td><td>将流程转移到标号指定的位置</td></tr></tbody></table><h3 id="程序块"><a href="#程序块" class="headerlink" title="程序块"></a>程序块</h3><ol><li><p>PL&#x2F;SQL块的基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ DECLARE ]</span><br><span class="line">--声明部分</span><br><span class="line">BEGIN</span><br><span class="line">--执行部分</span><br><span class="line">[EXCEPTION]</span><br><span class="line">--异常处理部分</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算8和9的乘积。</span><br><span class="line">SET SERVEROUTPUT ON;/*打开Oracle自带的输出方法DBMS_OUTPUT*/</span><br><span class="line">DECLARE</span><br><span class="line">  m NUMBER:=8;</span><br><span class="line">BEGIN</span><br><span class="line">  m:=m*9;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;乘积为：&#x27;||TO_CHAR(m));</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></li><li><p>将SQL语言查询结果存入变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">SELECT &lt;列名列表&gt; INTO &lt;变量列表&gt;</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">WHERE &lt;条件表达式&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例： </span><br><span class="line">将学生数存入变量v_count，将学号为184003学生姓名和性别分别存入变量v_name和v_sex。</span><br><span class="line">DECLARE</span><br><span class="line">  v_count NUMBER;</span><br><span class="line">  v_name student.sname%TYPE;</span><br><span class="line">  v_sex student.ssex%TYPE;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO v_count         /* 一次存入一个变量 */</span><br><span class="line">    FROM student;</span><br><span class="line">  SELECT sname,ssex INTO v_name,v_sex     /* 一次存入两个变量 */</span><br><span class="line">    FROM student</span><br><span class="line">    WHERE sno=&#x27;184003&#x27;; </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;学生数为：&#x27; || v_count); </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;184003学生姓名为：&#x27; || v_name); </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;184003学生性别为：&#x27; || v_sex); </span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><ol><li><p>IF-THEN结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">IF &lt;条件表达式&gt; THEN          /*条件表达式*/ </span><br><span class="line">  &lt;PL/SQL语句&gt;;                     /*条件表达式为真时执行*/</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">查询总学分大于和等于50分的学生人数。</span><br><span class="line"></span><br><span class="line">DECLARE</span><br><span class="line">  p_no NUMBER (2);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO p_no</span><br><span class="line">    FROM student</span><br><span class="line">    WHERE tc&gt;=50;</span><br><span class="line">  IF p_no&lt;&gt;0 THEN</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;总学分&gt;=50的人数为：&#x27; || TO_CHAR(p_no));</span><br><span class="line">  END IF;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>IF-THEN-ELSIF-THEN-ELSE结构</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">IF &lt;条件表达式1&gt; THEN      </span><br><span class="line">  &lt;PL/SQL语句1&gt;;              </span><br><span class="line">ELSIF &lt;条件表达式2&gt; THEN  </span><br><span class="line">  &lt;PL/SQL语句2&gt;;             </span><br><span class="line">ELSE</span><br><span class="line">  &lt;PL/SQL语句3&gt;;            </span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">如果”高等数学”课程的平均成绩大于80分，则显示”高等数学平均成绩高于80”，否则显示”高等数学平均成绩低于80”。</span><br><span class="line"></span><br><span class="line">DECLARE </span><br><span class="line">  g_avg NUMBER(4,2);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT AVG(grade) INTO g_avg</span><br><span class="line">    FROM student a, course b, score c</span><br><span class="line">    WHERE a.sno=c.sno</span><br><span class="line">      AND b.cno=c.cno  </span><br><span class="line">      AND b.cname=&#x27;高等数学&#x27;;</span><br><span class="line">  IF g_avg &gt;80 THEN</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;高等数学平均成绩高于80&#x27;);</span><br><span class="line">ELSE </span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;高等数学平均成绩低于80&#x27;); </span><br><span class="line">  END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h3><ol><li><p>简单CASE语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CASE &lt;变量名&gt;</span><br><span class="line">  WHEN &lt;值1&gt; THEN &lt;语句1&gt;</span><br><span class="line">  WHEN &lt;值2&gt; THEN &lt;语句2&gt;</span><br><span class="line">  …</span><br><span class="line">  WHEN &lt;值n&gt; THEN &lt;语句n&gt;</span><br><span class="line">  [ELSE &lt;语句&gt;]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">将教师职称转变为职称类型。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  t_title CHAR(12);</span><br><span class="line">  t_op VARCHAR2(8);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT title INTO t_title</span><br><span class="line">    FROM teacher</span><br><span class="line">    WHERE tname=&#x27;李志远&#x27;;</span><br><span class="line">  CASE t_title</span><br><span class="line">    WHEN &#x27;教授&#x27; THEN t_op:=&#x27;高级职称&#x27;;</span><br><span class="line">    WHEN &#x27;副教授&#x27; THEN t_op:=&#x27;高级职称&#x27;;</span><br><span class="line">    WHEN &#x27;讲师&#x27; THEN t_op:=&#x27;中级职称&#x27;;</span><br><span class="line">    WHEN &#x27;助教&#x27; THEN t_op:=&#x27;初级职称&#x27;;</span><br><span class="line">    ELSE t_op:=&#x27;Nothing&#x27;;</span><br><span class="line">  END CASE;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;李志远的职是：&#x27;||t_op);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>搜索CASE语句</p></li></ol><p>   搜索CASE语句在WHEN关键字后设置布尔表达式，选择第一个为TRUE的布尔表达式，执行THEN关键字后的语句，并结束CASE语句。</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CASE</span><br><span class="line">  WHEN &lt;布尔表达式1&gt; THEN &lt;语句1&gt;</span><br><span class="line">  WHEN &lt;布尔表达式2&gt; THEN &lt;语句2&gt;</span><br><span class="line">  …</span><br><span class="line">  WHEN &lt;布尔表达式n&gt; THEN &lt;语句n&gt;</span><br><span class="line">  [ELSE &lt;语句&gt;]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">将学生成绩转变为成绩等级。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_grade NUMBER;</span><br><span class="line">  v_result VARCHAR2(16);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT AVG(grade) INTO v_grade</span><br><span class="line">    FROM score</span><br><span class="line">    WHERE sno=&#x27;184001&#x27;;</span><br><span class="line">  CASE</span><br><span class="line">    WHEN v_grade&gt;=90 AND v_grade&lt;=100 THEN v_result:=&#x27;优秀&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=80 AND v_grade&lt;90 THEN v_result:=&#x27;良好&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=70 AND v_grade&lt;80 THEN v_result:=&#x27;中等&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=60 AND v_grade&lt;70 THEN v_result:=&#x27;及格&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=0 AND v_grade&lt;60 THEN v_result:=&#x27;不及格&#x27;;</span><br><span class="line">    ELSE v_result:= &#x27;Nothing&#x27;;</span><br><span class="line">  END CASE;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;学号为184001的平均成绩：&#x27;||v_result);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li>LOOP-EXIT-END循环</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">LOOP</span><br><span class="line">  &lt;循环体&gt;                    /*执行循环体*/</span><br><span class="line">  IF &lt;条件表达式&gt; THEN        /*测试条件表达式是否符合退出条件*/</span><br><span class="line">    EXIT;                     /*满足退出条件，退出循环*/</span><br><span class="line">  END IF;</span><br><span class="line">END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1~100的整数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  LOOP</span><br><span class="line">    v_s:=v_s+v_n;</span><br><span class="line">    v_n:=v_n+1;</span><br><span class="line">    IF v_n&gt;100 THEN</span><br><span class="line">      EXIT;</span><br><span class="line">    END IF;</span><br><span class="line">  END LOOP;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;1~100的和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>LOOP-EXIT-WHEN-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">LOOP</span><br><span class="line">  &lt;循环体&gt;                       /*执行循环体*/</span><br><span class="line">  EXIT WHEN &lt;条件表达式&gt;        /*测试是否符合退出条件*/</span><br><span class="line">END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1~100的整数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  LOOP</span><br><span class="line">    v_s:=v_s+v_n;</span><br><span class="line">    v_n:=v_n+1;</span><br><span class="line">    EXIT WHEN v_n=101;</span><br><span class="line">  END LOOP;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;1~100的和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>WHILE-LOOP-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">WHILE &lt;条件表达式&gt;          /*测试是否符合循环条件*/</span><br><span class="line">  LOOP</span><br><span class="line">    &lt;循环体&gt;                 /*执行循环体*/</span><br><span class="line">  END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"> 计算1~100的奇数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  WHILE v_n&lt;=100 </span><br><span class="line">    LOOP</span><br><span class="line">      IF MOD(v_n, 2)&lt;&gt;0 THEN</span><br><span class="line">        v_s:=v_s+v_n;</span><br><span class="line">      END IF;</span><br><span class="line">      v_n:=v_n+1;</span><br><span class="line">    END LOOP;</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(&#x27;1~100的奇数和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>FOR-IN-LOOP-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">FOR &lt;循环变量名&gt; IN &lt;变量初值&gt;..&lt;变量终值&gt;     /*定义跟踪循环的变量*/</span><br><span class="line">  LOOP</span><br><span class="line">    &lt;循环体&gt;                                   /*执行循环体*/</span><br><span class="line">  END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算10的阶乘。</span><br><span class="line">   </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER;</span><br><span class="line">  v_s NUMBER:=1;</span><br><span class="line">BEGIN</span><br><span class="line">  FOR v_n IN 1..10 </span><br><span class="line">    LOOP</span><br><span class="line">      v_s:=v_s*v_n;</span><br><span class="line">    END LOOP;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;10!=&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="GOTO语句"><a href="#GOTO语句" class="headerlink" title="GOTO语句"></a>GOTO语句</h3><p>GOTO语句用于实现无条件的跳转，将执行流程转移到标号指定的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">GOTO  &lt;标号&gt;</span><br><span class="line">   </span><br><span class="line">GOTO关键字后面的语句标号必须符合标识符规则。</span><br><span class="line">标号的定义形式如下：</span><br><span class="line">   </span><br><span class="line">&lt;&lt;标号&gt;&gt; 语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1-100的整数和。</span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  &lt;&lt;ls&gt;&gt;</span><br><span class="line">  v_s:= v_s+ v_n;</span><br><span class="line">  v_n:= v_n+1; </span><br><span class="line">  IF v_n&lt;=100 THEN</span><br><span class="line">    GOTO ls;</span><br><span class="line">  END IF;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;1~100的整数和为：&#x27;|| v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>预定义异常</p><p>预定义异常是PL&#x2F;SQL已经预先定义好名称异常。</p><table><thead><tr><th><strong>异  常</strong></th><th><strong>说  明</strong></th></tr></thead><tbody><tr><td>NO_DATA_FOUND</td><td>如果一个SELECT语句试图基于其条件检索数据，此异常表示不存在满足条件的数据行</td></tr><tr><td>TOO_MANY_ROWS</td><td>检测到有多行数据存在</td></tr><tr><td>ZERO_DIVIDE</td><td>试图被零除</td></tr><tr><td>DUP_VAL_ON_INDEX</td><td>如果某索引中已有某键列值，若还要在该索引中创建该键码值的索引项时，出现此异常</td></tr><tr><td>VALUE_ERROR</td><td>指定目标域的长度小于待放入其中的数据的长度</td></tr><tr><td>CASE_NOT_FOUND</td><td>在CASE语句中发现不匹配的WHEN语句</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">处理ZERO_DIVIDE异常。</span><br><span class="line">DECLARE</span><br><span class="line">  v_zero NUMBER:=0;</span><br><span class="line">  v_result NUMBER;</span><br><span class="line">BEGIN</span><br><span class="line">  v_result:=100/v_zero;          /*100除以v_zero，即100/0，产生除数为零异常*/</span><br><span class="line">  EXCEPTION                 /*异常处理部分*/</span><br><span class="line">    WHEN ZERO_DIVIDE THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#x27;除数为0异常&#x27;);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用户定义异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">EXCEPTION</span><br><span class="line">  WHEN exception_name THEN</span><br><span class="line">  sequence_of_statements1;</span><br><span class="line">  WHEN THEN</span><br><span class="line">    sequence_of_statements2;</span><br><span class="line">  [WHEN OTHERS THEN</span><br><span class="line">    sequence_of_statements3;]</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">对超出允许的学生数进行异常处理</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  e_overnum EXCEPTION;          /*定义异常处理变量*/</span><br><span class="line">  v_num NUMBER;</span><br><span class="line">  max_num NUMBER:=5;           /*定义最大允许学生数变量*/</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO v_num</span><br><span class="line">  FROM student;</span><br><span class="line">  IF max_num&lt;v_num THEN</span><br><span class="line">    RAISE e_overnum;             /*使用RAISE语句抛出用户定义异常*/</span><br><span class="line">  END IF;</span><br><span class="line">  EXCEPTION                    /*异常处理部分*/</span><br><span class="line">  WHEN e_overnum THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#x27;现在学生数是：&#x27; || v_num||&#x27;  而最大允许数是：&#x27; ||max_num );</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫</title>
      <link href="/2023/11/01/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/1.python%E7%B1%BB/5.%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
      <url>/2023/11/01/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/1.python%E7%B1%BB/5.%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习视频：<a href="https://www.bilibili.com/video/BV1Db4y1m7Ho?p=49&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">尚硅谷</a></p><p>学习前最好是有一定的python基础，学习的效率会更加的好。</p><h1 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h1><h2 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>通过文件操作，我们可以将字符串写入到一个本地文件。但是，如果是一个对象(例如列表、字典、元组等)，就无法直接写入到一个文件里，需要对这个对象进行序列化，然后才能写入到文件里。</p><p>设计一套协议，按照某种规则，把内存中的数据转换为字节序列，保存到文件，这就是序列化，反之，从文件的字节序列恢复到内存中，就是反序列化。</p><p>对象—&gt;字节序列 &#x3D;&#x3D;&#x3D; 序列化</p><p>字节序列–&gt;对象 &#x3D;&#x3D;&#x3D;反序列化</p><p>Python中提供了JSON这个模块用来实现数据的序列化和反序列化。</p><h3 id="序列化的实现"><a href="#序列化的实现" class="headerlink" title="序列化的实现"></a>序列化的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对象 变为 字节序列 == 序列化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化有2种:dumps和dump</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种dumps</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">name_list = [<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">names = json.dumps(name_list)<span class="comment">#序列化</span></span><br><span class="line">fp.write(names)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="built_in">print</span>(names,<span class="built_in">type</span>(names)) <span class="comment"># 字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种dump</span></span><br><span class="line"><span class="comment">#在将对象转换成字符串的同时，指定一个文件的对象，然后把转换后的字符串写入到这个文件里</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">name_list = [<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">json.dump(name_list,fp)<span class="comment">#序列化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">相当于将</span></span><br><span class="line"><span class="string">names = json.dumps(name_list)和</span></span><br><span class="line"><span class="string">fp.write(names)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h3 id="反序列化的实现"><a href="#反序列化的实现" class="headerlink" title="反序列化的实现"></a>反序列化的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字节序列 变为 对象 == 反序列化</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#反序列化:loads,load</span></span><br><span class="line"><span class="comment">#将json的字符串变成一个python对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种loads</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = fp.read()</span><br><span class="line">result = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种load</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">result = json.load(fp)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h2 id="2-异常"><a href="#2-异常" class="headerlink" title="2.异常"></a>2.异常</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>程序在运行过程中，由于我们的编码不规范，或者其他原因一些客观原因，导致我们的程序无法继续运行，此时，</p><p>程序就会出现异常。如果我们不对异常进行处理，程序可能会由于异常直接中断掉。为了保证程序的健壮性，我们</p><p>在程序设计里提出了异常处理这个概念。</p><h3 id="try…except语句"><a href="#try…except语句" class="headerlink" title="try…except语句"></a>try…except语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">可能会出现异常的代码块</span><br><span class="line"><span class="keyword">except</span> 异常的类型:</span><br><span class="line">出现异常以后的处理语句（友好的提示）</span><br><span class="line">    </span><br><span class="line">实例：</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件没有找到,请检查文件名称是否正确&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-网页页面结构的介绍"><a href="#3-网页页面结构的介绍" class="headerlink" title="3.网页页面结构的介绍"></a>3.网页页面结构的介绍</h2><h3 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h3><p>新建一个.html文件，初始的主体为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html的标签介绍"><a href="#html的标签介绍" class="headerlink" title="html的标签介绍"></a>html的标签介绍</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    table    表格</span></span><br><span class="line"><span class="comment">    tr       行</span></span><br><span class="line"><span class="comment">    td       列</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    姓名</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    年龄</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    性别</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    你</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    好</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    啊</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ul li  无序列表（爬虫使用的场景非常的多）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我最帅<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ol li  有序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗衣<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 超链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://silent-wuhen.github.io/&quot;</span>&gt;</span>MyBlog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h1><h2 id="0-URL（统一资源定位符）组成"><a href="#0-URL（统一资源定位符）组成" class="headerlink" title="0.URL（统一资源定位符）组成"></a>0.URL（统一资源定位符）组成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url的组成：协议(http/https)，主机(www.baidu.com)，端口号(80/443)，路径，参数，锚点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="comment">#协议：https    主机：www.baidu.com   端口号：443   路径：s  参数：？后面  锚点：#</span></span><br></pre></td></tr></table></figure><h2 id="1-什么是互联网爬虫"><a href="#1-什么是互联网爬虫" class="headerlink" title="1.什么是互联网爬虫"></a>1.什么是互联网爬虫</h2><p>解释1：通过一个程序，根据Url(<a href="http://www.taobao.com)进行爬取网页,获取有用信息/">http://www.taobao.com)进行爬取网页，获取有用信息</a></p><p>解释2：使用程序模拟浏览器，去向服务器发送请求，获取响应信息</p><h2 id="2-爬虫核心"><a href="#2-爬虫核心" class="headerlink" title="2.爬虫核心"></a>2.爬虫核心</h2><ol><li>爬取网页：爬取整个网页，包含了网页中所有的内容</li><li>解析数据：将网页中得到的数据进行解析</li><li>难点：爬虫与反爬虫之间的博弈</li></ol><h2 id="3-爬虫的用途"><a href="#3-爬虫的用途" class="headerlink" title="3.爬虫的用途"></a>3.爬虫的用途</h2><ol><li>数据分析&#x2F;人工数据集</li><li>社交软件冷启动</li><li>竞争对手的监控</li><li>舆情监控</li></ol><h2 id="4-爬虫的分类"><a href="#4-爬虫的分类" class="headerlink" title="4.爬虫的分类"></a>4.爬虫的分类</h2><h3 id="1-通用爬虫-不是我们学习的"><a href="#1-通用爬虫-不是我们学习的" class="headerlink" title="1.通用爬虫(不是我们学习的)"></a>1.通用爬虫(不是我们学习的)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">实例:</span><br><span class="line">百度、<span class="number">360</span>、google、sougou等搜索引擎‐‐‐伯乐在线</span><br><span class="line">功能:</span><br><span class="line">访问网页‐&gt;抓取数据‐&gt;数据存储‐&gt;数据处理‐&gt;提供检索服务</span><br><span class="line">robots协议:</span><br><span class="line">一个约定俗成的协议，添加robots.txt文件，来说明本网站哪些内容不可以被抓取，起不到限制作用</span><br><span class="line">自己写的爬虫无需遵守</span><br><span class="line">网站排名(SEO):</span><br><span class="line"><span class="number">1.</span> 根据pagerank算法值进行排名（参考个网站流量、点击率等指标）</span><br><span class="line"><span class="number">2.</span> 百度竞价排名</span><br><span class="line">缺点:</span><br><span class="line"><span class="number">1.</span> 抓取的数据大多是无用的</span><br><span class="line"><span class="number">2.</span>不能根据用户的需求来精准获取数据</span><br></pre></td></tr></table></figure><h3 id="2-聚焦爬虫"><a href="#2-聚焦爬虫" class="headerlink" title="2.聚焦爬虫"></a>2.聚焦爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">功能：</span><br><span class="line">根据需求，实现爬虫程序，抓取需要的数据</span><br><span class="line">设计思路：</span><br><span class="line"><span class="number">1.</span>确定要爬取的url</span><br><span class="line">​如何获取url</span><br><span class="line"><span class="number">2.</span>模拟浏览器通过http协议访问url,获取服务器返回的html代码</span><br><span class="line">​如何访问</span><br><span class="line"><span class="number">3.</span>解析html字符串（根据一定的规则提取需要的数据）</span><br><span class="line">​如何解析</span><br></pre></td></tr></table></figure><h2 id="5-反爬虫手段？"><a href="#5-反爬虫手段？" class="headerlink" title="5.反爬虫手段？"></a>5.反爬虫手段？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>User‐Agent：</span><br><span class="line">    ​User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>代理IP</span><br><span class="line">    ​西次代理</span><br><span class="line">    ​快代理</span><br><span class="line">    ​什么是高匿名、匿名和透明代理？它们有什么区别？</span><br><span class="line">        ​<span class="number">1.</span>使用透明代理，对方服务器可以知道你使用了代理，并且也知道你的真实IP。</span><br><span class="line">        ​<span class="number">2.</span>使用匿名代理，对方服务器可以知道你使用了代理，但不知道你的真实IP。</span><br><span class="line">        ​<span class="number">3.</span>使用高匿名代理，对方服务器不知道你使用了代理，更不知道你的真实IP。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>验证码访问</span><br><span class="line">    ​打码平台</span><br><span class="line">    ​云打码平台</span><br><span class="line">    ​超级🦅</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>动态加载网页 </span><br><span class="line">    ​网站返回的是js数据 并不是网页的真实数据</span><br><span class="line">    ​selenium驱动真实的浏览器发送请求</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>数据加密</span><br><span class="line">    ​分析js代码</span><br></pre></td></tr></table></figure><h2 id="6-urllib库使用"><a href="#6-urllib库使用" class="headerlink" title="6.urllib库使用"></a>6.urllib库使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen() 模拟浏览器向服务器发送请求</span><br><span class="line"></span><br><span class="line">response 服务器返回的数据</span><br><span class="line">    response的数据类型是HttpResponse</span><br><span class="line">    字节‐‐&gt;字符串</span><br><span class="line">    解码decode</span><br><span class="line">    字符串‐‐&gt;字节</span><br><span class="line">    编码encode</span><br><span class="line">    read() 字节形式读取二进制 扩展：rede(<span class="number">5</span>)返回前几个字节</span><br><span class="line">    readline() 读取一行</span><br><span class="line">    readlines() 一行一行读取 直至结束</span><br><span class="line">    getcode() 获取状态码</span><br><span class="line">    geturl() 获取url</span><br><span class="line">    getheaders() 获取headers</span><br><span class="line">urllib.request.urlretrieve()</span><br><span class="line">    请求网页</span><br><span class="line">    请求图片</span><br><span class="line">    请求视频</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-urllib的基本使用"><a href="#1-urllib的基本使用" class="headerlink" title="1.urllib的基本使用"></a>1.urllib的基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用urrllib来获取百度首页的源码</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># （1）定义一个url:就是要访问的地址</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （2）模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url) <span class="comment"># response响应：返回的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （3）获取响应中的页面源码  content 内容</span></span><br><span class="line">    <span class="comment"># read 返回的是字节形式的二进制数据</span></span><br><span class="line">    <span class="comment"># 二进制--&gt;字符串称为解码  使用的方法是decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># （4）打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="2-Urllib的1个类型和6个方法"><a href="#2-Urllib的1个类型和6个方法" class="headerlink" title="2.Urllib的1个类型和6个方法"></a>2.Urllib的1个类型和6个方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型：HTTPResponse</span></span><br><span class="line"><span class="comment"># response是HTTPResponse数据类型的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;response的数据类型：&#x27;</span>,<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#六个方法：read() readline() readlines() getcode() geturl() getheaders()</span></span><br><span class="line"><span class="comment"># read()按照一个字节一个字节的读</span></span><br><span class="line">content = response.read()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.返回多少个字节</span></span><br><span class="line">content = response.read(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.读取一行（只能读取一行）</span></span><br><span class="line">content = response.readline()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.一行一行的读，读取所有行，要编码使用decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">content = response.readlines()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.返回状态码 如果是200：证明逻辑正确（判断代码是否有问题）</span></span><br><span class="line"><span class="built_in">print</span>(response.getcode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.返回的是url的地址</span></span><br><span class="line"><span class="built_in">print</span>(response.geturl())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取的是状态信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br></pre></td></tr></table></figure><h3 id="3-Urllib的下载"><a href="#3-Urllib的下载" class="headerlink" title="3.Urllib的下载"></a>3.Urllib的下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urlretrieve(url,filename):url 下载路径，filename 文件的名字</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载网页</span></span><br><span class="line">url_page = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">urllib.request.urlretrieve(url_page,<span class="string">&#x27;baidu.html&#x27;</span>)</span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=url_page,filename=&#x27;baidu.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line">url_img = <span class="string">&#x27;https://img2.baidu.com/it/u=2064031713,2731059264&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_img,<span class="string">&#x27;平泽唯.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line">url_video = <span class="string">&#x27;https://vd7.bdstatic.com/mda-pdjhxmd8mxyvgexz/cae_h264/1682010451294745439/mda-pdjhxmd8mxyvgexz.mp4?v_from_s=hkapp-haokan-hbf&amp;auth_key=1682077284-0-0-fbb39f9dcd76b70a58e232aa536a6a7b&amp;bcevod_channel=searchbox_feed&amp;pd=1&amp;cd=0&amp;pt=3&amp;logid=0684217152&amp;vid=9752895408415982948&amp;abtest=109432_2-109133_1&amp;klogid=0684217152&amp;sdk_xcdn=1&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_video,<span class="string">&#x27;测试视频.mp4&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-请求对象的定制"><a href="#7-请求对象的定制" class="headerlink" title="7.请求对象的定制"></a>7.请求对象的定制</h2><h3 id="1-UA介绍："><a href="#1-UA介绍：" class="headerlink" title="1.UA介绍："></a>1.UA介绍：</h3><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">request = urllib.request.Request()</span><br></pre></td></tr></table></figure><h3 id="2-UA反爬"><a href="#2-UA反爬" class="headerlink" title="2.UA反爬"></a>2.UA反爬</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个反爬</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#url的组成：协议(http/https)，主机(www.baidu.com)，端口号(80/443)，路径，参数，锚点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="comment">#协议：https    主机：www.baidu.com   端口号：443   路径：s  参数：？后面  锚点：#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">端口号</span></span><br><span class="line"><span class="string">http    80</span></span><br><span class="line"><span class="string">https   443</span></span><br><span class="line"><span class="string">mysql   3306</span></span><br><span class="line"><span class="string">oracle  1521</span></span><br><span class="line"><span class="string">redis   6379</span></span><br><span class="line"><span class="string">mongodb 27017</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反爬</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#请求对象的定制</span></span><br><span class="line"><span class="comment">#注：因为参数顺序为url,data,headers，不能直接写url和headers</span></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="3-扩展：编码的由来"><a href="#3-扩展：编码的由来" class="headerlink" title="3.扩展：编码的由来"></a>3.扩展：编码的由来</h3><p>‘’’编码集的演变‐‐‐</p><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</p><p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc‐kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。’’’</p><h2 id="8-编解码"><a href="#8-编解码" class="headerlink" title="8.编解码"></a>8.编解码</h2><h3 id="1-get请求方式：urllib-parse-quote（）"><a href="#1-get请求方式：urllib-parse-quote（）" class="headerlink" title="1.get请求方式：urllib.parse.quote（）"></a>1.get请求方式：urllib.parse.quote（）</h3><p>将汉字变成Unicode编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br></pre></td></tr></table></figure><p>实际例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">需求</span></span><br><span class="line"><span class="string">获取 https://www.baidu.com/s?wd=周杰伦   的网页源码</span></span><br><span class="line"><span class="string">https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment">#将周杰伦转换为Unicode编码格式</span></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line">url = url + name</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决反爬的手段</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 请求对象的定制</span></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应的内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="2-get请求方式：urllib-parse-urlencode（）"><a href="#2-get请求方式：urllib-parse-urlencode（）" class="headerlink" title="2.get请求方式：urllib.parse.urlencode（）"></a>2.get请求方式：urllib.parse.urlencode（）</h3><ul><li>作用：将字典中多个中文转换成Unicode编码，并且键值之间使用“&#x3D;”连接，键值对之外使用&amp;连接。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import urllib.parse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data = &#123;</span></span><br><span class="line"><span class="string">    &#x27;wd&#x27; : &#x27;周杰伦&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;sex&#x27; : &#x27;男&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a = urllib.parse.urlencode(data) # 将各个键值对用&amp;连接起来</span></span><br><span class="line"><span class="string">print(a)</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">wd=%E5%91%A8%E6%9D%B0%E4%BC%A6&amp;sex=%E7%94%B7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>实际例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urlencode应用场景：多个中文参数</span></span><br><span class="line"><span class="comment"># https://www.baidu.com/s?wd=周杰伦&amp;sex=男</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span> : <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line">url = base_url + data</span><br><span class="line"><span class="comment"># print(url)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="3-post请求方式"><a href="#3-post请求方式" class="headerlink" title="3.post请求方式"></a>3.post请求方式</h3><p>步骤：</p><ol><li>找post 请求的接口</li><li>怎么执行post请求（请求参数进行编码。编码之后 必须调用encode方法。）</li><li>传参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数 必须要进行编码encode(&#x27;utf-8&#x27;)</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数是不会拼接在url的后面，而是需放在请求对象定制的参数中</span></span><br><span class="line">request = urllib.request.Request(url = url,data = data,headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应的数据</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#str数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">post请求的参数 必须要进行编码  data = urllib.parse.urlencode(data).encode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="string">参数是放在请求对象的定制方法中  request = urllib.request.Request(url = url,data = data,headers = headers)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串--&gt;json对象</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(content))</span><br><span class="line">obj = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(obj))</span><br></pre></td></tr></table></figure><h3 id="总结：post和get区别？"><a href="#总结：post和get区别？" class="headerlink" title="总结：post和get区别？"></a>总结：post和get区别？</h3><ol><li>get请求方式的参数必须编码，参数是拼接到url后面，编码之后不需要调用encode方法</li><li>post请求方式的参数必须编码，参数是放在请求对象定制的方法中，编码之后需要调用encode方法</li></ol><h3 id="4-百度翻译之详细翻译"><a href="#4-百度翻译之详细翻译" class="headerlink" title="4.百度翻译之详细翻译"></a>4.百度翻译之详细翻译</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, br&#x27;, # 这是编码格式，没有UTF-8，必须注释掉</span></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Acs-Token&#x27;</span>: <span class="string">&#x27;1705576134035_1705654546778_pgSxk6qRvhC4+gm1SagDeIwwKcAGC365pA/wc0YZZyri/YI6h/8LSa5pIQ1G2rdtWlVoV9ibHEqExlMbbtd8V/jAVJH2e8ZpisX3ddWOOmP/WnrBLhXD38MHyAwl5/XWsJffX33TRC4K9Vsz8zQOW4NPyG7kLTJZGPDTCv1iaYQWgr4WJbih1fOWAXb+MgTa15EDPWLWTw8+lVEQTvK8Oans77TkOwbjvcAE1l3a6YawdzjJI0NbYG+Xk9PnDmy3JAg+5r4cxuBhfc6K0mY+2mDbFQ3iQyEnSszmLxWvAo08dvBVc7m8I18SyiGbHzNdOPAu+Qep37iPKOklgqrShhz9+jQfQaeJ54E8N/HrV/9chA0aJqkqPcQyz1z8nXXn57TEFVZV8dhti5xv7lw0SJetoL8BGfInUYMtxOovg7VDvW4BI192MW2ocJaIu1NoDhrAtKSJb4I58Q3k0dxn/Pn40xyb35uXK1e5MUykZ3ThxdahuJLHaVch95PuMyG0GuWV1hcQc9Lq3jRLc/jrQw==&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;149&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其中去决定性作用的是Cookie，其他的都是可以注释掉的</span></span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=51D9D30414A922DDC3F952B560F37FC2; PSTM=1652673230; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; BAIDUID=2552FC12B56D5C63A22F4860676B0A88:FG=1; BDUSS=25aNHBtd2VxOUgyNnpkUkd-TFJSejZJMWlFYU10ZjlMMEt6LTBldnlPcEJqb3BsSVFBQUFBJCQAAAAAAAAAAAEAAACDPaTeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBY2VBAWNlb; BDUSS_BFESS=25aNHBtd2VxOUgyNnpkUkd-TFJSejZJMWlFYU10ZjlMMEt6LTBldnlPcEJqb3BsSVFBQUFBJCQAAAAAAAAAAAEAAACDPaTeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBY2VBAWNlb; H_WISE_SIDS=39999_40016_40041; H_PS_PSSID=39999_40016_40041; H_WISE_SIDS_BFESS=39999_40016_40041; BAIDUID_BFESS=2552FC12B56D5C63A22F4860676B0A88:FG=1; BDRCVFR[A7hGrXFW48R]=K7PavkeTFPTUAN8ULuEQhPEUi4WU6; PSINO=2; BA_HECTOR=24a40la4a50l052h202h8k2gdtqjju1iqkdv61s; ZFY=JxHMjLMptFSB0Fx6rLKcRUU:AIGXbEGxWGnIfnIlrcrY:C; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1705150908,1705654260; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1705654540; ab_sr=1.0.1_MjBlNjBiNGE0YjVmNGI4NTRjYzBjYzUyYzU2Mzg4ZTZiMzY4Zjc3ODU1MzgwMjEyZGUwYjhhNDliYzZlYzM5M2U2YzZiNzQyOGZhNjc3OTNhY2JmM2ExNjg5YTdlOWY5Y2ZmODUwODViMTJmNjc3NGYwNzA0MmUwZTVjMzZhNmNiOTI4ZTBmNTQzZTgyYjgxYWRjNmQxN2Q0NmFiYTk4ZmZjOTdlZTYyMmJkMzY4ZTAwYTJiZjBhOGFkNWMxMTJi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com/translate?query=&amp;keyfrom=baidu&amp;smartresult=dict&amp;lang=auto2zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;9&quot;, &quot;Not?A_Brand&quot;;v=&quot;8&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/105&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;enter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;198772.518981&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;7483d683cdef5a92727320d35cbcdbf3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ts&#x27;</span>: <span class="string">&#x27;1705654546761&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数是不会拼接在url的后面，而是需放在请求对象定制的参数中</span></span><br><span class="line">request = urllib.request.Request(url = url,data = data,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#str数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串--&gt;json对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = json.loads(content)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="9-ajax的get请求"><a href="#9-ajax的get请求" class="headerlink" title="9.ajax的get请求"></a>9.ajax的get请求</h2><ul><li>案例1：豆瓣电影第一页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="comment"># 获取第一页数据并且保存</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=6&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open默认使用的是gbk的编码</span></span><br><span class="line"><span class="comment"># fp = open(&quot;douban.json&quot;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># fp.write(content) # ctrl+alt+l 调整格式</span></span><br><span class="line"><span class="comment"># fp.close</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>案例2：豆瓣电影前10页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=0&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=20&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=40&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规律：</span></span><br><span class="line"><span class="string">start : (page - 1) * 20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">步骤：</span></span><br><span class="line"><span class="string">1.请求对象的定制</span></span><br><span class="line"><span class="string">2.获取相应的数据</span></span><br><span class="line"><span class="string">3.数据下载</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span> : (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data)</span><br><span class="line">    url = base_url + data</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;豆瓣&quot;</span> + <span class="built_in">str</span>(page) + <span class="string">&quot;.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始的页码：&quot;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入结束的页码：&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end +<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 每页都需要进行请求对象的定制</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        <span class="comment"># 获取的响应的数据</span></span><br><span class="line">        content = get_content(request)</span><br><span class="line">        <span class="comment"># 下载</span></span><br><span class="line">        down_load(page,content)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-ajax的post请求"><a href="#10-ajax的post请求" class="headerlink" title="10.ajax的post请求"></a>10.ajax的post请求</h2><ul><li>案例：爬取肯德基官网</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">page 1</span></span><br><span class="line"><span class="string">http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="string">post请求</span></span><br><span class="line"><span class="string">cname: 北京</span></span><br><span class="line"><span class="string">pid:</span></span><br><span class="line"><span class="string">pageIndex: 1</span></span><br><span class="line"><span class="string">pageSize: 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">page 2</span></span><br><span class="line"><span class="string">http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="string">post请求</span></span><br><span class="line"><span class="string">cname: 北京</span></span><br><span class="line"><span class="string">pid:</span></span><br><span class="line"><span class="string">pageIndex: 2</span></span><br><span class="line"><span class="string">pageSize: 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规律：pageIndex（第几页就是几）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    base_url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;请求&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>:<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=base_url,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;肯德基_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始页码：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入终止页码：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request()</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(page,content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析与可视化</title>
      <link href="/2023/11/01/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/1.python%E7%B1%BB/4.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/11/01/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B7%AF%E7%BA%BF/1.python%E7%B1%BB/4.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频推荐：<a href="https://www.bilibili.com/video/BV1dA41187Yn/?spm_id_from=333.788.video.desc.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>重点学习了Numpy,Pandas,Matplotlib三个库</p><h1 id="第一章-数据分析与可视化概述"><a href="#第一章-数据分析与可视化概述" class="headerlink" title="第一章 数据分析与可视化概述"></a>第一章 数据分析与可视化概述</h1><h2 id="什么是数据分析"><a href="#什么是数据分析" class="headerlink" title="什么是数据分析"></a>什么是数据分析</h2><p>数据分析是使用适当的统计分析方法对收集来的大量数据进行分析，从中提取有用信息和形成结论，并加以详细研究和概括总结的过程。</p><h2 id="数据分析的流程"><a href="#数据分析的流程" class="headerlink" title="数据分析的流程"></a>数据分析的流程</h2><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/1.png?raw=true" alt="1.png"></p><h1 id="第二章-python编程基础"><a href="#第二章-python编程基础" class="headerlink" title="第二章 python编程基础"></a>第二章 python编程基础</h1><p><strong>注：详细语法见Python编程</strong></p><p>以下为个人认为容易忘记的知识点：</p><ol><li><p>不可变数据类型：number 、string、tuple</p></li><li><p>变数据类型：list、dictionary 、set</p></li><li><p>运算符优先级：</p><p>逻辑&lt;关系&lt;算术</p></li><li><p><strong>r” “</strong> 的字符串方式，默认不转义</p></li><li><p>切片：[:]</p></li><li><p>range（start,end,step）,生成为[,)的区间。</p></li><li><p>字典中的键必须唯一。</p></li><li><p>空集合只能使用set()创建。</p></li><li><p>“ “.join()连接字符串。</p></li><li><p><strong>lambda函数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匿名函数：</span><br><span class="line">a = lambda x,y,z:1+x*2+y*2+z*2</span><br><span class="line">a(1,2,3)</span><br></pre></td></tr></table></figure></li><li><p>文件操作</p><ul><li><p>打开文件：open()函数；</p></li><li><p>读取&#x2F;写入文件：read()、readline()、readlines()、write()等；</p></li><li><p>对读取到的数据进行处理；</p></li><li><p>关闭文件：close()。</p><table><thead><tr><th>read([size])</th><th>读取文件所有内容，返回字符串类型，参数size 表示读取的数量，以byte为单位，可以省略</th></tr></thead><tbody><tr><td><strong>readline([size])</strong></td><td><strong>读取文件一行的内容，以字符串形式返回，若定义了size，则读出一行的一部分</strong></td></tr><tr><td><strong>readlines([size])</strong></td><td><strong>读取所有的行到列表里面[line1,line2,…lineN]，(文件每一行是list的一个成员)，参数size表示读取内容的总长)</strong></td></tr></tbody></table></li></ul></li></ol><h1 id="第三章-NumPy数值计算基础"><a href="#第三章-NumPy数值计算基础" class="headerlink" title="第三章 NumPy数值计算基础"></a>第三章 NumPy数值计算基础</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>NumPy是Python的一种开源的数值计算扩展库。</p><p>它提供了两种基本的对象：</p><ol><li>ndarray：是储存单一数据类型的多维数组。</li><li>ufunc：是一种能够对数组进行处理的函数。</li></ol><p>ndarray是一个通用的同构数据容器，即其中的所有元素都需要相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i : int8,int16,int32,int64</span><br><span class="line">f : float16,float32,float64</span><br><span class="line">复数 ： complex64,complex64</span><br><span class="line">u : unicode编码</span><br><span class="line">s : 固定字符串长度</span><br><span class="line">b : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h2 id="array函数创建数组对象"><a href="#array函数创建数组对象" class="headerlink" title="array函数创建数组对象"></a>array函数创建数组对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array函数的格式：</span><br><span class="line">np.array(object, dtype,ndmin)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>接收array，表示想要创建的数组</td></tr><tr><td>dtype</td><td>接收data-type，表示数组所需的数据类型，未给定则选择保存对象所需的最小类型，默认为None</td></tr><tr><td>ndmin</td><td>接收int，制定生成数组应该具有的最小维数，默认为None</td></tr></tbody></table><p>注：在创建数组时，NumPy会为新建的数组推断出一个合适的数据类型，并保存在dtype中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">num = np.array(data,dtype = <span class="string">&#x27;float64&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="专门创建数组的函数"><a href="#专门创建数组的函数" class="headerlink" title="专门创建数组的函数"></a>专门创建数组的函数</h2><p>1.arange函数：创建数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">np.arange([start, ]stop, [step, ]dtype)</span><br><span class="line"></span><br><span class="line">num = np.arange(<span class="number">10</span>)</span><br><span class="line">warray = np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>2.linspace 函数：创建等差一维数组，接收元素数量作为参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">np.linspace(start, stop, num, endpoint, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">warry = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">输出结果：</span><br><span class="line">array([<span class="number">0.</span>  , <span class="number">0.25</span>, <span class="number">0.5</span> , <span class="number">0.75</span>, <span class="number">1.</span>  ])</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong>名称</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>start:</td><td>起始值，默认从0开始;</td></tr><tr><td>stop:</td><td>结束值；生成的元素不包括结束值；</td></tr><tr><td>num</td><td>要生成的等间隔样例数量</td></tr></tbody></table><p>3.logspace函数：创建等比一维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：np.logspace(start, stop, num, endpoint=True, base=10.0, dtype=None))</span><br><span class="line">logspace的参数中，start, stop代表的是10的幂,默认基数base为10，第三个参数元素个数。</span><br><span class="line"></span><br><span class="line">warry = np.logspace(0,1,5) #生成1-10的5个等比元素</span><br></pre></td></tr></table></figure><p>4.zeros函数：创建指定长度或形状的全0数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：np.zeros(shape, dtype=float, order=&#x27;C&#x27;)</span><br><span class="line"></span><br><span class="line">num = np.zeros(4)</span><br></pre></td></tr></table></figure><p>5.ones函数：创建指定长度或形状的全1数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：np. ones(shape, dtype=None, order=&#x27;C&#x27;)</span><br><span class="line"></span><br><span class="line">num = np.ones(4)</span><br></pre></td></tr></table></figure><p>6.diag函数：创建一个对角阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">np.diag(v, k=<span class="number">0</span>)</span><br><span class="line">使用eye函数可创建一个对角线为 <span class="number">1</span> 其他位置全为 <span class="number">0</span> 的矩阵。</span><br><span class="line"></span><br><span class="line">num = np.diag(data,k=<span class="number">0</span>)</span><br><span class="line">num = np.eye(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ndarray对象属性和数据转换"><a href="#ndarray对象属性和数据转换" class="headerlink" title="ndarray对象属性和数据转换"></a>ndarray对象属性和数据转换</h2><p>NumPy创建的 ndarray对象属性及其说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndim</td><td>返回数组的轴的个数</td></tr><tr><td>shape</td><td>返回数组的维度</td></tr><tr><td>size</td><td>返回数组元素个数</td></tr><tr><td>dtype</td><td>返回数据类型</td></tr><tr><td>itemsize</td><td>返回数组中每个元素的字节大小</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">warray = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;秩为：&#x27;</span>,warray.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;形状为：&#x27;</span>,warray.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;元素个数为：&#x27;</span>,warray.size)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">&#x27;设置数组的shape属性。&#x27;</span></span><br><span class="line">warray.shape = (<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(warray)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">&#x27;数组的类型转换&#x27;</span></span><br><span class="line">arr1 = np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.dtype)</span><br><span class="line">arr2 = arr1.astype(np.float64)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NumPy.random模块中，提供了多种随机数的生成函数。如randint函数生成指定范围的随机整数来构成指定形状的数组。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>用法：</span><br><span class="line">np.random.randint(low, high = <span class="literal">None</span>, size = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">arr = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,size = (<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>生成[<span class="number">0</span>,<span class="number">1</span>]之间的随机数组。</span><br><span class="line">arr1 = np.random.rand(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2 = np.random.rand(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>random模块的常用随机数生成函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>seed</td><td>确定随机数生成器的种子</td></tr><tr><td>permutation</td><td>返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td>shuffle</td><td>对一个序列进行随机排序</td></tr><tr><td>binomial</td><td>产生二项分布的随机数</td></tr><tr><td>normal</td><td>产生正态（高斯）分布的随机数</td></tr><tr><td>beta</td><td>产生beta分布的随机数</td></tr><tr><td>chisquare</td><td>产生卡方分布的随机数</td></tr><tr><td>gamma</td><td>产生gamma分布的随机数</td></tr><tr><td>uniform</td><td>产生在[0,1)中均匀分布的随机数</td></tr></tbody></table><h2 id="数组变换"><a href="#数组变换" class="headerlink" title="数组变换"></a>数组变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">数组重塑:数据重塑不会改变原来的数组</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">对于定义好的数组，可以通过reshape方法改变其数据维度。</span><br><span class="line">格式：np.reshape(data, newshape, order=<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    data需要处理的数据。</span><br><span class="line">    newshape新维度——整数或整数元组，</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#reshape的参数中的其中一个可以设置为-1，表示数组的维度可以通过数据本身来推断。</span></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>np.resize(data,newshape)</span><br><span class="line">np.resize(np.arange(<span class="number">8</span>),[<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>与reshape相反的方法是数据散开（ravel）或数据扁平化（flatten）</span><br><span class="line">data.ravel()</span><br><span class="line">data.faltten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组的合并：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>hstack函数：实现横向合并</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.hstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>vstack函数：实现纵向组合是利用vstack将数组纵向合并；</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.vstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>concatenate函数：可以实现数组的横向或纵向合并，参数axis=<span class="number">1</span>时进行横向合并，axis=<span class="number">0</span>时进行纵向合并。</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组分割：</span><br><span class="line">与数组合并相反，hsplit函数、vsplit函数和split函数分别实现数组的横向、纵向和指定方向的分割。</span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向分割为:\n&#x27;</span>,np.hsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为:\n&#x27;</span>,np.vsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">split在参数axis = <span class="number">1</span>时实现数组的横向分割，axis = <span class="number">0</span>时则进行纵向分割。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组转置和轴对换</span><br><span class="line">数组转置是数组重塑的一种特殊形式，可以通过transpose方法进行转置。</span><br><span class="line"><span class="number">1.</span>转置transpose，或者T</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.transpose((<span class="number">1</span>,<span class="number">0</span>)))</span><br><span class="line"><span class="built_in">print</span>(arr.T)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>轴对换</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.swapaxes(<span class="number">0</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="数组的索引和切片"><a href="#数组的索引和切片" class="headerlink" title="数组的索引和切片"></a>数组的索引和切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式arr[1:1:10,::1:20]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组的切片返回的是原始数据，并不会产生新的数据。</span></span><br><span class="line"><span class="string">可以使用copy方法实现</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr1 = arr[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">arr[(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>)] <span class="comment"># 答案为：1，11 ,找(0,1)和(2,3)的数据</span></span><br></pre></td></tr></table></figure><h2 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">一.数组和标量间的运算</span><br><span class="line">arr = np.arange(<span class="number">4</span>)</span><br><span class="line">c = arr * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.ufunc函数:全称通用函数，针对数组进行操作，返回numpy数组，比math库效率高</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>常用的ufunc函数</span><br><span class="line">（<span class="number">1</span>）四则运算：+，-，*，/，**</span><br><span class="line">（<span class="number">2</span>）比较运算：&gt;,&lt;,!=,==</span><br><span class="line">（<span class="number">3</span>）逻辑运算：np.<span class="built_in">any</span>,np.<span class="built_in">all</span>相当于<span class="keyword">or</span>,<span class="keyword">and</span></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line">np.<span class="built_in">all</span>(a) <span class="comment"># False</span></span><br><span class="line">np.<span class="built_in">all</span>(b) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>ufunc函数的广播机制：广播指不同形状的数组之间执行算术运算。</span><br><span class="line">（<span class="number">1</span>）让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在左边加<span class="number">1</span>补齐。</span><br><span class="line">（<span class="number">2</span>）如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为<span class="number">1</span>的维度进行扩展，以匹配另一个数组的形状。</span><br><span class="line">（<span class="number">3</span>）输出数组的shape是输入数组shape的各个轴上的最大值。</span><br><span class="line">（<span class="number">4</span>）如果两个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度等于<span class="number">1</span>，则引发异常。</span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">arr2 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.条件逻辑运算</span><br><span class="line">语法：np.where(condition,x,y)</span><br><span class="line">满足条件输出x，否则y；若只有条件 (condition)，没有x和y，则输出满足条件元素的下标。</span><br><span class="line">w = np.array([<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">10</span>])</span><br><span class="line">np.where(w&gt;<span class="number">4</span>) <span class="comment"># 返回下标</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组读写"><a href="#数组读写" class="headerlink" title="数组读写"></a>数组读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一.NumPy中读写二进制文件的方法有：</span><br><span class="line"><span class="number">1.</span> np.load(“文件名.npy<span class="string">&quot;)是从二进制文件中读取数据；</span></span><br><span class="line"><span class="string">2. np.save(“文件名[.npy]&quot;</span>, arr) 是以二进制格式保存数据。（很难使用其他语言读入）</span><br><span class="line"></span><br><span class="line">二. 读写文本文件</span><br><span class="line"><span class="number">1.</span> np.loadtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>,delimiter = <span class="string">&quot;,&quot;</span>)把文件加载到一个二维数组中；</span><br><span class="line"><span class="number">2.</span> np.savetxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, arr, fmt = <span class="string">&quot;%d&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是将数组写到某种分隔符隔开的文本文件中；</span><br><span class="line"><span class="number">3.</span> np.genfromtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是结构化数组和缺失数据。</span><br><span class="line">           </span><br><span class="line">       </span><br><span class="line">           </span><br><span class="line">三.读取CSV文件</span><br><span class="line">np.loadtxt(fname, dtype=, comments=’<span class="comment">#’, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=‘bytes’)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>fname</td><td>str，读取的CSV文件名</td></tr><tr><td>delimiter</td><td>str，数据的分割符</td></tr><tr><td>usecols</td><td>tuple(元组) ，执行加载数据文件中的哪些列</td></tr><tr><td>unpack</td><td>bool，是否将加载的数据拆分为多个组，True表示拆，False不拆</td></tr><tr><td>skipprows</td><td>int，跳过多少行，一般用于跳过前几行的描述性文字</td></tr><tr><td>encoding</td><td>bytes，编码格式</td></tr></tbody></table><h2 id="Numpy中的数据统计与分析"><a href="#Numpy中的数据统计与分析" class="headerlink" title="Numpy中的数据统计与分析"></a>Numpy中的数据统计与分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一.排序</span><br><span class="line">直接排序：</span><br><span class="line">Sort函数对数据直接进行排序，调用改变原始数组，无返回值。</span><br><span class="line">格式：numpy.sort(a, axis, kind, order)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">a = np.array(a)</span><br><span class="line">np.sort(a)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>kind</td><td>排序算法，默认为“quicksort”</td></tr><tr><td>order</td><td>排序的字段名，可指定字段排序，默认为None</td></tr><tr><td>axis</td><td>使得sort函数可以沿着指定轴对数据集进行排序。axis&#x3D;1为沿横轴排序；axis&#x3D;0为沿纵轴排序；axis&#x3D;None,将数组平坦化之后进行排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">间接排序：</span><br><span class="line">np.argsort函数和np.lexsort函数根据一个或多个键值对数据集进行排序。</span><br><span class="line">np.argsort():  返回的是数组值从小到大的索引值;      </span><br><span class="line">np.lexsort():  返回值是按照最后一个传入数据排序的结果索引值.</span><br><span class="line"></span><br><span class="line">a.argsort()</span><br><span class="line">np.lexsort((b,a))</span><br></pre></td></tr></table></figure><h2 id="重复数据与去重"><a href="#重复数据与去重" class="headerlink" title="重复数据与去重"></a>重复数据与去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一.对于一维数组或者列表，unique函数去除其中重复的元素，并按元素由大到小返回一个新的元组或者列表。</span><br><span class="line">names = np.array([<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>,<span class="string">&#x27;黄色&#x27;</span>,<span class="string">&#x27;白色&#x27;</span>,<span class="string">&#x27;红色&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>,names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重后的数组：&#x27;</span>,np.unique(names)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.统计分析中有时也需要把一个数据重复若干次，使用tile和repeat函数即可实现此功能。</span><br><span class="line">tile函数的格式：np.tile(A, reps)</span><br><span class="line">其中，参数A表示要重复的数组，reps表示重复次数。</span><br><span class="line"></span><br><span class="line">repeat函数的格式：np.repeat(A, reps, axis = <span class="literal">None</span>)</span><br><span class="line">“A”: 是需要重复的数组元素，</span><br><span class="line">“repeats”: 是重复次数</span><br><span class="line">“axis”: 指定沿着哪个轴进行重复，axis = <span class="number">0</span>表示按行进行元素重复；axis = <span class="number">1</span>表示按列进行元素重复。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.常用统计函数</span><br><span class="line">常见的有<span class="built_in">sum</span>、mean、std、var、<span class="built_in">min</span>和<span class="built_in">max</span>等。</span><br><span class="line">argmax索引最大</span><br><span class="line">cumsum累计和 <span class="comment"># 输出中间值</span></span><br><span class="line">cumprod累计积 </span><br><span class="line">log1plog(<span class="number">1</span>+p) <span class="comment"># 以e为底</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">np.<span class="built_in">sum</span>(a)</span><br><span class="line">np.argmax(a)</span><br><span class="line">np.cumsum(a)</span><br><span class="line">np.cumprod(a)</span><br><span class="line">np.log1p(<span class="number">1.71</span>)</span><br></pre></td></tr></table></figure><h1 id="第四章-Pandas统计分析基础"><a href="#第四章-Pandas统计分析基础" class="headerlink" title="第四章 Pandas统计分析基础"></a>第四章 Pandas统计分析基础</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><p> Pandas有三种数据结构：Series、DataFrame和Panel。</p><p>Series类似于一维数组；</p><p>DataFrame是类似表格的二维数组；</p><p>Panel可以视为Excel的多表单Sheet。</p><h2 id="Pandas的数据结构"><a href="#Pandas的数据结构" class="headerlink" title="Pandas的数据结构"></a>Pandas的数据结构</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Series 是一种一维数组对象，包含了一个值序列，并且包含了数据标签，称为索引（index），可通过索引来访问数组中的数据。</span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>Series的创建</span><br><span class="line">obj = pd.Series([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]) <span class="comment">#仅有一个数组构成</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建Series时指定索引</span><br><span class="line">i = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">v = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">t = pd.Series(v, index = i, name = <span class="string">&quot;col&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">尽管创建Series指定了index参数，实际Pandas还是有隐藏的index位置信息的。所以Series有两套描述某条数据的手段：位置和标签</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">val = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">idx1 = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">14</span>)</span><br><span class="line">idx2 = <span class="string">&#x27;hello the cruel world&#x27;</span>.split()</span><br><span class="line">s0 = pd.Series(val)</span><br><span class="line">s1 = pd.Series(val,index=idx1)</span><br><span class="line">t = pd.Series(val,index=idx2)</span><br><span class="line"><span class="built_in">print</span>(s0.index)</span><br><span class="line"><span class="built_in">print</span>(s1.index)</span><br><span class="line"><span class="built_in">print</span>(t.index)</span><br><span class="line"><span class="built_in">print</span>(s0[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>],t[<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过字典创建:如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series。</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj3 = pd.Series(sdata)</span><br><span class="line"><span class="built_in">print</span>(obj3)</span><br><span class="line">如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>键值和指定的索引不匹配</span><br><span class="line">sdata = &#123;<span class="string">&quot;a&quot;</span> : <span class="number">100</span>, <span class="string">&quot;b&quot;</span> : <span class="number">200</span>, <span class="string">&quot;e&quot;</span> : <span class="number">300</span>&#125;</span><br><span class="line">letter = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>  , <span class="string">&quot;e&quot;</span> ]</span><br><span class="line">obj =  pd.Series(sdata, index = letter)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>Series域重要的一个功能是：它在算术运算中会自动对齐不同索引的数据。</span><br><span class="line">不同索引数据的自动对齐</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj1 = pd.Series(sdata)</span><br><span class="line">states = [<span class="string">&#x27;California&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>]</span><br><span class="line">obj2 = pd.Series(sdata, index = states)</span><br><span class="line"><span class="built_in">print</span>(obj1+obj2) <span class="comment"># 实值 + 空值 = 空值</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>Series索引的修改</span><br><span class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">obj.index = [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Jeff&#x27;</span>, <span class="string">&#x27;Ryan&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">pd.DataFrame(data=<span class="literal">None</span>, index=<span class="literal">None</span>, columns=<span class="literal">None</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DataFrame的创建</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:[<span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;male&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>:[<span class="number">2001</span>, <span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2002</span>],</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">DataFrame会自动加上索引（跟Series一样），且全部列会被有序排列。如果指定了列序列，则DataFrame的列就会按照指定顺序迸行排列。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>指定索引顺序：跟Series一样，如果传入的列在数据中找不到，就会产生NAN值</span><br><span class="line">df1 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,<span class="string">&#x27;address&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>DataFrame创建时指定列名</span><br><span class="line">DataFrame构造函数的columns函数给出列的名字，index给出label标签</span><br><span class="line">df3 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;city&#x27;</span>],index = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>获取某列数据</span><br><span class="line">df3[[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;sex&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>增加一列</span><br><span class="line">df3[<span class="string">&quot;hello&quot;</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>删除一列</span><br><span class="line"><span class="keyword">del</span> df3[<span class="string">&quot;hello&quot;</span>]</span><br></pre></td></tr></table></figure><p>DataFrame的属性:</p><table><thead><tr><th><strong>函数</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td>values</td><td>元素</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>columns</td><td>列名</td></tr><tr><td>dtypes</td><td>类型</td></tr><tr><td>size</td><td>元素个数</td></tr><tr><td>ndim</td><td>维度数</td></tr><tr><td>shape</td><td>数据形状（行列数目）</td></tr></tbody></table><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>索引对象</span><br><span class="line"><span class="built_in">print</span>(df) </span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>DataFrame的Index</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> df.columns)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span> <span class="keyword">in</span> df.index)</span><br></pre></td></tr></table></figure><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。Index的常用方法和属性：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>append</td><td>连接另一个Index对象，产生一个新的Index</td></tr><tr><td>diff</td><td>计算差集，并得到一个Index</td></tr><tr><td>intersection</td><td>计算交集</td></tr><tr><td>union</td><td>计算并集</td></tr><tr><td>isin</td><td>计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td>delete</td><td>删除索引i处的元素，并得到新的Index</td></tr><tr><td>drop</td><td>删除传入的值，并得到新的Index</td></tr><tr><td>insert</td><td>将元素插入到索引i处，并得到新的Index</td></tr><tr><td>is_monotonic</td><td>当各元素均大于等于前一个元素时，返回True</td></tr><tr><td>is.unique</td><td>当Index没有重复值时，返回True</td></tr><tr><td>unique</td><td>计算Index中唯一值的数组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入索引值</span><br><span class="line">df3.index.insert(<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p>DataFrame的基础属性有values、index、columns、dtypes、ndim和shape，分别可以获取DataFrame的元素、索引、列名、类型、维度和形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br><span class="line">df.columns</span><br></pre></td></tr></table></figure><h2 id="Pandas索引操作"><a href="#Pandas索引操作" class="headerlink" title="Pandas索引操作"></a>Pandas索引操作</h2><ol><li><p>重置索引:指对索引重新排序而不是重新命名，如果某个索引值不存在的话，会引入缺失值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">DataFrame.reindex(labels = None,index = None,columns = None,axis = None,method = None,copy = True,level = None,fill_value = nan,limit = None,tolerance = None)</span><br><span class="line">    其中：</span><br><span class="line">        index：用作索引的新序列。</span><br><span class="line">        method：插值填充方式。</span><br><span class="line">        fill_value：引入缺失值时使用的替代值。</span><br><span class="line">        limit：前向或者后向填充时的最大填充量。</span><br><span class="line">        method：使用相邻的元素值进行填充(ffill向前填充,bfill向后,nearest最近的索引值填充)</span><br><span class="line">        </span><br><span class="line">obj = pd.Series([7,-1,4,3],index=[&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;,&#x27;d&#x27;])</span><br><span class="line">print(obj)</span><br><span class="line">obj.reindex([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;])</span><br></pre></td></tr></table></figure></li><li><p>更换索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不使用默认的行索引时，set_index()实现</span><br><span class="line">df4 = df3.set_index(&#x27;city&#x27;)</span><br><span class="line">df4</span><br><span class="line"></span><br><span class="line">reset_index()还原索引，重新恢复索引为默认的整型索引</span><br></pre></td></tr></table></figure></li></ol><h2 id="DataFrame数据的查询与编辑"><a href="#DataFrame数据的查询与编辑" class="headerlink" title="DataFrame数据的查询与编辑"></a>DataFrame数据的查询与编辑</h2><h3 id="DataFrame数据的查询"><a href="#DataFrame数据的查询" class="headerlink" title="DataFrame数据的查询"></a>DataFrame数据的查询</h3><ol><li><p>选取列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w1 = df4[[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line">print(w1)</span><br></pre></td></tr></table></figure></li><li><p>选取行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">通过切片的方式选取</span><br><span class="line">df4[:2]</span><br><span class="line">df4[1:3]</span><br><span class="line"></span><br><span class="line">此外：</span><br><span class="line">head（） #默认获取前5行</span><br><span class="line">head（n）#获取前n行</span><br><span class="line">tail（）#默认获取后5行</span><br><span class="line">tail（n）#获取后n行</span><br><span class="line">sample（n）#随机抽取n行显示</span><br><span class="line">sample(frac=0.6)     #随机抽取60%的行</span><br><span class="line"></span><br><span class="line">df4.head(2)</span><br></pre></td></tr></table></figure></li><li><p>选取行和列：切片选取行具有很大的局限性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">DataFrame.loc(行索引名称或条件，列索引名称)</span><br><span class="line">DataFrame.iloc(行索引位置，列索引位置)</span><br><span class="line"></span><br><span class="line">1.loc的数据选取</span><br><span class="line">df4.loc[[&#x27;北京&#x27;,&#x27;上海&#x27;],[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line">df4.loc[df4[&#x27;year&#x27;]&gt;=2002,[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line"></span><br><span class="line">2.loc和isin配合使用</span><br><span class="line">df4.loc[df4[&#x27;year&#x27;].isin([&#x27;2001&#x27;,&#x27;2003&#x27;])] # 查询2001和2003年的数据</span><br><span class="line"></span><br><span class="line">3.使用iloc选取行和列</span><br><span class="line">df4.iloc[:,2]</span><br><span class="line">df4.iloc[[1,3],[0,2]] # 1和3行，0和2列</span><br><span class="line"></span><br><span class="line">4.使用pandas的query方法</span><br><span class="line">语法：</span><br><span class="line">DataFrame.query(self,expr,inplace,**kwargs) # expr要评估的查询字符串</span><br><span class="line">df4.query(&#x27;year &gt; 2001 &amp; year &lt;2003&#x27;)</span><br><span class="line"></span><br><span class="line">5.布尔选择：使用逻辑运算符前要加() # &amp; | !=</span><br><span class="line">df = pd.DataFrame(&#123;&#x27;price&#x27;:[1,3,5,5,4,5,3]&#125;)</span><br><span class="line">df[(df.price &gt;= 2) &amp; (df.price &lt;= 4)]</span><br></pre></td></tr></table></figure></li></ol><h3 id="DataFrame数据的编辑"><a href="#DataFrame数据的编辑" class="headerlink" title="DataFrame数据的编辑"></a>DataFrame数据的编辑</h3><p>将需要编辑的数据提取出来，重新赋值</p><ol><li><p>增加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.增加一行直接通过append方法传入字典结构数据即可。ignore_index设置是否忽略原Index。</span><br><span class="line">data = &#123;&#x27;city&#x27;:&#x27;兰州&#x27;,&#x27;name&#x27;:&#x27;李红&#x27;,&#x27;year&#x27;:2005,&#x27;sex&#x27;:&#x27;female&#x27;&#125;</span><br><span class="line">df1.append(data,ignore_index=True)</span><br><span class="line"></span><br><span class="line">2.增加列时，只需为要增加的列赋值即可创建一个新的列。若要指定新增列的位置，可以用insert函数。</span><br><span class="line">df1[&#x27;score&#x27;] = [10,12,13,14]</span><br><span class="line">df1.insert(1,&#x27;No&#x27;,[1,2,3,4])</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop方法，axis指定，默认删除不修改原数据，加上inplace=True可以原数据删除。</span><br><span class="line">df4.drop(&#x27;广州&#x27;,inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>修改数据：直接对选择的数据赋值即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">还可以使用replace进行数据的替换</span><br><span class="line">DataFrame.replace(to_replace=None,value=None,inplace=False,limit=None,regex=False,method=&#x27;pad&#x27;)</span><br><span class="line">    参数to_replace表示被替换的值，value表示替换后的值。</span><br><span class="line">    同时替换多个值时使用字典数据，如DataFrame.replace(&#123;&#x27;B&#x27;:&#x27;E&#x27;,&#x27;C&#x27;:&#x27;F&#x27;&#125;)表示将表中的B替换为E，C替换为F</span><br></pre></td></tr></table></figure></li><li><p>修改列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pandas通过DataFrame.rename()函数，传入需要修改列名的字典形式来修改列名。</span><br><span class="line">df4.rename(columns=&#123;&#x27;no&#x27;:&#x27;number&#x27;&#125;,inplace=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Pandas数据运算"><a href="#Pandas数据运算" class="headerlink" title="Pandas数据运算"></a>Pandas数据运算</h2><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>Pandas执行算术运算时，会先按照索引进行对齐，对齐以后再进行相应的运算，没有对齐的位置会用NaN进行补齐。（数据对齐）</p><p>NAN填充缺失数据，则可以在调用add方法时提供fill_value参数的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj_one.add(obj_two, fill_value = 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li><p>按索引排序</p><p>使用sort_index()方法，该方法可以用行索引或者列索引进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sort_index（axis = 0，level = None，ascending = True，inplace = False，kind =&#x27; quicksort &#x27;，na_position=&#x27;last&#x27;，sort_remaining = True ）</span><br><span class="line">     axis：轴索引，0表示index（按行），1表示columns（按列）。</span><br><span class="line">     level：若不为None，则对指定索引级别的值进行排序。</span><br><span class="line">     ascending：是否升序排列，默认为True表示升序。</span><br><span class="line"></span><br><span class="line">1.对Series进行分别排序</span><br><span class="line">ser_obj = pd.Series(range(10, 15), index=[5, 3, 1, 3, 2])</span><br><span class="line"># 按索引进行升序排列</span><br><span class="line">ser_obj.sort_index()</span><br><span class="line"># 按索引进行降序排列</span><br><span class="line">ser_obj.sort_index(ascending = False)</span><br><span class="line"></span><br><span class="line">2.按索引对DataFrame进行分别排序，axis指定方向</span><br><span class="line">df_obj = pd.DataFrame(np.arange(9).reshape(3, 3),index=[4, 3, 5]) </span><br><span class="line"># 按行索引升序排列</span><br><span class="line">df_obj.sort_index()</span><br><span class="line"># 按行索引降序排列</span><br><span class="line">df_obj.sort_index(ascending=False)</span><br></pre></td></tr></table></figure></li><li><p>按值排序</p><p>Pandas中用来按值排序的方法为sort_values()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sort_values(by,axis=0, ascending=True, inplace=False, kind=&#x27;quicksort&#x27;,na_position=&#x27;last&#x27;)</span><br><span class="line">by参数表示排序的列</span><br><span class="line">na_position参数只有两个值：first和last，若设为first，则会将NaN值放在开头；若设为False，则会将NaN值放在最后。</span><br><span class="line"></span><br><span class="line">1.</span><br><span class="line">ser_obj = pd.Series([4, np.nan, 6, np.nan, -3, 2])</span><br><span class="line"># 按值升序排列</span><br><span class="line">ser_obj.sort_values()</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">df_obj = pd.DataFrame([[0.4, -0.1, -0.3, 0.0], </span><br><span class="line">                       [0.2, 0.6, -0.1, -0.7],</span><br><span class="line">                       [0.8, 0.6, -0.5, 0.1]])</span><br><span class="line"># 对列索引值为2的数据进行排序</span><br><span class="line">df_obj.sort_values(by=2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="统计计算与描述"><a href="#统计计算与描述" class="headerlink" title="统计计算与描述"></a>统计计算与描述</h3><p>常用方法：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/2.png?raw=true" alt="2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果希望一次性输出多个统计指标，则调用describe()方法实现，语法：</span><br><span class="line">describe(percentiles=None, include=None, exclude=None)</span><br><span class="line">percentiles：输出中包含的百分数，位于[0,1]之间。如果不设置该参数，则默认为[0.25,0.5,0.75]，返回25%，50%，75%分位数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="层次化索引"><a href="#层次化索引" class="headerlink" title="层次化索引"></a>层次化索引</h3><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/3.png?raw=true" alt="3 .png"></p><ol><li><p>两层索引结构：分为内层索引和外层索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">Series和DataFrame均可以实现层次化索引，最常见的方式是在构造方法的index参数中传入一个嵌套列表。</span><br><span class="line">注意：在创建层次化索引对象时，嵌套函数中两个列表的长度必须是保持一致的，否则将会出现ValueError错误。</span><br><span class="line"></span><br><span class="line">mulitindex_series = pd.Series([15848,13472,12073.8,7813,7446,6444,15230,8269],</span><br><span class="line">                        index=[[&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;],</span><br><span class="line">                                [&#x27;石家庄市&#x27;,&#x27;唐山市&#x27;,&#x27;邯郸市&#x27;,&#x27;秦皇岛市&#x27;,&#x27;郑州市&#x27;,&#x27;开封市&#x27;,&#x27;洛阳市&#x27;,&#x27;新乡市&#x27;]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.通过MultiIndex类的方法构建一个层次化索引</span><br><span class="line">MultiIndex.from_tuples() # 将元组列表转换为MultiIndex。</span><br><span class="line">MultiIndex.from_arrays() # 将数组列表转换为MultiIndex。</span><br><span class="line">MultiIndex.from_product() # 从多个集合的笛卡尔乘积中创建一个MultiIndex。</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">list_tuples = [(&#x27;A&#x27;,&#x27;A1&#x27;), (&#x27;A&#x27;,&#x27;A2&#x27;), (&#x27;B&#x27;,&#x27;B1&#x27;),(&#x27;B&#x27;,&#x27;B2&#x27;), (&#x27;B&#x27;,&#x27;B3&#x27;)]</span><br><span class="line"># 根据元组列表创建一个MultiIndex对象</span><br><span class="line">multi_index = MultiIndex.from_tuples(tuples=list_tuples,names=[ &#x27;外层索引&#x27;, &#x27;内层索引&#x27;])</span><br><span class="line"></span><br><span class="line">multi_array = MultiIndex.from_arrays(arrays =[[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;B&#x27;],</span><br><span class="line">  [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;B3&#x27;]],</span><br><span class="line">  names=[&#x27;外层索引&#x27;,&#x27;内层索引&#x27;])</span><br><span class="line"></span><br><span class="line">numbers = [0, 1, 2]</span><br><span class="line">colors = [&#x27;green&#x27;, &#x27;purple&#x27;]</span><br><span class="line">multi_product = pd.MultiIndex.from_product(iterables=[numbers, colors],names=[&#x27;number&#x27;, &#x27;color&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="数据分组与聚合"><a href="#数据分组与聚合" class="headerlink" title="数据分组与聚合"></a>数据分组与聚合</h2><ol><li>分组是指使用特定的条件将原数据划分为多个组</li><li>聚合指的是对每个分组中的数据执行某些操作，最后将计算的结果进行整合。</li><li>分组与聚合的过程大概分为以下三步：<ul><li>拆分：将数据集按照一些标准拆分为若干个组。</li><li>应用：将某个函数或方法（内置和自定义均可）应用到每个分组。</li><li>合并：将产生的新值整合到结果对象中。</li></ul></li></ol><h3 id="数据的分组"><a href="#数据的分组" class="headerlink" title="数据的分组"></a>数据的分组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">groupby()方法将数据集按照某些标准划分成若干个组。</span><br><span class="line">语法：</span><br><span class="line">groupby(by=None, axis=0, level=None, as_index=True, sort=True,group_keys=True, squeeze=False, observed=False, **kwargs)</span><br><span class="line">    by：用于确定进行分组的依据。</span><br><span class="line">    axis：表示分组轴的方向。</span><br><span class="line">    sort：表示是否对分组标签进行排序，接收布尔值，默认为True。</span><br><span class="line"></span><br><span class="line">使用Series调用groupby()方法返回的是SeriesGroupBy对象。</span><br><span class="line">使用DataFrame调用groupby()方法返回的是DataFrameBy对象。</span><br></pre></td></tr></table></figure><ol><li><p>按列名进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(by=&#x27;Key&#x27;)</span><br><span class="line"></span><br><span class="line">查看每个分组的具体内容：</span><br><span class="line">group_obj = df.groupby(&#x27;Key&#x27;)</span><br><span class="line"># 遍历分组对象</span><br><span class="line">for i in group_obj:</span><br><span class="line">print(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>按Series对象进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ser_obj = pd.Series([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line"># 按自定义Series对象进行分组</span><br><span class="line">group_obj = df.groupby(by = ser_obj)</span><br><span class="line"></span><br><span class="line">如果Series对象与Pandas对象的索引长度不相同时，则只会将具有相同索引的部分数据进行分组。</span><br><span class="line">df = se = pd.Series([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line">group_obj = df.groupby(se)[&#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;,&#x27;two&#x27;, &#x27;one&#x27;],</span><br><span class="line">    &#x27;data1&#x27;: [2, 3, 4, 6, 8],</span><br><span class="line">    &#x27;data2&#x27;: [3, 5, 6, 3, 7]&#125;)</span><br><span class="line">se = pd.Series([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line">group_obj = df.groupby(se)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>按字典进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当使用字典对DataFrame进行分组时，则需要确定轴的方向及字典中的映射关系，即字典中的键为列名，字典的值为自定义的分组名。</span><br></pre></td></tr></table></figure></li><li><p>按函数进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将函数作为分组键会更加灵活，任何一个被当做分组键的函数都会在各个索引值上被调用一次，返回的值会被用作分组名称。</span><br><span class="line"># 使用内置函数len进行分组</span><br><span class="line">groupby_obj = df.groupby(len)</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据的聚合"><a href="#数据的聚合" class="headerlink" title="数据的聚合"></a>数据的聚合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自定义函数，将它作为参数传给agg()方法，实现Pandas对象的聚合运算。</span><br><span class="line">agg（func,axis = 0,* args,** kwargs ）</span><br><span class="line">    func：表示用于汇总数据的函数，可以为单个函数或函数列表。</span><br><span class="line">    axis：表示函数作用于轴的方向，0或index表示将函数应用到每一列；1或columns表示将函数应用到每一行，该参数的默认值为0。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>对每一列数据应用同一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通过agg()方法进行聚合，最简单的方式就是给该方法的func参数传入一个函数，这个函数既可以是内置的，也可以自定义的。</span><br><span class="line">def range_data_group(arr):</span><br><span class="line">      return arr.max()-arr.min()</span><br><span class="line"># 使用自定义函数聚合分组数据</span><br><span class="line">data_group.agg(range_data_group)  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对某列数据应用不同的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可以将两个函数的名称放在列表中，之后在调用agg()方法进行聚合时作为参数传入即可。</span><br><span class="line"></span><br><span class="line"># 对一列数据用两种函数聚合</span><br><span class="line">data_group.agg([range_data_group, sum])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了能更好地反映出每列数据的信息，可以使用“(name,function）”元组将function（函数名）替换为name（自定义名称）。</span><br><span class="line">data_group.agg([(&quot;极差&quot;, range_data_group), (&quot;和&quot;, sum)])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对不同列数据应用不同函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果希望对不同的列使用不同的函数，则可以在agg()方法中传入一个&#123;&quot;列名&quot;:&quot;函数名&quot;&#125;格式的字典。</span><br><span class="line">data_group.agg(&#123;&#x27;a&#x27;: &#x27;sum&#x27;, &#x27;b&#x27;: &#x27;mean&#x27;, &#x27;c&#x27;: range_data_group&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="分组运算"><a href="#分组运算" class="headerlink" title="分组运算"></a>分组运算</h3><ul><li>如果希望聚合后的数据与原数据保持一样的形状，那么可以通过transfrom()方法实现。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform(func, *args, **kwargs)</span><br><span class="line">transfrom()方法会把func函数应用到各个分组中，并且将计算结果放在适当的位置上。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform()方法返回的结果有两种，一种是可以广播的标量值（np.mean），另一种可以是与分组大小相同的结果数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>apply()方法的使用是十分灵活的，它可以在许多标准用例中替代聚合和转换，另外还可以处理一些比较特殊的用例。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply(func, axis=0, broadcast=None, raw=False, reduce=None,result_type=None, args=(), **kwds)</span><br><span class="line">     func：表示应用于某一行或某一列的函数。</span><br><span class="line">     axis：表示函数操作的轴向。</span><br><span class="line">     broadcast：表示是否将数据进行广播。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第五章-Pandas数据的载入与预处理"><a href="#第五章-Pandas数据的载入与预处理" class="headerlink" title="第五章 Pandas数据的载入与预处理"></a>第五章 Pandas数据的载入与预处理</h1><h2 id="数据载入"><a href="#数据载入" class="headerlink" title="数据载入"></a>数据载入</h2><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><p>CSV文件是一种纯文本文件，可以使用任何文本编辑器进行编辑，它支持追加模式，节省内存开销。</p><ol><li><p>写入CSV文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">to_csv(path_or_buf=None,sep=&#x27;,&#x27;,na_rep=&#x27;&#x27;,float_format=None,columns=None,header=True, index=True,index_label=None, mode=&#x27;w‘, ...)</span><br><span class="line">path_or_buf：文件路径。</span><br><span class="line">    index：默认为True，若设为False，则将不会显示索引。</span><br><span class="line">    sep：分隔符，默认用“，”隔开。</span><br></pre></td></tr></table></figure></li><li><p>读取CSV文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_csv(filepath_or_buffer,sep=&#x27;,&#x27;, delimiter=None, header=&#x27;infer&#x27;, names=None, index_col=None,usecols=None, prefix=None, ...)</span><br><span class="line">    sep：指定使用的分隔符，默认用“，”分隔。</span><br><span class="line">    header：指定行数用来作为列名。</span><br><span class="line">    names：用于结果的列名列表。如果文件不包含标题行，则应该将该参数设置为None。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Text文件</p><p>如果希望读取Text文件，既可以用前面提到的read_csv()函数，也可以使用read_table()函数。（read_csv()与read_table()函数的区别在于使用的分隔符不同，前者使用“，”作为分隔符，而后者使用“\t”作为分隔符。）</p></li></ol><h3 id="读写Excel文件"><a href="#读写Excel文件" class="headerlink" title="读写Excel文件"></a>读写Excel文件</h3><p>扩展名为.xls和.xlsx文件两种</p><ol><li><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">to_excel(excel_writer,sheet_name=&#x27;Sheet1&#x27;,na_rep=&#x27;&#x27;,float_format=None, columns=None, header=True, index=True, ...)</span><br><span class="line">excel_writer：表示读取的文件路径。</span><br><span class="line">    sheet_name：表示工作表的名称，默认为“Sheet1”。</span><br><span class="line">    na_rep：表示缺失数据。</span><br><span class="line">    index：表示是否写行索引，默认为True。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_excel(io,sheet_name=0,header=0,names=None,index_col=None, **kwds)</span><br><span class="line">    io：表示路径对象。</span><br><span class="line">    sheet_name：指定要读取的工作表，默认为0。</span><br><span class="line">    header：用于解析DataFrame的列标签。</span><br><span class="line">    names：要使用的列名称。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="读写JOSN文件"><a href="#读写JOSN文件" class="headerlink" title="读写JOSN文件"></a>读写JOSN文件</h3><ol><li><p>读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读取时会顺序变乱，需要排序</span><br><span class="line">import pandas as pd</span><br><span class="line">df = pd.read_json(&#x27;Filename&#x27;)</span><br><span class="line">df = df.sort_index</span><br></pre></td></tr></table></figure></li><li><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_json</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取HTML表格数据"><a href="#读取HTML表格数据" class="headerlink" title="读取HTML表格数据"></a>读取HTML表格数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_html(io, match=&#x27;.+&#x27;, flavor=None,header=None, index_col=None,skiprows=None, attrs=None)</span><br><span class="line">    io：表示路径对象。</span><br><span class="line">    header：表示指定列标题所在的行。</span><br><span class="line">    index_col：表示指定行标题对应的列。</span><br><span class="line">    attrs：默认为None，用于表示表格的属性值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读写数据库文件"><a href="#读写数据库文件" class="headerlink" title="读写数据库文件"></a>读写数据库文件</h3><p>为了高效地读取数据库中的数据，这里需要引入SQLAlchemy。</p><p> <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/4.png?raw=true" alt="4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read_sql()函数既可以读取整张数据表，又可以执行SQL语句。</span><br><span class="line">1.读取</span><br><span class="line">pandas.read_sql(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None, columns=None, chunksize=None)</span><br><span class="line">    sql：表示被执行的SQL语句。</span><br><span class="line">    con：接收数据库连接，表示数据库的连接信息。</span><br><span class="line">    columns：从SQL表中选择列名列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.写入</span><br><span class="line">to_sql（name，con，schema = None，if_exists =&#x27;fail&#x27;，index = True，index_label = None，chunksize = None，dtype = None ）</span><br><span class="line">    name：表示数据库表的名称。</span><br><span class="line">    con: 表示数据库的连接信息。</span><br><span class="line">    if_exists：可以取值为fail、replace或append，默认为’fail’。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h2><h3 id="merge数据合并"><a href="#merge数据合并" class="headerlink" title="merge数据合并"></a>merge数据合并</h3><p>通过1个或多个键将2个DataFrame按行合并起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pandas.merge(left, right, how=&#x27;inner&#x27;, on=None, left_on=None, right_on=None,left_index=False,</span><br><span class="line">right_index=False, sort=False, suffixes=(&#x27;_x&#x27;, &#x27;_y&#x27;), copy=True, indicator=False, validate=None)</span><br><span class="line"></span><br><span class="line">left：要合并的第一个 DataFrame 对象。</span><br><span class="line">right：要合并的第二个 DataFrame 对象。</span><br><span class="line">how：合并方式。可以是 &#x27;inner&#x27;、&#x27;outer&#x27;、&#x27;left&#x27; 或 &#x27;right&#x27;。（内连接，外连接，左连接，右连接）</span><br><span class="line">on：用于合并的列名。如果指定了该参数，则 left 和 right DataFrame 对象都必须包含该列。</span><br><span class="line">left_on：用于合并的 left DataFrame 对象中的列名。</span><br><span class="line">right_on：用于合并的 right DataFrame 对象中的列名。</span><br><span class="line">left_index：如果为 True，则使用 left DataFrame 对象中的索引作为连接键。</span><br><span class="line">right_index：如果为 True，则使用 right DataFrame 对象中的索引作为连接键。</span><br><span class="line">sort：是否对结果进行排序。如果为 True，则按照连接键对结果进行排序。</span><br><span class="line">suffixes：用于重叠列名的后缀。如果两个 DataFrame 对象中都有相同名称的列，则会在列名后面添加指定的后缀以区分它们。</span><br><span class="line">copy：是否复制数据。如果为 False，则避免复制数据以提高性能。</span><br><span class="line">indicator：是否添加一个名为 &#x27;_merge&#x27; 的列，用于指示每一行的来源。如果为 True，则添加该列。</span><br><span class="line">validate：验证连接键是否唯一。可以是 &#x27;one_to_one&#x27;、&#x27;one_to_many&#x27; 或 &#x27;many_to_one&#x27;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"># 创建第一个 DataFrame 对象</span><br><span class="line">data1 = &#123;</span><br><span class="line">    &#x27;A&#x27;: [1, 2, 3],</span><br><span class="line">    &#x27;B&#x27;: [4, 5, 6]</span><br><span class="line">&#125;</span><br><span class="line">df1 = pd.DataFrame(data1)</span><br><span class="line"># 创建第二个 DataFrame 对象</span><br><span class="line">data2 = &#123;</span><br><span class="line">    &#x27;A&#x27;: [1, 2, 4],</span><br><span class="line">    &#x27;C&#x27;: [7, 8, 9]</span><br><span class="line">&#125;</span><br><span class="line">df2 = pd.DataFrame(data2)</span><br><span class="line"># 使用 merge 函数将两个 DataFrame 对象按照 A 列进行合并</span><br><span class="line">result = pd.merge(df1, df2, on=&#x27;A&#x27;)</span><br><span class="line"></span><br><span class="line"># 显示结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="concat数据连接"><a href="#concat数据连接" class="headerlink" title="concat数据连接"></a>concat数据连接</h3><p>需要合并的DataFrame之间没有连接键。默认按行方向堆叠数据。使用axis修改方向。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pd.concat(objs,axis=0,join=&#x27;outer&#x27;,ignore_index=False,keys=None,      </span><br><span class="line">     levels=None,names=None,verify_integrity=False,copy=True)</span><br><span class="line">     </span><br><span class="line">objs： Series，DataFrame或Panel对象的序列或映射，如果传递了dict，则排序的键将用作键参数</span><br><span class="line">axis：&#123;0,1，…&#125;，默认为0,也就是纵向上进行合并。沿着连接的轴。</span><br><span class="line">join：&#123;‘inner’，‘outer’&#125;，默认为“outer”。如何处理其他轴上的索引。outer为联合和inner为交集。</span><br><span class="line">ignore_index： boolean，default False。如果为True，请不要使用并置轴上的索引值。结果轴将被标记为0，…，n-1。如果要连接其中并置轴没有有意义的索引信息的对象，这将非常有用。注意，其他轴上的索引值在连接中仍然受到尊重。</span><br><span class="line">keys： 序列，默认值无。使用传递的键作为最外层构建层次索引。如果为多索引，应该使用元组。</span><br><span class="line">levels： 序列列表，默认值无。用于构建MultiIndex的特定级别（唯一值）。否则，它们将从键推断。</span><br><span class="line">names： list，default无。结果层次索引中的级别的名称。</span><br><span class="line">verify_integrity： boolean，default False。检查新连接的轴是否包含重复项。这相对于实际的数据串联可能是非常昂贵的。</span><br><span class="line">copy： boolean，default True。如果为False，请勿不必要地复制数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line">df1 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(0,4)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(0,4)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(0,4)]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(4,8)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(4,8)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(4,8)]&#125;)</span><br><span class="line">df3 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(8,12)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(8,12)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(8,12)]&#125;)</span><br><span class="line">frames = [df1, df2, df3]</span><br><span class="line">result = pd.concat(frames)</span><br></pre></td></tr></table></figure><h3 id="combine-first合并数据"><a href="#combine-first合并数据" class="headerlink" title="combine_first合并数据"></a>combine_first合并数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当DataFrame对象中出现了缺失数据，而使用其他DataFrame对象中的数据填充缺失数据</span><br><span class="line">combine_first(other)</span><br><span class="line">other，用于接收填充缺失值的DataFrame对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="join-方法合并"><a href="#join-方法合并" class="headerlink" title="join()方法合并"></a>join()方法合并</h3><p>通过索引或指定列来连接多个DataFrame对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">join（other，on = None，how =&#x27;left&#x27;，lsuffix =&#x27;&#x27;，rsuffix =&#x27;&#x27;，sort = False ）</span><br><span class="line">    on：名称，用于连接列名。</span><br><span class="line">    how：可以从&#123;&#x27;&#x27;left&#x27;&#x27; ,&#x27;&#x27;right&#x27;&#x27;, &#x27;&#x27;outer&#x27;&#x27;, &#x27;&#x27;inner&#x27;&#x27;&#125;中任选一个，默认使用左连接的方式。</span><br><span class="line">    sort：根据连接键对合并的数据进行排序，默认为False。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>数据清洗的目的提高数据质量，将脏数据清洗干净，使原数据具有完整性、唯一性、权威性、合法性、一致性等特点。</p><p>脏数据：指的是对数据分析没有实际意义、格式非法、不在指定范围内的数据。</p><h3 id="空值（None）和缺失值（NaN）的处理"><a href="#空值（None）和缺失值（NaN）的处理" class="headerlink" title="空值（None）和缺失值（NaN）的处理"></a>空值（None）和缺失值（NaN）的处理</h3><p>空值一般表示数据未知、不适用或将在以后添加数据。</p><p>缺失值是指数据集中某个或某些属性的值是不完整的。</p><ol><li><p>检查或处理空值和缺失值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.使用isnull()和notnull()函数可以判断数据集中是否存在空值和缺失值。（通过info方法查看每列数据的缺失情况）</span><br><span class="line">pandas.isnull(obj) # 如果返回的结果为True，则说明有空值或缺失值</span><br><span class="line"></span><br><span class="line">2.对于缺失数据可以使用dropna()和fillna()方法对缺失值进行删除和填充。</span><br><span class="line">dropna(axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False)</span><br><span class="line">    axis：确定过滤行或列。 </span><br><span class="line">    how：确定过滤的标准。</span><br><span class="line">    thresh：表示有效数据量的最小要求。若传入了2，则是要求该行或该列至少有两个非NaN值时将其保留。</span><br><span class="line"></span><br><span class="line">fillna(value=None, method=None, axis=None, inplace=False,limit=None, downcast=None, **kwargs)</span><br><span class="line">    value：用于填充的数值。</span><br><span class="line">    method：表示填充方式，默认值为None。</span><br><span class="line">    limit： 可以连续填充的最大数量，默认None。</span><br><span class="line">注：method参数不能与value参数同时使用。</span><br><span class="line"></span><br><span class="line"># 使用66.0替换缺失值</span><br><span class="line">df_obj.fillna(&#x27;66.0&#x27;)</span><br><span class="line"># 指定列填充数据</span><br><span class="line">df_obj.fillna(&#123;&#x27;A&#x27;: 4.0, &#x27;B&#x27;: 5.0&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="重复值的处理"><a href="#重复值的处理" class="headerlink" title="重复值的处理"></a>重复值的处理</h3><p>Pandas提供了两个函数专门用来处理数据中的重复值，分别为duplicated()和drop_duplicates()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">duplicated()方法用于标记是否有重复值。有为True</span><br><span class="line">drop_duplicates()方法用于删除重复值。</span><br><span class="line">它们的判断标准是一样的，即只要两条数据中所有条目的值完全相等，就判断为重复值。</span><br><span class="line"></span><br><span class="line">duplicated(subset=None, keep=&#x27;first&#x27;)</span><br><span class="line">    subset：用于识别重复的列标签或列标签序列，默认识别所有的列标签。</span><br><span class="line">    keep：删除重复项并保留第一次出现的项，取值可以为first、last或False。</span><br><span class="line"></span><br><span class="line">drop_duplicates(subset=None, keep=&#x27;first&#x27;, inplace=False)</span><br><span class="line">inplace参数接收一个布尔类型的值，表示是否替换原来的数据，默认为False。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常值的处理"><a href="#异常值的处理" class="headerlink" title="异常值的处理"></a>异常值的处理</h3><p>异常值是指样本中的个别值，其数值明显偏离它所属样本的其余观测值，这些数值是不合理的或错误的。</p><p>检测方法有散点图，3σ原则（拉依达准则）和箱形图。</p><ol><li><p>散点图</p><p>通过数据分布的散点图发现异常数据</p></li><li><p>箱形图：boxplot()方法</p><p>是一种用作显示一组数据分散情况的统计图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">异常值通常被定义为小于QL – 1.5QR或大于QU + 1.5IQR的值。</span><br><span class="line">（1）QL称为下四分位数，表示全部观察中四分之一的数据取值比它小；</span><br><span class="line">（2）QU称为上四分位数，表示全部观察值中有四分之一的数据取值比它大；</span><br><span class="line">（3）IQR称为四分位数间距，是上四分位数QU与下四分位数QL之差，其间包含了全部观察值的一半。</span><br></pre></td></tr></table></figure><p> <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/5.png?raw=true" alt="5.png"></p></li><li><p>3σ原则，又称为拉依达原则，它是指假设一组检测数据只含有随机误差，对其进行计算处理得到标准偏差，按一定概率确定一个区间，凡是超过这个区间的误差都是粗大误差，在此误差的范围内的数据应予以剔除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）数值分布在（μ-σ,μ+σ)中的概率为0.682。</span><br><span class="line">（2）数值分布在（μ-2σ,μ+2σ)中的概率为0.954。</span><br><span class="line">（3）数值分布在（μ-3σ,μ+3σ)中的概率为0.997。</span><br></pre></td></tr></table></figure></li></ol><p>通常会采用如下四种方式处理这些异常值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.直接将含有异常值的记录删除。</span><br><span class="line">2.用具体的值来进行替换，可用前后两个观测值的平均值修正该异常值。</span><br><span class="line">3.不处理，直接在具有异常值的数据集上进行统计分析。</span><br><span class="line">4.视为缺失值，利用缺失值的处理方法修正该异常值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">不仅可以对单个数据进行替换，也可以多个数据执行批量替换操作。</span><br><span class="line">replace（to_replace = None，value = None，inplace = False，limit = None，regex = False，method =&#x27;pad&#x27; ）</span><br><span class="line">    to_replace：表示查找被替换值的方式。</span><br><span class="line">    value：用来替换任何匹配to_replace的值，默认值None。</span><br><span class="line"></span><br><span class="line">通过astype()方法可以强制转换数据的类型。</span><br><span class="line">astype（dtype，copy = True，errors =&#x27;raise&#x27;，** kwargs ）</span><br><span class="line">    dtype：表示数据的类型。</span><br><span class="line">    errors：错误采取的处理方式，可以取值为raise或ignore。其中，raise表示允许引发异常，ignore表示抑制异常，默认为raise。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">astype()方法存在着一些局限性，只要待转换的数据中存在非数字以外的字符会出现错误，而to_numeric()函数的出现正好解决了这个问题。</span><br><span class="line">pandas.to_numeric(arg, errors=&#x27;raise&#x27;, downcast=None)</span><br><span class="line">    arg：表示要转换的数据，可以是list、tuple、Series。</span><br><span class="line">    errors：表示错误采取的处理方式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重塑层次化索引"><a href="#重塑层次化索引" class="headerlink" title="重塑层次化索引"></a>重塑层次化索引</h3><p>stack()方法和unstack()方法，前者是将数据的列“旋转”为行，后者是将数据的行“旋转”为列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stack()方法可以将数据的列索引转换为行索引。</span><br><span class="line">DataFrame.stack(level=-1, dropna=True)</span><br><span class="line">    level：表示操作内层索引。若设为0，表示操作外层索引，默认为-1。</span><br><span class="line">    dropna：表示是否将旋转后的缺失值删除，若设为True，则表示自动过滤缺失值，设置为False则相反。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DataFrame.unstack(level=-1, fill_value=None)</span><br><span class="line">    level：默认为-1，表示操作内层索引，0表示操作外层索引。</span><br><span class="line">    fill_value：若产生了缺失值，则可以设置这个参数用来替换NaN。</span><br><span class="line"></span><br><span class="line">pivot(index=None, columns=None, values=None)</span><br><span class="line">    index：用于创建新DataFrame对象的行索引。</span><br><span class="line">    columns：用于创建新DataFrame对象的列索引。</span><br><span class="line">    values：用于填充新DataFrame对象中的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据变换与数据离散化"><a href="#数据变换与数据离散化" class="headerlink" title="数据变换与数据离散化"></a>数据变换与数据离散化</h2><h3 id="类别数据的哑变量的处理"><a href="#类别数据的哑变量的处理" class="headerlink" title="类别数据的哑变量的处理"></a>类别数据的哑变量的处理</h3><p>哑变量又称虚拟变量、名义变量，从名称上看就知道，它是人为虚设的变量，用来反映某个变量的不同类别。</p><p>使用哑变量处理类别转换，事实上就是将分类变量转换为哑变量矩阵或指标矩阵，矩阵的值通常用“0”或“1”表示。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/6.png?raw=true" alt="6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对类别特征进行哑变量处理：</span><br><span class="line">pandas.get_dummies(data, prefix=None, prefix_sep=&#x27;_&#x27;, dummy_na=False,columns=None, sparse=False, drop_first=False, dtype=None)</span><br><span class="line">    data：表示哑变量处理的数据。</span><br><span class="line">    prefix：表示列名的前缀，默认为None。</span><br><span class="line">    prefix_sep：用于附加前缀作为分隔符使用，默认为“_”。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="连续性变量的离散化"><a href="#连续性变量的离散化" class="headerlink" title="连续性变量的离散化"></a>连续性变量的离散化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cut ()函数能够实现离散化操作。</span><br><span class="line"></span><br><span class="line">pandas.cut（x，bins，right = True，labels = None，retbins = False，precision = 3,include_lowest = False,duplicates =&#x27;raise&#x27; ）</span><br><span class="line">    x：表示要分箱的数组，必须是一维的。</span><br><span class="line">    bins：接收int和序列类型的数据。</span><br><span class="line">    right：是否包含右端点，决定区间的开闭，默认为True。</span><br><span class="line">注：cut()函数会返回一个Categorical对象，我们可以将其看作一组表示面元名称的字符串，它包含了分组的数量以及不同分类的名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果希望设置左闭右开区间，则可以在调用cut()函数时传入right=False进行修改。</span><br><span class="line">pd.cut(ages, bins=bins, right=False)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第六章-Matplotlib数据可视化基础"><a href="#第六章-Matplotlib数据可视化基础" class="headerlink" title="第六章 Matplotlib数据可视化基础"></a>第六章 Matplotlib数据可视化基础</h1><p>数据可视化按照数据类型分类：</p><ol><li>时空数据可视化</li><li>层次与网络结构数据可视化</li><li>文本和跨媒体数据可视化</li><li>多变量数据可视化</li></ol><h2 id="Matplotlib简介"><a href="#Matplotlib简介" class="headerlink" title="Matplotlib简介"></a>Matplotlib简介</h2><p>可以绘制</p><ol><li>直方图：适于比较数据之间的多少。</li><li>折线图：反映一组数据的变化趋势。</li><li>条形图：显示各个项目之间的比较情况，和直方图有类似的作用。（用宽度相同的条形的高度或者长短来表示数据多少的图形，可以横置或纵置，纵置时也称为柱形图。）</li><li>散点图：显示若干数据系列中各数值之间的关系。</li><li>箱形图：识别异常值方面有一定的优越性。</li></ol><h2 id="Matplotlib绘图基础"><a href="#Matplotlib绘图基础" class="headerlink" title="Matplotlib绘图基础"></a>Matplotlib绘图基础</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Jupyter Notebook中进行交互式绘图需要执行：</span><br><span class="line">%matplotlib notebook# 将生成的交互式图嵌入notebook中</span><br><span class="line">%matplotlib inline# 将生成的静态图嵌入notebook中</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><h3 id="创建画布与子图"><a href="#创建画布与子图" class="headerlink" title="创建画布与子图"></a>创建画布与子图</h3><ol><li><p>创建新的空白画布</p><p>如果不希望在默认的画布上绘制图形，则可以调用figure()函数构建一张新的空白画布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.figure(num = None,figsize = None,dpi = None, facecolor = None,edgecolor = None, ...,** kwargs)</span><br><span class="line">    num   -- 表示图形的编号或名称。</span><br><span class="line">    figsize   -- 用于设置画布的尺寸。</span><br><span class="line">    facecolor -- 用于设置画板的背景颜色。</span><br><span class="line">    edgecolor -- 用于显示边框颜色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">figure_obj = plt.figure() # 调用figure()函数创建新的空白画布。</span><br></pre></td></tr></table></figure></li><li><p>建画布时为其添加背景颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设置facecolor参数。</span><br><span class="line"></span><br><span class="line">data_two = np.arange(200, 301)</span><br><span class="line"># 创建背景为灰色的新画布</span><br><span class="line">plt.figure(facecolor=&#x27;gray&#x27;)</span><br><span class="line"># 通过data2绘制折线图</span><br><span class="line">plt.plot(data_two)</span><br><span class="line">plt.show() </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建子图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">figure对象允许划分为多个绘图区域，每个绘图区域都是一个axes对象，它拥有属于自己的坐标系统，被称为子图。</span><br><span class="line">语法：</span><br><span class="line">subplot(nrows, ncols, index, **kwargs)</span><br><span class="line">    nrows，ncols -- 表示子区网格的行数、列数。</span><br><span class="line">           index -- 表示矩阵区域的索引。</span><br><span class="line">注：按照从左到右、从上到下的顺序对每个区域进行编号。其中，位于左上角的子区域编号为1，依次递增。</span><br><span class="line">    如果nrows、ncols和index这三个参数的值都小于10，则可以把它们简写为一个实数。（subplot(3,2,3)==subplot(323)）</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = plt.subplot(2,2,1)</span><br><span class="line">ax2 = plt.subplot(2,2,2)</span><br><span class="line">ax1.plot([1,2,3,4,5])</span><br><span class="line">ax2.plot([1,2,3,4,5])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.一次性创建一组子图</span><br><span class="line">subplots(nrows = 1,ncols = 1,sharex =False,sharey = False,squeeze = True,subplot_kw = None,gridspec_kw = None,** fig_kw)</span><br><span class="line">      nrows，ncols -- 表示子区网格的行数、列数。</span><br><span class="line">    sharex，sharey -- 表示控制x或y轴是否共享。</span><br><span class="line">subplots()函数会返回一个元组，元组的第一个元素为Figure对象（画布），第二个元素为Axes对象（子图，包含坐标轴和画的图）或Axes对象数组。</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">fig,axes = plt.subplots(2,2,sharex=True,sharey=True)</span><br><span class="line">for i in range(2):</span><br><span class="line">    for j in range(2):</span><br><span class="line">        axes[i,j].hist(np.random.randn(500),bins=50,color=&#x27;k&#x27;,alpha=0.5)</span><br><span class="line">plt.subplots_adjust(wspace=0,hspace=0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.通过Figure类的add_subplot()方法添加和选中子图。</span><br><span class="line">add_subplot(* args,** kwargs )</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(2,2,1)</span><br><span class="line">ax2 = fig.add_subplot(2,2,2)</span><br><span class="line">ax1.plot([1,2,3,4,5])</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加画布内容"><a href="#添加画布内容" class="headerlink" title="添加画布内容"></a>添加画布内容</h3><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/7.png?raw=true" alt="7.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">plt.title(&#x27;my blog&#x27;)</span><br><span class="line">1.</span><br><span class="line">这些函数之间是并列关系，没有先后顺序</span><br><span class="line">2.</span><br><span class="line">图例的添加只能在绘制完图形之后。</span><br></pre></td></tr></table></figure><h3 id="图表正确显示中文"><a href="#图表正确显示中文" class="headerlink" title="图表正确显示中文"></a>图表正确显示中文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;]</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br></pre></td></tr></table></figure><h3 id="绘图的保存与显示"><a href="#绘图的保存与显示" class="headerlink" title="绘图的保存与显示"></a>绘图的保存与显示</h3><ol><li><p>本地保存图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(fname, dpi=None, facecolor=&#x27;w&#x27;, edgecolor=&#x27;w&#x27;, ...)</span><br><span class="line">fname参数是一个包含文件名路径的字符串，或者是一个类似于Python文件的对象。如果format 参数设为None且fname参数是一个字符串，则输出格式将根据文件名的扩展名推导出来。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>显示图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show</span><br></pre></td></tr></table></figure></li></ol><h2 id="Pyplot中的常用绘图"><a href="#Pyplot中的常用绘图" class="headerlink" title="Pyplot中的常用绘图"></a>Pyplot中的常用绘图</h2><ul><li>常见的图形绘制函数</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/8.png?raw=true" alt="8.png"></p><h3 id="颜色、线型、标记的设置"><a href="#颜色、线型、标记的设置" class="headerlink" title="颜色、线型、标记的设置"></a>颜色、线型、标记的设置</h3><ul><li><p>颜色</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/10.png?raw=true" alt="10.png"></p></li><li><p>线型值</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/11.png?raw=true" alt="11.png"></p></li><li><p>标记</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/12.png?raw=true" alt="12.png"></p></li></ul><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.plot(*args,**kwargs)</span><br><span class="line">x,y：x,y轴上的数据</span><br><span class="line">color：线条颜色</span><br><span class="line">linestyle：线条类型</span><br><span class="line">marker：点的类型</span><br><span class="line">alpha：透明度0~1</span><br></pre></td></tr></table></figure><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.hist(x,bins = None,range = None,color = None,label = None, ..., ** kwargs)</span><br><span class="line">    x -- 表示输入值。</span><br><span class="line">     bins -- 表示绘制条柱的个数。</span><br><span class="line">    range -- bins的上下范围（最大和最小值）。</span><br><span class="line">    color -- 表示条柱的颜色，默认为None。</span><br><span class="line">    alpha -- 表示点的透明度，接收0~1之间的小数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr_random = np.random.randn(100)</span><br><span class="line"># 绘制直方图</span><br><span class="line">plt.hist(arr_random, bins=8, color=&#x27;g&#x27;, alpha=0.7)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, alpha=None, linewidths=None,  ..., **kwargs)</span><br><span class="line">      x, y -- 表示x轴和y轴对应的数据。</span><br><span class="line">         s -- 指定点的大小。</span><br><span class="line">         c -- 指定散点的颜色。</span><br><span class="line">    marker -- 表示绘制的散点类型。</span><br><span class="line">     alpha -- 表示点的透明度，接收0~1之间的小数。</span><br><span class="line"></span><br><span class="line"># x轴的数据</span><br><span class="line">x = np.arange(51)</span><br><span class="line"># 表示y轴的数据</span><br><span class="line">y = np.random.rand(51) * 10</span><br><span class="line">plt.scatter(x, y)   # 绘制散点图</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.bar(x, height, width, *, align=&#x27;center&#x27;, **kwargs)</span><br><span class="line">    x         -- 表示x轴的数据。</span><br><span class="line">    height    -- 表示条形的高度。</span><br><span class="line">    width     -- 表示条形的宽度，默认为0.8。</span><br><span class="line">    color     -- 表示条形的颜色。</span><br><span class="line">    edgecolor -- 表示条形边框的颜色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(5)</span><br><span class="line">y1, y2 = np.random.randint(1, 31,size=(2, 5))</span><br><span class="line">width = 0.25                                </span><br><span class="line">ax = plt.subplot(1, 1, 1) # 条形的宽度</span><br><span class="line">ax.bar(x, y1, width, color=&#x27;r&#x27;)</span><br><span class="line">ax.bar(x+width, y2, width, color=&#x27;g&#x27;) ax.set_xticks(x+width)</span><br><span class="line">ax.set_xticklabels([&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April &#x27;, &#x27;May &#x27;]) </span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/9.png?raw=true" alt="9.png"></p><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.pie(x,explode,labels,color,autopct,pctdistance,labeldistance,radius)</span><br><span class="line">    x：接收array,表示用于绘制饼图的数据，无默认</span><br><span class="line">    explode：接收array,指定项离饼图圆心为n个半径，默认为None</span><br><span class="line">    labels：接收array,指定每一项的名称，默认为None</span><br><span class="line">    color：接收特定string 或包含颜色字符串的array,表示颜色,默认为None</span><br><span class="line">    autopct：接收特定string, 指定数值的显示方式，默认为None</span><br><span class="line">    pctdistance：float型，指定每一项的比例和距离饼图圆心n个半径，默认为0.6</span><br><span class="line">    labeldistance：float型，指定每一项的名称和距离饼图圆心的半径数，默认为1. 1</span><br><span class="line">    radius：float型，表示饼图的半径，默认为1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.boxplot(X,notch,sym,vert,positions,widths,labels,meanline)</span><br><span class="line">    X:接收array,表示用于绘制箱线图的数据，无默认</span><br><span class="line">    notch:接收boolean,表示中间箱体是否有缺口，默认为None</span><br><span class="line">    sym:接收特定string,指定异常点形状，默认为None</span><br><span class="line">    vert:接收boolean,表示图形是纵向或者横向，默认为None</span><br><span class="line">    positions:接收array,表示图形位置，默认为None</span><br><span class="line">    widths:接收scalar或者array,表示每个箱体的宽度，默认为None</span><br><span class="line">    labels:接收array,指定每- - 个箱线图的标签，默认为None</span><br><span class="line">    meanline:接收boolean,表示是否显示均值线，默认为False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="概率图"><a href="#概率图" class="headerlink" title="概率图"></a>概率图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from scipy.stats import norm</span><br><span class="line">normpdf(X,mu,sigma)</span><br></pre></td></tr></table></figure><h2 id="图标辅助元素的定制"><a href="#图标辅助元素的定制" class="headerlink" title="图标辅助元素的定制"></a>图标辅助元素的定制</h2><h3 id="认识图表常用的辅助元素"><a href="#认识图表常用的辅助元素" class="headerlink" title="认识图表常用的辅助元素"></a>认识图表常用的辅助元素</h3><ul><li>坐标轴：分为单坐标轴和双坐标轴，单坐标轴按不同的方向又可分为水平坐标轴（又称x轴）和垂直坐标轴（又称y轴）。</li><li>标题：表示图表的说明性文本。图例：用于指出图表中各组图形采用的标识方式。</li><li>网格：从坐标轴刻度开始的、贯穿绘图区域的若干条线，用于作为估算图形所示值的标准。</li><li>参考线：标记坐标轴上特殊值的一条直线。</li><li>参考区域：标记坐标轴上特殊范围的一块区域。</li><li>注释文本：表示对图形的一些注释和说明。</li><li>表格：用于强调比较难理解数据的表格。</li></ul><h3 id="设置坐标轴的标签"><a href="#设置坐标轴的标签" class="headerlink" title="设置坐标轴的标签"></a>设置坐标轴的标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">设置x轴的标签：</span><br><span class="line">xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)</span><br><span class="line">设置y轴的标签：</span><br><span class="line">ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)</span><br><span class="line">    xlabel：表示x轴标签的文本。</span><br><span class="line">    fontdict：表示控制标签文本样式的字典。</span><br><span class="line">    labelpad：表示标签与x轴轴脊间的距离。</span><br><span class="line"></span><br><span class="line"># 设置x轴和y轴的标签</span><br><span class="line">plt.xlabel(&quot;x轴&quot;)</span><br><span class="line">plt.ylabel(&quot;y轴&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Axes对象使用set_xlabel()方法可以设置x轴的标签，使用set_ylabel()方法可以设置y轴的标签。set_xlabel()、set_ylabel()方法与xlabel()、ylabel()函数的参数用法相同。 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置刻度范围和刻度标签"><a href="#设置刻度范围和刻度标签" class="headerlink" title="设置刻度范围和刻度标签"></a>设置刻度范围和刻度标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.设置x轴的刻度范围</span><br><span class="line">xlim(left=None, right=None,emit=True, auto=False, *, xmin=None, xmax=None)  </span><br><span class="line">    left:表示x轴刻度取值区间的左位数。</span><br><span class="line">    right:表示x轴刻度取值区间的右位数。</span><br><span class="line">    emit:表示是否通知限制变化的观察者，默认为True。</span><br><span class="line">    auto：表示是否允许自动缩放x轴，默认为True。</span><br><span class="line">此外，Axes对象可以使用set_xlim()或set_ylim()方法设置x轴或y轴的刻度范围。  </span><br><span class="line"></span><br><span class="line">2.xticks()或yticks()函数可以设置x轴或y轴的刻度线位置和刻度标签。  </span><br><span class="line">xticks(ticks=None, labels=None, **kwargs)  </span><br><span class="line">    ticks：表示刻度显示的位置列表，该参数可以设置为空列表，以此禁用x轴的刻度。</span><br><span class="line">    labels：表示指定位置刻度的标签列表。 </span><br><span class="line">此外，Axes对象可以使用set_xticks()或set_yticks()方法设置x轴或y轴的刻度线位置，使用set_xticklabels()或set_yticklabels()方法设置x轴或y轴的刻度标签。   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置x轴的刻度范围和刻度标签</span><br><span class="line">plt.xlim(x.min() * 1.5, x.max() * 1.5)</span><br><span class="line">plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, </span><br><span class="line">                 np.pi],  [r&#x27;$-\pi$&#x27;, r&#x27;$-\pi/2$&#x27;,</span><br><span class="line">                 r&#x27;$0$&#x27;, r&#x27;$\pi/2$&#x27;, r&#x27;$\pi$&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title(label, fontdict=None, loc=‘center’, pad=None, **kwargs) </span><br><span class="line">    label:表示标题的文本。</span><br><span class="line">    fontdict:表示控制标题文本样式的字典。</span><br><span class="line">    loc:表示标题的对齐样式。</span><br><span class="line">    pad:表示标题与图表顶部的距离，默认为None。</span><br><span class="line">Axes对象还可以使用set_title()方法为图表添加标题。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加标题</span><br><span class="line">plt.title(&quot;正弦曲线和余弦曲线&quot;) </span><br></pre></td></tr></table></figure><h3 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">legend(handles, labels, loc, bbox_to_anchor, ncol, title, shadow, fancybox, *args, **kwargs) </span><br><span class="line">    handles:表示由图形标识构成的列表。 </span><br><span class="line">    labels:表示由图例项构成的列表。 </span><br><span class="line">    loc:用于控制图例在图表中的位置。</span><br><span class="line">    ncol:表示图例的列数，默认值为1。</span><br><span class="line">    title：表示图例的标题，默认值为None。 </span><br><span class="line">    shadow ：表示是否在图例后面显示阴影，默认值为None。</span><br><span class="line">    fancybox：表示是否为图例设置圆角边框，默认值为None </span><br><span class="line"></span><br><span class="line">lines = plt.plot(x, y1, x, y2)</span><br><span class="line"># 添加图例</span><br><span class="line">plt.legend(lines, [&#x27;正弦&#x27;, &#x27;余弦&#x27;], shadow=True, fancybox=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="显示指定样式的网格"><a href="#显示指定样式的网格" class="headerlink" title="显示指定样式的网格"></a>显示指定样式的网格</h3><p>可分为垂直网格和水平网格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grid(b=None, which=&#x27;major&#x27;, axis=&#x27;both&#x27;, **kwargs) </span><br><span class="line">    b：表示是否显示网格。</span><br><span class="line">    which：表示显示网格的类型，默认为major。</span><br><span class="line">    axis：表示显示哪个方向的网格，默认为both。</span><br><span class="line">    linewidth 或 lw：网格线的宽度。</span><br><span class="line">还可以使用Axes对象的grid()方法显示网格。 </span><br><span class="line"></span><br><span class="line"># 显示网格</span><br><span class="line">plt.grid(b=True, axis=&#x27;y&#x27;, linewidth=0.3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加参考线"><a href="#添加参考线" class="headerlink" title="添加参考线"></a>添加参考线</h3><p>分为水平参考线，垂直参考线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.添加水平参考线：</span><br><span class="line">axhline(y=0, xmin=0, xmax=1, linestyle=&#x27;-&#x27;, **kwargs) </span><br><span class="line">    y:表示水平参考线的纵坐标。</span><br><span class="line">    xmin:表示水平参考线的起始位置，默认为0。</span><br><span class="line">    xmax:表示水平参考线的终止位置，默认为1。</span><br><span class="line">    linestyle:表示水平参考线的类型，默认为实线。</span><br><span class="line"></span><br><span class="line">2.添加垂直参考线：</span><br><span class="line">axvline(x=0, ymin=0, ymax=1, linestyle=&#x27;-&#x27;, **kwargs) </span><br><span class="line">    x:表示垂直参考线的横坐标。</span><br><span class="line">    ymin:表示垂直参考线的起始位置，默认为0。</span><br><span class="line">    ymax:表示垂直参考线的终止位置，默认为1。</span><br><span class="line">    linestyle:表示垂直参考线的类型，默认为实线。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加参考线</span><br><span class="line">plt.axvline(x=0, linestyle=&#x27;--&#x27;)</span><br><span class="line">plt.axhline(y=0, linestyle=‘--’)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加参考区域"><a href="#添加参考区域" class="headerlink" title="添加参考区域"></a>添加参考区域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.添加水平参考区域</span><br><span class="line">axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs) </span><br><span class="line">    ymin:表示水平跨度的下限，以数据为单位。</span><br><span class="line">    ymax:表示水平跨度的上限，以数据为单位。</span><br><span class="line">    xmin:表示垂直跨度的下限，以轴为单位，默认为0。</span><br><span class="line">    xmax:表示垂直跨度的上限，以轴为单位，默认为1。</span><br><span class="line"></span><br><span class="line">2.添加垂直参考区域</span><br><span class="line">axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs) </span><br><span class="line">    xmin:表示垂直跨度的下限。</span><br><span class="line">    xmax:表示垂直跨度的上限。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加参考区域</span><br><span class="line">plt.axvspan(xmin=0.5, xmax=2.0, alpha=0.3)</span><br><span class="line">plt.axhspan(ymin=0.5, ymax=1.0, alpha=0.3) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文本注解"><a href="#文本注解" class="headerlink" title="文本注解"></a>文本注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.添加无指向型注释文本</span><br><span class="line">plt.text(x,y,fontdict=None,**kwargs)</span><br><span class="line">    x, y:表示注释文本的位置。</span><br><span class="line">    s:表示注释文本的内容。</span><br><span class="line">    horizontalalignment或ha：表示水平对齐的方式，可以取值为&#x27;center&#x27;、&#x27;right&#x27;或 &#x27;left&#x27;。</span><br><span class="line">    verticalalignment或va：表示垂直对齐的方式，可以取值为&#x27;center&#x27;、&#x27;top&#x27;、&#x27;bottom&#x27;、&#x27;baseline&#x27;或&#x27;center_baseline&#x27;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"># 添加无指向型注释文本</span><br><span class="line">plt.text(3.10, 0.10, &quot;y=sin(x)&quot;, bbox=dict(alpha=0.2))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.添加指向型注释文本</span><br><span class="line">plt.annotate(s,xy,*args,**kwargs) # 实现带有指向性的文本注释</span><br><span class="line">s：表示注释文本的内容。</span><br><span class="line">    xy：表示被注释的点的坐标位置，接收元组（x,y）。</span><br><span class="line">    xytext ：表示注释文本所在的坐标位置，接收元组（x,y）。</span><br><span class="line">    arrowprops ：表示指示箭头的属性字典。</span><br><span class="line">    bbox：表示注释文本的边框属性字典。</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">(1)</span><br><span class="line">ax1.annotate(&quot;注释&quot;,xy=(2,1))</span><br><span class="line">(2)</span><br><span class="line"># 添加指向型注释文本</span><br><span class="line">plt.annotate(“最小值”, xy=(-np.pi / 2, -1.0), xytext=(-(np.pi / 2), -0.5), arrowprops=dict(arrowstyle=&quot;-&gt;&quot;)) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p>自动识别使用annotate()或text()函数传入的数学字符串，并解析成对应的数学表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">要求字符串以美元符号“$”为首尾字符，且首尾字符中间包裹数学表达式。</span><br><span class="line">r‘$数学表达式$’</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">r&#x27;$\alpha &gt; \beta$&#x27;</span><br><span class="line"></span><br><span class="line">上标使用符号“^”表示，下标使用符号“_”表示。   </span><br><span class="line">r&#x27;$\alpha_i &gt; \beta_i$&#x27;</span><br><span class="line"></span><br><span class="line">使用“ \frac&#123;&#125;&#123;&#125;”可以编写分数形式的数字字符串，“\frac”的后面的两个中括号分别代表分数的分子和分母。</span><br><span class="line">r&#x27;$\frac&#123;3&#125;&#123;4&#125;$&#x27;   </span><br><span class="line"></span><br><span class="line">编写分数嵌套的数学字符串。 </span><br><span class="line">r&#x27;$\frac&#123;5 - \frac&#123;1&#125;&#123;x&#125;&#125;&#123;4&#125;$&#x27;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/13.png?raw=true" alt="13.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/14.png?raw=true" alt="14.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/15.png?raw=true" alt="15.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/16.png?raw=true" alt="16.png"></p><h3 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">table(cellText=None, cellColours=None, cellLoc=&#x27;right&#x27;, colWidths=None, …, **kwargs) </span><br><span class="line">    cellText：表示表格单元格中的数据，可以是一个二维列表。</span><br><span class="line">    cellColours：表示单元格的背景颜色。</span><br><span class="line">    cellLoc：表示单元格文本的对齐方式，支持&#x27;left&#x27;、&#x27;center&#x27;、&#x27;right&#x27;三种取值，默认值为&#x27;right&#x27;。</span><br><span class="line">    colWidths：表示每列的宽度。</span><br><span class="line">    rowLabels：表示行标题的文本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加表格</span><br><span class="line">plt.table(cellText=[[6, 6, 6], [8, 8, 8]], colWidths=[0.1] * 3, rowLabels=[‘第1行’, ‘第2行’], colLabels=[&#x27;第1列&#x27;, &#x27;第2列&#x27;, &#x27;第3列&#x27;], loc=&#x27;lower right&#x27;)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绘图的填充"><a href="#绘图的填充" class="headerlink" title="绘图的填充"></a>绘图的填充</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">fill_between()填充区域</span><br><span class="line"></span><br><span class="line">1.曲线与x轴的填充</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.fill_between(x,0,y,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line"></span><br><span class="line">2.填充部分区域</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.fill_between(x[15:300],0,0.4,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line"></span><br><span class="line">3.两曲线之间填充区域</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y1 = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">y2 = y1 + 0.2</span><br><span class="line">plt.plot(x,y1,&#x27;b&#x27;)</span><br><span class="line">plt.plot(x,y2,&#x27;b&#x27;)</span><br><span class="line">plt.fill_between(x,y1,y2,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">4.使用fill进行填充</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y1 = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">ax.fill(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="第七章-时间序列数据分析"><a href="#第七章-时间序列数据分析" class="headerlink" title="第七章 时间序列数据分析"></a>第七章 时间序列数据分析</h1><p>什么是时间序列？</p><p>时间序列是指多个时间点上形成的数值序列，它既可以是定期出现的，也可以是不定期出现的。</p><p>时间序列的数据主要有：</p><ol><li>时间戳：表示特定的时刻，比如现在。</li><li>时期：比如2018年或者2018年10月。</li><li>时间间隔：由起始时间戳和结束时间戳表示。</li></ol><h2 id="时间序列的基本操作"><a href="#时间序列的基本操作" class="headerlink" title="时间序列的基本操作"></a>时间序列的基本操作</h2><ol><li><p>创建时间序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Pandas中，时间戳使用Timestamp（Series派生的子类）对象表示。</span><br><span class="line">pd.to_datetime(&#x27;20180828&#x27;)   </span><br><span class="line"></span><br><span class="line">传入的是多个datetime组成的列表，则Pandas会将其强制转换为DatetimeIndex类对象。</span><br><span class="line">date_index = pd.to_datetime([&#x27;20180820&#x27;,&#x27;20180828&#x27;,&#x27;20180908&#x27;])</span><br><span class="line"></span><br><span class="line">最基本的时间序列类型就是以时间戳为索引的Series对象。</span><br><span class="line">date_ser = pd.Series([11, 22, 33], index=date_index)</span><br><span class="line"></span><br><span class="line">将包含多个datetime对象的列表传给index参数，同样能创建具有时间戳索引的Series对象。</span><br><span class="line">date_list = [datetime(2018, 1, 1), datetime(2018, 1, 15]</span><br><span class="line">time_se = pd.Series(np.arange(6), index=date_list)</span><br><span class="line"></span><br><span class="line">如果希望DataFrame对象具有时间戳索引</span><br><span class="line">data_demo = [[11, 22, 33], [44, 55, 66]]</span><br><span class="line">date_list = [datetime(2018, 1, 23), datetime(2018, 2, 15)]</span><br><span class="line">time_df = pd.DataFrame(data_demo, index=date_list)</span><br></pre></td></tr></table></figure></li><li><p>通过时间戳索引选取子集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">最简单的选取子集的方式，是直接使用位置索引来获取具体的数据。</span><br><span class="line">time_se[3] # 根据位置索引获取数据</span><br><span class="line"></span><br><span class="line">使用datetime构建的日期获取其对应的数据。</span><br><span class="line">date_time = datetime(2015, 6, 1)</span><br><span class="line">date_se[date_time]</span><br><span class="line"></span><br><span class="line">在操作索引时，直接使用一个日期字符串（符合可以被解析的格式）进行获取。</span><br><span class="line">date_se[&#x27;20150530&#x27;]</span><br><span class="line">date_se[&#x27;2018/01/23&#x27;]</span><br><span class="line"></span><br><span class="line">获取某年或某个月的数据，则可以直接用指定的年份或者月份操作索引。</span><br><span class="line">date_se[&#x27;2015&#x27;]</span><br><span class="line"></span><br><span class="line">除了使用索引的方式以外，还可以通过truncate()方法截取 Series或DataFrame对象。</span><br><span class="line">truncate(before = None,after = None,</span><br><span class="line">axis = None,copy = True)</span><br><span class="line">    before -- 表示截断此索引值之前的所有行。</span><br><span class="line">     after -- 表示截断此索引值之后的所有行。</span><br><span class="line">      axis -- 表示截断的轴，默认为行索引方向。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="固定频率的时间序列"><a href="#固定频率的时间序列" class="headerlink" title="固定频率的时间序列"></a>固定频率的时间序列</h2><ol><li><p>创建固定频率的时间序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Pandas中提供了一个date_range()函数，主要用于生成一个具有固定频率的DatetimeIndex对象。</span><br><span class="line">date_range(start = None, end = None, periods = None, freq = None, tz = None, normalize = False, name = None, closed = None，** kwargs)</span><br><span class="line">    start：表示起始日期，默认为None。</span><br><span class="line">    end：表示终止日期，默认为None。</span><br><span class="line">    periods：表示产生多少个时间戳索引值。</span><br><span class="line">    freq：用来指定计时单位。</span><br><span class="line">则默认生成的时间戳是按天计算的，即freq参数为D。</span><br><span class="line"></span><br><span class="line">如果只是传入了开始日期或结束日期，则还需要用periods参数指定产生多少个时间戳。</span><br><span class="line">pd.date_range(start=&#x27;2018/08/10&#x27;, periods=5)</span><br><span class="line">pd.date_range(end=&#x27;2018/08/10&#x27;, periods=5)</span><br><span class="line"></span><br><span class="line">如果希望时间序列中的时间戳都是每周固定的星期日，将freq参数设为“W-SUN”。</span><br><span class="line">dates_index = pd.date_range(&#x27;2018-01-01&#x27;, periods=5, freq=&#x27;W-SUN&#x27;)</span><br><span class="line"></span><br><span class="line">日期中带有与时间相关的信息，且想产生一组被规范化到当天午夜的时间戳，可以将normalize参数的值设为True。</span><br><span class="line">pd.date_range(start=&#x27;2018/8/1 12:13:30&#x27;, </span><br><span class="line">periods=5, normalize=True, tz=&#x27;Asia/Hong_Kong&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>时间序列的频率、偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认生成的时间序列数据是按天计算的，即频率为“D”。</span><br><span class="line">“5D”表示每5天。</span><br></pre></td></tr></table></figure><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/17.png?raw=true" alt="17.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/18.png?raw=true" alt="18.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">每个基础频率还可以跟着一个被称为日期偏移量的DateOffset对象，需要先导入pd.tseries.offsets模块后才行。</span><br><span class="line">from pandas.tseries.offsets import *</span><br><span class="line">DateOffset(months=4, days=5)</span><br><span class="line"></span><br><span class="line">还可以使用offsets模块中提供的偏移量类型进行创建。</span><br><span class="line">Week(2) + Hour(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>时间序列的移动</p><p>移动是指沿着时间轴方向将数据进行前移或后移。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/19.png?raw=true" alt="19.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pandas对象中提供了一个shift()方法，用来前移或后移数据，但数据索引保持不变。</span><br><span class="line">shift(periods=1, freq=None, axis=0)</span><br><span class="line">    periods -- 表示移动的幅度，可以为正数，也可以为负数，默认值是1，代表移动一次。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="时间周期及计算"><a href="#时间周期及计算" class="headerlink" title="时间周期及计算"></a>时间周期及计算</h2><ol><li><p>创建时期对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Period类表示一个标准的时间段或时期，比如某年、某月、某日、某小时等。</span><br><span class="line"></span><br><span class="line">创建Period类对象的方式比较简单，只需要在构造方法中以字符串或整数的形式传入一个日期即可。</span><br><span class="line">pd.Period(2018)</span><br><span class="line">pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line"></span><br><span class="line">Period对象能够参与数学运算</span><br><span class="line">period = pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line">period + 1</span><br><span class="line"></span><br><span class="line">相同频率的两个Period对象进行数学运算</span><br><span class="line">pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line">other_period = pd.Period(201201, freq=&#x27;M&#x27; )</span><br><span class="line">period - other_period</span><br><span class="line"></span><br><span class="line">如果希望创建多个Period对象，且它们是固定出现的，则可以通过period_range()函数实现。</span><br><span class="line">period_index = pd.period_range(&#x27;2012.1.8&#x27;,&#x27;2012.3.31&#x27;, freq=&#x27;M&#x27;)</span><br><span class="line"></span><br><span class="line">除了使用上述方式创建PeriodIndex外，还可以直接在PeriodIndex的构造方法中传入一组日期字符串。</span><br><span class="line">str_list = [&#x27;2010&#x27;, &#x27;2011&#x27;, &#x27;2012&#x27;]</span><br><span class="line">pd.PeriodIndex(str_list, freq=&#x27;A-DEC&#x27;)</span><br><span class="line"></span><br><span class="line">asfreq()方法来转换时期的频率。</span><br><span class="line">asfreq(freq，method = None，how = None，normalize = False，fill_value = None )</span><br><span class="line">          freq -- 表示计时单位。</span><br><span class="line">           how -- 可以取值为start或end，默认为end。</span><br><span class="line">     normalize -- 表示是否将时间索引重置为午夜。</span><br><span class="line">    fill_value -- 用于填充缺失值的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="重采样"><a href="#重采样" class="headerlink" title="重采样"></a>重采样</h2><ol><li><p>重采样方法（resample）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Pandas中的resample()是一个对常规时间序列数据重新采样和频率转换的便捷的方法。</span><br><span class="line">resample(rule, how=None, axis=0, fill_method=None, closed=None, label=None, ...)</span><br><span class="line">    rule        -- 表示重采样频率的字符串或DateOffset。</span><br><span class="line">    fill_method -- 表示升采样时如何插值。</span><br><span class="line">    closed      -- 设置降采样哪一端是闭合的。</span><br><span class="line"></span><br><span class="line">time_ser.resample(&#x27;W-MON&#x27;).mean()</span><br><span class="line">how参数不再建议使用，而是采用新的方式“.resample(...).mean()”求平均值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果重采样时传入closed参数为left，则表示采样的范围是左闭右开型的。</span><br><span class="line">time_ser.resample(&#x27;W-MON&#x27;, closed=&#x27;left&#x27;).mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>降采样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">降采样时间颗粒会变大，数据量是减少的。为了避免有些时间戳对应的数据闲置，可以利用内置方法聚合数据。</span><br><span class="line"></span><br><span class="line">股票数据比较常见的是OHLC重采样，包括开盘价、最高价、最低价和收盘价。</span><br><span class="line">date_index = pd.date_range(&#x27;2018/06/01&#x27;, periods=30)</span><br><span class="line">shares_data = np.random.rand(30)</span><br><span class="line">time_ser = pd.Series(shares_data, index=date_index)</span><br><span class="line">time_ser.resample(&#x27;7D&#x27;).ohlc()</span><br><span class="line"></span><br><span class="line">降采样相当于另外一种形式的分组操作，它会按照日期将时间序列进行分组，之后对每个分组应用聚合方法得出一个结果。</span><br><span class="line">time_ser.groupby(lambda x: x.week).mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>升采样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">升采样的时间颗粒是变小的，数据量会增多，这很有可能导致某些时间戳没有相应的数据。</span><br><span class="line"></span><br><span class="line">常用的解决办法就是插值，具体有如下几种方式：</span><br><span class="line">    1.通过ffill(limit)或bfill(limit)方法，取空值前面或后面的值填充，limit可以限制填充的个数。</span><br><span class="line">    2.通过fillna(‘ffill’)或fillna(‘bfill’)进行填充，传入ffill则表示用NaN前面的值填充，传入bfill则表示用后面的值填充。</span><br><span class="line">    3.使用interpolate()方法根据插值算法补全数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="数据统计—滑动窗口"><a href="#数据统计—滑动窗口" class="headerlink" title="数据统计—滑动窗口"></a>数据统计—滑动窗口</h2><p>滑动窗口指的是根据指定的单位长度来框住时间序列，从而计算框内的统计指标。（相当于一个长度指定的滑块在刻度尺上面滑动，每滑动一个单位即可反馈滑块内的数据。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rolling(window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)</span><br><span class="line">    window      -- 表示窗口的大小。</span><br><span class="line">    min_periods -- 每个窗口最少包含的观测值数量。</span><br><span class="line">    center      -- 是否把窗口的标签设置为居中。</span><br><span class="line">    win_type    -- 表示窗口的类型。</span><br><span class="line">    closed      -- 用于定义区间的开闭。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时序模型—ARIMA"><a href="#时序模型—ARIMA" class="headerlink" title="时序模型—ARIMA"></a>时序模型—ARIMA</h2><p>ARIMA的全称叫做<strong>差分整合移动平均自回归模型</strong>，又称作整合移动平均自回归模型，是一种用于时间序列预测的常见统计模型。</p><p>ARIMA模型主要由AR、I与MA模型三个部分组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">记作:ARIMA(p,d,q)</span><br><span class="line"></span><br><span class="line">p--代表预测模型中采用的时序数据本身的滞后数，即自回归项数。</span><br><span class="line">d--代表时序数据需要进行几阶差分化，才是稳定的，即差分的阶数。</span><br><span class="line">q--代表预测模型中采用的预测误差的滞后数，即滑动平均项数。</span><br><span class="line"></span><br><span class="line">ARIMA模型的基本思想是：将预测对象随时间推移而形成的数据序列视为一个随机序列，用一定的数学模型来近似描述这个序列，这个模型一旦被识别后，就可以从时间序列的过去值及现在值来预测未来值。</span><br></pre></td></tr></table></figure><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/5.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/20.png?raw=true" alt="20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python类 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
