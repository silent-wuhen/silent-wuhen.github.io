<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>商品数据大数据可视化系统</title>
      <link href="/2024/09/12/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/09/12/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是个项目是对淘宝的数据进行：数据爬取，数据分析，可视化大屏，机器学习进行销量预测。</p><p>视频：<a href="https://www.bilibili.com/video/BV1SC4y1K79K/?spm_id_from=333.999.0.0">商品数据可视化大屏</a></p><blockquote><p>技术：</p><p>数据获取：爬虫的selenium自动化技术</p><p>数据存储：MySQL数据库</p><p>后端：python的Django框架</p><p>前端：vue框架</p><p>图表：echarts</p></blockquote><blockquote><p>需要的工具：</p><p>后端与数据库：</p><ol><li>python，pycharm专业版</li><li>MySQL，Navicat</li><li>Chrome，ChromeDriver</li></ol><p>前端：</p><ol><li><a href="https://www.bilibili.com/video/BV1sK41187iw/?buvid=XX0E82E007C4293A9EF2A085AD987657C07A7&from_spmid=search.search-result.0.0&is_story_h5=false&mid=RITYc2lKabBrCMpg+dW2PQ==&p=1&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=d2199bb8-d550-4bb6-a6ca-18cb244a659b&share_source=QQ&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1725896630&unique_k=HQnBmjH&up_id=218763334">node.js</a></li></ol> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 镜像源：</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span></span><br></pre></td></tr></table></figure><ol start="2"><li>vscode</li></ol></blockquote><p>项目展示：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/000.png?raw=true" alt="001"></p><h1 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/001.png?raw=true" alt="001"></p><h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h2><ol><li><p>创建一个requirements.txt文件，requirements.txt的内容是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.7.2</span><br><span class="line">async-generator==1.10</span><br><span class="line">attrs==22.1.0</span><br><span class="line">backports.zoneinfo==0.2.1</span><br><span class="line">blinker==1.6.2</span><br><span class="line">certifi==2022.6.15</span><br><span class="line">cffi==1.15.1</span><br><span class="line">charset-normalizer==3.2.0</span><br><span class="line">click==8.1.7</span><br><span class="line">colorama==0.4.6</span><br><span class="line">cryptography==37.0.4</span><br><span class="line">cycler==0.11.0</span><br><span class="line">distlib==0.3.7</span><br><span class="line">Django==4.2.5</span><br><span class="line">django-cors-headers==4.2.0</span><br><span class="line">exceptiongroup==1.1.2</span><br><span class="line">filelock==3.12.2</span><br><span class="line">Flask==2.3.3</span><br><span class="line">Flask-Cors==4.0.0</span><br><span class="line">Flask-SQLAlchemy==3.0.5</span><br><span class="line">fonttools==4.34.4</span><br><span class="line">greenlet==2.0.2</span><br><span class="line">h11==0.13.0</span><br><span class="line">idna==3.3</span><br><span class="line">importlib-metadata==6.8.0</span><br><span class="line">itsdangerous==2.1.2</span><br><span class="line">jieba==0.42.1</span><br><span class="line">Jinja2==3.1.2</span><br><span class="line">joblib==1.3.2</span><br><span class="line">kiwisolver==1.4.4</span><br><span class="line">lxml==4.9.3</span><br><span class="line">MarkupSafe==2.1.3</span><br><span class="line">matplotlib==3.5.2</span><br><span class="line">mysqlclient==2.2.0</span><br><span class="line">numpy==1.23.1</span><br><span class="line">outcome==1.2.0</span><br><span class="line">packaging==21.3</span><br><span class="line">pandas==1.5.3</span><br><span class="line">Pillow==9.2.0</span><br><span class="line">platformdirs==3.10.0</span><br><span class="line">pycparser==2.21</span><br><span class="line">PyMySQL==1.0.2</span><br><span class="line">pyOpenSSL==22.0.0</span><br><span class="line">pyparsing==3.0.9</span><br><span class="line">PySocks==1.7.1</span><br><span class="line">python-dateutil==2.8.2</span><br><span class="line">pytz==2022.1</span><br><span class="line">requests==2.31.0</span><br><span class="line">scikit-learn==1.3.2</span><br><span class="line">scipy==1.10.1</span><br><span class="line">selenium==4.3.0</span><br><span class="line">six==1.16.0</span><br><span class="line">sniffio==1.2.0</span><br><span class="line">sortedcontainers==2.4.0</span><br><span class="line">SQLAlchemy==1.4.45</span><br><span class="line">sqlparse==0.4.2</span><br><span class="line">threadpoolctl==3.2.0</span><br><span class="line">trio==0.21.0</span><br><span class="line">trio-websocket==0.9.2</span><br><span class="line">typing_extensions==4.7.1</span><br><span class="line">tzdata==2022.1</span><br><span class="line">urllib3==1.26.11</span><br><span class="line">urllib3-secure-extra==0.1.0</span><br><span class="line">virtualenv==20.24.3</span><br><span class="line">virtualenvwrapper-win==1.2.7</span><br><span class="line">werkzeug==2.3.7</span><br><span class="line">wordcloud==1.8.2.2</span><br><span class="line">wsproto==1.1.0</span><br><span class="line">zipp==3.8.0</span><br></pre></td></tr></table></figure></li><li><p>将requirements.txt文件复制到同名目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/002.png?raw=true" alt="001"></p></li><li><p>打开终端</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/003.png?raw=true" alt="001"></p></li><li><p>安装依赖，在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r ..\..\requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>查看安装的依赖</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/004.png?raw=true" alt="001"></p></li></ol><h2 id="3-基础配置"><a href="#3-基础配置" class="headerlink" title="3.基础配置"></a>3.基础配置</h2><ol><li><p>修改语言，时区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-Hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/005.png?raw=true" alt="001"></p></li><li><p>配置数据库</p><ul><li><p>在Navicat中创建数据库goodsData:</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/006.png?raw=true" alt="001"></p></li><li><p>回到settings.py修改：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/007.png?raw=true" alt="001"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;goodsData&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;POST&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="2-爬虫"><a href="#2-爬虫" class="headerlink" title="2.爬虫"></a>2.爬虫</h1><p>新建一个spiderMain文件夹，并且在spiderMain文件夹创建一个spider.py文件，如：<br><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/008.png?raw=true" alt="001"></p><h2 id="1-软件安装"><a href="#1-软件安装" class="headerlink" title="1.软件安装"></a>1.软件安装</h2><p>需要下载chrome浏览器和chromedriver.exe驱动。</p><ol><li><p>查看Chrome的版本号</p></li><li><p>下载ChromeDriver</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ChromeDriver下载地址：</span><br><span class="line">版本在114及以下：http://chromedriver.storage.googleapis.com/index.html</span><br><span class="line">版本在127：https://googlechromelabs.github.io/chrome-for-testing/#stable</span><br></pre></td></tr></table></figure></li><li><p>将chromedriver.exe放在spiderMain文件夹下</p></li><li><p>将chrome的目录添加在环境变量中</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Google\Chrome\Application</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/009.png?raw=true" alt="001"></p></li><li><p>chrome浏览器设置</p><p>可以防止浏览器打开新的页面，被爬取数据的网页系统监测到</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/010.png?raw=true" alt="001"></p></li><li><p>chrome浏览器端口设置</p><p>用<strong>管理员身份运行cmd</strong>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe --remote-debugging-port=9223</span><br></pre></td></tr></table></figure><p>注：出现报错是没有进行第4步的配置，只需要配置第4步后，重新执行第6步即可</p></li></ol><h2 id="2-爬虫编写"><a href="#2-爬虫编写" class="headerlink" title="2.爬虫编写"></a>2.爬虫编写</h2><p>注意：运行代码时，一定要点开浏览器，并且是对应的端口号</p><h3 id="1-导入所需的依赖"><a href="#1-导入所需的依赖" class="headerlink" title="*1.导入所需的依赖"></a>*1.导入所需的依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_mock_engine</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><h3 id="2-创建浏览器对象"><a href="#2-创建浏览器对象" class="headerlink" title="*2.创建浏览器对象"></a>*2.创建浏览器对象</h3><p>目标：使用chromedriver.exe打开需要爬取数据的网页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    service = Service(<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_experimental_option(<span class="string">&quot;debuggerAddress&quot;</span>,<span class="string">&quot;localhost:9223&quot;</span>) <span class="comment"># 不打开新页面进行数据爬取</span></span><br><span class="line">    brower = webdriver.Chrome(service=service, options=options) <span class="comment"># 创建浏览器对象</span></span><br><span class="line">    brower.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator,&quot;webdriver&quot;,&#123;get: () =&gt; undefined&#125;)&#x27;</span>&#125;) <span class="comment"># 通过反爬措施：通过网站的测验,如二维码检测等</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">    brower.get(url)</span><br></pre></td></tr></table></figure><h3 id="3-数据初始化（init）"><a href="#3-数据初始化（init）" class="headerlink" title="*3.数据初始化（init）"></a>*3.数据初始化（init）</h3><p>目标：用来创建存储数据的文件，并且初始化文件的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存取数据的文件data.csv</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="comment"># 删除文件后重新创建文件夹</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./data.csv&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;./data.csv&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.csv&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        myWrite = csv.writer(f)</span><br><span class="line">        myWrite.writerow([<span class="string">&#x27;product_type&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;buy_len&#x27;</span>,</span><br><span class="line">                          <span class="string">&#x27;img_src&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27;isFreeDelivery&#x27;</span>,<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;nameHref&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="4-获取指定的数据类型"><a href="#4-获取指定的数据类型" class="headerlink" title="*4.获取指定的数据类型"></a>*4.获取指定的数据类型</h3><p>目标：通过key参数来传递数据，能够获取对应key值得搜索</p><p>例如：获取购物网站上衣物，食品，电器等不同类型的数据得搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过key参数，传递搜索的关键字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_product</span>(<span class="params">key</span>):</span><br><span class="line">    brower.find_element(By.ID,<span class="string">&quot;q&quot;</span>).send_keys(key)  <span class="comment"># find_element找到参数中的元素By.ID,&quot;q&quot;</span></span><br><span class="line">    brower.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;J_TSearchForm&quot;]/div[1]/button&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="5-获取对应的产品信息"><a href="#5-获取对应的产品信息" class="headerlink" title="*5.获取对应的产品信息"></a>*5.获取对应的产品信息</h3><p>目标：获取到当页的需要的数据信息，并且实现下一页的翻页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取对应的产品信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_product</span>(<span class="params">count</span>):</span><br><span class="line">    items = brower.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;Content--contentInner--QVTcU0M&quot;]/a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 类型</span></span><br><span class="line">            product_type = key</span><br><span class="line">            <span class="comment"># 商品名</span></span><br><span class="line">            title = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;Title--title--jCOPvpf &quot;]/span&#x27;</span>).text</span><br><span class="line">            <span class="comment"># 价格</span></span><br><span class="line">            price = div.find_element(By.XPATH,</span><br><span class="line">                                     <span class="string">&#x27;.//div[@style=&quot;margin-right: 8px;&quot;]/span[@class=&quot;Price--priceInt--ZlsSi_M&quot;]&#x27;</span>).text + \</span><br><span class="line">                    div.find_element(By.XPATH,</span><br><span class="line">                                     <span class="string">&#x27;.//div[@style=&quot;margin-right: 8px;&quot;]/span[@class=&quot;Price--priceFloat--h2RR0RK&quot;]&#x27;</span>).text</span><br><span class="line">            <span class="comment"># 销量</span></span><br><span class="line">            buy_len = div.find_element(By.XPATH,</span><br><span class="line">                                       <span class="string">&#x27;.//div[@class=&quot;Price--priceWrapper--Q0Dn7pN &quot;]/span[@class=&quot;Price--realSales--FhTZc7U&quot;]&#x27;</span>).text</span><br><span class="line">            buy_len = re.search(<span class="string">&quot;\d+&quot;</span>, buy_len).group()  <span class="comment"># d+为匹配数字的正则表达式</span></span><br><span class="line">            <span class="comment"># 图片</span></span><br><span class="line">            img_src = div.find_element(By.XPATH, <span class="string">&#x27;.//img[@class=&quot;MainPic--mainPic--rcLNaCv&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;src&quot;</span>)  <span class="comment"># 获取属性使用get_attribute函数</span></span><br><span class="line">            <span class="comment"># 店铺名</span></span><br><span class="line">            name = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;ShopInfo--TextAndPic--yH0AZfx&quot;]/a&#x27;</span>).text</span><br><span class="line">            <span class="comment"># 地址</span></span><br><span class="line">            address = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;Price--procity--_7Vt3mX&quot;]/span&#x27;</span>).text</span><br><span class="line">            <span class="comment"># 包邮情况</span></span><br><span class="line">            isFreeDelivery = <span class="string">&#x27;不包邮&#x27;</span> <span class="comment"># 默认不包邮</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                isFreeDeliveryList = div.find_elements(By.XPATH,</span><br><span class="line">                                                       <span class="string">&#x27;.//div[@class=&quot;SalesPoint--subIconWrapper--s6vanNY &quot;]/div/span&#x27;</span>)</span><br><span class="line">                isFreeDeliveryList = [element.text <span class="keyword">for</span> element <span class="keyword">in</span> isFreeDeliveryList]  <span class="comment"># 获取所有的文本元素</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;包邮&quot;</span> <span class="keyword">in</span> isFreeDeliveryList:</span><br><span class="line">                    isFreeDelivery = <span class="string">&quot;包邮&quot;</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                isFreeDelivery = <span class="string">&quot;不包邮&quot;</span></span><br><span class="line">            <span class="comment"># 详情页面</span></span><br><span class="line">            href = div.get_attribute(<span class="string">&quot;href&quot;</span>)  <span class="comment"># 此时的div变量就是a标签</span></span><br><span class="line">            <span class="comment"># 店铺详情</span></span><br><span class="line">            namehref = div.find_element(By.XPATH, <span class="string">&#x27;.//a[@class=&quot;ShopInfo--shopName--rg6mGmy&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">            <span class="comment"># 写入数据</span></span><br><span class="line">            save_to_csv(product_type, title, price, buy_len, img_src, name, address, isFreeDelivery, href, namehref)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(product_type, title, price, buy_len, img_src, name, address, isFreeDelivery, href, namehref)</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已爬取%d条数据&quot;</span>%count)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 实现翻页，获取下一页的数据</span></span><br><span class="line">        brower.find_element(By.XPATH,<span class="string">&#x27;.//button[@class=&quot;next-btn next-medium next-btn-normal next-pagination-item next-next&quot;]&#x27;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在翻页&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        get_product(count)</span><br></pre></td></tr></table></figure><h3 id="6-保存数据"><a href="#6-保存数据" class="headerlink" title="*6.保存数据"></a>*6.保存数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据保存到CSV文件夹中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_csv</span>(<span class="params">product_type, title, price, buy_len, img_src, name, address, isFreeDelivery, href, namehref</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.csv&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        myWriter = csv.writer(f, dialect=<span class="string">&#x27;excel&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># dialect=&#x27;excle&#x27;使它兼容excle; delimiter=&#x27;,&#x27;逗号分隔</span></span><br><span class="line">        myWriter.writerow([product_type, title, price, buy_len, img_src, name, address, isFreeDelivery, href, namehref])  <span class="comment"># 按顺序写入,注意写入的数据类型是列表格式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-创建数据库的表"><a href="#7-创建数据库的表" class="headerlink" title="7.创建数据库的表"></a>7.创建数据库的表</h3><ol><li><p>打开命令行</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/011.png?raw=true" alt="001"></p></li><li><p>创建一个app,输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp myApp</span><br></pre></td></tr></table></figure></li><li><p>配置settings.py,添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;myApp&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/012.png?raw=true" alt="001"></p></li><li><p>编写models.py</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/013.png?raw=true" alt="001"></p><p>编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;id&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">type</span> = models.CharField(<span class="string">&#x27;商品类型&#x27;</span>, max_length=<span class="number">255</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    price = models.CharField(<span class="string">&#x27;商品价格&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    buy_len = models.CharField(<span class="string">&#x27;商品销量&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    img_src = models.CharField(<span class="string">&#x27;图片&#x27;</span>, max_length=<span class="number">2555</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;店铺名&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    isFreeDelivery = models.CharField(<span class="string">&#x27;是否包邮&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    href = models.CharField(<span class="string">&#x27;详情链接&#x27;</span>, max_length=<span class="number">2555</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    nameHref = models.CharField(<span class="string">&#x27;店铺详情链接&#x27;</span>, max_length=<span class="number">2555</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;products&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;id&#x27;</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = models.CharField(<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    password = models.CharField(<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">255</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    createTime = models.DateTimeField(<span class="string">&quot;创建时间&quot;</span>,auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;user&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><p>在终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><p>接着输入，即可将表创建成功（可在navicat中查看）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-数据清洗"><a href="#8-数据清洗" class="headerlink" title="*8.数据清洗"></a>*8.数据清洗</h3><p>目标：对数据进行清洗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据清洗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">df_clean</span>(<span class="params">df</span>):</span><br><span class="line">    df[<span class="string">&#x27;address&#x27;</span>] = df[<span class="string">&#x27;address&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;省&#x27;</span>)</span><br><span class="line">    df[<span class="string">&#x27;address&#x27;</span>] = df[<span class="string">&#x27;address&#x27;</span>].<span class="built_in">str</span>.get(<span class="number">0</span>)</span><br><span class="line">    df.fillna(<span class="string">&#x27;暂无&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><h3 id="9-数据保存到数据库"><a href="#9-数据保存到数据库" class="headerlink" title="*9.数据保存到数据库"></a>*9.数据保存到数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_sql</span>():</span><br><span class="line">    products = pd.read_csv(<span class="string">&#x27;./data.csv&#x27;</span>)</span><br><span class="line">    df = pd.DataFrame(products)</span><br><span class="line">    conn = create_engine(<span class="string">&#x27;mysql+pymysql://root:root@localhost:3306/goodsdata?charset=utf8&#x27;</span>)</span><br><span class="line">    df = df_clean(df)</span><br><span class="line">    df.to_sql(<span class="string">&#x27;products&#x27;</span>,con=conn,index=<span class="literal">False</span>,if_exists=<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;导入数据库成功&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="10-爬虫优化"><a href="#10-爬虫优化" class="headerlink" title="10.爬虫优化"></a>10.爬虫优化</h3><p>目标：自动完成页面滚动，脱离人工</p><ol><li><p>查看整个网页的高度</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/014.png?raw=true" alt="001"></p></li><li><p>实现浏览器滚动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬虫的优化</span></span><br><span class="line">scroll_position = <span class="number">0</span></span><br><span class="line">scroll_amount = <span class="number">200</span> <span class="comment"># 一次滚动的距离</span></span><br><span class="line">max_scroll = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现浏览器滚动</span></span><br><span class="line"><span class="keyword">if</span> scroll_position &lt; max_scroll:</span><br><span class="line">    scroll_script = <span class="string">f&quot;window.scrollBy(0,<span class="subst">&#123;scroll_amount&#125;</span>);&quot;</span></span><br><span class="line">    brower.execute_script(scroll_script)</span><br><span class="line">    scroll_position += scroll_amount</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-爬虫完整代码"><a href="#11-爬虫完整代码" class="headerlink" title="11.爬虫完整代码"></a>11.爬虫完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_mock_engine, create_engine</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建爬虫函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider_fn</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="comment"># 创建存取数据的文件data.csv</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">        <span class="comment"># 删除文件后重新创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./data.csv&#x27;</span>):</span><br><span class="line">            os.remove(<span class="string">&#x27;./data.csv&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.csv&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            myWrite = csv.writer(f)</span><br><span class="line">            myWrite.writerow([<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;buy_len&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;img_src&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27;isFreeDelivery&#x27;</span>,<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;nameHref&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过key参数，传递搜索的关键字</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_product</span>(<span class="params">key</span>):</span><br><span class="line">        brower.find_element(By.ID,<span class="string">&quot;q&quot;</span>).send_keys(key)  <span class="comment"># find_element找到参数中的元素By.ID,&quot;q&quot;</span></span><br><span class="line">        brower.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;J_TSearchForm&quot;]/div[1]/button&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取对应的产品信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_product</span>(<span class="params">count</span>):</span><br><span class="line">        <span class="comment"># 爬虫的优化</span></span><br><span class="line">        scroll_position = <span class="number">0</span></span><br><span class="line">        scroll_amount = <span class="number">300</span> <span class="comment"># 一次滚动的距离</span></span><br><span class="line">        max_scroll = <span class="number">6900</span></span><br><span class="line"></span><br><span class="line">        items = brower.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;Content--contentInner--QVTcU0M&quot;]/a&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 类型</span></span><br><span class="line">                <span class="built_in">type</span> = key</span><br><span class="line">                <span class="comment"># 商品名</span></span><br><span class="line">                title = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;Title--title--jCOPvpf &quot;]/span&#x27;</span>).text</span><br><span class="line">                <span class="comment"># 价格</span></span><br><span class="line">                price = div.find_element(By.XPATH,</span><br><span class="line">                                         <span class="string">&#x27;.//div[@style=&quot;margin-right: 8px;&quot;]/span[@class=&quot;Price--priceInt--ZlsSi_M&quot;]&#x27;</span>).text + \</span><br><span class="line">                        div.find_element(By.XPATH,</span><br><span class="line">                                         <span class="string">&#x27;.//div[@style=&quot;margin-right: 8px;&quot;]/span[@class=&quot;Price--priceFloat--h2RR0RK&quot;]&#x27;</span>).text</span><br><span class="line">                <span class="comment"># 销量</span></span><br><span class="line">                buy_len = div.find_element(By.XPATH,</span><br><span class="line">                                           <span class="string">&#x27;.//div[@class=&quot;Price--priceWrapper--Q0Dn7pN &quot;]/span[@class=&quot;Price--realSales--FhTZc7U&quot;]&#x27;</span>).text</span><br><span class="line">                buy_len = re.search(<span class="string">&quot;\d+&quot;</span>, buy_len).group()  <span class="comment"># d+为匹配数字的正则表达式</span></span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                img_src = div.find_element(By.XPATH, <span class="string">&#x27;.//img[@class=&quot;MainPic--mainPic--rcLNaCv&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;src&quot;</span>)  <span class="comment"># 获取属性使用get_attribute函数</span></span><br><span class="line">                <span class="comment"># 店铺名</span></span><br><span class="line">                name = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;ShopInfo--TextAndPic--yH0AZfx&quot;]/a&#x27;</span>).text</span><br><span class="line">                <span class="comment"># 地址</span></span><br><span class="line">                address = div.find_element(By.XPATH, <span class="string">&#x27;.//div[@class=&quot;Price--procity--_7Vt3mX&quot;]/span&#x27;</span>).text</span><br><span class="line">                <span class="comment"># 包邮情况</span></span><br><span class="line">                isFreeDelivery = <span class="string">&#x27;不包邮&#x27;</span> <span class="comment"># 默认不包邮</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    isFreeDeliveryList = div.find_elements(By.XPATH,</span><br><span class="line">                                                           <span class="string">&#x27;.//div[@class=&quot;SalesPoint--subIconWrapper--s6vanNY &quot;]/div/span&#x27;</span>)</span><br><span class="line">                    isFreeDeliveryList = [element.text <span class="keyword">for</span> element <span class="keyword">in</span> isFreeDeliveryList]  <span class="comment"># 获取所有的文本元素</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;包邮&quot;</span> <span class="keyword">in</span> isFreeDeliveryList:</span><br><span class="line">                        isFreeDelivery = <span class="string">&quot;包邮&quot;</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    isFreeDelivery = <span class="string">&quot;不包邮&quot;</span></span><br><span class="line">                <span class="comment"># 详情页面</span></span><br><span class="line">                href = div.get_attribute(<span class="string">&quot;href&quot;</span>)  <span class="comment"># 此时的div变量就是a标签</span></span><br><span class="line">                <span class="comment"># 店铺详情</span></span><br><span class="line">                nameHref = div.find_element(By.XPATH, <span class="string">&#x27;.//a[@class=&quot;ShopInfo--shopName--rg6mGmy&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">                <span class="comment"># 写入数据</span></span><br><span class="line">                save_to_csv(<span class="built_in">type</span>, title, price, buy_len, img_src, name, address, isFreeDelivery, href, nameHref)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># print(type, title, price, buy_len, img_src, name, address, isFreeDelivery, href, nameHref)</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 实现浏览器滚动</span></span><br><span class="line">            <span class="keyword">if</span> scroll_position &lt; max_scroll:</span><br><span class="line">                scroll_script = <span class="string">f&quot;window.scrollBy(0,<span class="subst">&#123;scroll_amount&#125;</span>);&quot;</span></span><br><span class="line">                brower.execute_script(scroll_script)</span><br><span class="line">                scroll_position += scroll_amount</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> count % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已爬取%d条数据&quot;</span>%count)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 实现翻页，获取下一页的数据</span></span><br><span class="line">            brower.find_element(By.XPATH,<span class="string">&#x27;.//button[@class=&quot;next-btn next-medium next-btn-normal next-pagination-item next-next&quot;]&#x27;</span>).click()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在翻页&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            get_product(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据保存到CSV文件夹中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_to_csv</span>(<span class="params"><span class="built_in">type</span>, title, price, buy_len, img_src, name, address, isFreeDelivery, href, nameHref</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data.csv&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            myWriter = csv.writer(f, dialect=<span class="string">&#x27;excel&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># dialect=&#x27;excle&#x27;使它兼容excle; delimiter=&#x27;,&#x27;逗号分隔</span></span><br><span class="line">            myWriter.writerow([<span class="built_in">type</span>, title, price, buy_len, img_src, name, address, isFreeDelivery, href, nameHref])  <span class="comment"># 按顺序写入,注意写入的数据类型是列表格式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据清洗</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">df_clean</span>(<span class="params">df</span>):</span><br><span class="line">        df[<span class="string">&#x27;address&#x27;</span>] = df[<span class="string">&#x27;address&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;省&#x27;</span>)</span><br><span class="line">        df[<span class="string">&#x27;address&#x27;</span>] = df[<span class="string">&#x27;address&#x27;</span>].<span class="built_in">str</span>.get(<span class="number">0</span>)</span><br><span class="line">        df.fillna(<span class="string">&#x27;暂无&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_to_sql</span>():</span><br><span class="line">        products = pd.read_csv(<span class="string">&#x27;./data.csv&#x27;</span>)</span><br><span class="line">        df = pd.DataFrame(products)</span><br><span class="line">        conn = create_engine(<span class="string">&#x27;mysql+pymysql://root:root@localhost:3306/goodsdata?charset=utf8&#x27;</span>)</span><br><span class="line">        df = df_clean(df)</span><br><span class="line">        df.to_sql(<span class="string">&#x27;products&#x27;</span>,con=conn,index=<span class="literal">False</span>,if_exists=<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;导入数据库成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        count = <span class="number">0</span> <span class="comment"># 获取爬取数据信息的条数</span></span><br><span class="line">        init()</span><br><span class="line">        search_product(key)</span><br><span class="line">        get_product(count)</span><br><span class="line">        <span class="comment"># save_to_sql()</span></span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    service = Service(<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_experimental_option(<span class="string">&quot;debuggerAddress&quot;</span>,<span class="string">&quot;localhost:9223&quot;</span>) <span class="comment"># 不打开新页面进行数据爬取</span></span><br><span class="line">    brower = webdriver.Chrome(service=service, options=options) <span class="comment"># 创建浏览器对象</span></span><br><span class="line">    brower.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator,&quot;webdriver&quot;,&#123;get: () =&gt; undefined&#125;)&#x27;</span>&#125;) <span class="comment"># 通过反爬措施：通过网站的测验,如二维码检测等</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">    brower.get(url)</span><br><span class="line"></span><br><span class="line">    spider_fn(<span class="string">&#x27;食品&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-前端"><a href="#3-前端" class="headerlink" title="3.前端"></a>3.前端</h1><p>为了更加注重后端的编写，所以此项目的前端使用的是模板。</p><p>vscode格式化快捷键：shift + alt + f</p><h2 id="1-前端–初始化"><a href="#1-前端–初始化" class="headerlink" title="1.前端–初始化"></a>1.前端–初始化</h2><ol><li><p>模板网页链接：<a href="https://github.com/woai3c/vue-admin-template"> 轻量级后台管理系统基础模板</a></p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/015.png?raw=true" alt="001"></p><p>解压到项目文件夹下</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/016.png?raw=true" alt="001"></p></li><li><p>在vscode中打开解压后的文件夹</p></li><li><p>在vscode的终端中下载package.json,并且一定要删除package-lock.json文件</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/017.png?raw=true" alt="001"></p></li><li><p>在终端输入（若node.js安装在C盘，右键管理员身份运行vscode）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若出现报错，则输入：npm run lint -- --fix</span></span><br></pre></td></tr></table></figure><p>可在浏览器输入，查看：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/018.png?raw=true" alt="001"></p></li><li><p>eslin注释（或删除）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li><li><p>ctrl+c停止项目，然后重启项目</p></li></ol><h2 id="2-前端–大屏样式"><a href="#2-前端–大屏样式" class="headerlink" title="2.前端–大屏样式"></a>2.前端–大屏样式</h2><ol><li><p>注释app.vue中的内容（快捷键ctrl + &#x2F;）</p><p>作用：让网页能够向下滑动</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/019.png?raw=true" alt="001"></p></li><li><p>网页布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>布局元素：<a href="http://datav.jiaminghi.com/">DataV (jiaminghi.com)</a></p><ul><li>找到安装依赖</li></ul><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/020.png?raw=true" alt="001"></p><ul><li><p>在vscode中新建一个终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @jiaminghi/data-view</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：若安装失败，需要使用管理员身份运行vscode</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在main.js中引入datav，输入：</p><p>注意导入的依赖一定要在import App from ‘.&#x2F;App’之前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; borderBox1 &#125; from &#x27;@jiaminghi/data-view&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(borderBox1)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/021.png?raw=true" alt="001"></p></li><li><p>样式的home.vue文件代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;&lt;div&gt;&lt;/div&gt;&lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;&lt;div&gt;&lt;/div&gt;&lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注释</span><br><span class="line">/*</span><br><span class="line">注释</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-图形绘制（前端-后端接口）"><a href="#4-图形绘制（前端-后端接口）" class="headerlink" title="4.图形绘制（前端 + 后端接口）"></a>4.图形绘制（前端 + 后端接口）</h1><h2 id="1-柱状图"><a href="#1-柱状图" class="headerlink" title="1.柱状图"></a>1.柱状图</h2><h3 id="1-柱状图前端"><a href="#1-柱状图前端" class="headerlink" title="1.柱状图前端"></a>1.柱状图前端</h3><ol><li><p>script基础配置(一定要有注释和空格)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期钩子</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>柱状图：<a href="https://echarts.apache.org/examples/zh/index.html">使用echarts图表</a></p><ul><li><p>在终端输入安装echarts：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save echarts</span><br></pre></td></tr></table></figure></li><li><p>在main.js中引入echarts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$echarts</span> = echarts</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/022.png?raw=true" alt="001"></p></li><li><p>柱状图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        data: [120, 200, 150, 80, 70, 110, 130],</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果报错，在终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br><span class="line"></span><br><span class="line">npx eslint --fix src/views/Home.vue</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最终的Home.vue的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:300px;height:270px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        data: [120, 200, 150, 80, 70, 110, 130],</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-柱状图后端接口"><a href="#2-柱状图后端接口" class="headerlink" title="2.柱状图后端接口"></a>2.柱状图后端接口</h3><h4 id="1-流程"><a href="#1-流程" class="headerlink" title="1.流程"></a>1.流程</h4><p>创建好下图的几个文件</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/024.png?raw=true" alt="001"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.商品/urls.py：配置路由</span><br><span class="line">2.myApp/urls.py</span><br><span class="line">3.myApp/views.py：接受请求，返回数据</span><br><span class="line">4.myApp/utils/getScreenData.py：实现获取数据的的方法</span><br><span class="line">5.myApp/utils/getBaseData.py：引入数据库的数据</span><br></pre></td></tr></table></figure><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h4><ol><li><p>商品&#x2F;urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;myApp/&#x27;</span>,include(<span class="string">&#x27;myApp.urls&#x27;</span>))</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myApp <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;screenData/&quot;</span>, views.screenData,name=<span class="string">&quot;screenData&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> getScreenData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenData</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        cityList,volumnList = getScreenData.getSquareData()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;cityList&#x27;</span> : cityList,</span><br><span class="line">            <span class="string">&#x27;volumnList&#x27;</span> : volumnList</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;utils&#x2F;getScreenData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;utils&#x2F;getBaseData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myApp.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAllGoods</span>():</span><br><span class="line">    <span class="comment"># 引入Products表中的所有数据</span></span><br><span class="line">    <span class="keyword">return</span> Products.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-实现前后端关联"><a href="#3-实现前后端关联" class="headerlink" title="3.实现前后端关联"></a>3.实现前后端关联</h3><h4 id="1-跨域的实现"><a href="#1-跨域的实现" class="headerlink" title="1.跨域的实现"></a>1.跨域的实现</h4><p>为了防止前后端的端口号不同，出现跨域问题。需在pycharm项目的settings.py中设置：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/023.png?raw=true" alt="001"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_ORIGINS = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line">CORS_ALLOW_HEADERS = (<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="2-前端发送请求与接受数据"><a href="#2-前端发送请求与接受数据" class="headerlink" title="2.前端发送请求与接受数据"></a>2.前端发送请求与接受数据</h4><ol><li><p>流程：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端 -(发送请求)-&gt; 后端 -(数据接收)-&gt; 前端</span><br></pre></td></tr></table></figure></li><li><p>前端编写流程</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.src/api/index.js：封装HTTP请求</span><br><span class="line">2.src/main.js：全局注册HTTP客户端</span><br><span class="line">3.src/views/Home.vue：发送HTTP请求</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-前端编写"><a href="#3-前端编写" class="headerlink" title="3.前端编写"></a>3.前端编写</h4><ol><li><p>src&#x2F;api&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">40000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $http <span class="keyword">from</span> <span class="string">&#x27;@/api/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = $http</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;views&#x2F;Home.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 发送请求</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以及修改表的x,y轴的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: &#x27;category&#x27;,</span><br><span class="line">        data: this.realData.cityList,</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            data: this.realData.volumnList,</span><br><span class="line">            type: &#x27;bar&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>美化图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; color &#125; from &#x27;echarts&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line">import &#123; readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-Home-vue的完整代码"><a href="#4-Home-vue的完整代码" class="headerlink" title="4.Home.vue的完整代码"></a>4.Home.vue的完整代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div</span><br><span class="line">                     ref=&quot;firstMain&quot;</span><br><span class="line">                     style=&quot;width:350px;height:270px;&quot;</span><br><span class="line">                     v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                     @mouseenter=&quot;startAction&quot;</span><br><span class="line">                     @mouseleave=&quot;cancelAction&quot;</span><br><span class="line">                     &gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; color &#125; from &#x27;echarts&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line">import &#123; readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-饼状图"><a href="#2-饼状图" class="headerlink" title="2.饼状图"></a>2.饼状图</h2><h3 id="1-饼状图前端"><a href="#1-饼状图前端" class="headerlink" title="1.饼状图前端"></a>1.饼状图前端</h3><ol><li><p>饼状图：<a href="https://echarts.apache.org/examples/zh/index.html">使用echarts图表</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">drawLeftBottom() &#123;</span><br><span class="line">    let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">    let option = &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            text: &#x27;Referer of a Website&#x27;,</span><br><span class="line">            subtext: &#x27;Fake Data&#x27;,</span><br><span class="line">            left: &#x27;center&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">            orient: &#x27;vertical&#x27;,</span><br><span class="line">            left: &#x27;left&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#x27;Access From&#x27;,</span><br><span class="line">                type: &#x27;pie&#x27;,</span><br><span class="line">                radius: &#x27;50%&#x27;,</span><br><span class="line">                data: [</span><br><span class="line">                    &#123; value: 1048, name: &#x27;Search Engine&#x27; &#125;,</span><br><span class="line">                    &#123; value: 735, name: &#x27;Direct&#x27; &#125;,</span><br><span class="line">                    &#123; value: 580, name: &#x27;Email&#x27; &#125;,</span><br><span class="line">                    &#123; value: 484, name: &#x27;Union Ads&#x27; &#125;,</span><br><span class="line">                    &#123; value: 300, name: &#x27;Video Ads&#x27; &#125;,</span><br><span class="line">                ],</span><br><span class="line">                emphasis: &#123;</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        shadowBlur: 10,</span><br><span class="line">                        shadowOffsetX: 0,</span><br><span class="line">                        shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">    if (option) &#123;</span><br><span class="line">        myChart.setOption(option)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>最终的Home.vue的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                        @mouseenter=&quot;startAction&quot; @mouseleave=&quot;cancelAction&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div ref=&quot;secondMain&quot; style=&quot;width:350px;height:270px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; color &#125; from &#x27;echarts&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line">import &#123; readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    data: this.realData.volumnList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawLeftBottom() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;Referer of a Website&#x27;,</span><br><span class="line">                    subtext: &#x27;Fake Data&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    left: &#x27;left&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;Access From&#x27;,</span><br><span class="line">                        type: &#x27;pie&#x27;,</span><br><span class="line">                        radius: &#x27;50%&#x27;,</span><br><span class="line">                        data: [</span><br><span class="line">                            &#123; value: 1048, name: &#x27;Search Engine&#x27; &#125;,</span><br><span class="line">                            &#123; value: 735, name: &#x27;Direct&#x27; &#125;,</span><br><span class="line">                            &#123; value: 580, name: &#x27;Email&#x27; &#125;,</span><br><span class="line">                            &#123; value: 484, name: &#x27;Union Ads&#x27; &#125;,</span><br><span class="line">                            &#123; value: 300, name: &#x27;Video Ads&#x27; &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                shadowBlur: 10,</span><br><span class="line">                                shadowOffsetX: 0,</span><br><span class="line">                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.drawLeftBottom()</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-饼状图后端"><a href="#2-饼状图后端" class="headerlink" title="2.饼状图后端"></a>2.饼状图后端</h3><ol><li><p>myApp&#x2F;utils&#x2F;getScreenData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPieData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodsNumber = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodsNumber.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] += <span class="number">1</span></span><br><span class="line">    pieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> goodsNumber.items():</span><br><span class="line">        pieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> pieList</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> getScreenData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenData</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        cityList,volumnList = getScreenData.getSquareData()</span><br><span class="line">        pieList = getScreenData.getPieData()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;cityList&#x27;</span> : cityList,</span><br><span class="line">            <span class="string">&#x27;volumnList&#x27;</span> : volumnList,</span><br><span class="line">            <span class="string">&#x27;pieList&#x27;</span> : pieList</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-前后端关联"><a href="#3-前后端关联" class="headerlink" title="3.前后端关联"></a>3.前后端关联</h3><p>Home.vue的全部代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                        @mouseenter=&quot;startAction&quot; @mouseleave=&quot;cancelAction&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div ref=&quot;secondMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.pieList[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; color &#125; from &#x27;echarts&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line">import &#123; readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">                pieList: [&#123; name: &#x27;data1&#x27;, value: 10 &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    data: this.realData.volumnList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawLeftBottom() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各类型产品占比&#x27;,</span><br><span class="line">                    subtext: &#x27;&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    left: &#x27;left&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;数量&#x27;,</span><br><span class="line">                        type: &#x27;pie&#x27;,</span><br><span class="line">                        radius: &#x27;50%&#x27;,</span><br><span class="line">                        data: this.realData.pieList,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                shadowBlur: 10,</span><br><span class="line">                                shadowOffsetX: 0,</span><br><span class="line">                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                label: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.$set(this.realData, &#x27;pieList&#x27;, res.data.pieList)</span><br><span class="line">        this.drawLeftBottom()</span><br><span class="line">        console.log(this.realData.pieList)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-地图的配置"><a href="#3-地图的配置" class="headerlink" title="3.地图的配置"></a>3.地图的配置</h2><h3 id="1-地图api配置"><a href="#1-地图api配置" class="headerlink" title="1.地图api配置"></a>1.地图api配置</h3><ol><li><p>src&#x2F;api下创建一个getMap.js文件</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/5.%E6%95%B0%E5%88%86%E9%A1%B9%E7%9B%AE/1.%E5%95%86%E5%93%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F/025.png?raw=true" alt="001"></p></li><li><p>设置api，输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-地图后端"><a href="#2-地图后端" class="headerlink" title="2.地图后端"></a>2.地图后端</h3><ol><li><p>myApp&#x2F;utils&#x2F;getScreenData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPieData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodsNumber = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodsNumber.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] += <span class="number">1</span></span><br><span class="line">    pieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> goodsNumber.items():</span><br><span class="line">        pieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> pieList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMapData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    cityVolume = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> cityVolume.get(i.address,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            cityVolume[i.address] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cityVolume[i.address] += <span class="number">1</span></span><br><span class="line">    mapData = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> cityVolume.items():</span><br><span class="line">        mapData.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> mapData</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> getScreenData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenData</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        cityList,volumnList = getScreenData.getSquareData()</span><br><span class="line">        pieList = getScreenData.getPieData()</span><br><span class="line">        mapData = getScreenData.getMapData()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;cityList&#x27;</span>: cityList,</span><br><span class="line">            <span class="string">&#x27;volumnList&#x27;</span>: volumnList,</span><br><span class="line">            <span class="string">&#x27;pieList&#x27;</span>: pieList,</span><br><span class="line">            <span class="string">&#x27;mapData&#x27;</span>: mapData</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-前后端关联-1"><a href="#3-前后端关联-1" class="headerlink" title="3.前后端关联"></a>3.前后端关联</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                        @mouseenter=&quot;startAction&quot; @mouseleave=&quot;cancelAction&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div ref=&quot;secondMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.pieList[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div ref=&quot;thirdMain&quot; style=&quot;width: 450px;height: 450px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getMap from &#x27;@/api/getMap.js&#x27;</span><br><span class="line">// import &#123; color &#125; from &#x27;echarts&#x27;</span><br><span class="line">// import &#123; scale &#125; from &#x27;echarts/types/src/scale/helper.js&#x27;</span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">                pieList: [&#123; name: &#x27;data1&#x27;, value: 10 &#125;],</span><br><span class="line">                mapData: [&#123; name: &#x27;data2&#x27;, value: 10 &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    data: this.realData.volumnList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawLeftBottom() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各类型产品占比&#x27;,</span><br><span class="line">                    subtext: &#x27;&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    left: &#x27;left&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;数量&#x27;,</span><br><span class="line">                        type: &#x27;pie&#x27;,</span><br><span class="line">                        radius: &#x27;50%&#x27;,</span><br><span class="line">                        data: this.realData.pieList,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                shadowBlur: 10,</span><br><span class="line">                                shadowOffsetX: 0,</span><br><span class="line">                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                label: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        async drawCenterMap() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.thirdMain)</span><br><span class="line">            const res = await getMap</span><br><span class="line">            this.$echarts.registerMap(&#x27;china&#x27;, res.data)</span><br><span class="line">            let data = this.realData.mapData</span><br><span class="line">            let geoCoordMap = &#123;</span><br><span class="line">                海门: [121.15, 31.89],</span><br><span class="line">                鄂尔多斯: [109.781327, 39.608266],</span><br><span class="line">                招远: [120.38, 37.35],</span><br><span class="line">                舟山: [122.207216, 29.985295],</span><br><span class="line">                齐齐哈尔: [123.97, 47.33],</span><br><span class="line">                盐城: [120.13, 33.38],</span><br><span class="line">                赤峰: [118.87, 42.28],</span><br><span class="line">                青岛: [120.33, 36.07],</span><br><span class="line">                乳山: [121.52, 36.89],</span><br><span class="line">                金昌: [102.188043, 38.520089],</span><br><span class="line">                泉州: [118.58, 24.93],</span><br><span class="line">                莱西: [120.53, 36.86],</span><br><span class="line">                日照: [119.46, 35.42],</span><br><span class="line">                胶南: [119.97, 35.88],</span><br><span class="line">                南通: [121.05, 32.08],</span><br><span class="line">                拉萨: [91.11, 29.97],</span><br><span class="line">                云浮: [112.02, 22.93],</span><br><span class="line">                梅州: [116.1, 24.55],</span><br><span class="line">                文登: [122.05, 37.2],</span><br><span class="line">                上海: [121.48, 31.22],</span><br><span class="line">                攀枝花: [101.718637, 26.582347],</span><br><span class="line">                威海: [122.1, 37.5],</span><br><span class="line">                承德: [117.93, 40.97],</span><br><span class="line">                厦门: [118.1, 24.46],</span><br><span class="line">                汕尾: [115.375279, 22.786211],</span><br><span class="line">                潮州: [116.63, 23.68],</span><br><span class="line">                丹东: [124.37, 40.13],</span><br><span class="line">                太仓: [121.1, 31.45],</span><br><span class="line">                曲靖: [103.79, 25.51],</span><br><span class="line">                烟台: [121.39, 37.52],</span><br><span class="line">                福州: [119.3, 26.08],</span><br><span class="line">                瓦房店: [121.979603, 39.627114],</span><br><span class="line">                即墨: [120.45, 36.38],</span><br><span class="line">                抚顺: [123.97, 41.97],</span><br><span class="line">                玉溪: [102.52, 24.35],</span><br><span class="line">                张家口: [114.87, 40.82],</span><br><span class="line">                阳泉: [113.57, 37.85],</span><br><span class="line">                莱州: [119.942327, 37.177017],</span><br><span class="line">                湖州: [120.1, 30.86],</span><br><span class="line">                汕头: [116.69, 23.39],</span><br><span class="line">                昆山: [120.95, 31.39],</span><br><span class="line">                宁波: [121.56, 29.86],</span><br><span class="line">                湛江: [110.359377, 21.270708],</span><br><span class="line">                揭阳: [116.35, 23.55],</span><br><span class="line">                荣成: [122.41, 37.16],</span><br><span class="line">                连云港: [119.16, 34.59],</span><br><span class="line">                葫芦岛: [120.836932, 40.711052],</span><br><span class="line">                常熟: [120.74, 31.64],</span><br><span class="line">                东莞: [113.75, 23.04],</span><br><span class="line">                河源: [114.68, 23.73],</span><br><span class="line">                淮安: [119.15, 33.5],</span><br><span class="line">                泰州: [119.9, 32.49],</span><br><span class="line">                南宁: [108.33, 22.84],</span><br><span class="line">                营口: [122.18, 40.65],</span><br><span class="line">                惠州: [114.4, 23.09],</span><br><span class="line">                江阴: [120.26, 31.91],</span><br><span class="line">                蓬莱: [120.75, 37.8],</span><br><span class="line">                韶关: [113.62, 24.84],</span><br><span class="line">                嘉峪关: [98.289152, 39.77313],</span><br><span class="line">                广州: [113.23, 23.16],</span><br><span class="line">                延安: [109.47, 36.6],</span><br><span class="line">                太原: [112.53, 37.87],</span><br><span class="line">                清远: [113.01, 23.7],</span><br><span class="line">                中山: [113.38, 22.52],</span><br><span class="line">                昆明: [102.73, 25.04],</span><br><span class="line">                寿光: [118.73, 36.86],</span><br><span class="line">                盘锦: [122.070714, 41.119997],</span><br><span class="line">                长治: [113.08, 36.18],</span><br><span class="line">                深圳: [114.07, 22.62],</span><br><span class="line">                珠海: [113.52, 22.3],</span><br><span class="line">                宿迁: [118.3, 33.96],</span><br><span class="line">                咸阳: [108.72, 34.36],</span><br><span class="line">                铜川: [109.11, 35.09],</span><br><span class="line">                平度: [119.97, 36.77],</span><br><span class="line">                佛山: [113.11, 23.05],</span><br><span class="line">                海口: [110.35, 20.02],</span><br><span class="line">                江门: [113.06, 22.61],</span><br><span class="line">                章丘: [117.53, 36.72],</span><br><span class="line">                肇庆: [112.44, 23.05],</span><br><span class="line">                大连: [121.62, 38.92],</span><br><span class="line">                临汾: [111.5, 36.08],</span><br><span class="line">                吴江: [120.63, 31.16],</span><br><span class="line">                石嘴山: [106.39, 39.04],</span><br><span class="line">                沈阳: [123.38, 41.8],</span><br><span class="line">                苏州: [120.62, 31.32],</span><br><span class="line">                茂名: [110.88, 21.68],</span><br><span class="line">                嘉兴: [120.76, 30.77],</span><br><span class="line">                长春: [125.35, 43.88],</span><br><span class="line">                胶州: [120.03336, 36.264622],</span><br><span class="line">                银川: [106.27, 38.47],</span><br><span class="line">                张家港: [120.555821, 31.875428],</span><br><span class="line">                三门峡: [111.19, 34.76],</span><br><span class="line">                锦州: [121.15, 41.13],</span><br><span class="line">                南昌: [115.89, 28.68],</span><br><span class="line">                柳州: [109.4, 24.33],</span><br><span class="line">                三亚: [109.511909, 18.252847],</span><br><span class="line">                自贡: [104.778442, 29.33903],</span><br><span class="line">                吉林: [126.57, 43.87],</span><br><span class="line">                阳江: [111.95, 21.85],</span><br><span class="line">                泸州: [105.39, 28.91],</span><br><span class="line">                西宁: [101.74, 36.56],</span><br><span class="line">                宜宾: [104.56, 29.77],</span><br><span class="line">                呼和浩特: [111.65, 40.82],</span><br><span class="line">                成都: [104.06, 30.67],</span><br><span class="line">                大同: [113.3, 40.12],</span><br><span class="line">                镇江: [119.44, 32.2],</span><br><span class="line">                桂林: [110.28, 25.29],</span><br><span class="line">                张家界: [110.479191, 29.117096],</span><br><span class="line">                宜兴: [119.82, 31.36],</span><br><span class="line">                北海: [109.12, 21.49],</span><br><span class="line">                西安: [108.95, 34.27],</span><br><span class="line">                金坛: [119.56, 31.74],</span><br><span class="line">                东营: [118.49, 37.46],</span><br><span class="line">                牡丹江: [129.58, 44.6],</span><br><span class="line">                遵义: [106.9, 27.7],</span><br><span class="line">                绍兴: [120.58, 30.01],</span><br><span class="line">                扬州: [119.42, 32.39],</span><br><span class="line">                常州: [119.95, 31.79],</span><br><span class="line">                潍坊: [119.1, 36.62],</span><br><span class="line">                重庆: [106.54, 29.59],</span><br><span class="line">                台州: [121.420757, 28.656386],</span><br><span class="line">                南京: [118.78, 32.04],</span><br><span class="line">                滨州: [118.03, 37.36],</span><br><span class="line">                贵阳: [106.71, 26.57],</span><br><span class="line">                无锡: [120.29, 31.59],</span><br><span class="line">                本溪: [123.73, 41.3],</span><br><span class="line">                克拉玛依: [84.77, 45.59],</span><br><span class="line">                渭南: [109.5, 34.52],</span><br><span class="line">                马鞍山: [118.48, 31.56],</span><br><span class="line">                宝鸡: [107.15, 34.38],</span><br><span class="line">                焦作: [113.21, 35.24],</span><br><span class="line">                句容: [119.16, 31.95],</span><br><span class="line">                北京: [116.46, 39.92],</span><br><span class="line">                徐州: [117.2, 34.26],</span><br><span class="line">                衡水: [115.72, 37.72],</span><br><span class="line">                包头: [110, 40.58],</span><br><span class="line">                绵阳: [104.73, 31.48],</span><br><span class="line">                乌鲁木齐: [87.68, 43.77],</span><br><span class="line">                枣庄: [117.57, 34.86],</span><br><span class="line">                杭州: [120.19, 30.26],</span><br><span class="line">                淄博: [118.05, 36.78],</span><br><span class="line">                鞍山: [122.85, 41.12],</span><br><span class="line">                溧阳: [119.48, 31.43],</span><br><span class="line">                库尔勒: [86.06, 41.68],</span><br><span class="line">                安阳: [114.35, 36.1],</span><br><span class="line">                开封: [114.35, 34.79],</span><br><span class="line">                济南: [117, 36.65],</span><br><span class="line">                德阳: [104.37, 31.13],</span><br><span class="line">                温州: [120.65, 28.01],</span><br><span class="line">                九江: [115.97, 29.71],</span><br><span class="line">                邯郸: [114.47, 36.6],</span><br><span class="line">                临安: [119.72, 30.23],</span><br><span class="line">                兰州: [103.73, 36.03],</span><br><span class="line">                沧州: [116.83, 38.33],</span><br><span class="line">                临沂: [118.35, 35.05],</span><br><span class="line">                南充: [106.110698, 30.837793],</span><br><span class="line">                天津: [117.2, 39.13],</span><br><span class="line">                富阳: [119.95, 30.07],</span><br><span class="line">                泰安: [117.13, 36.18],</span><br><span class="line">                诸暨: [120.23, 29.71],</span><br><span class="line">                郑州: [113.65, 34.76],</span><br><span class="line">                哈尔滨: [126.63, 45.75],</span><br><span class="line">                聊城: [115.97, 36.45],</span><br><span class="line">                芜湖: [118.38, 31.33],</span><br><span class="line">                唐山: [118.02, 39.63],</span><br><span class="line">                平顶山: [113.29, 33.75],</span><br><span class="line">                邢台: [114.48, 37.05],</span><br><span class="line">                德州: [116.29, 37.45],</span><br><span class="line">                济宁: [116.59, 35.38],</span><br><span class="line">                荆州: [112.239741, 30.335165],</span><br><span class="line">                宜昌: [111.3, 30.7],</span><br><span class="line">                义乌: [120.06, 29.32],</span><br><span class="line">                丽水: [119.92, 28.45],</span><br><span class="line">                洛阳: [112.44, 34.7],</span><br><span class="line">                秦皇岛: [119.57, 39.95],</span><br><span class="line">                株洲: [113.16, 27.83],</span><br><span class="line">                石家庄: [114.48, 38.03],</span><br><span class="line">                莱芜: [117.67, 36.19],</span><br><span class="line">                常德: [111.69, 29.05],</span><br><span class="line">                保定: [115.48, 38.85],</span><br><span class="line">                湘潭: [112.91, 27.87],</span><br><span class="line">                金华: [119.64, 29.12],</span><br><span class="line">                岳阳: [113.09, 29.37],</span><br><span class="line">                长沙: [113, 28.21],</span><br><span class="line">                衢州: [118.88, 28.97],</span><br><span class="line">                廊坊: [116.7, 39.53],</span><br><span class="line">                菏泽: [115.480656, 35.23375],</span><br><span class="line">                合肥: [117.27, 31.86],</span><br><span class="line">                武汉: [114.31, 30.52],</span><br><span class="line">                大庆: [125.03, 46.58],</span><br><span class="line">            &#125;</span><br><span class="line">            let convertData = function (data) &#123;</span><br><span class="line">                let res = []</span><br><span class="line">                for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">                    let geoCoord = geoCoordMap[data[i].name]</span><br><span class="line">                    if (geoCoord) &#123;</span><br><span class="line">                        res.push(&#123;</span><br><span class="line">                            name: data[i].name,</span><br><span class="line">                            value: geoCoord.concat(data[i].value),</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return res</span><br><span class="line">            &#125;</span><br><span class="line">            let option = &#123;</span><br><span class="line">                scale: 0.1,</span><br><span class="line">                backgroundColor: &#x27;transparent&#x27;,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;全国省市产品数据&#x27;,</span><br><span class="line">                    subtext: &#x27;数据来自淘宝&#x27;,</span><br><span class="line">                    // sublink: &#x27;http://www.pm25.in&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                // 这个属性用于实现光圈效果</span><br><span class="line">                geo: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    map: &#x27;china&#x27;,</span><br><span class="line">                    zoom: 1.25,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        normal: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                // 鼠标移入省份字体颜色变化</span><br><span class="line">                                color: &#x27;white&#x27;,</span><br><span class="line">                                // 鼠标移入省份字体大小变化</span><br><span class="line">                                fontSize: &#x27;10px&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                roam: true,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        areacolor: &#x27;skyblue&#x27;,</span><br><span class="line">                        borderColor: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        areaColor: &#x27;#2B91B7&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销量&#x27;,</span><br><span class="line">                        type: &#x27;effectScatter&#x27;,</span><br><span class="line">                        coordinateSystem: &#x27;geo&#x27;,</span><br><span class="line">                        data: convertData(data),</span><br><span class="line">                        symbolSize(val) &#123;</span><br><span class="line">                            return val[2] / 10</span><br><span class="line">                        &#125;,</span><br><span class="line">                        showEffectOn: &#x27;render&#x27;,</span><br><span class="line">                        rippleEffect: &#123;</span><br><span class="line">                            brushType: &#x27;stroke&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        hoverAnimation: true,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            formatter: &#x27;&#123;b&#125;&#x27;,</span><br><span class="line">                            position: &#x27;right&#x27;,</span><br><span class="line">                            show: true,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        itemStyle: &#123;</span><br><span class="line">                            color: &#x27;#ddb926&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            label: &#123;</span><br><span class="line">                                show: true,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.$set(this.realData, &#x27;pieList&#x27;, res.data.pieList)</span><br><span class="line">        this.$set(this.realData, &#x27;mapData&#x27;, res.data.mapData)</span><br><span class="line">        // console.log(this.realData.mapData)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.drawLeftBottom()</span><br><span class="line">        this.drawCenterMap()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="4-折线图"><a href="#4-折线图" class="headerlink" title="4.折线图"></a>4.折线图</h2><h3 id="1-折线图后端"><a href="#1-折线图后端" class="headerlink" title="1.折线图后端"></a>1.折线图后端</h3><ol><li><p>myApp&#x2F;utils&#x2F;getScreenData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPieData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodsNumber = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodsNumber.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] += <span class="number">1</span></span><br><span class="line">    pieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> goodsNumber.items():</span><br><span class="line">        pieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> pieList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMapData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    cityVolume = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> cityVolume.get(i.address,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            cityVolume[i.address] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cityVolume[i.address] += <span class="number">1</span></span><br><span class="line">    mapData = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> cityVolume.items():</span><br><span class="line">        mapData.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> mapData</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLineData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    priceDict = &#123;<span class="string">&#x27;0-100&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;100-200&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;200-500&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;500-1000&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;千元以上&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        p = <span class="built_in">float</span>(i.price)</span><br><span class="line">        <span class="keyword">if</span> p &lt; <span class="number">100</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;0-100&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">100</span> <span class="keyword">and</span> p &lt; <span class="number">200</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;100-200&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">200</span> <span class="keyword">and</span> p &lt; <span class="number">500</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;200-500&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">500</span> <span class="keyword">and</span> p &lt; <span class="number">1000</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;500-1000&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;千元以上&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    LineRowData = <span class="built_in">list</span>(priceDict.keys())</span><br><span class="line">    LineColData = <span class="built_in">list</span>(priceDict.values())</span><br><span class="line">    <span class="keyword">return</span> LineRowData,LineColData</span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> getScreenData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">screenData</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        cityList,volumnList = getScreenData.getSquareData()</span><br><span class="line">        pieList = getScreenData.getPieData()</span><br><span class="line">        mapData = getScreenData.getMapData()</span><br><span class="line">        LineRowData,LineColData = getScreenData.getLineData()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;cityList&#x27;</span>: cityList,</span><br><span class="line">            <span class="string">&#x27;volumnList&#x27;</span>: volumnList,</span><br><span class="line">            <span class="string">&#x27;pieList&#x27;</span>: pieList,</span><br><span class="line">            <span class="string">&#x27;mapData&#x27;</span>: mapData,</span><br><span class="line">            <span class="string">&#x27;LineRowData&#x27;</span>: LineRowData,</span><br><span class="line">            <span class="string">&#x27;LineColData&#x27;</span>: LineColData</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-前后端关联"><a href="#2-前后端关联" class="headerlink" title="2.前后端关联"></a>2.前后端关联</h3><p>Home.vue的全部代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                        @mouseenter=&quot;startAction&quot; @mouseleave=&quot;cancelAction&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div ref=&quot;secondMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.pieList[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div ref=&quot;thirdMain&quot; style=&quot;width: 450px;height: 450px;&quot; v-bind:key=&quot;realData.mapData[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;fourthMain&quot; style=&quot;width: 350px;height: 270px;&quot; v-bind:key=&quot;realData.LineColData[1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getMap from &#x27;@/api/getMap.js&#x27;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">                pieList: [&#123; name: &#x27;data1&#x27;, value: 10 &#125;],</span><br><span class="line">                mapData: [&#123; name: &#x27;data2&#x27;, value: 10 &#125;],</span><br><span class="line">                LineRowData: [],</span><br><span class="line">                LineColData: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    data: this.realData.volumnList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawLeftBottom() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各类型产品占比&#x27;,</span><br><span class="line">                    subtext: &#x27;&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    left: &#x27;left&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;数量&#x27;,</span><br><span class="line">                        type: &#x27;pie&#x27;,</span><br><span class="line">                        radius: &#x27;50%&#x27;,</span><br><span class="line">                        data: this.realData.pieList,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                shadowBlur: 10,</span><br><span class="line">                                shadowOffsetX: 0,</span><br><span class="line">                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                label: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        async drawCenterMap() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.thirdMain)</span><br><span class="line">            const res = await getMap</span><br><span class="line">            this.$echarts.registerMap(&#x27;china&#x27;, res.data)</span><br><span class="line">            let data = this.realData.mapData</span><br><span class="line">            let geoCoordMap = &#123;</span><br><span class="line">                海门: [121.15, 31.89],</span><br><span class="line">                鄂尔多斯: [109.781327, 39.608266],</span><br><span class="line">                招远: [120.38, 37.35],</span><br><span class="line">                舟山: [122.207216, 29.985295],</span><br><span class="line">                齐齐哈尔: [123.97, 47.33],</span><br><span class="line">                盐城: [120.13, 33.38],</span><br><span class="line">                赤峰: [118.87, 42.28],</span><br><span class="line">                青岛: [120.33, 36.07],</span><br><span class="line">                乳山: [121.52, 36.89],</span><br><span class="line">                金昌: [102.188043, 38.520089],</span><br><span class="line">                泉州: [118.58, 24.93],</span><br><span class="line">                莱西: [120.53, 36.86],</span><br><span class="line">                日照: [119.46, 35.42],</span><br><span class="line">                胶南: [119.97, 35.88],</span><br><span class="line">                南通: [121.05, 32.08],</span><br><span class="line">                拉萨: [91.11, 29.97],</span><br><span class="line">                云浮: [112.02, 22.93],</span><br><span class="line">                梅州: [116.1, 24.55],</span><br><span class="line">                文登: [122.05, 37.2],</span><br><span class="line">                上海: [121.48, 31.22],</span><br><span class="line">                攀枝花: [101.718637, 26.582347],</span><br><span class="line">                威海: [122.1, 37.5],</span><br><span class="line">                承德: [117.93, 40.97],</span><br><span class="line">                厦门: [118.1, 24.46],</span><br><span class="line">                汕尾: [115.375279, 22.786211],</span><br><span class="line">                潮州: [116.63, 23.68],</span><br><span class="line">                丹东: [124.37, 40.13],</span><br><span class="line">                太仓: [121.1, 31.45],</span><br><span class="line">                曲靖: [103.79, 25.51],</span><br><span class="line">                烟台: [121.39, 37.52],</span><br><span class="line">                福州: [119.3, 26.08],</span><br><span class="line">                瓦房店: [121.979603, 39.627114],</span><br><span class="line">                即墨: [120.45, 36.38],</span><br><span class="line">                抚顺: [123.97, 41.97],</span><br><span class="line">                玉溪: [102.52, 24.35],</span><br><span class="line">                张家口: [114.87, 40.82],</span><br><span class="line">                阳泉: [113.57, 37.85],</span><br><span class="line">                莱州: [119.942327, 37.177017],</span><br><span class="line">                湖州: [120.1, 30.86],</span><br><span class="line">                汕头: [116.69, 23.39],</span><br><span class="line">                昆山: [120.95, 31.39],</span><br><span class="line">                宁波: [121.56, 29.86],</span><br><span class="line">                湛江: [110.359377, 21.270708],</span><br><span class="line">                揭阳: [116.35, 23.55],</span><br><span class="line">                荣成: [122.41, 37.16],</span><br><span class="line">                连云港: [119.16, 34.59],</span><br><span class="line">                葫芦岛: [120.836932, 40.711052],</span><br><span class="line">                常熟: [120.74, 31.64],</span><br><span class="line">                东莞: [113.75, 23.04],</span><br><span class="line">                河源: [114.68, 23.73],</span><br><span class="line">                淮安: [119.15, 33.5],</span><br><span class="line">                泰州: [119.9, 32.49],</span><br><span class="line">                南宁: [108.33, 22.84],</span><br><span class="line">                营口: [122.18, 40.65],</span><br><span class="line">                惠州: [114.4, 23.09],</span><br><span class="line">                江阴: [120.26, 31.91],</span><br><span class="line">                蓬莱: [120.75, 37.8],</span><br><span class="line">                韶关: [113.62, 24.84],</span><br><span class="line">                嘉峪关: [98.289152, 39.77313],</span><br><span class="line">                广州: [113.23, 23.16],</span><br><span class="line">                延安: [109.47, 36.6],</span><br><span class="line">                太原: [112.53, 37.87],</span><br><span class="line">                清远: [113.01, 23.7],</span><br><span class="line">                中山: [113.38, 22.52],</span><br><span class="line">                昆明: [102.73, 25.04],</span><br><span class="line">                寿光: [118.73, 36.86],</span><br><span class="line">                盘锦: [122.070714, 41.119997],</span><br><span class="line">                长治: [113.08, 36.18],</span><br><span class="line">                深圳: [114.07, 22.62],</span><br><span class="line">                珠海: [113.52, 22.3],</span><br><span class="line">                宿迁: [118.3, 33.96],</span><br><span class="line">                咸阳: [108.72, 34.36],</span><br><span class="line">                铜川: [109.11, 35.09],</span><br><span class="line">                平度: [119.97, 36.77],</span><br><span class="line">                佛山: [113.11, 23.05],</span><br><span class="line">                海口: [110.35, 20.02],</span><br><span class="line">                江门: [113.06, 22.61],</span><br><span class="line">                章丘: [117.53, 36.72],</span><br><span class="line">                肇庆: [112.44, 23.05],</span><br><span class="line">                大连: [121.62, 38.92],</span><br><span class="line">                临汾: [111.5, 36.08],</span><br><span class="line">                吴江: [120.63, 31.16],</span><br><span class="line">                石嘴山: [106.39, 39.04],</span><br><span class="line">                沈阳: [123.38, 41.8],</span><br><span class="line">                苏州: [120.62, 31.32],</span><br><span class="line">                茂名: [110.88, 21.68],</span><br><span class="line">                嘉兴: [120.76, 30.77],</span><br><span class="line">                长春: [125.35, 43.88],</span><br><span class="line">                胶州: [120.03336, 36.264622],</span><br><span class="line">                银川: [106.27, 38.47],</span><br><span class="line">                张家港: [120.555821, 31.875428],</span><br><span class="line">                三门峡: [111.19, 34.76],</span><br><span class="line">                锦州: [121.15, 41.13],</span><br><span class="line">                南昌: [115.89, 28.68],</span><br><span class="line">                柳州: [109.4, 24.33],</span><br><span class="line">                三亚: [109.511909, 18.252847],</span><br><span class="line">                自贡: [104.778442, 29.33903],</span><br><span class="line">                吉林: [126.57, 43.87],</span><br><span class="line">                阳江: [111.95, 21.85],</span><br><span class="line">                泸州: [105.39, 28.91],</span><br><span class="line">                西宁: [101.74, 36.56],</span><br><span class="line">                宜宾: [104.56, 29.77],</span><br><span class="line">                呼和浩特: [111.65, 40.82],</span><br><span class="line">                成都: [104.06, 30.67],</span><br><span class="line">                大同: [113.3, 40.12],</span><br><span class="line">                镇江: [119.44, 32.2],</span><br><span class="line">                桂林: [110.28, 25.29],</span><br><span class="line">                张家界: [110.479191, 29.117096],</span><br><span class="line">                宜兴: [119.82, 31.36],</span><br><span class="line">                北海: [109.12, 21.49],</span><br><span class="line">                西安: [108.95, 34.27],</span><br><span class="line">                金坛: [119.56, 31.74],</span><br><span class="line">                东营: [118.49, 37.46],</span><br><span class="line">                牡丹江: [129.58, 44.6],</span><br><span class="line">                遵义: [106.9, 27.7],</span><br><span class="line">                绍兴: [120.58, 30.01],</span><br><span class="line">                扬州: [119.42, 32.39],</span><br><span class="line">                常州: [119.95, 31.79],</span><br><span class="line">                潍坊: [119.1, 36.62],</span><br><span class="line">                重庆: [106.54, 29.59],</span><br><span class="line">                台州: [121.420757, 28.656386],</span><br><span class="line">                南京: [118.78, 32.04],</span><br><span class="line">                滨州: [118.03, 37.36],</span><br><span class="line">                贵阳: [106.71, 26.57],</span><br><span class="line">                无锡: [120.29, 31.59],</span><br><span class="line">                本溪: [123.73, 41.3],</span><br><span class="line">                克拉玛依: [84.77, 45.59],</span><br><span class="line">                渭南: [109.5, 34.52],</span><br><span class="line">                马鞍山: [118.48, 31.56],</span><br><span class="line">                宝鸡: [107.15, 34.38],</span><br><span class="line">                焦作: [113.21, 35.24],</span><br><span class="line">                句容: [119.16, 31.95],</span><br><span class="line">                北京: [116.46, 39.92],</span><br><span class="line">                徐州: [117.2, 34.26],</span><br><span class="line">                衡水: [115.72, 37.72],</span><br><span class="line">                包头: [110, 40.58],</span><br><span class="line">                绵阳: [104.73, 31.48],</span><br><span class="line">                乌鲁木齐: [87.68, 43.77],</span><br><span class="line">                枣庄: [117.57, 34.86],</span><br><span class="line">                杭州: [120.19, 30.26],</span><br><span class="line">                淄博: [118.05, 36.78],</span><br><span class="line">                鞍山: [122.85, 41.12],</span><br><span class="line">                溧阳: [119.48, 31.43],</span><br><span class="line">                库尔勒: [86.06, 41.68],</span><br><span class="line">                安阳: [114.35, 36.1],</span><br><span class="line">                开封: [114.35, 34.79],</span><br><span class="line">                济南: [117, 36.65],</span><br><span class="line">                德阳: [104.37, 31.13],</span><br><span class="line">                温州: [120.65, 28.01],</span><br><span class="line">                九江: [115.97, 29.71],</span><br><span class="line">                邯郸: [114.47, 36.6],</span><br><span class="line">                临安: [119.72, 30.23],</span><br><span class="line">                兰州: [103.73, 36.03],</span><br><span class="line">                沧州: [116.83, 38.33],</span><br><span class="line">                临沂: [118.35, 35.05],</span><br><span class="line">                南充: [106.110698, 30.837793],</span><br><span class="line">                天津: [117.2, 39.13],</span><br><span class="line">                富阳: [119.95, 30.07],</span><br><span class="line">                泰安: [117.13, 36.18],</span><br><span class="line">                诸暨: [120.23, 29.71],</span><br><span class="line">                郑州: [113.65, 34.76],</span><br><span class="line">                哈尔滨: [126.63, 45.75],</span><br><span class="line">                聊城: [115.97, 36.45],</span><br><span class="line">                芜湖: [118.38, 31.33],</span><br><span class="line">                唐山: [118.02, 39.63],</span><br><span class="line">                平顶山: [113.29, 33.75],</span><br><span class="line">                邢台: [114.48, 37.05],</span><br><span class="line">                德州: [116.29, 37.45],</span><br><span class="line">                济宁: [116.59, 35.38],</span><br><span class="line">                荆州: [112.239741, 30.335165],</span><br><span class="line">                宜昌: [111.3, 30.7],</span><br><span class="line">                义乌: [120.06, 29.32],</span><br><span class="line">                丽水: [119.92, 28.45],</span><br><span class="line">                洛阳: [112.44, 34.7],</span><br><span class="line">                秦皇岛: [119.57, 39.95],</span><br><span class="line">                株洲: [113.16, 27.83],</span><br><span class="line">                石家庄: [114.48, 38.03],</span><br><span class="line">                莱芜: [117.67, 36.19],</span><br><span class="line">                常德: [111.69, 29.05],</span><br><span class="line">                保定: [115.48, 38.85],</span><br><span class="line">                湘潭: [112.91, 27.87],</span><br><span class="line">                金华: [119.64, 29.12],</span><br><span class="line">                岳阳: [113.09, 29.37],</span><br><span class="line">                长沙: [113, 28.21],</span><br><span class="line">                衢州: [118.88, 28.97],</span><br><span class="line">                廊坊: [116.7, 39.53],</span><br><span class="line">                菏泽: [115.480656, 35.23375],</span><br><span class="line">                合肥: [117.27, 31.86],</span><br><span class="line">                武汉: [114.31, 30.52],</span><br><span class="line">                大庆: [125.03, 46.58],</span><br><span class="line">            &#125;</span><br><span class="line">            let convertData = function (data) &#123;</span><br><span class="line">                let res = []</span><br><span class="line">                for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">                    let geoCoord = geoCoordMap[data[i].name]</span><br><span class="line">                    if (geoCoord) &#123;</span><br><span class="line">                        res.push(&#123;</span><br><span class="line">                            name: data[i].name,</span><br><span class="line">                            value: geoCoord.concat(data[i].value),</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return res</span><br><span class="line">            &#125;</span><br><span class="line">            let option = &#123;</span><br><span class="line">                scale: 0.1,</span><br><span class="line">                backgroundColor: &#x27;transparent&#x27;,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;全国省市产品数据&#x27;,</span><br><span class="line">                    subtext: &#x27;数据来自淘宝&#x27;,</span><br><span class="line">                    // sublink: &#x27;http://www.pm25.in&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                // 这个属性用于实现光圈效果</span><br><span class="line">                geo: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    map: &#x27;china&#x27;,</span><br><span class="line">                    zoom: 1.25,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        normal: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                // 鼠标移入省份字体颜色变化</span><br><span class="line">                                color: &#x27;white&#x27;,</span><br><span class="line">                                // 鼠标移入省份字体大小变化</span><br><span class="line">                                fontSize: &#x27;10px&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                roam: true,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        areacolor: &#x27;skyblue&#x27;,</span><br><span class="line">                        borderColor: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        areaColor: &#x27;#2B91B7&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销量&#x27;,</span><br><span class="line">                        type: &#x27;effectScatter&#x27;,</span><br><span class="line">                        coordinateSystem: &#x27;geo&#x27;,</span><br><span class="line">                        data: convertData(data),</span><br><span class="line">                        symbolSize(val) &#123;</span><br><span class="line">                            return val[2] / 10</span><br><span class="line">                        &#125;,</span><br><span class="line">                        showEffectOn: &#x27;render&#x27;,</span><br><span class="line">                        rippleEffect: &#123;</span><br><span class="line">                            brushType: &#x27;stroke&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        hoverAnimation: true,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            formatter: &#x27;&#123;b&#125;&#x27;,</span><br><span class="line">                            position: &#x27;right&#x27;,</span><br><span class="line">                            show: true,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        itemStyle: &#123;</span><br><span class="line">                            color: &#x27;#ddb926&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            label: &#123;</span><br><span class="line">                                show: true,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawRightTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.fourthMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.LineRowData,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        interval: 0, // 强制显示所有标签</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    name: &#x27;元&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    name: &#x27;个&#x27;,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        interval: 0, // 强制显示所有标签</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;商品价格占比&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    data: [&#x27;占比情况&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    right: &#x27;10%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;占比情况&#x27;,</span><br><span class="line">                        data: this.realData.LineColData,</span><br><span class="line">                        type: &#x27;line&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.$set(this.realData, &#x27;pieList&#x27;, res.data.pieList)</span><br><span class="line">        this.$set(this.realData, &#x27;mapData&#x27;, res.data.mapData)</span><br><span class="line">        this.$set(this.realData, &#x27;LineRowData&#x27;, res.data.LineRowData)</span><br><span class="line">        this.$set(this.realData, &#x27;LineColData&#x27;, res.data.LineColData)</span><br><span class="line">        // console.log(this.realData.LineRowData, this.realData.LineColData)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.drawLeftBottom()</span><br><span class="line">        this.drawCenterMap()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">        this.drawRightTop()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="5-动态环图"><a href="#5-动态环图" class="headerlink" title="5.动态环图"></a>5.动态环图</h2><h3 id="1-动态环图后端"><a href="#1-动态环图后端" class="headerlink" title="1.动态环图后端"></a>1.动态环图后端</h3><ol><li><p>myApp&#x2F;utils&#x2F;getScreenData.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPieData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodsNumber = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodsNumber.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] += <span class="number">1</span></span><br><span class="line">    pieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> goodsNumber.items():</span><br><span class="line">        pieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> pieList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMapData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    cityVolume = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> cityVolume.get(i.address,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            cityVolume[i.address] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cityVolume[i.address] += <span class="number">1</span></span><br><span class="line">    mapData = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> cityVolume.items():</span><br><span class="line">        mapData.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> mapData</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLineData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    priceDict = &#123;<span class="string">&#x27;0-100&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;100-200&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;200-500&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;500-1000&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;千元以上&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        p = <span class="built_in">float</span>(i.price)</span><br><span class="line">        <span class="keyword">if</span> p &lt; <span class="number">100</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;0-100&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">100</span> <span class="keyword">and</span> p &lt; <span class="number">200</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;100-200&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">200</span> <span class="keyword">and</span> p &lt; <span class="number">500</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;200-500&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">500</span> <span class="keyword">and</span> p &lt; <span class="number">1000</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;500-1000&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;千元以上&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    LineRowData = <span class="built_in">list</span>(priceDict.keys())</span><br><span class="line">    LineColData = <span class="built_in">list</span>(priceDict.values())</span><br><span class="line">    <span class="keyword">return</span> LineRowData,LineColData</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCircleData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    sumDict = &#123;&#125;</span><br><span class="line">    sumPice = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        p = <span class="built_in">float</span>(i.price)</span><br><span class="line">        sumPice += p</span><br><span class="line">        <span class="keyword">if</span> sumDict.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            sumDict[i.<span class="built_in">type</span>] = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sumDict[i.<span class="built_in">type</span>] += p</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> sumDict:</span><br><span class="line">        sumDict[key] = <span class="built_in">round</span>(sumDict[key] / sumPice * <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    circlieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> sumDict.items():</span><br><span class="line">        circlieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> circlieList</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>myApp&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .getBaseData <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSquareData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodVolumn = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodVolumn.get(i.address,-<span class="number">1</span>): <span class="comment"># 未获取到键，则赋值给销量</span></span><br><span class="line">            goodVolumn[i.address] = <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodVolumn[i.address] += <span class="built_in">int</span>(i.buy_len)</span><br><span class="line">    goodsSortVolumn = <span class="built_in">sorted</span>(goodVolumn.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>) <span class="comment"># 对销量排序</span></span><br><span class="line">    cityList = []</span><br><span class="line">    volumnList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goodsSortVolumn:</span><br><span class="line">        cityList.append(i[<span class="number">0</span>])</span><br><span class="line">        volumnList.append(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> cityList[:<span class="number">7</span>],volumnList[:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPieData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    goodsNumber = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> goodsNumber.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            goodsNumber[i.<span class="built_in">type</span>] += <span class="number">1</span></span><br><span class="line">    pieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> goodsNumber.items():</span><br><span class="line">        pieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> pieList</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMapData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    cityVolume = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        <span class="keyword">if</span> cityVolume.get(i.address,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            cityVolume[i.address] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cityVolume[i.address] += <span class="number">1</span></span><br><span class="line">    mapData = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> cityVolume.items():</span><br><span class="line">        mapData.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> mapData</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLineData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    priceDict = &#123;<span class="string">&#x27;0-100&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;100-200&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;200-500&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;500-1000&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;千元以上&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        p = <span class="built_in">float</span>(i.price)</span><br><span class="line">        <span class="keyword">if</span> p &lt; <span class="number">100</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;0-100&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">100</span> <span class="keyword">and</span> p &lt; <span class="number">200</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;100-200&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">200</span> <span class="keyword">and</span> p &lt; <span class="number">500</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;200-500&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> p &gt;= <span class="number">500</span> <span class="keyword">and</span> p &lt; <span class="number">1000</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;500-1000&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            priceDict[<span class="string">&#x27;千元以上&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    LineRowData = <span class="built_in">list</span>(priceDict.keys())</span><br><span class="line">    LineColData = <span class="built_in">list</span>(priceDict.values())</span><br><span class="line">    <span class="keyword">return</span> LineRowData,LineColData</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCircleData</span>():</span><br><span class="line">    goods = <span class="built_in">list</span>(getAllGoods())</span><br><span class="line">    sumDict = &#123;&#125;</span><br><span class="line">    sumPice = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goods:</span><br><span class="line">        p = <span class="built_in">float</span>(i.price)</span><br><span class="line">        sumPice += p</span><br><span class="line">        <span class="keyword">if</span> sumDict.get(i.<span class="built_in">type</span>,-<span class="number">1</span>) == -<span class="number">1</span>:</span><br><span class="line">            sumDict[i.<span class="built_in">type</span>] = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sumDict[i.<span class="built_in">type</span>] += p</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> sumDict:</span><br><span class="line">        sumDict[key] = <span class="built_in">round</span>(sumDict[key] / sumPice * <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    circlieList = []</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> sumDict.items():</span><br><span class="line">        circlieList.append(&#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: k,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: v</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> circlieList</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-前后端关联-1"><a href="#2-前后端关联-1" class="headerlink" title="2.前后端关联"></a>2.前后端关联</h3><p>Home.vue的全部代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">        &lt;!-- 头部 --&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;dv-decoration-8 style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span class=&quot;title-text&quot;&gt;大数据可视化平台&lt;/span&gt;</span><br><span class="line">                &lt;dv-decoration-5 style=&quot;width:300px;height:40px;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;dv-decoration-8 :reverse=&quot;true&quot; style=&quot;width:300px;height:50px;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-13&gt;</span><br><span class="line">                    &lt;dv-decoration-1 style=&quot;width:200px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;firstMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.volumnList[0]&quot;</span><br><span class="line">                        @mouseenter=&quot;startAction&quot; @mouseleave=&quot;cancelAction&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-13&gt;</span><br><span class="line">                &lt;dv-border-box-8&gt;</span><br><span class="line">                    &lt;div ref=&quot;secondMain&quot; style=&quot;width:350px;height:270px;&quot; v-bind:key=&quot;realData.pieList[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-8&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div ref=&quot;thirdMain&quot; style=&quot;width: 450px;height: 450px;&quot; v-bind:key=&quot;realData.mapData[0][1]&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;dv-border-box-12&gt;</span><br><span class="line">                    &lt;dv-decoration-3 style=&quot;width:250px;height:10px;&quot; /&gt;</span><br><span class="line">                    &lt;div ref=&quot;fourthMain&quot; style=&quot;width: 350px;height: 270px;&quot; v-bind:key=&quot;realData.LineColData[1]&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/dv-border-box-12&gt;</span><br><span class="line">                &lt;dv-border-box-1&gt;</span><br><span class="line">                    &lt;h1 style=&quot;font-size: 18px;text-align: center;color: #C0C0C0;margin-top: 12px;&quot;&gt;各类型销售额占比&lt;/h1&gt;</span><br><span class="line">                    &lt;dv-active-ring-chart :config=&quot;config&quot; style=&quot;width:300px;height:210px;margin: 12px auto&quot;</span><br><span class="line">                        v-bind:key=&quot;config.data[0][0]&quot;/&gt;</span><br><span class="line">                &lt;/dv-border-box-1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getMap from &#x27;@/api/getMap.js&#x27;</span><br><span class="line">// import &#123; config &#125; from &#x27;vue/types/umd&#x27;;</span><br><span class="line"></span><br><span class="line">// 注释</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">        return &#123;</span><br><span class="line">            isHovered: true,</span><br><span class="line">            realData: &#123;</span><br><span class="line">                cityList: [1],</span><br><span class="line">                volumnList: [1],</span><br><span class="line">                pieList: [&#123; name: &#x27;data1&#x27;, value: 10 &#125;],</span><br><span class="line">                mapData: [&#123; name: &#x27;data2&#x27;, value: 10 &#125;],</span><br><span class="line">                LineRowData: [],</span><br><span class="line">                LineColData: [1],</span><br><span class="line">            &#125;,</span><br><span class="line">            config: &#123;</span><br><span class="line">                data: [0][0],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 方法</span><br><span class="line">        drawLeftTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.cityList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                dataZoom: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &#x27;slider&#x27;,</span><br><span class="line">                        start: 0,</span><br><span class="line">                        end: 85,</span><br><span class="line">                        show: false,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各地区销售数据&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        // dataView: &#123; show: true, realData: true &#125;,</span><br><span class="line">                        magicType: &#123; show: true, type: [&#x27;line&#x27;, &#x27;bar&#x27;] &#125;,</span><br><span class="line">                        restore: &#123; show: true &#125;,</span><br><span class="line">                        SaveAsImage: &#123; show: true &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    right: &#x27;right&#x27;,</span><br><span class="line">                    data: [&#x27;销售数据&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;grey&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    left: &#x27;70%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                    formatter: &#x27;&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    data: this.realData.volumnList,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销售数据&#x27;,</span><br><span class="line">                        data: this.realData.volumnList,</span><br><span class="line">                        type: &#x27;bar&#x27;,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            position: &#x27;top&#x27;,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawLeftBottom() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.secondMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;各类型产品占比&#x27;,</span><br><span class="line">                    subtext: &#x27;&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    orient: &#x27;vertical&#x27;,</span><br><span class="line">                    left: &#x27;left&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;数量&#x27;,</span><br><span class="line">                        type: &#x27;pie&#x27;,</span><br><span class="line">                        radius: &#x27;50%&#x27;,</span><br><span class="line">                        data: this.realData.pieList,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            itemStyle: &#123;</span><br><span class="line">                                shadowBlur: 10,</span><br><span class="line">                                shadowOffsetX: 0,</span><br><span class="line">                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                label: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        async drawCenterMap() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.thirdMain)</span><br><span class="line">            const res = await getMap</span><br><span class="line">            this.$echarts.registerMap(&#x27;china&#x27;, res.data)</span><br><span class="line">            let data = this.realData.mapData</span><br><span class="line">            let geoCoordMap = &#123;</span><br><span class="line">                海门: [121.15, 31.89],</span><br><span class="line">                鄂尔多斯: [109.781327, 39.608266],</span><br><span class="line">                招远: [120.38, 37.35],</span><br><span class="line">                舟山: [122.207216, 29.985295],</span><br><span class="line">                齐齐哈尔: [123.97, 47.33],</span><br><span class="line">                盐城: [120.13, 33.38],</span><br><span class="line">                赤峰: [118.87, 42.28],</span><br><span class="line">                青岛: [120.33, 36.07],</span><br><span class="line">                乳山: [121.52, 36.89],</span><br><span class="line">                金昌: [102.188043, 38.520089],</span><br><span class="line">                泉州: [118.58, 24.93],</span><br><span class="line">                莱西: [120.53, 36.86],</span><br><span class="line">                日照: [119.46, 35.42],</span><br><span class="line">                胶南: [119.97, 35.88],</span><br><span class="line">                南通: [121.05, 32.08],</span><br><span class="line">                拉萨: [91.11, 29.97],</span><br><span class="line">                云浮: [112.02, 22.93],</span><br><span class="line">                梅州: [116.1, 24.55],</span><br><span class="line">                文登: [122.05, 37.2],</span><br><span class="line">                上海: [121.48, 31.22],</span><br><span class="line">                攀枝花: [101.718637, 26.582347],</span><br><span class="line">                威海: [122.1, 37.5],</span><br><span class="line">                承德: [117.93, 40.97],</span><br><span class="line">                厦门: [118.1, 24.46],</span><br><span class="line">                汕尾: [115.375279, 22.786211],</span><br><span class="line">                潮州: [116.63, 23.68],</span><br><span class="line">                丹东: [124.37, 40.13],</span><br><span class="line">                太仓: [121.1, 31.45],</span><br><span class="line">                曲靖: [103.79, 25.51],</span><br><span class="line">                烟台: [121.39, 37.52],</span><br><span class="line">                福州: [119.3, 26.08],</span><br><span class="line">                瓦房店: [121.979603, 39.627114],</span><br><span class="line">                即墨: [120.45, 36.38],</span><br><span class="line">                抚顺: [123.97, 41.97],</span><br><span class="line">                玉溪: [102.52, 24.35],</span><br><span class="line">                张家口: [114.87, 40.82],</span><br><span class="line">                阳泉: [113.57, 37.85],</span><br><span class="line">                莱州: [119.942327, 37.177017],</span><br><span class="line">                湖州: [120.1, 30.86],</span><br><span class="line">                汕头: [116.69, 23.39],</span><br><span class="line">                昆山: [120.95, 31.39],</span><br><span class="line">                宁波: [121.56, 29.86],</span><br><span class="line">                湛江: [110.359377, 21.270708],</span><br><span class="line">                揭阳: [116.35, 23.55],</span><br><span class="line">                荣成: [122.41, 37.16],</span><br><span class="line">                连云港: [119.16, 34.59],</span><br><span class="line">                葫芦岛: [120.836932, 40.711052],</span><br><span class="line">                常熟: [120.74, 31.64],</span><br><span class="line">                东莞: [113.75, 23.04],</span><br><span class="line">                河源: [114.68, 23.73],</span><br><span class="line">                淮安: [119.15, 33.5],</span><br><span class="line">                泰州: [119.9, 32.49],</span><br><span class="line">                南宁: [108.33, 22.84],</span><br><span class="line">                营口: [122.18, 40.65],</span><br><span class="line">                惠州: [114.4, 23.09],</span><br><span class="line">                江阴: [120.26, 31.91],</span><br><span class="line">                蓬莱: [120.75, 37.8],</span><br><span class="line">                韶关: [113.62, 24.84],</span><br><span class="line">                嘉峪关: [98.289152, 39.77313],</span><br><span class="line">                广州: [113.23, 23.16],</span><br><span class="line">                延安: [109.47, 36.6],</span><br><span class="line">                太原: [112.53, 37.87],</span><br><span class="line">                清远: [113.01, 23.7],</span><br><span class="line">                中山: [113.38, 22.52],</span><br><span class="line">                昆明: [102.73, 25.04],</span><br><span class="line">                寿光: [118.73, 36.86],</span><br><span class="line">                盘锦: [122.070714, 41.119997],</span><br><span class="line">                长治: [113.08, 36.18],</span><br><span class="line">                深圳: [114.07, 22.62],</span><br><span class="line">                珠海: [113.52, 22.3],</span><br><span class="line">                宿迁: [118.3, 33.96],</span><br><span class="line">                咸阳: [108.72, 34.36],</span><br><span class="line">                铜川: [109.11, 35.09],</span><br><span class="line">                平度: [119.97, 36.77],</span><br><span class="line">                佛山: [113.11, 23.05],</span><br><span class="line">                海口: [110.35, 20.02],</span><br><span class="line">                江门: [113.06, 22.61],</span><br><span class="line">                章丘: [117.53, 36.72],</span><br><span class="line">                肇庆: [112.44, 23.05],</span><br><span class="line">                大连: [121.62, 38.92],</span><br><span class="line">                临汾: [111.5, 36.08],</span><br><span class="line">                吴江: [120.63, 31.16],</span><br><span class="line">                石嘴山: [106.39, 39.04],</span><br><span class="line">                沈阳: [123.38, 41.8],</span><br><span class="line">                苏州: [120.62, 31.32],</span><br><span class="line">                茂名: [110.88, 21.68],</span><br><span class="line">                嘉兴: [120.76, 30.77],</span><br><span class="line">                长春: [125.35, 43.88],</span><br><span class="line">                胶州: [120.03336, 36.264622],</span><br><span class="line">                银川: [106.27, 38.47],</span><br><span class="line">                张家港: [120.555821, 31.875428],</span><br><span class="line">                三门峡: [111.19, 34.76],</span><br><span class="line">                锦州: [121.15, 41.13],</span><br><span class="line">                南昌: [115.89, 28.68],</span><br><span class="line">                柳州: [109.4, 24.33],</span><br><span class="line">                三亚: [109.511909, 18.252847],</span><br><span class="line">                自贡: [104.778442, 29.33903],</span><br><span class="line">                吉林: [126.57, 43.87],</span><br><span class="line">                阳江: [111.95, 21.85],</span><br><span class="line">                泸州: [105.39, 28.91],</span><br><span class="line">                西宁: [101.74, 36.56],</span><br><span class="line">                宜宾: [104.56, 29.77],</span><br><span class="line">                呼和浩特: [111.65, 40.82],</span><br><span class="line">                成都: [104.06, 30.67],</span><br><span class="line">                大同: [113.3, 40.12],</span><br><span class="line">                镇江: [119.44, 32.2],</span><br><span class="line">                桂林: [110.28, 25.29],</span><br><span class="line">                张家界: [110.479191, 29.117096],</span><br><span class="line">                宜兴: [119.82, 31.36],</span><br><span class="line">                北海: [109.12, 21.49],</span><br><span class="line">                西安: [108.95, 34.27],</span><br><span class="line">                金坛: [119.56, 31.74],</span><br><span class="line">                东营: [118.49, 37.46],</span><br><span class="line">                牡丹江: [129.58, 44.6],</span><br><span class="line">                遵义: [106.9, 27.7],</span><br><span class="line">                绍兴: [120.58, 30.01],</span><br><span class="line">                扬州: [119.42, 32.39],</span><br><span class="line">                常州: [119.95, 31.79],</span><br><span class="line">                潍坊: [119.1, 36.62],</span><br><span class="line">                重庆: [106.54, 29.59],</span><br><span class="line">                台州: [121.420757, 28.656386],</span><br><span class="line">                南京: [118.78, 32.04],</span><br><span class="line">                滨州: [118.03, 37.36],</span><br><span class="line">                贵阳: [106.71, 26.57],</span><br><span class="line">                无锡: [120.29, 31.59],</span><br><span class="line">                本溪: [123.73, 41.3],</span><br><span class="line">                克拉玛依: [84.77, 45.59],</span><br><span class="line">                渭南: [109.5, 34.52],</span><br><span class="line">                马鞍山: [118.48, 31.56],</span><br><span class="line">                宝鸡: [107.15, 34.38],</span><br><span class="line">                焦作: [113.21, 35.24],</span><br><span class="line">                句容: [119.16, 31.95],</span><br><span class="line">                北京: [116.46, 39.92],</span><br><span class="line">                徐州: [117.2, 34.26],</span><br><span class="line">                衡水: [115.72, 37.72],</span><br><span class="line">                包头: [110, 40.58],</span><br><span class="line">                绵阳: [104.73, 31.48],</span><br><span class="line">                乌鲁木齐: [87.68, 43.77],</span><br><span class="line">                枣庄: [117.57, 34.86],</span><br><span class="line">                杭州: [120.19, 30.26],</span><br><span class="line">                淄博: [118.05, 36.78],</span><br><span class="line">                鞍山: [122.85, 41.12],</span><br><span class="line">                溧阳: [119.48, 31.43],</span><br><span class="line">                库尔勒: [86.06, 41.68],</span><br><span class="line">                安阳: [114.35, 36.1],</span><br><span class="line">                开封: [114.35, 34.79],</span><br><span class="line">                济南: [117, 36.65],</span><br><span class="line">                德阳: [104.37, 31.13],</span><br><span class="line">                温州: [120.65, 28.01],</span><br><span class="line">                九江: [115.97, 29.71],</span><br><span class="line">                邯郸: [114.47, 36.6],</span><br><span class="line">                临安: [119.72, 30.23],</span><br><span class="line">                兰州: [103.73, 36.03],</span><br><span class="line">                沧州: [116.83, 38.33],</span><br><span class="line">                临沂: [118.35, 35.05],</span><br><span class="line">                南充: [106.110698, 30.837793],</span><br><span class="line">                天津: [117.2, 39.13],</span><br><span class="line">                富阳: [119.95, 30.07],</span><br><span class="line">                泰安: [117.13, 36.18],</span><br><span class="line">                诸暨: [120.23, 29.71],</span><br><span class="line">                郑州: [113.65, 34.76],</span><br><span class="line">                哈尔滨: [126.63, 45.75],</span><br><span class="line">                聊城: [115.97, 36.45],</span><br><span class="line">                芜湖: [118.38, 31.33],</span><br><span class="line">                唐山: [118.02, 39.63],</span><br><span class="line">                平顶山: [113.29, 33.75],</span><br><span class="line">                邢台: [114.48, 37.05],</span><br><span class="line">                德州: [116.29, 37.45],</span><br><span class="line">                济宁: [116.59, 35.38],</span><br><span class="line">                荆州: [112.239741, 30.335165],</span><br><span class="line">                宜昌: [111.3, 30.7],</span><br><span class="line">                义乌: [120.06, 29.32],</span><br><span class="line">                丽水: [119.92, 28.45],</span><br><span class="line">                洛阳: [112.44, 34.7],</span><br><span class="line">                秦皇岛: [119.57, 39.95],</span><br><span class="line">                株洲: [113.16, 27.83],</span><br><span class="line">                石家庄: [114.48, 38.03],</span><br><span class="line">                莱芜: [117.67, 36.19],</span><br><span class="line">                常德: [111.69, 29.05],</span><br><span class="line">                保定: [115.48, 38.85],</span><br><span class="line">                湘潭: [112.91, 27.87],</span><br><span class="line">                金华: [119.64, 29.12],</span><br><span class="line">                岳阳: [113.09, 29.37],</span><br><span class="line">                长沙: [113, 28.21],</span><br><span class="line">                衢州: [118.88, 28.97],</span><br><span class="line">                廊坊: [116.7, 39.53],</span><br><span class="line">                菏泽: [115.480656, 35.23375],</span><br><span class="line">                合肥: [117.27, 31.86],</span><br><span class="line">                武汉: [114.31, 30.52],</span><br><span class="line">                大庆: [125.03, 46.58],</span><br><span class="line">            &#125;</span><br><span class="line">            let convertData = function (data) &#123;</span><br><span class="line">                let res = []</span><br><span class="line">                for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">                    let geoCoord = geoCoordMap[data[i].name]</span><br><span class="line">                    if (geoCoord) &#123;</span><br><span class="line">                        res.push(&#123;</span><br><span class="line">                            name: data[i].name,</span><br><span class="line">                            value: geoCoord.concat(data[i].value),</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return res</span><br><span class="line">            &#125;</span><br><span class="line">            let option = &#123;</span><br><span class="line">                scale: 0.1,</span><br><span class="line">                backgroundColor: &#x27;transparent&#x27;,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;全国省市产品数据&#x27;,</span><br><span class="line">                    subtext: &#x27;数据来自淘宝&#x27;,</span><br><span class="line">                    // sublink: &#x27;http://www.pm25.in&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                // 这个属性用于实现光圈效果</span><br><span class="line">                geo: &#123;</span><br><span class="line">                    show: true,</span><br><span class="line">                    map: &#x27;china&#x27;,</span><br><span class="line">                    zoom: 1.25,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        normal: &#123;</span><br><span class="line">                            show: true,</span><br><span class="line">                            textStyle: &#123;</span><br><span class="line">                                // 鼠标移入省份字体颜色变化</span><br><span class="line">                                color: &#x27;white&#x27;,</span><br><span class="line">                                // 鼠标移入省份字体大小变化</span><br><span class="line">                                fontSize: &#x27;10px&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                roam: true,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        areacolor: &#x27;skyblue&#x27;,</span><br><span class="line">                        borderColor: &#x27;#fff&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        areaColor: &#x27;#2B91B7&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;销量&#x27;,</span><br><span class="line">                        type: &#x27;effectScatter&#x27;,</span><br><span class="line">                        coordinateSystem: &#x27;geo&#x27;,</span><br><span class="line">                        data: convertData(data),</span><br><span class="line">                        symbolSize(val) &#123;</span><br><span class="line">                            return val[2] / 10</span><br><span class="line">                        &#125;,</span><br><span class="line">                        showEffectOn: &#x27;render&#x27;,</span><br><span class="line">                        rippleEffect: &#123;</span><br><span class="line">                            brushType: &#x27;stroke&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        hoverAnimation: true,</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            formatter: &#x27;&#123;b&#125;&#x27;,</span><br><span class="line">                            position: &#x27;right&#x27;,</span><br><span class="line">                            show: true,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        itemStyle: &#123;</span><br><span class="line">                            color: &#x27;#ddb926&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            label: &#123;</span><br><span class="line">                                show: true,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        drawRightTop() &#123;</span><br><span class="line">            let myChart = this.$echarts.init(this.$refs.fourthMain)</span><br><span class="line">            let option = &#123;</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: &#x27;category&#x27;,</span><br><span class="line">                    data: this.realData.LineRowData,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        interval: 0, // 强制显示所有标签</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    name: &#x27;元&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: &#x27;value&#x27;,</span><br><span class="line">                    name: &#x27;个&#x27;,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        interval: 0, // 强制显示所有标签</span><br><span class="line">                        textStyle: &#123;</span><br><span class="line">                            color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: &#x27;商品价格占比&#x27;,</span><br><span class="line">                    left: &#x27;center&#x27;,</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: &#x27;item&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    data: [&#x27;占比情况&#x27;],</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        color: &#x27;#C0C0C0&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    top: &#x27;8%&#x27;,</span><br><span class="line">                    right: &#x27;10%&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                series: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;占比情况&#x27;,</span><br><span class="line">                        data: this.realData.LineColData,</span><br><span class="line">                        type: &#x27;line&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">            if (option) &#123;</span><br><span class="line">                myChart.setOption(option)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeData(x) &#123;</span><br><span class="line">            let st = x[0]</span><br><span class="line">            for (let i = 0; i &lt; x.length - 1; i++) &#123;</span><br><span class="line">                x[i] = x[i + 1]</span><br><span class="line">            &#125;</span><br><span class="line">            x[x.length - 1] = st</span><br><span class="line">        &#125;,</span><br><span class="line">        updataBarChart() &#123;</span><br><span class="line">            if (this.isHovered == true) &#123;</span><br><span class="line">                this.changeData(this.realData.cityList)</span><br><span class="line">                this.changeData(this.realData.volumnList)</span><br><span class="line">                let myChart = this.$echarts.init(this.$refs.firstMain)</span><br><span class="line">                myChart.setOption(&#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        data: this.realData.cityList,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            data: this.realData.volumnList,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        startDataupdataInterval() &#123;</span><br><span class="line">            const interval = 2000</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            setInterval(this.updataBarChart, interval)</span><br><span class="line">        &#125;,</span><br><span class="line">        startAction() &#123;</span><br><span class="line">            this.isHovered = false</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelAction() &#123;</span><br><span class="line">            this.isHovered = true</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        // 生命周期</span><br><span class="line">        // 异步请求，使用await</span><br><span class="line">        const res = await this.$http.get(&#x27;myApp/screenData/&#x27;)</span><br><span class="line">        // 接收数据</span><br><span class="line">        this.$set(this.realData, &#x27;cityList&#x27;, res.data.cityList)</span><br><span class="line">        this.$set(this.realData, &#x27;volumnList&#x27;, res.data.volumnList)</span><br><span class="line">        this.$set(this.realData, &#x27;pieList&#x27;, res.data.pieList)</span><br><span class="line">        this.$set(this.realData, &#x27;mapData&#x27;, res.data.mapData)</span><br><span class="line">        this.$set(this.realData, &#x27;LineRowData&#x27;, res.data.LineRowData)</span><br><span class="line">        this.$set(this.realData, &#x27;LineColData&#x27;, res.data.LineColData)</span><br><span class="line">        this.$set(this.config, &#x27;data&#x27;, res.data.circlieList)</span><br><span class="line">        // console.log(res.data.circlieList)</span><br><span class="line">    &#125;,</span><br><span class="line">    async updated() &#123;</span><br><span class="line">        this.drawLeftTop()</span><br><span class="line">        this.drawLeftBottom()</span><br><span class="line">        this.drawCenterMap()</span><br><span class="line">        this.startDataupdataInterval()</span><br><span class="line">        this.drawRightTop()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*设置整体*/</span><br><span class="line">.layout &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: url(&#x27;../assets/imgs/bg03.jpg&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header div span &#123;</span><br><span class="line">    color: steelblue;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 23px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .left div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 380px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .right div &#123;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    height: 80%;</span><br><span class="line">    width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数分项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础</title>
      <link href="/2024/04/28/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/5.Git%E4%B8%8EGithub/Git%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/28/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/5.Git%E4%B8%8EGithub/Git%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频1：<a href="https://www.bilibili.com/video/BV1HM411377j/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">快速学习</a></p><p>视频2：<a href="https://www.bilibili.com/video/BV1MU4y1Y7h5/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p><a href="https://oschina.gitee.io/learn-git-branching">命令练习</a></p><p><strong>注：</strong>此笔记在黑马程序员共享的资料基础上，加上自己的一些理解所写，不存在侵权。</p><h1 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1.学习目标"></a>1.学习目标</h1><ul><li>了解Git基本概念</li><li>能够概述git工作流程</li><li>能够使用Git常用命令</li><li>熟悉Git代码托管服务</li><li>能够使用idea操作git</li></ul><p>学习Git，不依赖于任何的编程知识，且可以保存代码或者资料（相当于一个云盘，但比百度云盘这种更加的方便）</p><p><strong>重点是要掌握使用idea操作Git，企业用的最多，一般不会去使用命令</strong></p><h1 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h1><h2 id="1-开发中的实际场景"><a href="#1-开发中的实际场景" class="headerlink" title="1. 开发中的实际场景"></a>1. 开发中的实际场景</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">场景一：备份 </span><br><span class="line">小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月 来的努力付之东流 </span><br><span class="line"></span><br><span class="line">场景二：代码还原 </span><br><span class="line">这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的 代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？ </span><br><span class="line"></span><br><span class="line">场景三：协同开发 </span><br><span class="line">小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java 文件中的第30行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的 第50行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记 忆中了 </span><br><span class="line"></span><br><span class="line">场景四：</span><br><span class="line">追溯问题代码的编写人和编写时间！ 老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这 次来说吧，有个Bug调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘 流和正经牛都不承认是自己干的！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-版本控制器的方式"><a href="#2-版本控制器的方式" class="headerlink" title="2. 版本控制器的方式"></a>2. 版本控制器的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具 </span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。 举例：SVN和CVS </span><br><span class="line"></span><br><span class="line">b、分布式版本控制工具 </span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的 修改了。举例：Git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>集中式版本控制的缺点：</p><p>需要联网，中央服务器磁盘损坏，项目会彻底崩溃</p><h2 id="3-Git"><a href="#3-Git" class="headerlink" title="3. Git"></a>3. Git</h2><p>Git是一个分布式版本管理系统，他通过共享版本库来共享版本信息，所以相当于每个开发人员的本地都有一个共享版本库的拷贝，所有人员的本地版本库和共享版本库都是同步的，所以不用担心共享版本库宕机的问题，只要拿一个开发人员的本地版本库传到共享版本库就好了，开发人员之间可以直接交换版本信息，但是这种方式不常用，我们一般还是通过共享版本库实现共享，这样所有的人员都可以共享到版本信息，无需联网了，因为版本库就在你自己的电脑上，但是要实现版本共享的时候还是需要联网的，自己开发的时候不需要联网。</p><h2 id="4-Git工作流程"><a href="#4-Git工作流程" class="headerlink" title="4. Git工作流程"></a>4. Git工作流程</h2><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H01_%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/1.Git&Github/1.Git%E5%9F%BA%E7%A1%80/001.png?raw=true" alt="1.png"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h1 id="3-Git安装与配置"><a href="#3-Git安装与配置" class="headerlink" title="3.Git安装与配置"></a>3.Git安装与配置</h1><p>本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举：</p><ul><li>ls&#x2F;ll 查看当前目录 ll是查看当前文件夹下的所有文件，包括隐藏文件</li><li>cat 查看文件内容</li><li>touch 创建文件</li><li>vi vi编辑器（使用vi编辑器是为了方便展示效果，可以记事本、editPlus、notPad++等其它编辑器）</li></ul><h2 id="1-下载与安装"><a href="#1-下载与安装" class="headerlink" title="1. 下载与安装"></a>1. 下载与安装</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>备注：</p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p><strong>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</strong></p><p>Git版本控制要记录哪个人什么时候做了什么事情，Git就是通过邮箱去辨识是哪个人的</p><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h2><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p><p>git config –global user.name “hbk”</p><p>git config –global user.email “<a href="mailto:&#104;&#101;&#x6c;&#x6c;&#x6f;&#64;&#x69;&#116;&#x63;&#97;&#115;&#x74;&#x2e;&#99;&#x6e;">&#104;&#101;&#x6c;&#x6c;&#x6f;&#64;&#x69;&#116;&#x63;&#97;&#115;&#x74;&#x2e;&#99;&#x6e;</a>”</p><p>注：邮箱可以是假邮箱</p></li><li><p>查看配置信息</p><p>git config –global user.name</p><p>git config –global user.email</p></li></ol><h3 id="1-为常用指令配置别名（可选）"><a href="#1-为常用指令配置别名（可选）" class="headerlink" title="1. 为常用指令配置别名（可选）"></a>1. 为常用指令配置别名（可选）</h3><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建 .bashrc 文件</p><p>打开Git Bash,执行 touch ~&#x2F;.bashrc</p></li><li><p>在 .bashrc 文件中输入如下内容：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#用于输出git提交日志 </span><br><span class="line">alias git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span> </span><br><span class="line">#用于输出当前目录所有文件及基本信息 </span><br><span class="line">alias ll=<span class="string">&#x27;ls -al&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>打开Git Bash，执行 source ~&#x2F;.bashrc</li></ol><h3 id="2-解决GitBash乱码问题（可选）"><a href="#2-解决GitBash乱码问题（可选）" class="headerlink" title="2. 解决GitBash乱码问题（可选）"></a>2. 解决GitBash乱码问题（可选）</h3><ol><li>打开GitBash执行下面命令</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol><li>${git_home}&#x2F;etc&#x2F;bash.bashrc 文件最后加入下面两行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span> </span><br><span class="line">export LC_ALL=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><h1 id="4-Git本地仓库"><a href="#4-Git本地仓库" class="headerlink" title="4.Git本地仓库"></a>4.Git本地仓库</h1><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1）在电脑的任意位置创建一个空目录，作为我们的本地Git仓库</span><br><span class="line"></span><br><span class="line">2）进入这个目录中，点击右键打开Git Bash窗口</span><br><span class="line"></span><br><span class="line">3）执行命令</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">4）如果创建成功后，可在文件夹下看到隐藏的.git目录。</span><br></pre></td></tr></table></figure><h2 id="1-基础操作命令（重要）"><a href="#1-基础操作命令（重要）" class="headerlink" title="1. 基础操作命令（重要）"></a>1. 基础操作命令（重要）</h2><p>Git工作目录下对于文件的<strong>修改</strong>(增加、删除、更新)会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git的命令而发生变化。</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H01_%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/1.Git&Github/1.Git%E5%9F%BA%E7%A1%80/002.png?raw=true" alt="2.png"></p><p>工作区，就是平时存放项目代码的地方。</p><ol><li>git add (工作区 –&gt; 暂存区) </li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line"></span><br><span class="line">1.工作区 --&gt; 暂存区（包括.gitignore和以点开头的任何其他内容）</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">2.暂存区 --&gt; 本地仓库</span><br><span class="line">git commit -m &quot;注释内容&quot;</span><br><span class="line"></span><br><span class="line">3.查看修改的状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">4.查看提交日志</span><br><span class="line">git log [option]</span><br><span class="line">options:</span><br><span class="line">        --all 显示所有分支</span><br><span class="line">        --pretty=oneline 将提交信息显示为一行</span><br><span class="line">        --abbrev-commit 使得输出的commitId更简短</span><br><span class="line">        --graph 以图的形式显示</span><br><span class="line">注：配置别名为git-log,然后加上所有参数即可</span><br><span class="line"></span><br><span class="line">5.版本回退</span><br><span class="line">git reset --hard commitID</span><br><span class="line">注：commitID 可以使用 git-log 或 git log 指令查看</span><br><span class="line"></span><br><span class="line">6.查看已经删除的记录</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line">7.添加文件至忽略列表</span><br><span class="line">工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件。</span><br><span class="line">实例：</span><br><span class="line"># no .a files</span><br><span class="line">*.a</span><br><span class="line"># but do track lib.a, even though you&#x27;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># ignore all files in the build/ directory</span><br><span class="line">build/</span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># ignore all .pdf files in the doc/ directory</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>练习:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#####################仓库初始化######################</span><br><span class="line"># 创建目录（git_test01）并在目录下打开gitbash</span><br><span class="line">略</span><br><span class="line"></span><br><span class="line"># 初始化git仓库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">#####################创建文件并提交#####################</span><br><span class="line"># 目录下创建文件 file01.txt</span><br><span class="line">touch ~/file01.txt</span><br><span class="line"></span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 将修改提交到本地仓库，提交记录内容为：commit 001</span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">####################修改文件并提交######################</span><br><span class="line"># 修改file01的内容为：count=1</span><br><span class="line">vim file01</span><br><span class="line"></span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># # 将修改提交到本地仓库，提交记录内容为：update file01</span><br><span class="line">git commit -m &#x27;update file01&#x27;</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br><span class="line">####################将最后一次修改还原##################</span><br><span class="line"># 查看提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br><span class="line"># 找到倒数第2次提交的commitID</span><br><span class="line">略</span><br><span class="line"></span><br><span class="line"># 版本回退</span><br><span class="line">git reset commitID --hard</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-分支"><a href="#2-分支" class="headerlink" title="2.  分支"></a>2.  分支</h2><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.查看本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">2.创建本地分支</span><br><span class="line">git branch 分支名</span><br><span class="line">3.切换分支(checkout)</span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line">4.创建并切换分支（相当于2，3）</span><br><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line">5.合并分支(merge)：先到目标分支上</span><br><span class="line">git merge 分支名称</span><br><span class="line"></span><br><span class="line">6.删除分支：不能删除当前分支，只能删除其他分支</span><br><span class="line">git branch -d b1 删除分支时，需要做各种检查</span><br><span class="line">git branch -D b1 不做任何检查，强制删除</span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，<strong>解决冲突步骤如下：</strong></p><p>其实我们就是直接手动去删除文件中的一个分支，留下一个分支，这样就不会冲突了</p><ul><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ul><h3 id="开发中分支使用原则与流程"><a href="#开发中分支使用原则与流程" class="headerlink" title="开发中分支使用原则与流程"></a>开发中分支使用原则与流程</h3><ul><li><p>master （生产） 分支</p><p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p></li><li><p>develop（开发）分支</p><p>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线。要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</p><p>注：develop和master分支是不可删除的</p></li><li><p>feature&#x2F;xxxx分支（用完可删）</p><p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支，用完后可删除。</p></li><li><p>hotfifix&#x2F;xxxx分支</p><p>从master派生的分支，一般作为线上bug修复使用，修复测试完成后需要合并到master、test、develop分支。</p></li><li><p>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H01_%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/1.Git&Github/1.Git%E5%9F%BA%E7%A1%80/003.png?raw=true" alt="3.png"></p><h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">##########################创建并切换到dev01分支，在dev01分支提交</span><br><span class="line"># [master]创建分支dev01</span><br><span class="line">git branch dev01</span><br><span class="line"></span><br><span class="line"># [master]切换到dev01</span><br><span class="line">git checkout dev01</span><br><span class="line"></span><br><span class="line"># [dev01]创建文件file02.txt</span><br><span class="line">touch ~/file02.txt</span><br><span class="line"></span><br><span class="line"># [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"></span><br><span class="line"># [dev01]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br><span class="line">###########################切换到master分支，将dev01合并到master分支</span><br><span class="line"># [dev01]切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"># [master]合并dev01到master分支</span><br><span class="line">git merge dev01</span><br><span class="line"></span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br><span class="line"># [master]查看文件变化(目录下也出现了file02.txt)</span><br><span class="line">略</span><br><span class="line">##########################删除dev01分支</span><br><span class="line"># [master]删除dev01分支</span><br><span class="line">git branch -d dev01</span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-Git远程仓库（GitHub）"><a href="#5-Git远程仓库（GitHub）" class="headerlink" title="5.Git远程仓库（GitHub）"></a>5.Git远程仓库（GitHub）</h1><h2 id="1-连接远程仓库"><a href="#1-连接远程仓库" class="headerlink" title="1. 连接远程仓库"></a>1. 连接远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1.配置SSH密钥</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">一直回车</span><br><span class="line"></span><br><span class="line">2.cat ~/.ssh/id_tsa.pub</span><br><span class="line">复制到GitHub的SSH公钥中</span><br><span class="line"></span><br><span class="line">3.验证是否配置成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">4.添加远程仓库</span><br><span class="line">git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</span><br><span class="line"></span><br><span class="line">5.查看远程仓库</span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line">6.推送到远程仓库</span><br><span class="line">git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</span><br><span class="line">    如果远程分支名和本地分支名称相同，则可以只写本地分支</span><br><span class="line">    git push origin master</span><br><span class="line">    -f 表示强制覆盖</span><br><span class="line">    --set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</span><br><span class="line">    git push --set-upstream origin master</span><br><span class="line">    如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</span><br><span class="line">    git push 将master分支推送到已关联的远端分支。</span><br><span class="line"></span><br><span class="line">7.本地分支与远程分支的关联关系</span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line">8.从远程仓库克隆</span><br><span class="line">git clone &lt;仓库路径&gt; [本地目录]</span><br><span class="line">本地目录可以省略，会自动生成一个目录</span><br><span class="line"></span><br><span class="line">9.从远程仓库中抓取和拉取</span><br><span class="line"></span><br><span class="line">    抓取：将仓库里的更新都抓取到本地，不会进行合并</span><br><span class="line">        git fetch [remote name] [branch name]</span><br><span class="line">        如果不指定远端名称和分支名，则抓取所有分支。</span><br><span class="line"></span><br><span class="line">    拉取：</span><br><span class="line">        git pull [remote name] [branch name]</span><br><span class="line">        拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</span><br><span class="line">        如果不指定远端名称和分支名，则抓取所有并更新当前分支。</span><br></pre></td></tr></table></figure><h2 id="2-解决合并冲突"><a href="#2-解决合并冲突" class="headerlink" title="2. 解决合并冲突"></a>2. 解决合并冲突</h2><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。 A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要 推送到远程仓库，此时B用户晚于A用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分 支,如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H01_%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/1.Git&Github/1.Git%E5%9F%BA%E7%A1%80/004.png?raw=true" alt="4.png"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。 </p><p>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同，在此不再赘述，需要自己练习。</p><h2 id="3-练习-1"><a href="#3-练习-1" class="headerlink" title="3. 练习"></a>3. 练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#########################1-将本地仓库推送到远程仓库</span><br><span class="line"># 完成4.1、4.2、4.3、4.4的操作</span><br><span class="line">略</span><br><span class="line"># [git_test01]添加远程仓库</span><br><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line"># [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span><br><span class="line">git push --set-upstream origin master</span><br><span class="line">###########################2-将远程仓库克隆到本地</span><br><span class="line"># 将远程仓库克隆到本地git_test02目录下</span><br><span class="line">git clone git@gitee.com/**/**.git git_test02</span><br><span class="line"># [git_test02]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">###########################3-将本地修改推送到远程仓库</span><br><span class="line"># [git_test01]创建文件file03.txt</span><br><span class="line">略</span><br><span class="line"># [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"># [git_test01]将master分支的修改推送到远程仓库</span><br><span class="line">git push origin master</span><br><span class="line">###########################4-将远程仓库的修改更新到本地</span><br><span class="line"># [git_test02]将远程仓库修改再拉取到本地</span><br><span class="line">git pull</span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"># 查看文件变化(目录下也出现了file03.txt)</span><br><span class="line">略</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git&amp;Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程</title>
      <link href="/2024/04/28/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/4.Linux/Shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/04/28/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/4.Linux/Shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=66&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">视频：尚硅谷</a></p><p>计算机必学的工具之一，但是学校不会教，企业又要用。对Shell的学习拖了很久，最近突然对脚本的兴趣非常的高涨，于是决定认真的学习一下。</p><blockquote><p>因为学习的时间比较短且仓促，等以后再次深入学习的时候再次补充。</p></blockquote><h1 id="1-Shell概述"><a href="#1-Shell概述" class="headerlink" title="1.Shell概述"></a>1.Shell概述</h1><p>Shell是一个命令行解释器，它接收应用程序&#x2F;用户命令，然后调用系统内核。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/10.Linux/1.shell/001.png?raw=true" alt="001"></p><ol><li><p><strong>Linux 提供的 Shell 解析器有</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 ~]$ cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure></li><li><p><strong>bash和sh的关系</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 bin]$ ll | grep bash</span><br><span class="line">-rwxr-xr-x. 1 root root 941880 5 月 11 2016 bash</span><br><span class="line">lrwxrwxrwx. 1 root root 4 5 月 27 2017 sh -&gt; bash</span><br></pre></td></tr></table></figure></li><li><p><strong>Centos默认解析器是bash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 bin]$ echo $SHELL</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-Shell脚本入门"><a href="#2-Shell脚本入门" class="headerlink" title="2.Shell脚本入门"></a>2.Shell脚本入门</h1><ol><li><p><strong>脚本格式</strong></p><p>脚本以#!&#x2F;bin&#x2F;bash 开头（指定解析器）</p></li><li><p><strong>第一个 Shell 脚本：helloworld.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需求：创建一个 Shell 脚本，输出 helloworld</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch helloworld.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim helloworld.sh</span><br><span class="line"></span><br><span class="line">在 helloworld.sh 中输入如下内容</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;helloworld&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">脚本的常用执行方式</span><br><span class="line"></span><br><span class="line">1.采用 bash 或 sh+脚本的相对路径或绝对路径（不用赋予脚本+x 权限）</span><br><span class="line">     sh ./helloworld.sh</span><br><span class="line">     sh /home/atguigu/shells/helloworld.sh</span><br><span class="line"></span><br><span class="line">     bash ./helloworld.sh</span><br><span class="line">     bash /home/atguigu/shells/helloworld.sh</span><br><span class="line"> </span><br><span class="line">2.采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</span><br><span class="line"> 首先要赋予 helloworld.sh 脚本的+x 权限</span><br><span class="line"> [atguigu@hadoop101 shells]$ chmod +x helloworld.sh</span><br><span class="line"> </span><br><span class="line"> 执行脚本</span><br><span class="line"> [atguigu@hadoop101 shells]$ ./helloworld.sh#hello.sh 会被当做命令执行，报错</span><br><span class="line"> [atguigu@hadoop101 shells]$ /home/atguigu/shells/helloworld.sh</span><br><span class="line"> </span><br><span class="line">3.在脚本的路径前加上“.”或者 source</span><br><span class="line"> (1)添加以下脚本</span><br><span class="line"> [atguigu@hadoop101 shells]$ cat test.sh</span><br><span class="line">        #!/bin/bash</span><br><span class="line">        A=5</span><br><span class="line">        echo $A</span><br><span class="line">    (2)执行脚本</span><br><span class="line">    [atguigu@hadoop101 shells]$ bash test.sh</span><br><span class="line">        [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">        </span><br><span class="line">        [atguigu@hadoop101 shells]$ sh test.sh</span><br><span class="line">        [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">        </span><br><span class="line">        [atguigu@hadoop101 shells]$ ./test.sh</span><br><span class="line">        [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">        </span><br><span class="line">        [atguigu@hadoop101 shells]$ . test.sh</span><br><span class="line">        [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">        5</span><br><span class="line">        </span><br><span class="line">    (3)bash#直接进入子shell</span><br><span class="line">       exit#退出子shell</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>原因：</p><p>前两种方式都是在当前 shell 中打开一个子 shell 来执行脚本内容，当脚本内容结束，则子 shell 关闭，回到父 shell 中。</p><p>第三种，也就是使用在脚本路径前加“.”或者 source 的方式，可以使脚本内容在当前shell 里执行，而无需打开子 shell！这也是为什么我们每次要修改完&#x2F;etc&#x2F;profile 文件以后，需要 source 一下的原因。</p><p>打开子 shell 与不开子 shell 的区别就在于，环境变量的继承关系，如在子 shell 中设置的当前变量，父 shell 是不可见的。</p></li><li><p><strong>注：</strong>第一种执行方法，本质是 bash 解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p></li></ul></li></ol><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h1><h2 id="3-1-系统预定义变量"><a href="#3-1-系统预定义变量" class="headerlink" title="3.1 系统预定义变量"></a>3.1 系统预定义变量</h2><ol><li><p>常用系统变量</p><blockquote><p>$HOME、$PWD、$SHELL、$USER 等</p></blockquote></li><li><p>实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.查看系统变量的值</span><br><span class="line">[atguigu@hadoop101 shells]$ echo $HOME</span><br><span class="line">/home/atguigu</span><br><span class="line"></span><br><span class="line">2.显示当前 Shell 中所有变量：set</span><br><span class="line">[atguigu@hadoop101 shells]$ set</span><br><span class="line">BASH=/bin/bash</span><br><span class="line">BASH_ALIASES=()</span><br><span class="line">BASH_ARGC=()</span><br><span class="line">BASH_ARGV=()</span><br><span class="line"></span><br><span class="line">3.env#查看所有全局变量</span><br><span class="line">echo $USER#等价printevn USER(不需要$)</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-自定义变量"><a href="#3-2-自定义变量" class="headerlink" title="3.2 自定义变量"></a>3.2 自定义变量</h2><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义变量：变量名=变量值</span><br><span class="line">注意，=号前后不能有空格</span><br><span class="line"></span><br><span class="line">撤销变量：unset 变量名</span><br><span class="line"></span><br><span class="line">声明静态变量(只读变量)：readonly 变量，注意：不能 unset</span><br></pre></td></tr></table></figure></li><li><p>变量定义规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</span><br><span class="line">（2）等号两侧不能有空格</span><br><span class="line">（3）在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算。</span><br><span class="line">（4）变量的值如果有空格，需要使用双引号或单引号括起来。</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">（1）定义变量 A</span><br><span class="line">    [atguigu@hadoop101 shells]$ A=5</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">    5</span><br><span class="line">    </span><br><span class="line">（2）给变量 A 重新赋值</span><br><span class="line">    [atguigu@hadoop101 shells]$ A=8</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">    8</span><br><span class="line">    </span><br><span class="line">（3）撤销变量 A</span><br><span class="line">    [atguigu@hadoop101 shells]$ unset A</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $A</span><br><span class="line">    </span><br><span class="line">（4）声明静态的变量 B=2，不能 unset</span><br><span class="line">    [atguigu@hadoop101 shells]$ readonly B=2</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $B</span><br><span class="line">    2</span><br><span class="line">    [atguigu@hadoop101 shells]$ B=9</span><br><span class="line">    -bash: B: readonly variable </span><br><span class="line"></span><br><span class="line">（5）在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算</span><br><span class="line">    [atguigu@hadoop102 ~]$ C=1+2</span><br><span class="line">    [atguigu@hadoop102 ~]$ echo $C</span><br><span class="line">    1+2</span><br><span class="line">    </span><br><span class="line">（6）变量的值如果有空格，要用双引号或单引号括起来</span><br><span class="line">    [atguigu@hadoop102 ~]$ D=I love banzhang</span><br><span class="line">    -bash: world: command not found</span><br><span class="line">    [atguigu@hadoop102 ~]$ D=&quot;I love banzhang&quot;</span><br><span class="line">    [atguigu@hadoop102 ~]$ echo $D</span><br><span class="line">    I love banzhang</span><br><span class="line">    </span><br><span class="line">（7）可把变量提升为全局环境变量，可供其他 Shell 程序使用</span><br><span class="line">    export 变量名</span><br><span class="line">    [atguigu@hadoop101 shells]$ vim helloworld.sh</span><br><span class="line">    </span><br><span class="line">在 helloworld.sh 文件中增加 echo $B</span><br><span class="line">    #!/bin/bash</span><br><span class="line">    echo &quot;helloworld&quot;</span><br><span class="line">    echo $B</span><br><span class="line">    [atguigu@hadoop101 shells]$ ./helloworld.sh</span><br><span class="line">    Helloworld</span><br><span class="line">发现并没有打印输出变量 B 的值。</span><br><span class="line">    [atguigu@hadoop101 shells]$ export B</span><br><span class="line">    [atguigu@hadoop101 shells]$ ./helloworld.sh</span><br><span class="line">    helloworld</span><br><span class="line">    2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-3-特殊变量"><a href="#3-3-特殊变量" class="headerlink" title="3.3 特殊变量"></a>3.3 特殊变量</h2><h3 id="3-3-1-n"><a href="#3-3-1-n" class="headerlink" title="3.3.1 $n"></a>3.3.1 $n</h3><ol><li><p>基本语法</p><blockquote><p>$n （功能描述：n 为数字，$0 代表该脚本名称，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p></blockquote></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 shells]$ touch parameter.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;==========$n==========&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 parameter.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./parameter.sh cls xz</span><br><span class="line">==========$n==========</span><br><span class="line">./parameter.sh</span><br><span class="line">cls</span><br><span class="line">xz</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-2"><a href="#3-3-2" class="headerlink" title="3.3.2 $#"></a>3.3.2 $#</h3><ol><li><p>基本语法</p><blockquote><p>$# （功能描述：获取所有输入参数个数，常用于循环,判断参数的个数是否正确以及加强脚本的健壮性）.</p></blockquote></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 shells]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;==========$n==========&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo &#x27;==========$#==========&#x27;</span><br><span class="line">echo $#</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 parameter.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./parameter.sh cls xz</span><br><span class="line">==========$n==========</span><br><span class="line">./parameter.sh</span><br><span class="line">cls</span><br><span class="line">xz</span><br><span class="line">==========$#==========</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-3"><a href="#3-3-3" class="headerlink" title="3.3.3 $*,$@"></a>3.3.3 $*,$@</h3><ol><li><p>基本语法</p><blockquote><p>$* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p>$@ （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待，可用for循环遍历）</p></blockquote></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 shells]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;==========$n==========&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo &#x27;==========$#==========&#x27;</span><br><span class="line">echo $#</span><br><span class="line">echo &#x27;==========$*==========&#x27;</span><br><span class="line">echo $*</span><br><span class="line">echo &#x27;==========$@==========&#x27;</span><br><span class="line">echo $@</span><br><span class="line">[atguigu@hadoop101 shells]$ ./parameter.sh a b c d e f g</span><br><span class="line">==========$n==========</span><br><span class="line">./parameter.sh</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">==========$#==========</span><br><span class="line">7</span><br><span class="line">==========$*==========</span><br><span class="line">a b c d e f g</span><br><span class="line">==========$@==========</span><br><span class="line">a b c d e f g</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-4"><a href="#3-3-4" class="headerlink" title="3.3.4 $?"></a>3.3.4 $?</h3><ol><li><p>基本语法</p><blockquote><p>$？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p></blockquote></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">判断 helloworld.sh 脚本是否正确执行</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ ./helloworld.sh</span><br><span class="line">hello world</span><br><span class="line">[atguigu@hadoop101 shells]$ echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h1><ol><li><p>基本语法</p><blockquote><p>“$((运算式))” 或 “$[运算式]”</p></blockquote></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">计算（2+3）* 4 的值</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]# S=$[(2+3)*4]</span><br><span class="line">[atguigu@hadoop101 shells]# echo $S</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]# expr 1 + 2</span><br><span class="line">3</span><br><span class="line">[atguigu@hadoop101 shells]# expr 1 \* 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5.条件判断"></a>5.条件判断</h1><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）test condition</span><br><span class="line">（2）[ condition ]（注意 condition 前后要有空格）</span><br><span class="line">注意：条件非空即为 true，[ atguigu ]返回 true，[ ] 返回 false。</span><br></pre></td></tr></table></figure></li><li><p>常用条件判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">（1）两个整数之间比较</span><br><span class="line">    -eq 等于（equal） -ne 不等于（not equal）</span><br><span class="line">    -lt 小于（less than） -le 小于等于（less equal）</span><br><span class="line">    -gt 大于（greater than）-ge 大于等于（greater equal）</span><br><span class="line">    注：如果是字符串之间的比较 ，用等号“=”判断相等；用“!=”判断不等。</span><br><span class="line"></span><br><span class="line">（2）按照文件权限进行判断</span><br><span class="line">    -r 有读的权限（read）</span><br><span class="line">    -w 有写的权限（write）</span><br><span class="line">    -x 有执行的权限（execute）</span><br><span class="line">    </span><br><span class="line">（3）按照文件类型进行判断</span><br><span class="line">    -e 文件存在（existence）</span><br><span class="line">    -f 文件存在并且是一个常规的文件（file）</span><br><span class="line">    -d 文件存在并且是一个目录（directory）</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1）23 是否大于等于 22</span><br><span class="line">    [atguigu@hadoop101 shells]$ [ 23 -ge 22 ]</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $?</span><br><span class="line">    0</span><br><span class="line">    </span><br><span class="line">（2）helloworld.sh 是否具有写权限</span><br><span class="line">    [atguigu@hadoop101 shells]$ [ -w helloworld.sh ]</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $?</span><br><span class="line">    0</span><br><span class="line">    </span><br><span class="line">（3）/home/atguigu/cls.txt 目录中的文件是否存在</span><br><span class="line">    [atguigu@hadoop101 shells]$ [ -e /home/atguigu/cls.txt ]</span><br><span class="line">    [atguigu@hadoop101 shells]$ echo $?</span><br><span class="line">    1</span><br><span class="line">    </span><br><span class="line">（4）多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</span><br><span class="line">    [atguigu@hadoop101 ~]$ [ atguigu ] &amp;&amp; echo OK || echo notOK</span><br><span class="line">    OK</span><br><span class="line">    [atguigu@hadoop101 shells]$ [ ] &amp;&amp; echo OK || echo notOK</span><br><span class="line">    notOK</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6.流程控制"></a>6.流程控制</h1><h2 id="6-1-if判断"><a href="#6-1-if判断" class="headerlink" title="6.1 if判断"></a>6.1 if判断</h2><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">（1）单分支</span><br><span class="line">    if [ 条件判断式 ];then</span><br><span class="line">    程序</span><br><span class="line">    fi</span><br><span class="line">  或者</span><br><span class="line">    if [ 条件判断式 ]</span><br><span class="line">    then</span><br><span class="line">    程序</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">（2）多分支</span><br><span class="line">    if [ 条件判断式 ]</span><br><span class="line">    then</span><br><span class="line">    程序</span><br><span class="line">    elif [ 条件判断式 ]</span><br><span class="line">    then</span><br><span class="line">    程序</span><br><span class="line">    else</span><br><span class="line">    程序</span><br><span class="line">    fi</span><br><span class="line">注意事项：</span><br><span class="line">1.[ 条件判断式 ]，中括号和条件判断式之间必须有空格</span><br><span class="line">2.if 后要有空格</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字，如果是 1，则输出 banzhang zhen shuai，如果是 2，则输出 cls zhen mei，如果是其它，什么也不输出。</span><br><span class="line">[atguigu@hadoop101 shells]$ touch if.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim if.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ $1 -eq 1 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;banzhang zhen shuai&quot;</span><br><span class="line">elif [ $1 -eq 2 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;cls zhen mei&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 if.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./if.sh 1</span><br><span class="line">banzhang zhen shuai</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-2-case语句"><a href="#6-2-case语句" class="headerlink" title="6.2 case语句"></a>6.2 case语句</h2><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;）</span><br><span class="line">如果变量的值等于值 1，则执行程序 1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;）</span><br><span class="line">如果变量的值等于值 2，则执行程序 2</span><br><span class="line">;;</span><br><span class="line">…省略其他分支…</span><br><span class="line">*）</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">（1）case 行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。</span><br><span class="line">（2）双分号“;;”表示命令序列结束，相当于 java 中的 break。</span><br><span class="line">（3）最后的“*）”表示默认模式，相当于 java 中的 default。</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字，如果是 1，则输出 banzhang，如果是 2，则输出 cls，如果是其它，输出renyao。</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch case.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim case.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">echo &quot;banzhang&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">echo &quot;cls&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;renyao&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 case.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./case.sh 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-for循环"><a href="#6-3-for循环" class="headerlink" title="6.3 for循环"></a>6.3 for循环</h2><ol><li><p>基本语法01</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (( 初始值;循环控制条件;变量变化 ))</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>案例实操01</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">从 1 加到 100</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch for1.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim for1.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">for((i=0;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 for1.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./for1.sh</span><br><span class="line">5050</span><br></pre></td></tr></table></figure></li><li><p>基本语法02</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3…</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>案例实操02</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">（1）打印所有输入参数</span><br><span class="line">[atguigu@hadoop101 shells]$ touch for2.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim for2.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印数字</span></span><br><span class="line">for i in cls mly wls</span><br><span class="line">do</span><br><span class="line">echo &quot;ban zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 for2.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./for2.sh</span><br><span class="line">ban zhang love cls</span><br><span class="line">ban zhang love mly</span><br><span class="line">ban zhang love wls </span><br><span class="line"></span><br><span class="line">（2）比较$*和$@区别</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*和<span class="variable">$@</span>都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以<span class="variable">$1</span> <span class="variable">$2</span> …<span class="variable">$n</span>的形式输出所有参数。</span></span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch for3.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim for3.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=============$*=============&#x27;</span><br><span class="line">for i in $*</span><br><span class="line">do</span><br><span class="line">echo &quot;ban zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line">echo &#x27;=============$@=============&#x27;</span><br><span class="line">for j in $@</span><br><span class="line">do</span><br><span class="line">echo &quot;ban zhang love $j&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 for3.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./for3.sh cls mly wls</span><br><span class="line">=============$*=============</span><br><span class="line">banzhang love cls</span><br><span class="line">banzhang love mly</span><br><span class="line">banzhang love wls</span><br><span class="line">=============$@=============</span><br><span class="line">banzhang love cls</span><br><span class="line">banzhang love mly</span><br><span class="line">banzhang love wls</span><br><span class="line"></span><br><span class="line">当它们被双引号“”包含时，$*会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@会将各个参数分开，以“<span class="variable">$1</span>” “<span class="variable">$2</span>”…“<span class="variable">$n</span>”的形式输出所有参数。</span></span><br><span class="line">[atguigu@hadoop101 shells]$ vim for4.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=============$*=============&#x27;</span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$*中的所有参数看成是一个整体，所以这个 <span class="keyword">for</span> 循环只会循环一次</span></span><br><span class="line">do</span><br><span class="line">echo &quot;ban zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line">echo &#x27;=============$@=============&#x27;</span><br><span class="line">for j in &quot;$@&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$@</span>中的每个参数都看成是独立的，所以“<span class="variable">$@</span>”中有几个参数，就会循环几次</span></span><br><span class="line">do</span><br><span class="line">echo &quot;ban zhang love $j&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 for4.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./for4.sh cls mly wls</span><br><span class="line">=============$*=============</span><br><span class="line">banzhang love cls mly wls</span><br><span class="line">=============$@=============</span><br><span class="line">banzhang love cls</span><br><span class="line">banzhang love mly</span><br><span class="line">banzhang love wls</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-4-while循环"><a href="#6-4-while循环" class="headerlink" title="6.4 while循环"></a>6.4 while循环</h2><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">从 1 加到 100</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch while.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim while.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">    sum=$[$sum+$i]</span><br><span class="line">    i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 while.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./while.sh</span><br><span class="line">5050</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-read读取控制台输入"><a href="#7-read读取控制台输入" class="headerlink" title="7.read读取控制台输入"></a>7.read读取控制台输入</h1><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read (选项) (参数)</span><br><span class="line">    选项：</span><br><span class="line">        -p：指定读取值时的提示符；</span><br><span class="line">        -t：指定读取值时等待的时间（秒）如果-t 不加表示一直等待</span><br><span class="line">    参数</span><br><span class="line">    变量：指定读取值的变量名</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">提示 7 秒内，读取控制台输入的名称</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch read.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim read.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -t 7 -p &quot;Enter your name in 7 seconds :&quot; NN</span><br><span class="line">echo $NN</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ ./read.sh</span><br><span class="line">Enter your name in 7 seconds : atguigu</span><br><span class="line">atguigu</span><br></pre></td></tr></table></figure></li></ol><h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h1><h2 id="8-1-系统函数"><a href="#8-1-系统函数" class="headerlink" title="8.1 系统函数"></a>8.1 系统函数</h2><h3 id="8-1-1-basename"><a href="#8-1-1-basename" class="headerlink" title="8.1.1 basename"></a>8.1.1 basename</h3><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basename [string / pathname] [suffix] （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</span><br><span class="line"></span><br><span class="line">basename 可以理解为取路径里的文件名称</span><br><span class="line">    选项：</span><br><span class="line">    suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">截取该/home/atguigu/banzhang.txt 路径的文件名称。</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ basename /home/atguigu/banzhang.txt</span><br><span class="line">banzhang.txt</span><br><span class="line">[atguigu@hadoop101 shells]$ basename /home/atguigu/banzhang.txt .txt</span><br><span class="line">banzhang</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-1-2-dirname"><a href="#8-1-2-dirname" class="headerlink" title="8.1.2 dirname"></a>8.1.2 dirname</h3><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</span><br><span class="line"></span><br><span class="line">dirname 可以理解为取文件路径的绝对路径名称</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取 banzhang.txt 文件的路径。</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt</span><br><span class="line">/home/atguigu</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-2-自定义函数"><a href="#8-2-自定义函数" class="headerlink" title="8.2 自定义函数"></a>8.2 自定义函数</h2><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经验技巧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）必须在调用函数地方之前，先声明函数，shell 脚本是逐行运行。不会像其它语言一样先编译。</span><br><span class="line">（2）函数返回值，只能通过$?系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return 后跟数值 n(0-255)</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">计算两个输入参数的和。</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ touch fun.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ vim fun.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">    s=0</span><br><span class="line">    s=$[$1+$2]</span><br><span class="line">    echo &quot;$s&quot;</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;Please input the number1: &quot; n1;</span><br><span class="line">read -p &quot;Please input the number2: &quot; n2;</span><br><span class="line">sum $n1 $n2;</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 shells]$ chmod 777 fun.sh</span><br><span class="line">[atguigu@hadoop101 shells]$ ./fun.sh</span><br><span class="line">Please input the number1: 2</span><br><span class="line">Please input the number2: 5</span><br><span class="line">7</span><br></pre></td></tr></table></figure></li></ol><h1 id="9-正则表达式"><a href="#9-正则表达式" class="headerlink" title="9.正则表达式"></a>9.正则表达式</h1><p>正则表达式使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。在 Linux 中，grep，sed，awk 等文本处理工具都支持通过正则表达式进行模式匹配。</p><h2 id="9-1-常规匹配"><a href="#9-1-常规匹配" class="headerlink" title="9.1 常规匹配"></a>9.1 常规匹配</h2><p>一串不包含特殊字符的正则表达式匹配它自己，例如：</p><blockquote><p>[atguigu@hadoop101 shells]$ cat &#x2F;etc&#x2F;passwd | grep atguigu </p></blockquote><p>就会匹配所有包含 atguigu 的行。</p><h2 id="9-2-常用特殊字符"><a href="#9-2-常用特殊字符" class="headerlink" title="9.2 常用特殊字符"></a>9.2 常用特殊字符</h2><ol><li><p>^</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^ 匹配一行的开头，例如：</span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep ^a </span><br><span class="line">会匹配出所有以 a 开头的行</span><br></pre></td></tr></table></figure></li><li><p>$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">匹配一行的结束，例如:</span></span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep t$</span><br><span class="line">会匹配出所有以 t 结尾的行</span><br></pre></td></tr></table></figure></li><li><p>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. 匹配一个任意的字符，例如:</span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep r..t</span><br><span class="line">会匹配包含 rabt,rbbt,rxdt,root 等的所有行</span><br></pre></td></tr></table></figure></li><li><ul><li></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 不单独使用，他和上一个字符连用，表示匹配上一个字符 0 次或多次，例如:</span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep ro*t</span><br><span class="line">会匹配 rt, rot, root, rooot, roooot 等所有行</span><br></pre></td></tr></table></figure></li><li><p>[ ]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ ] 表示匹配某个范围内的一个字符，例如:</span><br><span class="line">[6,8]------匹配 6 或者 8</span><br><span class="line">[0-9]------匹配一个 0-9 的数字</span><br><span class="line">[0-9]*------匹配任意长度的数字字符串</span><br><span class="line">[a-z]------匹配一个 a-z 之间的字符</span><br><span class="line">[a-z]* ------匹配任意长度的字母字符串</span><br><span class="line">[a-c, e-f]-匹配 a-c 或者 e-f 之间的任意字符</span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep r[a,b,c]*t</span><br><span class="line">会匹配 rt,rat, rbt, rabt, rbact,rabccbaaacbt 等等所有行</span><br></pre></td></tr></table></figure></li><li><p>\</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\ 表示转义，并不会单独使用。由于所有特殊字符都有其特定匹配模式，当我们想匹配某一特殊字符本身时（例如，我想找出所有包含 &#x27;$&#x27; 的行），就会碰到困难。此时我们就要将转义字符和特殊字符连用，来表示特殊字符本身，例如:</span><br><span class="line">[atguigu@hadoop101 shells]$ cat /etc/passwd | grep ‘a\$b’ </span><br><span class="line">就会匹配所有包含 a$b 的行。注意需要使用单引号将表达式引起来。</span><br></pre></td></tr></table></figure></li></ol><h1 id="10-文本处理工具"><a href="#10-文本处理工具" class="headerlink" title="10.文本处理工具"></a>10.文本处理工具</h1><h2 id="10-1-cut"><a href="#10-1-cut" class="headerlink" title="10.1 cut"></a>10.1 cut</h2><p>cut 的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><ol><li><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cut [选项参数] filename</span><br><span class="line">说明：默认分隔符是制表符</span><br></pre></td></tr></table></figure></li><li><p>选项参数</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-d</td><td>分隔符，按照指定分隔符分割列，默认是制表符“\t”</td></tr><tr><td>-c</td><td>按字符进行切割 后加 n 表示取第几列 比如 -c 1</td></tr><tr><td>-f</td><td>列号，提取第几列</td></tr></tbody></table></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">（1）数据准备</span><br><span class="line">[atguigu@hadoop101 shells]$ touch cut.txt</span><br><span class="line">[atguigu@hadoop101 shells]$ vim cut.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo wo</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br><span class="line"></span><br><span class="line">（2）切割 cut.txt 第一列</span><br><span class="line">[atguigu@hadoop101 shells]$ cut -d &quot; &quot; -f 1 cut.txt</span><br><span class="line">dong</span><br><span class="line">guan</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le </span><br><span class="line"></span><br><span class="line">（3）切割 cut.txt 第二、三列</span><br><span class="line">[atguigu@hadoop101 shells]$ cut -d &quot; &quot; -f 2,3 cut.txt</span><br><span class="line">shen</span><br><span class="line">zhen</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br><span class="line"></span><br><span class="line">（4）在 cut.txt 文件中切割出 guan</span><br><span class="line">[atguigu@hadoop101 shells]$ cat cut.txt |grep guan | cut -d &quot; &quot; -f 1</span><br><span class="line">guan</span><br><span class="line"></span><br><span class="line">（5）选取系统 PATH 变量值，第 2 个“：”开始后的所有路径：</span><br><span class="line">[atguigu@hadoop101 shells]$ echo $PATH</span><br><span class="line">/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/atguigu/.local/bin:/home/atguigu/bin</span><br><span class="line">[atguigu@hadoop101 shells]$ echo $PATH | cut -d &quot;:&quot; -f 3-</span><br><span class="line">/usr/local/sbin:/usr/sbin:/home/atguigu/.local/bin:/home/atguigu/bin </span><br><span class="line"></span><br><span class="line">（6）切割 ifconfig 后打印的 IP 地址</span><br><span class="line">[atguigu@hadoop101 shells]$ ifconfig ens33 | grep netmask | cut -d &quot; &quot; -f 10</span><br><span class="line">192.168.111.101</span><br></pre></td></tr></table></figure></li></ol><h2 id="10-2-awk"><a href="#10-2-awk" class="headerlink" title="10.2 awk"></a>10.2 awk</h2><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><ol><li><p>基本用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] ‘/pattern1/&#123;action1&#125; /pattern2/&#123;action2&#125;...’ filename</span><br><span class="line">pattern：表示 awk 在数据中查找的内容，就是匹配模式</span><br><span class="line">action：在找到匹配内容时所执行的一系列命令</span><br></pre></td></tr></table></figure></li><li><p>选项参数</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件分隔符</td></tr><tr><td>-V</td><td>赋值一个用户定义变量</td></tr></tbody></table></li><li><p>案例实操</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">（1）数据准备</span><br><span class="line">[atguigu@hadoop101 shells]$ sudo cp /etc/passwd ./</span><br><span class="line">passwd 数据的含义</span><br><span class="line">用户名:密码(加密过后的):用户 id:组 id:注释:用户家目录:shell 解析器</span><br><span class="line">（2）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 7 列。</span><br><span class="line">[atguigu@hadoop101 shells]$ awk -F : &#x27;/^root/&#123;print $7&#125;&#x27; passwd</span><br><span class="line">/bin/bash</span><br><span class="line">（3）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 1 列和第 7 列，</span><br><span class="line">中间以“，”号分割。</span><br><span class="line">[atguigu@hadoop101 shells]$ awk -F : &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd</span><br><span class="line">root,/bin/bash</span><br><span class="line">注意：只有匹配了 pattern 的行才会执行 action。</span><br><span class="line">（4）只显示/etc/passwd 的第一列和第七列，以逗号分割，且在所有行前面添加列名 user，</span><br><span class="line">shell 在最后一行添加&quot;dahaige，/bin/zuishuai&quot;。</span><br><span class="line">[atguigu@hadoop101 shells]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125;</span><br><span class="line">END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class="line">user, shell</span><br><span class="line">root,/bin/bash</span><br><span class="line">bin,/sbin/nologin 。。。</span><br><span class="line">atguigu,/bin/bash</span><br><span class="line">dahaige,/bin/zuishuai</span><br><span class="line">注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span><br><span class="line">[atguigu@hadoop101 shells]$ awk -v i=1 -F : &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>awk的内置变量</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读的记录数（行号）</td></tr><tr><td>NF</td><td>浏览记录的域的个数（切割后，列的个数）</td></tr></tbody></table></li><li><p>案例实操</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">（1）统计 passwd 文件名，每行的行号，每行的列数</span><br><span class="line">[atguigu@hadoop101 shells]$ awk -F : &#x27;&#123;print &quot;filename:&quot; FILENAME &quot;,linenum:&quot;NR &quot;,col:&quot;NF&#125;&#x27; passwd</span><br><span class="line">filename:passwd,linenum:1,col:7</span><br><span class="line">filename:passwd,linenum:2,col:7</span><br><span class="line">filename:passwd,linenum:3,col:7</span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">（2）查询 ifconfig 命令输出结果中的空行所在的行号</span><br><span class="line">[atguigu@hadoop101 shells]$ ifconfig | awk &#x27;/^$/&#123;print NR&#125;&#x27;</span><br><span class="line">9</span><br><span class="line">18</span><br><span class="line">26</span><br><span class="line"></span><br><span class="line">（3）切割 IP</span><br><span class="line">[atguigu@hadoop101 shells]$ ifconfig ens33 | awk &#x27;/netmask/ &#123;print $2&#125;&#x27;</span><br><span class="line">192.168.6.101</span><br></pre></td></tr></table></figure></li></ol><h1 id="11-综合应用案例"><a href="#11-综合应用案例" class="headerlink" title="11.综合应用案例"></a>11.综合应用案例</h1><h2 id="11-1-归档文件"><a href="#11-1-归档文件" class="headerlink" title="11.1 归档文件"></a>11.1 归档文件</h2><p>实际生产应用中，往往需要对重要数据进行归档备份。</p><p>需求：实现一个每天对指定目录归档备份的脚本，输入一个目录名称（末尾不带&#x2F;），将目录下所有文件按天归档保存，并将归档日期附加在归档文件名上，放在&#x2F;root&#x2F;archive 下。</p><p>这里用到了归档命令：tar</p><p>后面可以加上-c 选项表示归档，加上-z 选项表示同时进行压缩，得到的文件后缀名为.tar.gz。</p><p>脚本实现如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先判断输入参数个数是否为 1</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;参数个数错误！应该输入一个参数，作为归档目录名&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从参数中获取目录名称</span></span><br><span class="line">if [ -d $1 ]</span><br><span class="line">then</span><br><span class="line">    echo</span><br><span class="line">else</span><br><span class="line">    echo</span><br><span class="line">    echo &quot;目录不存在！&quot;</span><br><span class="line">    echo</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line">DIR_NAME=$(basename $1)</span><br><span class="line">DIR_PATH=$(cd $(dirname $1); pwd)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前日期</span></span><br><span class="line">DATE=$(date +%y%m%d)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义生成的归档文件名称</span></span><br><span class="line">FILE=archive_$&#123;DIR_NAME&#125;_$DATE.tar.gz</span><br><span class="line">DEST=/root/archive/$FILE</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始归档目录文件</span></span><br><span class="line">echo &quot;开始归档...&quot;</span><br><span class="line">echo</span><br><span class="line">tar -czf $DEST $DIR_PATH/$DIR_NAME</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">    echo</span><br><span class="line">    echo &quot;归档成功！&quot;</span><br><span class="line">    echo &quot;归档文件为：$DEST&quot;</span><br><span class="line">    echo</span><br><span class="line">else</span><br><span class="line">    echo &quot;归档出现问题！&quot;</span><br><span class="line">    echo</span><br><span class="line">fi</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="11-2-发送消息"><a href="#11-2-发送消息" class="headerlink" title="11.2 发送消息"></a>11.2 发送消息</h2><p>我们可以利用 Linux 自带的 mesg 和 write 工具，向其它用户发送消息。</p><p>需求：实现一个向某个用户快速发送消息的脚本，输入用户名作为第一个参数，后面直接跟要发送的消息。脚本需要检测用户是否登录在系统中、是否打开消息功能，以及当前发送消息是否为空。</p><p>脚本实现如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">login_user=$(who | grep -i -m 1 $1 | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -z $login_user ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$1 不在线！&quot;</span><br><span class="line">    echo &quot;脚本退出..&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">is_allowed=$(who -T | grep -i -m 1 $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">if [ $is_allowed != &quot;+&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;$1 没有开启消息功能&quot;</span><br><span class="line">    echo &quot;脚本退出..&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line">if [ -z $2 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;没有消息发出&quot;</span><br><span class="line">    echo &quot;脚本退出..&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line">whole_msg=$(echo $* | cut -d &quot; &quot; -f 2- )</span><br><span class="line">user_terminal=$(who | grep -i -m 1 $1 | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">echo $whole_msg | write $login_user $user_terminal</span><br><span class="line">if [ $? != 0 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;发送失败！&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;发送成功！&quot;</span><br><span class="line">fi</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English Grammar</title>
      <link href="/2024/03/30/6.%E5%85%B6%E4%BB%96%EF%BC%88%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%89/2.English/English%20grammar/"/>
      <url>/2024/03/30/6.%E5%85%B6%E4%BB%96%EF%BC%88%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%89/2.English/English%20grammar/</url>
      
        <content type="html"><![CDATA[<h1 id="Topic-1-前言"><a href="#Topic-1-前言" class="headerlink" title="Topic 1.前言"></a>Topic 1.前言</h1><p>视频：<a href="https://www.bilibili.com/video/BV1XY411J7aG/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">英语兔</a></p><p>习题：<a href="https://www.bilibili.com/video/BV1mx4y1w7q1">语法习题</a></p><p>资源：<a href="https://pan.quark.cn/s/c155a3fd0b63">夸克网盘</a></p><p>说实话，这个前言我已经改过很多次了，因为一提到英语，总有一种“莫名的痛”，有特别多想说的话。</p><p>每次学了语法的时候都有朋友说，语法学了没用，不如多背2个单词。但是真当我磕磕绊绊的学完了语法合集，我觉得非常有用！！！我不仅对英语有了一个非常好的知识体系了解，也明白了学习英语的方向——而不是盲目的背单词，背句子。（ps:虽然这个文档只是讲的一个大概，如果真想学习非常完整的语法，为何不使用语法书呢？）</p><p>语法的内容在后续的学习中，会进行补充。该把以前欠下的债好好还还了。</p><h1 id="Topic-2-语法综述-video-2"><a href="#Topic-2-语法综述-video-2" class="headerlink" title="Topic 2.语法综述(video.2)"></a>Topic 2.语法综述(video.2)</h1><h2 id="1-简单句"><a href="#1-简单句" class="headerlink" title="1.简单句"></a>1.简单句</h2><ul><li><strong>基本句（简单句Simple Sentences）:</strong> 把长句子拆分到不能再拆（能保持句意）的句子。除去感叹句、省略句、整句提问的问句，全都在说:<strong>什么 + 怎么样（主语 + 谓语）</strong>。</li></ul><h2 id="2-谓语动词-Verbs-的分类"><a href="#2-谓语动词-Verbs-的分类" class="headerlink" title="2.谓语动词(Verbs)的分类"></a>2.谓语动词(<strong>Verbs</strong>)的分类</h2><p>这五种基本句型涵盖了英语所有句子。</p><ol><li><p><strong>第一种：不及物动词intransitive verbs：</strong>可以独立完成的动作, 没有动作承受者的动词</p><p><strong>主语+不及物动词</strong></p><blockquote><p>Papa Rabbit sleeps.兔老爹睡觉.</p></blockquote></li><li><p><strong>第二种：单及物动词monotransitive verbs：</strong>有一个动作的承受者</p><p><strong>主语+单及物动词+宾语   (“及物动词”, transitive verbs.)</strong></p><blockquote><p>Papa Rabbit likes you（宾语object）.兔老爹喜欢你。</p></blockquote></li><li><p><strong>第三种：双及物动词ditransitive verbs：</strong>动词的两个承受者分别为<strong>直接宾语(direct object)<strong>和</strong>间接宾语(indirect object)</strong>.</p><p><strong>主语+双及物动词+间接宾语+直接宾语</strong></p><blockquote><p>Papa Rabbit teaches you English.兔老爹教你英语.</p></blockquote></li><li><p><strong>第四种：复杂及物动词, complex-transitive Verbs:<strong>只有一个动作承受者（但需补充），语法上称为</strong>补足语</strong>,或者 <strong>补语complement</strong>. 更明确是<strong>宾语补语 object complement.</strong></p><p><strong>主语+复杂及物动词+宾语+（宾语）补语</strong></p><blockquote><p>Papa Rabbit considers（复杂及物动词） you smart（补语）.兔老爹认为你聪明。</p></blockquote></li><li><p><strong>第五种：（连）系动词（Linking Verbs）</strong>：is为代表的一类词。赋予主语某种性质称为<strong>主语补语（表语）</strong>。</p><p><strong>主语+系动词+（主语）补语&#x2F;表语</strong></p><blockquote><p>Papa Rabbit is tall.兔老爹是高的。</p><p>Papa Rabbit is in the room.兔老爹在房间里。</p><p>Papa Rabbit looks tall.兔老爹看起来高。</p><p>Papa Rabbit smells nice.兔老爹闻上去香</p></blockquote></li></ol><p><strong>注：严格说来谓语和谓语动词是有区别的</strong>，句子主语后面的余下句子部分就是谓语. 谓语动词只是谓语的一部分.</p><h2 id="3-句子成分"><a href="#3-句子成分" class="headerlink" title="3.句子成分"></a>3.句子成分</h2><blockquote><p>句子成分(clause elements)共有8个：</p></blockquote><ol><li><p>**主语(subject)**：一般是人或物, 不管抽象还是具体</p></li><li><p>**谓语(predicate)**：动作发生了什么事</p></li><li><p><strong>宾语（object）</strong>：跟主语一样</p></li><li><p><strong>表语(subject complement)</strong></p></li><li><p>**宾语补语(object complement)**：对动作承受者进行补充</p></li><li><p><strong>定语（Attributive）</strong>：主要用来修饰主语或宾语</p><blockquote><p>The little white（定语） rabbit ate a large（定语） carrot.这只小白兔吃了一根大胡萝卜。</p></blockquote></li><li><p><strong>状语 （Adverbial）</strong>：主要用来修饰谓语动词和形容词</p><blockquote><p>The rabbit ate quickly（状语）.兔子快速地吃。</p></blockquote></li><li><p>**同位语( Appositive)**：把主语或宾语再说一遍</p><blockquote><p>Papa Rabbit,an English teacher（同位语）,eats carrots.兔老爹，一个英语老师，吃胡萝卜。</p></blockquote></li></ol><h2 id="4-复合句-并列句-复杂句"><a href="#4-复合句-并列句-复杂句" class="headerlink" title="4.复合句(并列句)&amp;复杂句"></a>4.复合句(并列句)&amp;复杂句</h2><ol><li><p><strong>复合句&#x2F;并列句</strong>（Compound Sentences）：句子简单叠加，是并列关系</p></li><li><p><strong>复杂句</strong>（Complex Sentences）:</p><p>把一个句子套在另一个句子里（可多层嵌套），是从属关系。分为主句（main clause）和从句（subordinate clause）。从句是修改简单句使其成为另一个句子的成分。</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;001.png?raw&#x3D;true)</p></li></ol><h2 id="5-词类-词性"><a href="#5-词类-词性" class="headerlink" title="5.词类(词性)"></a>5.词类(词性)</h2><ol><li><p>名词（nouns）：表人和物</p><blockquote><p>Papa Rabbit is a rabbit.</p></blockquote></li><li><p>冠词（articles） ：说明人和物</p><blockquote><p>Papa Rabbit is a rabbit.</p></blockquote></li><li><p>代词（pronouns）：代替人和物</p><blockquote><p>I am a rabbit.</p></blockquote></li><li><p>形容词（adjectives）：形容人和物</p><blockquote><p>I am a smart rabbit.</p></blockquote></li><li><p>数词（numerals）：表数量</p><blockquote><p>I ate two carrots.</p></blockquote></li><li><p>副词（adverbs）：修饰动作或形容词等</p><blockquote><p>I ate two carrots quickly.</p></blockquote></li><li><p>介词（prepositions）：表示和其他词关系的词</p><blockquote><p>I ate two carrots with chopsticks.</p></blockquote></li><li><p>叹词（interjections）： 表感叹</p><blockquote><p>Ah, the carrot is tasty!</p></blockquote></li><li><p>连词（conjunctions）：连接词和句</p><blockquote><p>I ate two carrots and a potato, because I was hungry.</p></blockquote></li><li><p>动词(Verb)</p></li></ol><h2 id="6-谓语动词的“时体气”"><a href="#6-谓语动词的“时体气”" class="headerlink" title="6.谓语动词的“时体气”"></a>6.谓语动词的“时体气”</h2><blockquote><p>谓语动词能够表示动词的<strong>Tense, Aspect, Mood,</strong> 合称<strong>TAM(时, 体, 气)</strong> </p></blockquote><ol><li><p><strong>表示动作的时间</strong>：如动作在过去或将来发生.</p></li><li><p><strong>表示动作的状态</strong>：如动作已经完成或者正在进行的状态.</p><p>以下为16种<strong>时态(tense)</strong>:</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;002.png?raw&#x3D;true)</p></li><li><p><strong>表示动作的假设, 情感等：</strong> 称为<strong>动词的语气</strong>(是语法的”语气”,不是说话语气)</p><p>如:虚拟语气, 用来表示意愿, 和事实相反的假设等. </p><blockquote><p>If I were a rabbit…(如果我是只兔子…)</p><p>I后的were(而不是was)暗示, 我其实并不是只兔子.</p></blockquote></li></ol><h2 id="7-助动词"><a href="#7-助动词" class="headerlink" title="7.助动词"></a>7.助动词</h2><blockquote><p>**助动词”, auxiliary verbs:**谓语动词无法独自完成表示否定, 可能性, 必须性等意思.需要助动词帮助”完成任务”.</p></blockquote><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;003.png?raw&#x3D;true)</p><ul><li><p>除了做助动词(没有实义, 只帮助谓语动词), 还可做<strong>实义动词</strong>, 甚至其他词性.</p><blockquote><p>can → ”易拉罐”</p><p>might → ”力量”</p><p>must → ”发霉”</p><p>do → ”做某事”</p><p>have → ”拥有”</p><p>be → ”存在”</p></blockquote></li></ul><h2 id="8-非谓语动词"><a href="#8-非谓语动词" class="headerlink" title="8.非谓语动词"></a>8.非谓语动词</h2><blockquote><p>谓语动词：充当谓语。</p><p>非谓语动词：充当主语, 宾语, 宾语补语, 主语补语, 定语, 等.</p></blockquote><ul><li><p><strong>非谓语动词几乎可取代所有从句, 简化句子.</strong></p><p>但非谓语动词不具有表示动作时间, 状态, 语态, 语气的功能.</p></li><li><p>非谓语动词以多种形式出现在句中</p><p><strong>动词不定式, 现在分词, 过去分词, 动名词.</strong></p></li></ul><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h2><p>用动词概括整个英语语法体系:</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;004.png?raw&#x3D;true)</p><h1 id="Topic-3-动词分类-video-3"><a href="#Topic-3-动词分类-video-3" class="headerlink" title="Topic 3.动词分类(video.3)"></a>Topic 3.动词分类(video.3)</h1><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;005.png?raw&#x3D;true)</p><ol><li><p>及物动词：及物就是要带个人或物，也就是动作有承受对象（宾语）。</p></li><li><p>实义动词（行为动词）：及物动词和不及物动词的合称，都有<strong>实际意义</strong>。</p></li><li><p>按状态动作划分实义动词：分为“动作动词”和“状态动词”（如have,feel,own,believe）。</p></li><li><p>系动词：可视作状态动词。</p></li><li><p>实义动词和系动词：可做句子的<strong>谓语动词</strong>。</p></li></ol><blockquote><p>助动词和情态动词是不能独立做谓语动词。所以情态动词往往被视为助动词的一种。</p></blockquote><h1 id="Topic-4-动词的时态-video-4"><a href="#Topic-4-动词的时态-video-4" class="headerlink" title="Topic 4.动词的时态(video.4)"></a>Topic 4.动词的时态(video.4)</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><blockquote><p>动词时态（Verb Tenses）, <strong>难点(动词不规则变位)：</strong></p><ol><li>动词变位（时态、人称变位）：对动词本身的拼写做出改变。</li><li>助动词变位。</li></ol></blockquote><ol><li><p>时态: 动词的时间和状态：</p><p>动词有<strong>四种时间</strong>（现在、过去、将来、过去将来），有<strong>四种状态</strong>（一般、完成、进行、完成进行），自由排列组合便是理论上的16种时态。</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;006.png?raw&#x3D;true)</p></li><li><p>一些解释：</p><ul><li><p>动词的时间</p><ol><li><p>过去将来：对于过去某个时间点而言的将来，如昨天是前天这个过去的将来。</p></li><li><p><strong>过去将来和现在的关系</strong>：不能直接确定。</p><blockquote><p>如昨天的后天是明天，是现在的将来。只是暂且默认为过去的将来是现在的过去。</p></blockquote></li><li><p><strong>注</strong>：<em>过去将来不常见，一般只出现在从句中</em></p></li></ol></li><li><p>动词的状态</p><ol><li><p>完成态：完成态的重点在于动作完成了，并没有指出动作具体发生的时间.</p></li><li><p>完成进行态：表示动作的一部分完成了，但剩下的还在进行中。</p><blockquote><p>如：兔子从早上开始吃胡萝卜，现在还没停。</p></blockquote></li><li><p>一般态: 没有特别指出的、默认的、简单的、一般的状态。</p></li></ol></li><li><p>过去将来时的时态</p><ol><li>过去将来进行时（过去说要做某事，在说这句话的将来，看到在做该事的过程中 Past FutureProgressive Tense）</li><li>过去将来完成时（过去说要在将来做某事，看到时，事情已经完成 Past Future Perfect Tense）</li><li>过去将来完成进行时（过去时说要做某事，看到时，做了一部分并将会持续做下去Past Future Perfectt Progressive Tense）</li><li>一般过去将来时态（无明显说明 Simple Past Future Tense）。</li></ol></li></ul></li></ol><h2 id="2-现在时间"><a href="#2-现在时间" class="headerlink" title="2.现在时间"></a>2.现在时间</h2><h3 id="1-一般现在时态"><a href="#1-一般现在时态" class="headerlink" title="1.一般现在时态"></a>1.一般现在时态</h3><blockquote><p><strong>构成：</strong></p><p>+动词原形，+动词原形+s（第三人称单数）</p><p>do&#x2F;does</p></blockquote><p>一般现在时最常见的几种情况：</p><ol><li><p>表达客观真理，名言警句等不受时间限制的客观存在（now一般和进行时态在一起用）</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;007.png?raw&#x3D;true)</p></li><li><p>表达习惯&#x2F;重复的动作：(always, usually, seldom 很少, sometimes, often, frequently 经常, every day, every week on Sunday)</p><blockquote><p>I play basketball.我打篮球（我有这个习惯）</p><p>He seldom watches television these day.</p></blockquote></li><li><p>表示安排，预计发生的事</p><blockquote><p>The bus leaves at 8PM tonight.公交车将要8点离站。</p></blockquote></li><li><p>表将来时间（详细见状语从句）</p><blockquote><p>I will tell him the news when he comes back.</p></blockquote></li></ol><h3 id="2-现在进行时态"><a href="#2-现在进行时态" class="headerlink" title="2.现在进行时态"></a>2.现在进行时态</h3><blockquote><p>正在做某事</p><p><strong>构成：</strong>助动词be的变位(am&#x2F;is&#x2F;are)+动词的现在分词</p><p>am&#x2F;is&#x2F;are + doing</p></blockquote><ul><li><p><strong>be的两个主要身份：</strong></p><ol><li><p>（连）系动词</p><blockquote><p>I’m a smart rabbit → I&#x3D;a smart rabbit.将其后的意思赋予前面的词</p></blockquote></li><li><p>助动词: 构成时态、以及被动态</p><blockquote><p>I am</p><p>You&#x2F;We&#x2F;They are        </p><p>She&#x2F;He&#x2F;It is</p></blockquote></li></ol></li><li><p><strong>动词的现在分词：</strong></p><ol><li><p>通常在词尾加ing</p><blockquote><p>如: looking、smelling</p></blockquote></li><li><p>有些在此基础上改变拼写，如：</p><blockquote><p>write→writing    hit→hitting    die→dying</p></blockquote></li></ol></li><li><p><strong>现在进行时最常见的情况：</strong></p><ol><li><p>现在正在进行或发生的动作</p></li><li><p>当前一段时间内的活动或现阶段正在进行的动作</p><blockquote><p>How are you getting along with your English these days?</p></blockquote></li><li><p>表说话人现在对主语的行为进行赞许或厌恶</p><blockquote><p>He is always thinking of others.(夸赞)</p></blockquote></li><li><p>表最近计划或安排要进行的动作。常限于（go,come,leave,start,arrive,return,work,sleep,stay,do,have,wear等）表移动，方向的动词</p><blockquote><p>He is comeing to see you next month. 他计划下个月来看望你</p></blockquote></li></ol></li></ul><h3 id="3-现在完成时态"><a href="#3-现在完成时态" class="headerlink" title="3.现在完成时态"></a>3.现在完成时态</h3><blockquote><p>事情已经完成</p><p>**构成:**助动词have的变位（have&#x2F;has）+动词过去分词</p><p>have&#x2F;has + done</p></blockquote><ul><li><p><strong>have的两个主要身份：</strong></p><ol><li><p>表实义动词“有” </p><blockquote><p>I have some coins for this video</p></blockquote></li><li><p>助动词，构成时态</p><blockquote><p>I&#x2F;you&#x2F;we&#x2F;they have</p><p>She&#x2F;he&#x2F;it has</p></blockquote></li></ol></li><li><p><strong>动词的过去分词:</strong></p><ol><li><p>通常在词尾+ed</p><blockquote><p>如looked,smelled,tasted</p></blockquote></li><li><p>“不规则变化”动词:</p><blockquote><p>eat→eaten</p></blockquote></li><li><p><strong>过去分词 !&#x3D; 过去式</strong></p></li></ol></li><li><p><strong>现在完成时最常见的几种情况：</strong></p><ol><li><p>表过去发生或已经完成某一动作对现在造成的影响或结果</p></li><li><p>表过去已经开始，持续到现在的动作或状态(now,just,today,this morning,this month,this year,since,all the time)</p><blockquote><p>I have’t seen her these days.</p></blockquote></li></ol></li></ul><h3 id="4-现在完成进行时态"><a href="#4-现在完成进行时态" class="headerlink" title="4.现在完成进行时态"></a>4.现在完成进行时态</h3><blockquote><p>表示一个由过去某时起一直持续的动作，这个动作可能刚刚停止，也可能还在进行</p><p><strong>构成：</strong>have的变位(have&#x2F;has)+been+动词的现在分词</p><p>have&#x2F;has + been + doing</p></blockquote><blockquote><p>I have been eating carrots.(我不但吃了胡萝卜，还会再吃一些）</p><p>I have been thinking of you.</p><p>How long have you been reading the book? 这本书你已经看了多久？</p></blockquote><h2 id="3-过去时间"><a href="#3-过去时间" class="headerlink" title="3.过去时间"></a>3.过去时间</h2><h3 id="1-一般过去时态"><a href="#1-一般过去时态" class="headerlink" title="1.一般过去时态"></a>1.一般过去时态</h3><blockquote><p><strong>构成：</strong>通常+ed(过去式)</p><table><thead><tr><th>动词原形</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>do</td><td>did</td><td>done</td></tr><tr><td>go</td><td>went</td><td>gone</td></tr><tr><td>take</td><td>took</td><td>taken</td></tr></tbody></table></blockquote><p><strong>一般过去时最常见的情况：</strong></p><ol><li><p>一般过去时态：单纯的有个动作发生了（何时开始何时结束不得而知，只知道过去某个时间点在做某事）</p><blockquote><p>You watched my video.你看了我的视频（可能的言下之意：这是事实，不要抵赖）</p><p>I thought of you.（可能的言下之意：这是事实，不骗你）</p></blockquote></li><li><p>表曾经习惯性：used to + do</p><blockquote><p>I used to play basketball.我曾经打篮球</p></blockquote></li></ol><h3 id="2-过去进行时态"><a href="#2-过去进行时态" class="headerlink" title="2.过去进行时态"></a>2.过去进行时态</h3><blockquote><p>强调过去某个时间段某事正在进行中</p><p><strong>构成：</strong></p><p>助动词be的变位（be的过去式was&#x2F;were）+动词的现在分词：I&#x2F;she&#x2F;he&#x2F;it was，You&#x2F;we&#x2F;they were</p><p>was&#x2F;were + doing</p></blockquote><blockquote><p>The rabbit is eating a carrot. →The rabbit was eating a carrot.兔子在过去时间点处于正在吃胡萝卜的过程中。</p><p>I am thinking of you. → I was thinking of you.</p></blockquote><p><strong>注：</strong>用法于现在进行时相似（现在 -&gt; 过去）</p><h3 id="3-过去完成时态"><a href="#3-过去完成时态" class="headerlink" title="3.过去完成时态"></a>3.过去完成时态</h3><blockquote><p><strong>构成：</strong></p><p>助动词have的变位(had)+动词的过去分词</p><p>had done</p></blockquote><p>过去完成时表达过去某一点A的过去B对过去那某一点A的影响。</p><blockquote><p>如：</p><p>I had eaten 5 carrots for lunch yesterday(B),so I wasn’t hungry at all yesterday afternoon(A).</p><p>He tried to find me yesterday afternoon(A),but I had already gone to Shanghai(B).</p></blockquote><h3 id="4-过去完成进行时态"><a href="#4-过去完成进行时态" class="headerlink" title="4.过去完成进行时态"></a>4.过去完成进行时态</h3><blockquote><p>描述对于过去某个点，不但已经完成了一部分，而且还要继续进行的动作。</p><p><strong>构成：</strong></p><p>助动词have的变位(had)+been+动词的现在分词</p><p>had been doing</p></blockquote><blockquote><p>The rabbit has been eating a carrot. →  The rabbit had been eating a carrot. (这兔子在过去某个时间点已经吃胡萝卜一段时间了,还要在过去那个时间点之后继续吃一段时间)</p><p>You have been watching my video. →  You had been watching my video. (你在过去某个时间点之前已经看了我视频一段时间了, 还要在那个时间点之后继续看- -段时间,)</p><p>I have been thinking of you. →  I had been thinking of you. (我在过去某个时间点之前已经想你一段时间了,还要在那个时间点后继续想-段时间,)</p></blockquote><h3 id="5-现在完成时-VS-一般过去时-VS-过去进行时"><a href="#5-现在完成时-VS-一般过去时-VS-过去进行时" class="headerlink" title="5.现在完成时 VS 一般过去时 VS 过去进行时"></a>5.现在完成时 VS 一般过去时 VS 过去进行时</h3><ul><li><p>现在完成时态：现在这个时间点，某个动作是否已经完成了（指某个过去的动作对现在的影响）</p></li><li><p>一般过去时态：重点描述某个动作在过去有没有发生，所以往往考虑的是过去的事实。</p><blockquote><p>I have seen a carrot.（我看见过胡萝卜，了解它的特性）</p><p>I saw a carrot.（我看见过一根胡萝卜，这是个事实，我没有说谎）</p><p>I have gone to ShangHai.（我已经去了上海，所以对现在有影响，人不在这里了，你找不到我了。不能面对面说）</p><p>I went to ShangHai.（重点不在对现在的影响，我已经回来了，只是单纯指出，我曾经去了上海，有这个事）</p></blockquote></li><li><p>一般过去时态和过去进行时态都是在过去时间里，但是前者重点是某个动作做了没有，后者是某个动作在某个时间是在进行过程中的。</p></li></ul><h2 id="4-将来时间"><a href="#4-将来时间" class="headerlink" title="4.将来时间"></a>4.将来时间</h2><p>英语中表达将来必须要<strong>借助助动词</strong>（will,shall）帮忙，放在谓语动词之前。</p><h3 id="1-一般将来时态"><a href="#1-一般将来时态" class="headerlink" title="1.一般将来时态"></a>1.一般将来时态</h3><blockquote><p>用于非常确定某事将要发生</p><p><strong>构成：</strong></p><p>will+动词原形</p><p>will do</p></blockquote><p>若不确定某事将来会发生，则不能用一般将来时态。（要借助动词的“语气”）</p><blockquote><p>例句：</p><p>I&#x2F;you&#x2F;she&#x2F;he&#x2F;it&#x2F;they will eat a carrot.(描述将来某个时间点发生的动作（说话者十分确定会发生的事）)</p><p>The sun will rise again tomorrow.太阳明天也照常升起。</p><p>We shall know more and more as time goes on.</p></blockquote><p><strong>一般将来时最常见的几种情况：</strong></p><ol><li><p>will&#x2F;shall + do(表示客观规律，对未来的预见)</p><blockquote><p>It will be fine tomorrow.明天天气会很好</p></blockquote></li><li><p>be going to do(将来打算做的事，或很快将要发生的事情)</p><blockquote><p>I am going to see my Granny with my parents this weekend.这个周末我打算和父母一起去看奶奶</p></blockquote></li><li><p>be to do(将来发生的动作，强调计划，安排，要求，决心，命令等)</p><blockquote><p>A new library is to be built nearby.</p></blockquote></li><li><p>be about to do (表示马上就要发生的动作，不能与表示将来的时间状语连用)</p><blockquote><p>Look！The taxi is here.We are about to leave.</p></blockquote></li><li><p>be doing</p></li><li><p>be due to do(按时间表，旅行安排)预定，预期，预计做…</p><blockquote><p>The train is due to arrive.列车要到了</p></blockquote></li></ol><h3 id="2-将来进行时态"><a href="#2-将来进行时态" class="headerlink" title="2.将来进行时态"></a>2.将来进行时态</h3><blockquote><p>描述在将来某个时间，某个动作是在进行的过程中</p><p><strong>构成：</strong></p><p>will+be+动词的现在分词</p><p>will be doing</p></blockquote><blockquote><p>I will be eating a carrot for lunch tomorrow from 1PM to 3PM.(将来进行时也要是很确定的事。)</p></blockquote><h3 id="3-将来完成时态"><a href="#3-将来完成时态" class="headerlink" title="3.将来完成时态"></a>3.将来完成时态</h3><blockquote><p>将来某一点A的过去B（B和现在的前后不可确定）对A的影响。</p><p><strong>构成：</strong></p><p>will+have+动词的过去分词</p><p>will have done</p></blockquote><ul><li><p>shall在此相当于will.<strong>想表达特别确定某事</strong></p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;008.png?raw&#x3D;true)</p></li><li><p>常与 “by + 时间名词” 的时间状语连用</p><blockquote><p>I shall have finished it by next Sunday.</p></blockquote></li></ul><h3 id="4-将来完成进行时态"><a href="#4-将来完成进行时态" class="headerlink" title="4.将来完成进行时态"></a>4.将来完成进行时态</h3><blockquote><p><strong>构成：</strong></p><p>will+have+been+动词的现在分词</p><p>will have been doing</p></blockquote><ul><li><p>描述对于将来某个点，不但已经完成了一部分，而且还要进行</p><blockquote><p>You have been watching my video.→You will have been watching my video. (你在将来某个时间点之前已经看了我视频一段时间了 ,还要在那个时间点之后继续看一段时间)</p><p>I have been thinking of you.→I will have been thinking of you. (我在将来某个时间点之前已经想你-段时间了,还要在那个时间点后继续想你一段时间,)</p></blockquote></li></ul><h2 id="5-过去将来时间"><a href="#5-过去将来时间" class="headerlink" title="5.过去将来时间"></a>5.过去将来时间</h2><blockquote><ol><li><p>这里的将来，相对过去某一时间点的将来，和现在没有关系。</p></li><li><p>过去将来时态常出现于从句中，也就是从主句朝后推一个时态。</p></li></ol></blockquote><h3 id="1-一般过去将来时态"><a href="#1-一般过去将来时态" class="headerlink" title="1.一般过去将来时态"></a>1.一般过去将来时态</h3><blockquote><p><strong>构成：</strong></p><p>would+动词原形 </p><p>would do</p><p>或be的变位（I&#x2F;she&#x2F;he&#x2F;it was,You&#x2F;they were）+going+to+动词原形</p><p>was&#x2F;were going to do</p></blockquote><blockquote><p>例句：</p><p>I said I would eat a carrot for lunch.我（之前）说过我会午饭吃根胡萝卜。</p><p>I said I was going to eat a carrot for lunch.</p><p>I knew you would watch my video.我（之前）就知道你会看我的视频。</p><p>I knew you were going to watch my video.</p></blockquote><ul><li><p><strong>would 的多义:</strong></p><ol><li><p>will的过去式变位，构成时态</p></li><li><p>构成动词的虚拟语气，表与事实相反</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;009.png?raw&#x3D;true)</p></li></ol></li></ul><h3 id="2-过去将来进行时态"><a href="#2-过去将来进行时态" class="headerlink" title="2.过去将来进行时态"></a>2.过去将来进行时态</h3><blockquote><p><strong>构成：</strong></p><p>would+be+动词现在分词</p><p>would be doing</p></blockquote><blockquote><p>例句：</p><p>I said I would be eating a carrot at 1PM tomorrow&#x2F;yesterday.我（之前）说我明天&#x2F;昨天下午一点会吃胡萝卜。</p></blockquote><h3 id="3-过去将来完成时态"><a href="#3-过去将来完成时态" class="headerlink" title="3.过去将来完成时态"></a>3.过去将来完成时态</h3><blockquote><p><strong>构成：</strong></p><p>would+have+动词的过去分词</p><p>would have done</p></blockquote><blockquote><p>例句：</p><p>I said I would have eaten a carrot by 1PM tomorrow&#x2F;yesterday.我（之前）说我明天&#x2F;昨天下午1点会已经吃掉了根胡萝卜</p></blockquote><h3 id="4-过去将来完成进行时态"><a href="#4-过去将来完成进行时态" class="headerlink" title="4.过去将来完成进行时态"></a>4.过去将来完成进行时态</h3><blockquote><p><strong>构成：</strong></p><p>would+have+been+动词的现在分词</p><p>would hane been doing</p></blockquote><blockquote><p>例句：</p><p>I said I would have been eating lunch for 2 hours by 1PM tomorrow&#x2F;yesterday.我之前说我明天&#x2F;昨天下午1点前会已经吃了俩钟头中饭。</p></blockquote><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;010.png?raw&#x3D;true)</p><h1 id="Topic-5-动词语气-video-5"><a href="#Topic-5-动词语气-video-5" class="headerlink" title="Topic 5.动词语气 (video.5)"></a>Topic 5.动词语气 (video.5)</h1><blockquote><p>动词语气(Verb Moods)主要分为：陈述语气、祈使语气、<strong>虚拟语气</strong>（也有疑问语气、条件语气、感叹语气）。</p></blockquote><h2 id="1-陈述语气（Indicative-Mood-描述现实）"><a href="#1-陈述语气（Indicative-Mood-描述现实）" class="headerlink" title="1.陈述语气（Indicative Mood 描述现实）"></a>1.陈述语气（Indicative Mood 描述现实）</h2><blockquote><p>The rabbit ate the carrot.</p><p>可修改为疑问句：</p><p>Did the rabbit eat the carrot?</p><p>Was the rabbit hungry?</p></blockquote><h2 id="2-祈使语气（Imperative-Mood-表命令-请求）"><a href="#2-祈使语气（Imperative-Mood-表命令-请求）" class="headerlink" title="2.祈使语气（Imperative Mood 表命令&#x2F;请求）"></a>2.祈使语气（Imperative Mood 表命令&#x2F;请求）</h2><blockquote><p>Rabbit,eat the carrot! 兔子，吃这胡萝卜！</p><p>Please,give me a thumbs-up! 求求你给我点个赞。</p></blockquote><ol><li><p>祈使语气就是把命令语气用第二人称（“你”）的一般现在时表达出来；</p></li><li><p>然后把其中的“你”去掉，并保持动词原形；</p><blockquote><p>You eat the carrot!→Eat the carrot!</p><p>You don’t eat it!→Don’t eat it!</p><p>You are quiet!→Be quiet!</p><p>You never give up!→Never give up!</p><p>You give me coins!→Give me coins!</p></blockquote></li></ol><h2 id="3-虚拟语气（Subjunctive-Mood）"><a href="#3-虚拟语气（Subjunctive-Mood）" class="headerlink" title="3.虚拟语气（Subjunctive Mood）"></a>3.虚拟语气（Subjunctive Mood）</h2><blockquote><ol><li>动词的虚拟语气需要改变拼写，基本只用于从句之中，包括条件从句。</li><li>主要描述脑中的、与现实相反的、主观的意愿和想象。</li><li><strong>若直接描述现实，则用陈述语气、祈使语气。</strong></li></ol></blockquote><ul><li><p><strong>第一大用法：</strong>表“不可能的假设”</p><ol><li><p>表和现在事实相反（虚拟的想象）</p><p><strong>条件句：</strong>过去式</p><p><strong>主句：</strong>would+动词原形</p><blockquote><p>If I saw the rabbit now,I would bite him.</p><p>If I knew it,I would tell you.</p><p>If I were（无论什么人称，都用were） you,I would give this video a thumbs-up.</p></blockquote></li><li><p>表和将来事实相反（真的不可能）&#x2F;或将来发生的可能性很小的动作</p><p><strong>条件句：</strong>Should（shall过去式）+ 动词原形</p><p><strong>主句：</strong>would+动词原形</p><blockquote><p>If I should see the rabbit tomorrow,I would bite him.</p><p>If I should（此处表shall的过去式，无应该的意思） meet thee（(第二人称单数的宾格)你） after long yeas,how should I greet thee? 万一我们将来重逢，我该如何面对你？（言下之意：我们相会遥遥无期）</p></blockquote><p><strong>注：条件中的should可以用were to取代</strong></p><blockquote><p>shall -&gt; should</p><p>will -&gt; would</p><p>can -&gt; could</p><p>may -&gt; might</p></blockquote></li><li><p>表和过去事实相反（假设对过去某一点有影响，所以为完成态。）</p><p><strong>条件句：</strong>had+动词过去分词</p><p><strong>主句：</strong>would have+动词过去分词</p><blockquote><p>If I had seen the rabbit a few days ago,I would had bitten him.</p><p>If I have watch this book before,I would have aced my test.我要是之前就看了这视频，那绝对能考个好成绩。（言下之意：我没有考出好成绩）</p></blockquote></li></ol></li><li><p><strong>第二大用法：</strong>虚拟语气表达愿望，请求，建议，命令等（希望某个动作&#x2F;事件发生，常和表达愿望的词汇在一起使用）</p><p>wish（希望可能性小的事情发生，wish用于虚拟语气）hope（比较中性）</p><ol><li><p>对现在的愿望</p><p><strong>构成：wish+动词过去式</strong></p><blockquote><p>I wish that I were（be均用were表示） a rabbit.（引导从句的that往往可以省略）</p></blockquote></li><li><p>对过去的愿望</p><p><strong>构成：wish + had + 动词过去分词</strong></p><blockquote><p>I wish (that) I had eaten the carrot.我希望我吃了那只胡萝卜。</p></blockquote></li><li><p>对将来的愿望</p><p><strong>构成：wish+should&#x2F;could&#x2F;would&#x2F;might+动词原形</strong></p><blockquote><p>I wish (that) I could eat the carrot.我希望我能吃那只胡萝卜</p></blockquote></li><li><p>其他词</p><ul><li><p>would rather（宁愿）</p><blockquote><p>I would rather that you didn’t eat the carrot.我宁愿你不会吃那根胡萝卜（未吃）</p><p>I would rather that you hadn’t eaten the carrot.我宁愿你没吃掉那根胡萝卜（已吃）</p></blockquote></li><li><p>demand（要求）,suggest（建议）,insist（坚持）,order（命令）……这些词后面接的虚拟语气<strong>一律是should+动词原形（和wish区分开来）</strong></p><blockquote><p>I demand&#x2F;suggest&#x2F;insist&#x2F;order that you should give me a carrot.（should可以省略）我要求&#x2F;建议&#x2F;坚持&#x2F;命令你给我一根胡萝卜。</p><p>I demanded&#x2F;suggested&#x2F;insisted&#x2F;ordered that you should give me a carrot. 我（之前）要求&#x2F;建议&#x2F;坚持&#x2F;命令你给我一根胡萝卜</p></blockquote></li></ul></li></ol></li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ol><li>陈述语气：描述事实</li><li>祈使语气：直接下达命令、请求</li><li>虚拟语气：<ul><li>与事实相反的假设：与现在相反，与过去相反，与未来相反</li><li>表达愿望、请求、建议、命令</li></ul></li></ol><p>虚拟语气可以存在于不同类型的从句中，如主语从句、表语从句、宾语从句</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;011.png?raw&#x3D;true)</p><h1 id="Topic-6-非谓语动词-video-6"><a href="#Topic-6-非谓语动词-video-6" class="headerlink" title="Topic 6.非谓语动词(video.6)"></a>Topic 6.非谓语动词(video.6)</h1><blockquote><ol><li>谓语动词：限定性动词（finite verbs被限定时间人称）</li><li>非谓语动词: 非限定动词（non-finite verbs）：失去了<strong>表达时间</strong>和<strong>人称</strong>的本领。</li><li>区别：谓语动词是句子的核心，非谓语动词只出现在非核心部分中。一个简单句只能有一个谓语动词，所以多个谓语动词只能是并列句或主句+从句。</li><li>只有非谓语动词（即不定式、过去分词、现在分词、动名词其中之一）能充当除谓语外的其他句子成分</li></ol></blockquote><h2 id="1-动词不定式（to-do）"><a href="#1-动词不定式（to-do）" class="headerlink" title="1.动词不定式（to do）"></a>1.动词不定式（to do）</h2><ul><li><p>动词不定式：指不受时间、人称等概念限制</p><ol><li><p>一般形式：to+动词原形（完全不定式，full infinitive）</p><blockquote><p>To be or not to be,that is the question. 生存还是毁灭，这是一个问题</p></blockquote></li><li><p>to有时会省略（裸不定式，bare infinitive）</p><blockquote><p>You helped me (to) cook the carrot.  你帮我烧了胡萝卜</p></blockquote></li></ol></li><li><p>不定式做句子成分</p><ol><li><p>不定式做主语</p><blockquote><p>To eat（只能看出是不定式，看不出来谁是主语，即人称的不定） a carrot every day is good for the rabbit.   一天吃一根胡萝卜对兔子有好处。</p><p>借助it来做<strong>形式主语。</strong></p><p>It is good for the rabbit to eat a carrot every day.（  <strong>It is+形容词+for sb.+to do sth.</strong> ）</p><p>相当于带形式主语的主语从句： </p><p>It is good that the rabbit eats a carrot every day.</p></blockquote></li><li><p>不定式做宾语</p><blockquote><p>The rabbit likes（有些动词后面不能接不定式做宾语） to eat carrots.兔子喜欢吃胡萝卜。</p><p>It可以做形式宾语：</p><p>I consider it important to eat a carrot every day.  我发现每天吃一个胡萝卜很重要。</p></blockquote></li><li><p>不定式做宾语补语</p><ul><li><p>不定式和复杂及物动词一起使用</p><blockquote><p>The rabbit expected the wolf to eat a carrot（补充说明狼的动作或兔子希望狼发出的动作）.</p></blockquote></li><li><p>感官动词（see, watch, notice, hear等）、使役动词（make, let, have等）后用不定式做宾补需要省略to。</p><blockquote><p>Carrots make the rabbit feel happy.</p></blockquote></li><li><p><strong>谓语动词后接不定式做宾补</strong>时，省不省去to区别不大，都是正确的表达。</p><blockquote><p>The wolf helped the rabbit （to） grow carrots.狼帮兔子种萝卜</p></blockquote></li></ul></li><li><p>不定式做主语补语（表语）</p><blockquote><p>The rabbit’s dream is to eat every kind of carrot in the world. 兔子的梦想就是吃掉世界上每一种萝卜。</p></blockquote></li><li><p>不定式作定语</p><blockquote><p>The rabbit has a lot of carrots to eat（后置定语修饰carrots，动宾关系）.  兔子有很多胡萝卜要吃。</p></blockquote></li><li><p>不定式做状语表原因、目的、结果。</p><ul><li><p>表原因：</p><blockquote><p>I was surprised to get a thumbs-up.我很吃惊（因为）得到一个赞。</p><p><em>相当于原因状语从句</em>：</p><p>I was surprised because I got a thumbs-up.我很吃惊，因为有人给我点赞了。</p></blockquote></li><li><p>表目的：</p><blockquote><p>I will do anything to get a thumbs-up.我为了得到一个赞会做任何事</p><p><em>相当于目的状语从句</em>：</p><p>I will do anything in order that I get a thumbs-up.</p></blockquote></li><li><p>表结果：</p><blockquote><p>I got enough thumbs-up to make another video.我得到足够的赞，就可以去做另一个视频了。</p><p><em>相当于结果状语从句</em></p><p>I got enough thumbs-up,so that I made another video.</p></blockquote></li></ul></li><li><p>注:</p><ol><li><p>“too…to…”结构常用来表示“太…以至于不能…”的意思。</p><blockquote><p>She is too young to understand this problem.</p></blockquote></li><li><p>“enough to…”则表示“足够…去做某事”。</p><blockquote><p>He is old enough to drive.</p></blockquote></li></ol></li></ol></li><li><p>高级不定式</p><ol><li><p><strong>to+动词原形（状态）</strong></p><blockquote><p>to be eating a carrot</p><p>to have eaten a carrot</p><p>to have been eating a carrot.</p><p>虽然这里表达了状态，但实际仍不受时间限制</p><p>The rabbit seemed to be eating a carrot. 这兔子之前似乎在吃一根胡萝卜（的过程中）。</p><p>The rabbit will appear to have eaten a carrot. 这兔子之后会看起来像是吃过了一根胡萝卜。</p><p>I find it easy to learn English.</p></blockquote></li></ol></li></ul><h2 id="2-动名词-doing"><a href="#2-动名词-doing" class="headerlink" title="2.动名词(doing)"></a>2.动名词(doing)</h2><blockquote><p>将动词转化为名词来用。</p><p>变换规则（与现在分词相同）：</p><ol><li><p>基本形式：大多数动词直接加上-ing</p><blockquote><p>play → playing, read → reading, write → writing</p></blockquote></li><li><p>e结尾的动词</p><ul><li><p>以不发音的e结尾，则去掉e再加-ing。</p><blockquote><p>drive → driving, live → living, move → moving</p></blockquote></li><li><p>e发音的，则保留e并加-ing。</p><blockquote><p>see → seeing, agree → agreeing</p></blockquote></li></ul></li><li><p>以重读闭音节结尾且只有一个辅音字母的动词</p><ul><li><p>以重读闭音节（即辅音+元音+辅音）结尾，并且这个辅音不是w、x或y时，通常需要双写最后一个辅音字母后再加-ing。</p><blockquote><p>begin → beginning, run → running, swim → swimming</p></blockquote></li><li><p>如果单词的重音不在倒数第二个音节上，则不需要双写辅音字母。</p><blockquote><p>enter → entering, offer → offering</p></blockquote></li><li><p>一些特定情况下的单音节词,只需直接加-ing而不需要双写。</p><blockquote><p>sit → sitting, hit → hitting</p></blockquote></li></ul></li><li><p>以ie结尾的，通常将ie改为y再加-ing。</p><ul><li>例如：lie → lying, die → dying</li></ul></li><li><p>不规则变换</p><blockquote><p>have → having, go → going, do → doing</p></blockquote></li><li><p>以-c结尾，并且c前有元音，某些情况下，为了保持发音一致，可能需要将c变为ck再加-ing。</p><blockquote><p>picnic → picnicking</p></blockquote></li><li><p>以l结尾的动词,在英式英语中有时会双写l再加-ing，而在美式英语中则直接加-ing。</p><blockquote><p>英式英语：travel → travelling</p><p>美式英语：travel → traveling</p></blockquote></li></ol></blockquote><ol><li><p>动名词做主语</p><blockquote><p>Carrots are healthy for the rabbit. 胡萝卜对兔子来说很健康。</p><p>Eating carrots（主语） is healthy for the rabbit.</p></blockquote></li><li><p>动名词做表语</p><blockquote><p>The rabbit’s hobby is growing carrots. 兔子的爱好是种萝卜。</p><p>Seeing is believing. 眼见为实.</p></blockquote></li><li><p>动名词做定语</p><blockquote><p>a sleeping pill</p><p>a pill for sleeping（sleeping当名词用）</p></blockquote></li><li><p>动名词做宾语</p><blockquote><p>The rabbit likes eating carrots. 兔子喜欢吃胡萝卜。</p></blockquote></li><li><p>注意:</p><ul><li><p>不能跟不定式的动词：enjoy,avoid,advise,consider,escape,mind,practice等</p></li><li><p>不能跟不定式的动词词组：insist on,give up,feel like,put on等</p></li><li><p>宾语除了在动词之后出现，也会在介词之后出现, 即<strong>介词+宾语</strong>（不能用谓语动词，否则要改为非谓语动词的动名词）</p><blockquote><p>The rabbit is fond of eating carrots.兔子喜欢吃胡萝卜。</p><p>The rabbit is looking forward to seeing the wolf again.（这里的to是动词短语，此时to充当介词，后跟动名词充当定语并不构成动词不定式）</p></blockquote></li><li><p>动名词和不定式充当宾语的区别。</p><blockquote><p>The rabbit stopped to eat a carrot. 兔子停下（手里的活）去吃一根胡萝卜。（停止这件事，去做那件事）</p><p>The rabbit stopped eating a carrot.兔子停止吃一根胡萝卜。（仅停止这件事）</p><p>The wolf forgot to invite the rabbit to her party. 狼忘记邀请兔子去他的聚会。（忘记去做而没有做）</p><p>The rabbit forgot accepting the wolf’s invitation. 兔子忘记接受过狼的邀请。（忘记做过，事情已经做过）</p></blockquote></li></ul></li></ol><h2 id="3-现在分词（doing）"><a href="#3-现在分词（doing）" class="headerlink" title="3.现在分词（doing）"></a>3.现在分词（doing）</h2><blockquote><p>现在分词相当于一个形容词。</p></blockquote><ul><li><p>动名词和现在分词的区别</p><blockquote><p>a sleeping（动名词） pill &#x3D; a pill for sleeping.</p><p>a sleeping（现在分词，相当于形容词） rabbit ≠ a rabbit for sleeping.（只知道兔子在睡，并不了解什么时候睡）</p></blockquote></li><li><p>现在分词作表语</p><blockquote><p>The rabbit is charming.兔子是有魅力的。</p><p>The story is interesting.故事是有趣的。</p><p>The game is exciting.游戏是刺激的。</p><p>The news is encouraging.新闻是振奋人心的。</p></blockquote></li><li><p>现在分词做宾语补足语</p><p>动词不定式做宾语补足语时，表示一个动作从始至终的过程，强调动作已经发生了；</p><p>现在分词做宾语补足语时，表示动作正在进行中，强调动作进行的状态。</p><blockquote><p>The wolf saw the rabbit eating（做宾语补足语，表兔子在吃胡萝卜） a carrot.狼之前看到兔子正在吃一根胡萝卜。</p><p>不定式做宾语补足语：The wolf saw the rabbit eat a carrot.狼之前看到兔子吃了根胡萝卜。</p></blockquote></li><li><p>现在分词做状语</p><p> 表时间，原因，条件，结果，让步，目的，方式和伴随情况等。</p><p>非谓语动词在很大程度上简化了从句，使句子言简意赅。</p><ol><li><p>表时间</p><blockquote><p>Hearing the news,the rabbit became excited. 听到这个消息，兔子很激动。</p><p>相当于时间状语从句:</p><p>When he heard the news,the rabbit became excited.</p></blockquote></li><li><p>表原因</p><blockquote><p>Not konwing what to eat,the rabbit skipped lunch. 不知道吃什么，兔子没吃中饭。</p><p>相当于原因状语从句</p><p>Because he didn’t know what to eat,the rabbit skipped lunch. 因为不知道吃什么，兔子没吃中饭.</p></blockquote></li></ol></li></ul><h2 id="4-过去分词（done）"><a href="#4-过去分词（done）" class="headerlink" title="4.过去分词（done）"></a>4.过去分词（done）</h2><blockquote><p>变换规则：</p><ol><li>一般情况：直接加-ed</li></ol><blockquote><p>work → worked, play → played, help → helped</p></blockquote><ol start="2"><li>以e结尾的动词,直接加-d</li></ol><blockquote><p>love → loved, live → lived, use → used</p></blockquote><ol start="3"><li>以辅音字母+y结尾的动词</li></ol><ul><li><p>以辅音字母+y结尾，将y改为i再加-ed。</p><blockquote><p>study → studied, try → tried, carry → carried</p></blockquote></li><li><p>如果y前是元音字母，则直接加-ed。</p><blockquote><p>play → played, enjoy → enjoyed</p></blockquote></li></ul><ol start="4"><li>以重读闭音节结尾且只有一个辅音字母的动词：</li></ol><ul><li><p>如果动词是以重读闭音节（即辅音+元音+辅音）结尾，并且这个辅音不是w、x或y时，通常需要双写最后一个辅音字母后再加-ed。</p><blockquote><p>stop → stopped, plan → planned, prefer → preferred</p></blockquote></li><li><p>如果单词的重音不在倒数第二个音节上，则不需要双写辅音字母。</p><blockquote><p>enter → entered, offer → offered</p></blockquote></li></ul><ol start="5"><li>不规则动词</li></ol></blockquote><ul><li><p>过去分词是非谓语动词，与现在分词同理，不能表示时间</p><blockquote><p>minced（作定语，可看作形容词） meat 绞肉</p><p>minced carrot 绞胡萝卜</p><p>The rabbit will eat minced carrot next week.兔子下周会吃绞碎的胡萝卜。（并非过去绞的，只是表示被绞的状态）</p></blockquote></li><li><p>通常形容词和过去分词作定语，放在名词前，作前置定语</p><blockquote><p>a minced carrot</p><p>a painted room</p><p>an exited rabbit</p></blockquote></li><li><p>后置定语（过去分词短语做定语，要放在被修饰的名词之后。）</p><blockquote><p>The carrot cake eaten by the rabbit is delicious. 被兔子吃了的胡萝卜蛋糕很美味。</p></blockquote></li><li><p>过去分词充当主语补语</p><blockquote><p>The rabbit is interested in growing carrots.兔子对胡萝卜感兴趣。</p><p>sb. is interested in doing sth.(有过去分词的主系表结构）</p></blockquote></li><li><p>现在分词和过去分词做表语的区别：</p><p>现在分词<strong>暗含主动关系</strong>，即被描述的是<strong>做出动作的人&#x2F;物</strong>。（第一句是故事让人感到有兴趣）</p><p>而过去分词<strong>暗含被动关系</strong>，即被描述的是<strong>动作的接受者</strong>。（第二句兔子被某事某物引起了兴趣）</p><p><strong>注：不能笼统的认为过去分词修饰人，现在分词修饰物，要搞清楚表达的意思是主动还是被动。</strong></p><blockquote><p>The story is interesting.(主动)故事很有趣</p><p>The rabbit is interested.(被动)兔子很有兴趣</p><p>I am interested.我被某人&#x2F;某物引起了兴趣</p><p>I am interesting.我引起了某人的兴趣</p></blockquote></li><li><p>过去分词做宾语补语</p><blockquote><p>The rabbit found his carrot stolen. 兔子发现它的胡萝卜被偷了</p></blockquote></li><li><p>过去分词作状语</p><ol><li><p>表地点：</p><blockquote><p>Seen from the hill，the carrot field looks beautiful. 从山上看，胡萝卜看上去很美。</p><p>Seeing the carrot field，the rabbit ran towards it.看到胡萝卜田，兔子朝着它跑去。</p><p>这里用过去还是现在分词，还是要看语态的被动和主动。</p></blockquote></li><li><p>表原因：</p><blockquote><p>Born（过去分词） in a rabbit family，the rabbit has been growing carrots all his life 由于出生在一个兔子家庭里，兔子种了一辈子胡萝卜。</p></blockquote></li><li><p>表条件：</p><blockquote><p>Given another chance,the rabbit would go to the wolf’s party. 如果再给兔子一次机会，他会去参加狼的聚会。</p></blockquote></li><li><p>高级用法(独立主格)：</p><p>句中只用一个谓语动词，其他用非谓语动词。语法上称为独立主格，其现在分词和过去分词都在句子的状语中，而并非主语中。但是状语的整句中，分词修饰的成分隐含了主语的意味，虽然其并不是整句的主语。</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;012.png?raw&#x3D;true)</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;013.png?raw&#x3D;true)</p></li></ol></li></ul><h1 id="Topic-7-独立主格结构-video-7"><a href="#Topic-7-独立主格结构-video-7" class="headerlink" title="Topic 7.独立主格结构(video.7)"></a>Topic 7.独立主格结构(video.7)</h1><blockquote><p>作用：对从句的简化</p></blockquote><blockquote><p>If the warther <u>peramts</u>,the rabbit will go out.如果天气允许，兔子应付出门。</p><p>The weather <u>permitting</u>,the rabbit will go out.如果天气允许，兔子应付出门。</p></blockquote><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;014.png?raw&#x3D;true)</p><blockquote><p>更像包含be动词的独立主格，也就是名词&#x2F;代词+being(现在分词)，然后再把being省略掉。</p></blockquote><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;015.png?raw&#x3D;true)</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;016.png?raw&#x3D;true)</p><blockquote><p>with可以省略，其他部分不变</p><p>with在省略的同时，通常也会简化句子结构。</p></blockquote><h1 id="Topic-8-助动词-情态动词-video-8"><a href="#Topic-8-助动词-情态动词-video-8" class="headerlink" title="Topic 8.助动词&amp;情态动词(video.8)"></a>Topic 8.助动词&amp;情态动词(video.8)</h1><blockquote><p>助动词的两个基本特征：</p><ol><li>辅助主动词；</li><li>不能像主动词那样单独做谓语动词。（can这样的情态动词也是助动词的一种）</li></ol></blockquote><h2 id="1-基本助动词"><a href="#1-基本助动词" class="headerlink" title="1.基本助动词"></a>1.基本助动词</h2><blockquote><p>基本助动词：be,do,have.他们在作助动词时，本身是没有实际含义的。</p><p>除了做助动词，本身还可以做实义动词,可单独作谓语动词。be（存在），do（做），have（有）</p></blockquote><ol><li><p>be</p><blockquote><p>The rabbit is eating a carrot.</p><p>The carrot was eaten by the rabbit.</p></blockquote></li><li><p>have</p><blockquote><p>The rabbit has eaten a carrot.</p></blockquote></li><li><p>do</p><blockquote><p>do-&gt;does</p><p>The rabbit does like coins!(表强调)</p><p>The rabbit does not like freeloaders.(表辅助构成否定)</p></blockquote></li></ol><h2 id="2-情态助动词"><a href="#2-情态助动词" class="headerlink" title="2.情态助动词"></a>2.情态助动词</h2><blockquote><p>做助动词时，本身没有实际意义，但单独做谓语动词时，也是拥有实际意义的。</p><p>could是can的过去式，might是may的过去式，should是shall的过去式。</p></blockquote><blockquote><p>can&#x2F;could</p><p>may&#x2F;might</p><p>will&#x2F;would</p><p>shall &#x2F;should</p><p>must</p><p>ought to</p><p>dare&#x2F;dared</p><p>need</p><p>used to</p></blockquote><ol><li><p>can&#x2F;could(<strong>可译作有能力做某事，会，可以</strong>)</p><ul><li><p>表能力</p><blockquote><p>I can kill a wolf.</p><p>I could kill a wolf last year.</p></blockquote></li><li><p>表请求或许可</p><p>这里的could并不表示过去，而是一种更礼貌更委婉的表达。</p><blockquote><p>Can&#x2F;Could I borrow you book?</p></blockquote></li><li><p>表可能性</p><blockquote><p>Anything can happen.什么事儿都可能发生</p><p>Anything could happen.(could表示对过去的推测，也可表示现在的可能性，不过可能性比can更小一点)什么事儿都可能发生</p></blockquote></li><li><p>表虚拟语气</p><blockquote><p>The rabbit could have gone（表本可以做但实际没有做，表对过去的虚拟表达） home earlier,but he didn’t finish work on time.兔子本可以早回家的，但他没按时完成工作。</p></blockquote></li></ul></li><li><p>may&#x2F;might</p><ul><li><p>表请求或许可</p><blockquote><p>May&#x2F;might（might更委婉） I borrow your book?</p><p>Yes,of course.</p></blockquote></li><li><p>表示可能性(程度小于can&#x2F;could，所以翻译为也许、大概、可能.)</p><blockquote><p>The rabbit isn’t here.He may be at home.（不确定）</p><p>The rabbit isn’t here.He might be at home.（非常不确定）若用might，则暗示可能性更小</p></blockquote></li><li><p>表祝愿</p><blockquote><p>may表示祝愿，通常放在句首。（此种含义不包含might）</p><p>May you succeed! 祝你成功！</p></blockquote></li></ul></li><li><p>must</p><ul><li><p>表必须</p><blockquote><p>You must finish your homework first! 你必须先做完作业</p></blockquote></li><li><p>表禁止（mustn’t表必须不，只有禁止的含义）</p><blockquote><p>You must not (mustn’t) smoke here.（must not或mustn’t表禁止，不是不必须，而是必须不）禁止你在此吸烟。</p><p>Must I give you a gift? 我必须要给你送礼物吗？</p><p>No,you need（情态动词） not give me a gift. 不，你不是必须要给我礼物。</p><p>No,you don’t have to（have to属于半助动词） give me a gift. 不，你不是必须给我礼物。</p></blockquote></li><li><p>表推测</p><p><strong>must表推测只能用在肯定句中，否定句只能用can’t.</strong></p><blockquote><p>The light is on.The rabbit must be at home.（很确定兔子在家）灯亮着，兔子一定在家。</p><p>The light isn’t on.The rabbit can’t be at home. 灯不亮，兔子不可能在家。</p></blockquote></li></ul></li><li><p>will&#x2F;would</p><ul><li><p>构成将来时</p><blockquote><p>The rabbit will eat a carrot. 兔子将吃一根胡萝卜。</p><p>The rabbit would eat a carrot.（过去将来时）兔子（在过去某一时间）将吃胡萝卜</p></blockquote></li><li><p>表示请求，建议</p><blockquote><p>Will you lend me that book? 你愿意借给我那本书吗？</p><p>Would（更委婉） you please lend me that book? 请你借给我那本书好吗？</p></blockquote></li><li><p>表推测，假设</p><blockquote><p>Ask him.He will&#x2F;would know. 问他吧(would表推测，比will的程度更弱。)</p><p>What would the rabbit eat for dinner? 兔子可能吃什么</p><p>He would eat a carrot. 他可能要吃一根胡萝卜</p></blockquote></li></ul></li><li><p>shall</p><ul><li><p>构成将来时:</p><blockquote><p>I will be there at 9AM. 我早上9点会在那里</p><p>I shall be there at 9AM. 我早上9点会在那里</p></blockquote></li><li><p>用来征求意见:</p><blockquote><p>Shall we meet at 9AM？我们早上9点见面如何？</p></blockquote></li><li><p>表警告命令:</p><blockquote><p>You shall not pass! 你不许通过</p></blockquote></li></ul></li><li><p>should</p><ul><li><p>表应当</p><blockquote><p>We should treat the rabbit wellness. 我们应该对兔子好点。</p></blockquote></li><li><p>表有一定根据的推测</p><blockquote><p>It should(根据具体情况推测，所以可能性较大) rain tomorrow. 明天应该下雨</p></blockquote></li><li><p>表竟然(惊讶、愤怒、失望):</p><blockquote><p>It’s surprising that he should be late.真的很奇怪，他竟然会迟到。</p></blockquote></li><li><p>构成虚拟语气</p><blockquote><p>If it should rain tomorrow,I wouldn’t go.如果明天下雨，我就不去了。</p><p>You should have eaten the carrot.你应该吃掉那根胡萝卜。(但你没吃，should表与过去相反的虚拟语气)</p></blockquote></li></ul></li><li><p>ought to</p><ul><li><p>表应该，但语气更强烈:</p><blockquote><p>We ought to treat the rabbit well. 我们应该对兔子好些。</p></blockquote></li></ul></li><li><p>need</p><ul><li><p>做<strong>实义动词</strong>，表需要</p><blockquote><p>I need your money.我需要你的钱</p></blockquote></li><li><p>做<strong>情态动词</strong>，表需要，有必要</p><blockquote><p>The rabbit need wait.兔子需要等待。</p><p>The rabbit needs to wait.(但这里的needs不是情态动词，而是谓语动词)兔子需要等待。</p><p>The rabbit need not wait.(做助动词后可直接跟not)兔子不必等待。</p><p>The rabbit does not need to wait.(need做实义动词，不能再后面直接跟not,需要借助助动词do来完成否定)兔子不必等待</p></blockquote></li></ul></li><li><p>dare</p><p>跟need 类似：<em>做实义动词时，表敢，挑战，冒险。</em>做情态动词，表敢</p><ul><li><p>一般用于否定句和疑问句中:</p><blockquote><p>The rabbit dare not tell the truth to the wolf.兔子不敢对狼说出真相。</p><p>How dare you! 你好大的胆子！</p></blockquote></li></ul></li><li><p>used to</p><ul><li><p>表示过去的动作，尤其是重复的动作，而且强调和现在的对比:</p><blockquote><p>The rabbit used to eat apples.Now he only eats carrots.兔子过去(习惯)吃苹果，现在他只吃胡萝卜。</p><p>The rabbit ate an apple.(相比之下就没有经常习惯的感觉)兔子吃了一个苹果。</p></blockquote></li><li><p>不要把used to和实义动词use(使用)以及动词词组be used to something&#x2F;doing something习惯于…混淆。</p><blockquote><p>Could I use your phone? 我可以用你的电话吗？</p><p>I am used to getting up early. 我习惯早起</p></blockquote></li></ul></li></ol><h2 id="3-半助动词"><a href="#3-半助动词" class="headerlink" title="3.半助动词"></a>3.半助动词</h2><blockquote><p>半助动词，既像主动词，又像助动词.</p></blockquote><blockquote><p>be able to</p><p>be going to</p><p>be about to</p><p>had better</p></blockquote><ol><li><p>be able to</p><ul><li><p>与can 很像，can的时态只有现在和过去时，所以一般表示现在和过去的能力，而be able to可以表达将来的能力。</p><blockquote><p>I’ll be able to reach school on time if I leave right now.如果我现在离开就能按时到学校</p></blockquote></li><li><p>表过去的能力时用was&#x2F;were able to往往表示”成功做成…”</p><blockquote><p>I was able to reach school on time because I left home early. 因为我离家很早所以按时到学校。</p></blockquote></li></ul></li><li><p>be going to ,be about to,be to</p><p>三个半助动词和will一样都表示将要做某事，但视具体语境有些微妙的区别。</p><ul><li><p>be going to有更强的主观能动性，含有计划做某事的意思，而且通常是很快就要做某事。如:</p><blockquote><p>I’m going to eat dinner at 6PM today. 我会在六点吃完饭。</p><p>I will eat dinner at 6PMtoday. 我会在6点吃完饭。</p></blockquote></li><li><p>be able to是马上要做某事，时间更短</p></li><li><p>be to表被命令做某事</p><blockquote><p>You are to finish home work first.(和must finish home work有点像)你要先做完作业。</p><p>You must finish home work first. 你必须先做完作业。</p></blockquote></li><li><p>be to也可表示命中注定(因为是被命运命令)</p><blockquote><p>I think they’re to fall in love with each other. 我想他们注定会相爱</p></blockquote></li></ul></li><li><p>had better</p><ul><li><p>表最好做，暗含”如果不这么做，会有不好的后果”。</p><blockquote><p>You had better follow my orders.你最好听我的命令。</p></blockquote></li><li><p>had better的缩写是’d better，缩写形式更常见。</p></li></ul></li></ol><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;017.png?raw&#x3D;true)</p><h1 id="Topic-9-系动词-video-9"><a href="#Topic-9-系动词-video-9" class="headerlink" title="Topic 9.系动词(video.9)"></a>Topic 9.系动词(video.9)</h1><ul><li><p>系动词是把它后面的含义赋予给它之前的部分。连系动词 linking verb.</p><blockquote><p>The rabbit is smart （这里的 is 的作用就是把它之后的 smart 聪明这个含义赋予给它之前的 the rabbit 兔子）</p><p>I smell something! Oh no, the character has gone bad. It smells .(第一个 smell 是个实义动词中的及物动词，是要接宾语的。第二个 smiles 是个实义动词中的不及物动词，即后面没有宾语。不要把动词的系动词身份和实义动词身份弄混淆。)</p><p>The room remained empty.房间一直是空的</p><p>The sky grew dark .天空渐渐变暗。</p></blockquote></li><li><p>系动词分类</p><ol><li><p>系动词</p><blockquote><p>be</p></blockquote></li><li><p>感官系动词</p><blockquote><p>look, smell, taste, sound, feel</p></blockquote></li><li><p>变化类系动词</p><blockquote><p>become, get, come, go, turn, grow, run, fall</p></blockquote></li><li><p>其他系动词</p><blockquote><p>好像是：seem, appear</p><p>一直是：keep, remain，stay, stand, lie, rest</p><p>结果是：prove, turn, out</p></blockquote></li></ol></li></ul><h1 id="Topic-10-使役动词-video-10"><a href="#Topic-10-使役动词-video-10" class="headerlink" title="Topic 10.使役动词(video.10)"></a>Topic 10.使役动词(video.10)</h1><h2 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h2><ul><li><p>使役动词：表达的含义是使，让，令等这一类（后接宾语以及宾语补语的）动词。<strong>最常见的四个使役动词：make,let,have,get</strong></p><blockquote><p>I make the wolf eat carrots from time to time.我使（让）狼也偶尔吃些胡萝卜。</p><p>这里的 make 这个动词，是使某人做某事的意思。光是在之后加个宾语，这里的宾语是狼，句意还不完整。也就是说这一类词除了后面接个宾语，还需要增添宾语补语。</p></blockquote></li></ul><h2 id="2-常见使役动词"><a href="#2-常见使役动词" class="headerlink" title="2.常见使役动词"></a>2.常见使役动词</h2><ol><li><p>make</p><ul><li><p>动词原形&#x2F;裸不定式（bare infinitve）</p><blockquote><p>I make the wolf eat carrots from time to time 我使狼也偶尔吃些胡萝卜。</p><p>I make the wolf eat carrots.我使（让）狼吃胡萝卜。</p><p>(eat 属于不定式，只不过是裸不定式)</p></blockquote></li><li><p>形容词</p><blockquote><p>The carrot made the wolf fall.胡萝卜使狼饱了。(宾语补语是形容词)</p><p>make 这个词的隐含意思往往是强迫或需要某人做某事。</p></blockquote></li></ul></li><li><p>let</p><p>let 的隐含意义则是允许某人做某事。(但不绝对)</p><ul><li><p>动词原型&#x2F;裸不定式（bare infinitve）</p><blockquote><p>I’ll let the wolf eat some chocolate.我会让狼吃点巧克力。</p></blockquote></li><li><p>副词</p><blockquote><p>Let me out!让我出去!(out 是个副字，不是介词，做宾语补语。)</p></blockquote></li></ul></li><li><p>have</p><ul><li><p>做动词，表示有</p><blockquote><p>I have a pen.I have an apple.我有支笔，我有个苹果</p></blockquote></li><li><p>做助动词</p><blockquote><p>I have eaten the apple.我把苹果吃了.</p></blockquote></li><li><p>做使役动词。</p><ol><li><p>动词原型&#x2F;裸不定式（bare infinitve）</p><p>隐含意义往往是给某人一个任务或者说责任做某事。</p><blockquote><p>I’ll have the wolf wash the dishes.我会让狼洗盘子。（我把洗盘子的任务给了狼）</p><p>I had someone wash my car. 我让某人洗了我的车.</p><p>I had someone do my nails.我让某人修了我的指甲。</p></blockquote></li><li><p>过去分词</p><blockquote><p>I had my car washed.我让人洗了我的车。</p><p>I had my nails done.我让人修了我的指甲。</p><p>注：可以把这里的过去分词理解为被动。</p><p>I had my car washed &#x3D;&#x3D; My car was washed (by someone) as I wanted.</p><p>I had my nails done &#x3D;&#x3D; My nails were done (by someone) as I wanted</p><p>I’ll have the wolf wash the dishes.我会让狼洗盘子。</p><p>改为</p><p>I’ll have the dishes washed.我会让某人洗盘子。</p><p>有时候 have +宾语+ 过去分词，并没有“任务，服务”的含义，也可能是遭遇不幸。如:</p><p>I had my carrot stolen yesterday.我的胡萝卜昨天被偷了。</p></blockquote></li></ol></li></ul></li><li><p>get</p><ul><li><p>实义动词:</p><blockquote><p>I got a letter from a friend.我从一个朋友那儿收到了封信。</p><p>Do you get what i mean.你明白我的意思了吗？</p></blockquote></li><li><p>(完整)不定式</p><blockquote><p>I’ll get the wolf to clean the kitchen after she washes the dishes.我会让狼洗完盘子再把厨房清理了。</p><p>注： get 的宾语后要接完整动词不定式（带 to）。get 做实义动词的隐含意义往往是说服鼓励某人做某事:</p><p>I’ll have someone wash my car for one hundred one.我会让人一百块就把我车洗了。(这里 have 隐含了任务职责的含义，因为是给钱的。)</p><p>I’ll get the wolf to wash my car for free .我会(想办法)让狼免费给我洗车。(这里 get 可就要看兔子对付狼的手段了)</p><p>Il’l get someone to wash my car for one hundred yuan.我会说服某人100块就把我车洗了。(言下之意是 100 元洗车可是占了大便宜，你需要说服某人才行。)</p><p>注：这里说的隐含的意义都是通常的情况，不能太绝对。</p></blockquote></li><li><p>过去分词</p><blockquote><p>I got my nails done.我让人修了指甲。&#x3D;&#x3D; I had my nails done.我让人修了指甲。</p></blockquote></li></ul></li></ol><h2 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3.总结"></a>3.总结</h2><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;018.png?raw&#x3D;true)</p><blockquote><ul><li><p>使役动词是英语动词的一种，通常表达的含义是使，让，令等。使役动词后面除了要接宾语及动作承受对象，还需要有补充信息及宾语补语。</p></li><li><p>这样的宾语补语的可能性包括：动词原型或者说裸不定式、形容词、副词、过去分词等。</p></li><li><p>含义：</p><p>make 的隐含义通常是迫使某人做某事。</p><p>let 的隐含义通常是允许某人做某事。</p><p>have 的隐含义通常是给某人某项责任或者说任务。</p><p>get 的隐含义通常是说服或鼓励某人做某事。</p></li></ul></blockquote><h1 id="Topic-11-从句-video-11"><a href="#Topic-11-从句-video-11" class="headerlink" title="Topic 11.从句(video.11)"></a>Topic 11.从句(video.11)</h1><h2 id="1-什么是从句"><a href="#1-什么是从句" class="headerlink" title="1.什么是从句"></a>1.什么是从句</h2><ol><li><p>从句的原理</p><blockquote><p>英语的三种句子：</p><ol><li>简单句不能再拆</li><li>并列句    不分主次</li><li>复杂句    主句+从句</li></ol><p>I saw that the rabbit ate a carrot.(saw之后的是从句)</p></blockquote></li><li><p>从句的分类</p><ul><li><p>按句子成分分类：</p><blockquote><p>主语从句</p><p>宾语从句</p><p>宾语补语从句</p><p>表语从句</p><p>定语从句</p><p>状语从句</p><p>同位语从句</p></blockquote></li><li><p>按词类分：</p><blockquote><p>名词从句</p><p>形容词从句</p><p>副词从句</p></blockquote></li></ul></li></ol><h2 id="2-形容词从句（最难）"><a href="#2-形容词从句（最难）" class="headerlink" title="2.形容词从句（最难）"></a>2.形容词从句（最难）</h2><p>形容词从句（<strong>定语从句</strong>）：对某个人或事物进行描述，具有形容词的性质，在句中充当定语成分。</p><blockquote><p>知识点：</p><ol><li>形容词从句的思维方式</li><li>形容词从句的构成</li><li>形容词从句的限定性和非限定性。</li></ol></blockquote><h3 id="1-形容词从句的思维方式"><a href="#1-形容词从句的思维方式" class="headerlink" title="1.形容词从句的思维方式"></a>1.形容词从句的思维方式</h3><ul><li><p>英语</p><p>单个形容词或多个形容词或副词加形容词做定语，放在被修饰词之前。如：a tasty carrot</p><p>当定语用一句话描述时，如一根我买来的胡萝卜要说成：a carrot that I bought。</p></li></ul><ol><li><p>关系词：在被修饰的词之后添加另一个和它有关系的词，然后再把这个新词放到另一个句子中进行补充说明或者逻辑阐述。</p></li><li><p>先行词：关系词之前的被修饰的词</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;019.png?raw&#x3D;true)</p></li><li><p>总结：</p><blockquote><p>中文思维 ：这兔子在吃一根我买来的胡萝卜。</p><p>英文思维 ：这兔子在吃一根胡萝卜（[胡萝卜的关系词]我买。）The rabbit is eating a carrot ([that] I bought).</p></blockquote><ul><li><p>中文句子的定语都是前置</p><blockquote><p>一根好吃的胡萝卜</p><p>一根兔子吃了的胡萝卜</p><p>一个是兔子的老师</p><p>一个我昨天看见的老师</p><p>兔子吃胡萝卜的地方</p><p>兔子吃胡萝卜的原因</p></blockquote></li><li><p>对应的英语是，从句做定语都是后置的：</p><blockquote><p>a tasty carrot</p><p>a carrot that the rabbit ate</p><p>a teacher who is a rabbit</p><p>a teacher whom I saw yesterday</p><p>The place where the rabbit ate the carrot</p><p>The reason why the rabbit aid the carrot</p></blockquote></li></ul></li></ol><h3 id="2-形容词从句的构成"><a href="#2-形容词从句的构成" class="headerlink" title="2.形容词从句的构成"></a>2.形容词从句的构成</h3><blockquote><p>关系词：关系代词和关系副词</p></blockquote><h4 id="1-关系代词"><a href="#1-关系代词" class="headerlink" title="1.关系代词"></a>1.关系代词</h4><blockquote><p>The rabbit is eating a carrot <strong>that</strong> I bought.</p><p>that 作为 that I bought 的引导词充当代词的作用，所以属于关系词中的关系代词。</p><p>其他关系代词，比如 :</p><p>The teacher <strong>who</strong> ate a carrot is a rabbit</p><p>The teacher <strong>whom</strong> I saw yesterday is a rabbit</p><p>The teacher <strong>whose</strong> favorite food is carrot is rabbit</p><p>The food <strong>which</strong> the teacher likes is carrot.</p><p>关系代词的who,whom,whose,which 都是从对应的陈述句里变来的。从句中除去关系代词在开头做引导词，其他词的语序与对应的陈述句的语序是一致的。</p></blockquote><ol><li><p>将需要替代的词变作相应的关系代词。</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;020.png?raw&#x3D;true)</p></li><li><p>把关系词提前：</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;021.png?raw&#x3D;true)</p></li><li><p>关系代词 that 和 which 经常可以互换。区别:</p><ul><li><p>先行词明确、唯一、没有其他可能时，用 that</p><p>如果很多个同类事物中按限定条件选择，则不一定要用 that 也可用which :</p><blockquote><p>The rabbit ate the largest carrot that I’ve ever seen.the largest（已经说了是最大的，就那么一根没得选了）</p><p>同理：</p><p>all the rabbits that ate carrot.</p><p>the only rabbit that ate carrot.</p><p>the first rabbit that take carrot.</p><p>其中all ,only, first 也表明了很明确的对象没得选，所以也只能用 that </p></blockquote></li><li><p>相对的 :</p><blockquote><p>The rabbit ate a carrot which I bought.</p><p>意思是世上胡萝卜千千万，这兔子吃的是我买的那一根，即我买的限定了兔子吃的胡萝卜的范围。这里的 which 也依旧可以用 that。</p><p>The rabbit ate a carrot that I bought.</p><p>连提问都不用，就知道的对象就只能用 that 。如果还可以是其他，那么就可以用 which 或者 that。</p></blockquote></li></ul></li></ol><h4 id="2-关系副词"><a href="#2-关系副词" class="headerlink" title="2.关系副词"></a>2.关系副词</h4><p><strong>关系副词 &#x3D; 介词 + which</strong></p><blockquote><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;049.png?raw&#x3D;true)</p><p>以上几句包含了形容词从句。</p><p>where the rabbit ate the carrot修饰 place;</p><p>why the rabbit ate the carrot 修饰reason;</p><p>when the rabbit ate the carrot for the first time 修饰day。</p></blockquote><blockquote><p>where，why，when 在句中的词性是副词，属于关系副词，可把关系副词转为关系代词。</p><p>where –&gt; at which</p><p>why –&gt; for which</p><p>when –&gt; on which</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;050.png?raw&#x3D;true)</p></blockquote><h3 id="3-限定性和非限定性"><a href="#3-限定性和非限定性" class="headerlink" title="3.限定性和非限定性"></a>3.限定性和非限定性</h3><h4 id="1-限定性"><a href="#1-限定性" class="headerlink" title="1.限定性"></a>1.限定性</h4><p>形容词从句（定语从句）主要功能，即限定范围。</p><blockquote><p>比如：</p><p>The rabit ate the carrot which was on the table。</p><p>这里的从句 which was on the table 就是为了限定 carrrot 的范围。</p><p>言下之意就是有好多胡萝卜，但是这兔子吃的只是其中的一根。哪一根?在桌子上的那一根。</p></blockquote><h4 id="2-非限定性"><a href="#2-非限定性" class="headerlink" title="2.非限定性"></a>2.非限定性</h4><p>没有限定作用的从句。</p><blockquote><p>例句:</p><p>The rabbit ate the carrot, which was on the table.</p><p>相当于:</p><p>The rabbit ate the carrot, the carrot was on the table.</p><p>可理解为连续说两次的 carrot 太啰嗦。所以用一个代词 which 来替代 the carrot 避免重复。这样的从句没有限定的作用，只是用了个代词接着说话而已。</p><p>The rabbit ate the carrot，the carrot was on the table。</p><p>表达了两个信息：兔子吃胡萝卜和胡萝卜(再被吃之前)在桌上。(言下之意是完全可能只有一根胡萝卜。然后补充信息是这根胡萝卜恰巧在桌上而已。)</p><p>I have a head which is round.言下之意是我有好几个头，其中一个是圆的，其他的头可能是方的扁的。</p><p>I have a head, which is round.我有一个头，我这个头是圆的。</p></blockquote><blockquote><p>非限定性形容词从句的非限定的接着补充的特性，所以往往用来做句子的插入语，如</p><p>My head, which is big, is useful when it rains.我有大头，下雨不愁。</p><p>The biggest carrot, which the rabbit ate,  was on the table.最大的那根胡萝卜曾在桌上，兔子吃了它。</p><p>这两个做插入语的形容词从句可以直接去掉，不影响句意。因为只是补充信息用，所以可以加 the biggest 这样确定唯一的限定词。</p></blockquote><blockquote><p>非限定性形容词从句不一定是补充某个先行词，也<strong>可以指代整句话</strong>。比如：</p><p>The rabbit ate carrot, which was not surprising.兔子吃了胡萝卜这事儿不令人吃惊。</p><p>这里的 witch 不是指代 rabbit 也不是 carrot 。而是指代整个 the rabbit ate the carrot 这件事儿，也就是兔子吃了胡萝卜这事儿不令人吃惊。</p></blockquote><h2 id="3-名词从句"><a href="#3-名词从句" class="headerlink" title="3.名词从句"></a>3.名词从句</h2><p>名词从句:主语从句、宾语从句、表语从句(主语补语从句)、同位语从句、宾语补语从句。</p><h3 id="1-主语从句"><a href="#1-主语从句" class="headerlink" title="1.主语从句"></a>1.主语从句</h3><ol><li><p>主语从句的原理</p><blockquote><p>如：</p><p>That the rabbit ate a carrot is obvious.兔子吃了胡萝卜是明显的。（其中的 that the rabbit ate a carrot 就是引导词 that 引导的主语从句。）</p><p>这个主语从句表达了一个很确定的信息，即:兔子吃了胡萝卜。</p><table><thead><tr><th>不确定的信息也可以构成主语从句</th><th>对应英语主语从句</th></tr></thead><tbody><tr><td>兔子是否吃了胡萝卜</td><td>Whether the rabbit ate the carrot is obvious</td></tr><tr><td>兔子哪里吃的胡萝卜</td><td>Where the rabbit ate the carrot is obvious.</td></tr><tr><td>兔子什么时候吃的胡萝卜</td><td>When the rabbit ate the carrot is obvious.</td></tr><tr><td>兔子怎样吃的胡萝卜</td><td>How the rabbit ate the carrot is obvious.</td></tr><tr><td>谁吃了胡萝卜</td><td>Who ate the carrot is obvious.</td></tr><tr><td>兔子吃的什么</td><td>What the rabbit ate is obvious.</td></tr></tbody></table></blockquote><p><strong>主语从句是以引导词开头。</strong>这些引导词像 what,where, when 的代词或者副词，如果出现在问句中，被叫做<strong>疑问代词、疑问副词</strong>。这里用来引导从句，也就是做从句的引导词属于<strong>连接代词、连接副词</strong>。而从句除去引导词，剩下的词的词序和中文是基本一致的。</p></li><li><p>形式主语</p><p>主语从句有时会很长，避免头重脚轻。用 it 指代后面的从句，本身没有实际意义，称为“形式主语”。</p><blockquote><p>It is obvious that the hungry rabbit had already eaten carrot for dinner this evening.很明显，兔子今天晚饭已经吃了根胡萝卜。(或者,兔子今天晚饭已经吃了根胡萝卜，这很明显。)</p><p>如果形式主语 it 指代的内容比较多，中文就可以拆句。</p><p>同样的改成带有形式主语的句子：</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;052.png?raw&#x3D;true)</p><p>同理也可以把不确定信息的句子改写:</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;053.png?raw&#x3D;true)</p><p>it is + 形容词 + that…(在之前的动词虚拟语气视频中曾经看过)</p><p>It is suggested that you (should) eat a carrot.(这个带有动词虚拟语气的句子就是个主语)</p><p>从句相当于:</p><p>That you (should) eat a carrot is suggested.</p><p>一旦句子的谓语动词是:</p><p>suggest, demand, insist order… 这样的词，从句中的动词就要使用动词的虚拟语气。</p><p>比如</p><p>It is demanded&#x2F;insisted&#x2F;ordered that you should eat a carrot</p><p>这几个动词被动态也可以换成某些形容词，照样使用动词虚拟语气。比如</p><p>It is important&#x2F;essential&#x2F;necessary that you should eat carrot</p></blockquote></li></ol><h3 id="2-宾语从句"><a href="#2-宾语从句" class="headerlink" title="2.宾语从句"></a>2.宾语从句</h3><ol><li><p>确定信息&amp;不确定信息</p><ul><li><p>确定信息</p><blockquote><p>I saw that the rabbit ate carrot.我看见这兔子吃了根胡萝卜。</p><p>其中的 that the rabbit ate carrot 是宾语从句，作动词 saw 的直接宾语。这里的 that the rabbit ate carrot 是个确定的信息。</p></blockquote></li><li><p>不确定的信息</p><blockquote><p>I saw whether the rabbit ate the carrot.</p><p>I saw who ate the carrot.</p><p>I saw what the rabbit ate.</p><p>I saw where the rabbit ate the carrot.</p><p>I saw when the rabbit ate the carrot.</p><p>I saw how the rabbit ate the carrot.</p></blockquote></li><li><p>注意：</p><ol><li><p>除了某些介词参与的情况，从句的引导词基本都在从句的开头。</p></li><li><p>不要看到 whether， when， when， how 这样的词，就以为看到了包含疑问代词、疑问副词的问句，于是在之后错误的加上助动词，以下的句子是错误的：</p><blockquote><p>You told me whether <del>does</del> the rabbit eat carrot.</p><p>You told me where <del>does</del> the rabbit eat carrot.</p><p>You told me when <del>does</del> the rabbit eat the carrot.</p><p>You told me how <del>does</del> the rabbit tea the carrot.</p></blockquote></li></ol></li></ul></li><li><p>引导词that的省略</p><ul><li><p>在口语或非正式书面语中，宾语从句的引导词 that 往往可以省略。只有引导词 that 可以省略，而引导词 what, who, which, when, where, how 等则不可以省略。</p><blockquote><p>比如：</p><p>I know that the rabbit ate a carrot. &#x3D;&gt; I know the rabbit ate a carrot.</p></blockquote></li><li><p>也有的时候引导词 that 不能省略，否则句子有歧义或者语法错。</p><blockquote><p>比如:</p><p>I didn’t know that the rabbit ate the carrot and that you saw it.</p><p>这句话有两个宾语，分别是两个宾语从句。意思是：</p><p>1.我不知道兔子吃了胡萝卜</p><p>2.我不知道你看见</p><p>第一个 that 去掉还好，但是第二个 that 也去掉引发歧义</p></blockquote><blockquote><p>插入语：</p><p>I know， just like you do， <del>that</del> the rabbit ate the carrot.</p><p>如果去掉 that 容易让人反应不过来后面是个从句，从而认为这句话有语病。</p></blockquote></li></ul></li><li><p>某些词后的宾语从句的否定</p><ul><li><p>表达某种意见时会用到宾语从句</p><blockquote><p>I think (that) the rabbit is smart.我认为这兔子很聪明。</p><p>I believe (that) you will give me some coins.我相信你会给我投币。</p><p>I expect (that) you will give this video a thumbs-up.我指望你给我视频点赞。</p></blockquote></li><li><p>在做否定时，否定往往是加在谓语动词前，而不是在从句里</p><blockquote><p>I don’t think (that) the rabbit is smart.</p><p>I don’t believe (that) you will give me some coins.</p><p>I don’t expect (that) you will give this video a thumbs-up.</p></blockquote></li></ul></li><li><p>主从时态一致</p><ul><li><p>在大多数情况下，宾语从句和主句中的时态要保持一致。</p><blockquote><p>I don’t think (that) you are right.</p><p>如果改成过去式，就不能光改主句(主句描述过去的动作，但是过去的动作包含一般现在时态，岂不是未卜先知了吗？),所以正确的说法是</p><p>I didn’t think (that) you were right.</p><p>I knew (that) the rabbit liked carrots.</p><p>虽然 like 是一个习惯性的动作行为，但是因为它所在的从句紧跟了过去时间的主句，所以也要用动词过去式 liked 而不是 like 。只有不变的客观现象才是例外。如 ：</p><p>I knew (that) the sun rises in the east.</p></blockquote></li></ul></li><li><p>be + 形容词 + that…</p><ul><li><p>be + 加形容词 + that 这种句型</p><blockquote><p>I am sure that there’s a carrot on the table.</p><p>I am happy that there’s a carrot on the table.</p><p>I am afraid that there’s no carrot on the table.</p></blockquote></li></ul></li></ol><h3 id="3-表语从句"><a href="#3-表语从句" class="headerlink" title="3.表语从句"></a>3.表语从句</h3><p>表语从句:用一个从句充当表语。表语从句中最常见的系动词就是 be 动词。</p><ol><li><p>表语从句中的引导词和之前一样，也有多种可能。</p><blockquote><p>The problem is that the rabbit is hungry.</p><p>The reason is that there’s no more carrot.</p><p>The question is whether the rabbit is hungry.</p><p>The question is what the rabbit should eat.</p><p>The question is where&#x2F;when&#x2F;how the rabbit should eat the carrot.</p></blockquote></li><li><p>feel,seem,look, taste.. 也是系动词。</p><blockquote><p>It seems that the rabbit is hungry.</p><p>It feels that youre not telling the truth.</p><p>这些句子中的 it 是个形式主语没有实际意义，可以理解为占个位子。句子真正要表达的意思全部都被涵盖在了后面的从句中。</p></blockquote></li></ol><h3 id="4-同位语从句"><a href="#4-同位语从句" class="headerlink" title="4.同位语从句"></a>4.同位语从句</h3><blockquote><ul><li>同位语: 是用不同的方式把一个概念再说一遍，用逗号隔开，否则会乱在一起。</li></ul><blockquote><p>My teacher, Papa Rabbit, likes carrots.我的老师,兔老爹,喜欢胡萝卜。(老师以及兔老爹是同一个概念，兔老爹只不过是我的老师的另一个说法而已。所以 Papa rabbit 在这里是主语, teacher 的同位语。)</p><p>I like my teacher, Papa Rabbit.我喜欢我的老师,兔老爹。(Papa rabbit 是宾语, teacher 的同位语。)</p></blockquote><ul><li>同位语从句:也就是当一个从句来充当同位语时。<strong>常在句中修饰抽象的名词</strong>。因为抽象所以才要用另一种方式来再说一遍。</li></ul></blockquote><ol><li><p>同位语包含已知信息:</p><blockquote><p>The fact that the rabbit ate the carrot did not surprise me.兔子吃了胡萝卜这个事实并没有让我吃惊。</p><p>这里的 the fact 和 that the rabbit ate the carrot 是同一个概念,后者显然就是由 that 这个引导词引导的同位语从句。</p></blockquote></li><li><p>同位语包含未知信息</p><blockquote><p>The question <u>whether the rabbit will eat the carrot</u> is on all our minds.兔子是否会吃胡萝卜这个问题萦绕在我们所有人心中。</p><p>whether the rabbit will eat the carrot 也是个同位语从句，把主语 question 又说了一遍。</p><p>I have no idea who ate the carrot.我不知道谁吃了那胡萝卜</p><p>其中 idea 是宾语，who ate the carrot 把 idea 重新定义，还是个同位语从句.</p></blockquote></li></ol><h3 id="5-宾语补语从句"><a href="#5-宾语补语从句" class="headerlink" title="5.宾语补语从句"></a>5.宾语补语从句</h3><blockquote><p>宾语补语从句:需要宾语补语的动词，比如 call, make, consider… 。</p><p>简单句:</p><p>You can call me Papa Rabbit.你可以叫我兔老爹。</p><p>“me “是复杂及物动词 “call” 的宾语，”Papa Rabbit” 是宾语补语。对宾语 “me” 进行补充。只需要将 “Papa Rabbit”充当宾语补语的专有名词</p></blockquote><p>宾语补语从句不见得一定有名词的性质，也有可能是形容词的性质。</p><blockquote><p>You can call me what you like.你可以叫我你想叫我的（称号）。(也就是你可以随便叫我什么。)</p><p>My education made me who I am today.我的教育造就了我今天是的(这个人).(我的教育成就了今天的我.)。</p></blockquote><h2 id="4-副词从句"><a href="#4-副词从句" class="headerlink" title="4.副词从句"></a>4.副词从句</h2><blockquote><ul><li><p>副词从句(状语从句):一般补充说明，动词、形容词、副词等。</p></li><li><p>副词从句种类很多，因为做状语在句子中做补充信息有多种可能，可以根据用途或意义把副词从句分类:<strong>表时间、表地点、表条件、表让步、表方式、表比较、表原因、表目的、表结果</strong></p></li></ul></blockquote><h3 id="1-时间副词从句"><a href="#1-时间副词从句" class="headerlink" title="1.时间副词从句"></a>1.时间副词从句</h3><blockquote><p>时间副词从句:可以按时间参照点来分类。</p></blockquote><ol><li><p>在某一时间点之前</p><ul><li><p>从句引导词: before</p><blockquote><p>The rabbit ate carrot at home before the wolf stopped by.大灰狼串门之前，兔子吃了根胡萝卜.</p><p>这里也可以把从句提前写成:</p><p>Before the wolf stopped by, the rabbit ate carrot at home.大灰狼串门之前，兔子吃了根胡萝卜.</p><p><strong>注：</strong>但是如果从句在主句之前，则要在从句后加上逗号，便于断句。</p></blockquote></li></ul></li><li><p>在某一时间点之中(当时)</p><ul><li><p>从句引导词 ：when， while， as。</p><blockquote><p>The rabbit was eating a carrot when I reached home.我到家的时候，兔子在吃胡萝卜 .</p><p>The rabbit was eating a carrot while I was making a video.我在做视频的过程中，兔子在吃胡萝卜 </p><p>I ate a carrot as I made the video.我一边吃胡萝卜一边做视频.</p></blockquote></li><li><p>when: 一般强调表示在某个时间点，“突然”,</p><blockquote><p>The rabbit was eating a carrot at home when the Wolf stopped by.兔子在家吃胡萝卜的时候(突然)大灰狼来串门了.</p><p>The rabbit was about to eat a carrot at home when the wolf stopped by.兔子在家刚要吃胡萝卜的时候(突然)大灰狼来串门了.</p></blockquote></li><li><p>while:一般强调一个时间段内</p><blockquote><p>The rabbit was eating a carrot while I was making a cideo.我做视频的过程中，兔子在吃胡萝卜.(“当我在做视频的这个时间段之内.”)</p></blockquote></li><li><p>as: 一般强调同时进行两个动</p><blockquote><p>I ate a carrot as I made the video.我一边吃胡萝卜一边做视频.(“同时吃胡萝卜和做视频.”)</p></blockquote></li></ul></li><li><p>在某一时间点之后</p><ul><li><p>从句引导词:after</p><blockquote><p>The rabbit ate a carrot after the wolf stopped by.大灰狼串过门之后，兔子吃了根胡萝卜.</p></blockquote></li></ul></li><li><p>从之前某一时间点开始算</p><ul><li><p>从句引导词 ：since (这里是从某时间点算起的时间段，往往暗示了对之后有影响, 一般要使用完成状态.)</p><blockquote><p>The rabbit has shared three carrots since the wolf stopped by.自从大灰狼来串门，兔子已经分享了三根胡萝卜了.</p><p>否定:</p><p>The rabbit has not stopped sharing carrots since the wolf stopped by.自从大灰狼来串门，兔子就一直在分享胡萝卜.</p></blockquote></li></ul></li><li><p>直到之后某一时间点</p><ul><li><p>从句引导词： until  (有点像 since 的对立面, 从某一时间点算起，直到之后的某一时间点。)</p><blockquote><p>The rabbit waited until the wolf stopped by.兔子一直在等，直到大灰狼来串门.</p><p>The rabbit didn’t eat any carrot until the wolf stopped by.兔子直到大灰狼来串门才吃了一个胡萝卜.</p></blockquote></li></ul></li><li><p>一…就…</p><ul><li><p>从句引导词:as soon as 相当于一个动作紧跟着另一个动作发生。</p><blockquote><p>the rabbit will eat a carrot as soon as the wolf leaves.大灰狼一离开兔子就要吃一根胡萝卜.</p></blockquote></li></ul></li><li><p>下次…</p><ul><li><p>从句引导词:the next time </p><blockquote><p>The rabbit will share the biggest carrot the next time the wolf stops by.下次大灰狼来串门，兔子一定会一起分享最大的胡萝卜.</p></blockquote></li></ul></li></ol><h3 id="2-地点副词从句"><a href="#2-地点副词从句" class="headerlink" title="2.地点副词从句"></a>2.地点副词从句</h3><blockquote><p>主要引导词: <strong>where + “强调形式“</strong>:来表地点</p><blockquote><p>The rabbit ate the carrot where he found it.兔子在找到胡萝卜的地方吃了它 。(where he found it 是地点副词从句, 描述兔子吃胡萝卜的地方。)</p></blockquote></blockquote><ol><li><p>地点副词从句与定语从句比较：</p><blockquote><p>The rabbit ate the carrot where he found it.（副词从句直接等于地点）</p><p>The rabbit ate the carrot at the place where he found it.（定语从句，是修饰先行词 place，即一个已经交代了的，但是没有具体限定的地点）</p><p>This is where he found the carrot.(表语从句)</p><p>Where he found the carrot is a secret.(主语从句)</p><p>光看见引导词 where 还不能确定该从句是哪种，从句得分别对待。</p></blockquote></li><li><p>提到where的强调形式，引导词包括 :</p><p>wherever，everywhere，anywhere 不管哪里,任何地方,所有地方</p><blockquote><p>The rabbit will go where he can find a carrot.不管哪里，只要能发现胡萝卜，这兔子就会去。</p><p>The rabbit will go wherever he can find a carrot.不管哪里，只要能发现胡萝卜，这兔子就会去。（强调：“不管”哪里）</p><p>The rabbit sees a carrot everywhere he goes.兔子在他到的地方都看见一根胡萝卜。（强调：“所有”地方）</p><p>The rabbit can eat a carrot anywhere he likes.兔子可以在任何他喜欢的地方吃一根胡萝卜。（强调：“任何”地方）</p></blockquote></li></ol><h3 id="3-比较副词从句"><a href="#3-比较副词从句" class="headerlink" title="3.比较副词从句"></a>3.比较副词从句</h3><blockquote><p>比较副词从句：英语的形容词的比较级，比如 :</p><ul><li><p>smart,smarter 聪明,更聪明，</p></li><li><p>big, bigger 大,更大</p></li><li><p>beautiful, more beautiful 漂亮,更漂亮。</p></li></ul><p>常见的句子都可以算是省略句或者口语化用法，完整的正式的形式都是副词从句中的比较副词或者说比较状语从句:</p></blockquote><ol><li><p>than：表“更”</p><blockquote><ul><li><p>He is smarter than me.</p></li><li><p>He is smarter than I am.他比我聪明.</p></li><li><p>This carrot is bigger than that one.</p></li><li><p>This carrot is bigger than that one is.这根胡萝卜比那根大 .</p></li><li><p>She is more beautiful than Snow White.</p></li><li><p>She is more beautiful than Snow White is.她比白雪公主还漂亮.</p></li></ul><p>其中 :than I am, than that one is, then snow white is. 都是副词从句。用比较的方式对前面的主句进行补充说明，尤其是第一句这样的用代词宾格 me 是口语化的形式，正式是 :He is smarter than I (am).</p></blockquote></li><li><p>as…as:表”同样的”</p><blockquote><ul><li><p>He is as smart as I am.</p></li><li><p>This carrot is as big as that one is.</p></li><li><p>She is as beautiful as Snow White is.</p></li></ul><p>也可以省略或者口语化为:</p><ul><li><p>He is as smart as me.</p></li><li><p>This carrot is as big as that one.</p></li><li><p>She is as beautiful as Snow White.</p></li></ul></blockquote></li><li><p>the(比较级)，the(比较级)：表””越…越…”</p><blockquote><ul><li><p>The more you practice English, the more fluent you become.你越多练习英语，你就越流利.</p></li><li><p>The more coins you give me, the more videos I make.你投币越多，我做的视频也越多..</p></li></ul></blockquote></li></ol><h3 id="4-条件副词从句"><a href="#4-条件副词从句" class="headerlink" title="4.条件副词从句"></a>4.条件副词从句</h3><blockquote><p>条件副词从句其实就是通常说的“条件句”，如：</p><ul><li>If the rabbit sees a carrot, he wiil eat it.</li></ul><p>这个条件只是单纯的假设属于真实条件句。英语动词的虚拟语气的虚拟条件句就是使用了动词虚拟语气的条件副词从句。如:</p><ul><li><p>If I saw a carrot,I would eat it.</p></li><li><p>If I had seen a carrot,I would have eaten it.</p></li></ul></blockquote><ol><li><p>所谓”主将从现”的说法，意思就是主句用将来时态，而从句用现在时态。</p><blockquote><p>If the rabbit sees a carrot, he will eat it. &#x3D; The rabbit will eat the carrot if he sees it.</p><p>两句中 if 引导了从句使用的是一般现在时态，之后是主句用一般将来时态。</p></blockquote><ul><li><p>主将从现中的现。</p><p>“一般现在时态”这个时态的重点往往不是”现在”这个时间，而是”一般”这个状态。什么叫”一般状态”？就是简单的,默认的,普通的状态。比如:</p><blockquote><p>Rabbits eat carrots.兔子吃胡萝卜.</p><p>The sun rises in the east.太阳从东边升起.</p></blockquote><blockquote><p>一般现在时态最常见的情况就是:”表达习惯&#x2F;客观事实”，和”现在”没关系。</p><p>If I see a carrot…如果我看见一根胡萝卜…(中间是没有时间信息的)</p></blockquote></li><li><p>将来时态指的是”非常确定会发生的事儿”。</p><blockquote><p>I will eat a carrot. 是我确定我将来会吃跟胡萝卜。</p><p>而这么做的条件不确定是否会形成：</p><p>所以条件只能用一般状态 :If I see a carrot.</p><p>而不是：If I will see a carrot.</p></blockquote></li><li><p>总结：</p><ul><li><p>不确定是否一定会看见一只胡萝卜。所以条件句中只能去掉时间信息，表达一个”一般的,默认的,普通的”状态，使用一般现在时态，而不是用明确的会发生的一般将来时态。</p></li><li><p>如果这个假设的条件成立，在这种情况下我一定会”明确”的做吃胡萝卜这个动作。所以主句也就是在这种条件成立的情况下，使用一般将来时态表示明确在将来会发生的动作。</p></li></ul><blockquote><p>从”规律”上说，<strong>条件句总是比主句在时态上落后一个时间段。</strong>这也可以应用于虚拟语气：</p><p>If I saw a carrot, I would eat it.</p><p>If I had seen a carrot, I would have eaten it.</p><p>虚拟语气条件句中的 saw并不是在表达”时间”，不是说我明确在过去看见什么，而是表达与现实相反的条件。</p></blockquote></li></ul></li><li><p>其他引导词，引导条件副词从句</p><ul><li><p>unless，表除非 （把 if 反着说）</p><blockquote><p>If you like this video, you will give it a thumbs-up.如果你喜欢这个视频，你会给他点赞.</p><p>也就是:</p><p>If you don’t like this video, you will not give it a thumbs-up.如果你不喜欢这个视频，你不会给他点赞.</p><p>改为 “unless”:</p><p>Unless you like this video, you will not give it a thumbs-up.除非你喜欢这个视频，不然你不会给它点赞.</p></blockquote></li><li><p>其他一些词或词组构成条件副词从句Provided ，As long as ，In case</p><blockquote><p>Provided that my video is excellent, you will give it a thumbs-up.如果我的视频很棒，你会给他点赞.</p><p>As long as I make excellent videos, you will remain my follower.只要我一直做高质量视频，你会继续关注.</p><p>In case you don’t understand, please comment below.如果你不明白，请在下方评论.</p></blockquote></li></ul></li></ol><h3 id="5-让步副词从句"><a href="#5-让步副词从句" class="headerlink" title="5.让步副词从句"></a>5.让步副词从句</h3><blockquote><p>阐述“相反&#x2F;相对”，常见：即使…也…</p></blockquote><ol><li><p>让步的情况是假设</p><blockquote><p>Even if I see a carrot, I will not eat it.即使我看到了一根胡萝卜，我也不会吃它.(让步副词从句)</p><p>If I saw a carrot, I would it eat.如果我看到了一根胡萝卜，我就会吃掉它.(条件副词从句)</p><p>加了 even 有让步的意思。就算是”我看见胡萝卜”这种情况发生，我也会做出一个在这个语境下相反的动作，即不吃它。</p></blockquote></li><li><p>让步的情况是事实</p><p>although 也可以用 though 或 even though 来替代</p><blockquote><p>Although I see a carrot, I will not eat it.尽管我看见一根胡萝卜，但我不会吃它.(我看见胡萝卜是个事实，但是还是”让步”，我还是不会吃它。)</p><p>注:英文不能说 ”although&#x2F;though&#x2F;even though… but…”。因为如果在主句前面用”but”这样的连词能构成一个复合句</p></blockquote></li><li><p>no matter + 疑问句</p><p>让步是“未知情况”，但依旧”不管如何”…</p><blockquote><p>No matter what happens, I will not eat the carrot.不管什么事发生，我都不会吃这胡萝卜。</p><p>No matter who orders me, I will not eat the carrot.不管谁命令,我都不会吃这胡萝卜.</p><p>No matter how hungry, I will not eat the carrot.不管我有多饿，我都不会吃这胡萝卜.</p></blockquote></li><li><p>”no matter“ 可用 ”regardless of“来取代</p><blockquote><p>Regardless of what kind of video I make, you will give it a thumbs-up.不管我做什么样的视频你都会给它点赞.</p></blockquote></li></ol><h3 id="6-方式副词从句"><a href="#6-方式副词从句" class="headerlink" title="6.方式副词从句"></a>6.方式副词从句</h3><blockquote><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;061.png?raw&#x3D;true)</p><p>这里的方式副词从句的主句直接就交代了某种情况，然后用从句交代一个与事实相反的假设。在这里 “I feel good” 是确认的情况。而在虚拟语气中，因为假设的条件并非事实，所以 “I feel good” 也并不是确认的情况。</p></blockquote><ol><li><p>假设情况</p><blockquote><ul><li>You spent (so much) money as if you were a millionaire.你花了很多钱就好像你是百万富翁一样。</li></ul><p> 一上来就交代了你花（很多）钱，然后再说这个情况（你花钱的效果）就和一个虚拟的与事实相反的假设的情况下一样。也就是（就好像你是百万富翁，但你并不是）。</p><ul><li>If you were a millionaire, you would spend lots of money.(虚拟语气)如果你是百万富翁，你会花很多钱.</li></ul><p> 意思是如果你是百万富翁，你会花很多钱。言下之意是因为你有钱是假想，所以你并不会花很多钱。</p></blockquote></li><li><p>事实</p><blockquote><p>Eat the carrot as I do.像我吃胡萝卜一样吃胡萝卜.</p><p>Leave the carrot as it is.别动这胡萝卜.</p><p>直译是：让这胡萝卜像原本那样别碰它。副词从句中虽然也描述了某种情况，但是并不是假设，而是某种事实的阐述，可以理解为正在发生的某种方式。</p><p>真的包含“方式”这个词的形容词来表达:</p><p>You spend money the way (in which) millionaires do.</p><p>Eat the carrot the way (in which) I eat it.</p></blockquote></li></ol><h3 id="7-原因副词从句"><a href="#7-原因副词从句" class="headerlink" title="7.原因副词从句"></a>7.原因副词从句</h3><blockquote><p>三种有相通之处的副词从句:原因副词从句，目的副词从句，结果副词从句。它们的共同点在于都是表达了某种因果，即:A 导致 B 这样的情况。</p></blockquote><ol><li><p>because</p><p><strong>注意:because 引导从句，不能与so连用。</strong></p><blockquote><p>The rabbit ate the carrot because he was hungry.兔子吃了胡萝卜，因为他饿了.</p></blockquote></li><li><p>since:</p><p>注意：这里的 since 不是时间副词从句的从某个时间点开始的意思，而是介绍某个原因。</p><blockquote><p>Since you are hungry, you can eat the carrot.既然你饿了，你可以吃这胡萝卜。</p></blockquote></li><li><p>as</p><blockquote><p>As you were not here, we ate the carrot without you.因为你之前不在这儿，所以吃胡萝卜没带你一个。</p><p>这里的 as ：是表原因，别理解为”就像你之前不在这儿一样…”。</p></blockquote></li><li><p>because, since, as区别：</p><ul><li><p>从因果&#x2F;说语气的程度上， because &gt; since &gt; as.</p><ol><li><p>because引出的是实实在在的因果关系</p><blockquote><p>Because this video is excellent, you should give it a thumbs-up.因为这视频很棒，所以要点赞.</p></blockquote></li><li><p>since引见的是大家都已经知道的情况</p><blockquote><p>Since all my videos are excellent, you should give this video a thumbs-up.众所周知，英语兔只出精品，所以要点赞.</p></blockquote></li><li><p>As 引出的是显而易见的事实</p><blockquote><p>As I have thick skin, I’m begging you for a thumbs-up.显而易见，我脸皮很厚，所以求你点赞。</p></blockquote></li></ol></li><li><p>语序的区别 </p><p>because 引导的从句在主句前后都可以，而 since 和 as 引导的从句一般只能放在主句之前。 for 也可以表示一定的因果关系,比如 :</p><blockquote><p>You must really like me, for you have given all my videos a thumbs-up.你肯定很喜欢我英语兔，因为你给我所有的视频都点赞啦.</p></blockquote><p>注意：for 构成的不是原因状语从句。 for 在这里构成复合句而不是复杂句。前者是个推测，而后者补充了推测的原因，</p><ul><li><p>Because you like me, you have given all my videos a thumbs-up.因为你喜欢我，所以你给所有英语兔视频都点赞了.（原因:你喜欢我，结果:你给所有英语兔视频都点赞了。）</p></li><li><p>You must really like me, for you have given all my videos a thumbs-up.你一定喜欢我，因为你给所有的英语兔视频都点赞了.（推测的结果:你喜欢我。这么推测的原因:你给所有的英语兔视频都点赞了。）</p></li></ul><p>不要以为 “for 可以直接替换 because 只不过语气弱一点而已。”</p></li></ul></li></ol><h3 id="8-目的副词从句"><a href="#8-目的副词从句" class="headerlink" title="8.目的副词从句"></a>8.目的副词从句</h3><p>目的副词从句：有一定的因果关系，只不过是使用”目的”的方式说出来的。因为要达到目的 A (从句)，所以做了 B (主句)。或者说之所以做 B (主句),是为了达到目的 A (从句)。</p><blockquote><ul><li>In order that I could finish the video in time, I pulled an all-nighter.为了及时完成视频,我熬夜不睡(肝视频).（为了及时完成视频目的，我熬夜不睡肝视频。）</li></ul><p>这句话基本等于：</p><ul><li>I pulled an all-nighter so that I could finish the video in time.我熬夜不睡(肝视频),为了及时完成视频.</li></ul><p>注意：so that 不可以放在句首。另外要注意目的副词从句中,一般使用情态助词can, could, may, might, should, would 等，因为这样能更好体现目的性。</p></blockquote><h3 id="9-结果副词从句"><a href="#9-结果副词从句" class="headerlink" title="9.结果副词从句"></a>9.结果副词从句</h3><ol><li><p>可由 so that 构成</p><blockquote><p>I ate a lot of carrots for lunch so that I wasn’t hungry at all in the afternoon.</p><p>so that 引导结果副词从句和引导目的副词从句区别：</p><p>The temperature was low so that the lake froze.气温很低，所以湖结冰了。(显然这样的句子只能用”结果”来解释。总不能说”气温很低，目的就是让湖面结冰”吧。)</p></blockquote></li><li><p>so 也是表示:”因此是；结果是”。</p><blockquote><p>I like this video, so I’ll give it a thumbs-up.</p><p>so与so that的区别：so 连接了两个并列句，从而构成了复合句。so that 引导的是副词从句，解释说明主句的情况，是主句动作产生的结果。</p></blockquote></li><li><p>“so…that…”：so后接形容词</p><blockquote><p>I ate so many carrots for lunch that I felt sick afterwards.我吃了那么多胡萝卜,导致(结果是)我之后感到不舒服.</p></blockquote></li><li><p>such… that … : such 后要接名词，而不是形容词。</p><blockquote><p>It was such a tasty carrot that I ate it all at once.这是个如此好吃的胡萝卜，以至于(结果)我一下子就吃完了.</p><p>一定要用: so… that… :</p><p>It was so tasty a carrot that I ate it all at once.(so 后面要接形容词，所以只能把 a carrot 放在形容词之后了。)</p></blockquote></li></ol><h1 id="Topic-12-冠词-video-12"><a href="#Topic-12-冠词-video-12" class="headerlink" title="Topic 12.冠词(video.12)"></a>Topic 12.冠词(video.12)</h1><p>分类：不定冠词，定冠词，零冠词。</p><h2 id="1-不定冠词-a-an"><a href="#1-不定冠词-a-an" class="headerlink" title="1.不定冠词(a&#x2F;an)"></a>1.不定冠词(a&#x2F;an)</h2><h3 id="1-发音"><a href="#1-发音" class="headerlink" title="1.发音"></a>1.发音</h3><p>a， an 的区别是不定冠词后接的<strong>音</strong>是元音还是辅音：</p><ul><li>a（用于辅音前）: a rabbit, a university</li><li>an（用于元音前）: an apple, an hour</li></ul><h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><ol><li><p>泛指用法（最重要）</p><ul><li><p>泛指某一个或一类人或物，泛指某一个人或物</p><blockquote><p>I saw a rabbit  → 翻译：我看见一只兔子。(不完全强调数量上的一只，而是泛指“某一只兔子”，指兔子这一物种中的某一只。还可翻译成：我看到兔子了。)</p><p>第一次提到某个事物，从某种意义说算是泛指：</p><p>我今天看到只兔子，这兔子跑得很快。(前半句第一次提到某只兔子，可以说是泛指)</p><p>那相应的就要用不定冠词 ：I saw a rabbit.</p></blockquote></li><li><p>泛指某一类人或物</p><blockquote><p>A rabbit is smarter than a wolf.</p><p>a rabbit 和 a wolf 是泛指兔子和狼这两类动物。有歧义：也可理解为某一只兔子比某一只狼聪明。</p></blockquote></li></ul></li><li><p>表示数字“1”</p><blockquote><p>I gave you a hundred carrots.我给了你 100 根胡萝卜.</p><p>相当于 :</p><p>I gave you one hundred carrots.</p></blockquote></li><li><p>表示“每”</p><blockquote><p>I eat ten carrots a day.我每天吃 10 根胡萝卜.</p><p>相当于：</p><p>I eat 10 carrots every day.</p></blockquote></li><li><p>“主谓一致”</p><p>在主谓一致原则提到，不定冠词还能影响主语的单复数，如：</p><blockquote><p>a teacher and video creator.一位老师兼视频创作者。</p><p>a teacher and a video creator.一位老师和一位视频创作者。</p><p>前者指的是一个人，a 泛指兼职老师和视频创作的一个人;后者是指两个人,a 在这里泛指一个以老师为职业的人和一个以视频创作为职业的人。</p></blockquote></li><li><p>固定表达</p><blockquote><p>have a good time 玩得开心</p><p>as a result 因此;结果</p><p>in a hurry 匆忙地</p><p>all of a sudden 突然</p></blockquote></li></ol><h2 id="2-定冠词-the"><a href="#2-定冠词-the" class="headerlink" title="2.定冠词(the)"></a>2.定冠词(the)</h2><h3 id="1-发音-1"><a href="#1-发音-1" class="headerlink" title="1.发音"></a>1.发音</h3><blockquote><p>有两种发音：&#x2F;<strong>ðə</strong>&#x2F;和 &#x2F;<strong>ði:</strong>&#x2F; </p><p>在辅音（音素）前读成 &#x2F;<strong>ðə</strong>&#x2F; ，在元音（音素）前读 &#x2F;<strong>ði:</strong>&#x2F; 。</p></blockquote><h3 id="2-用法-1"><a href="#2-用法-1" class="headerlink" title="2.用法"></a>2.用法</h3><ol><li><p>特指(主要功能)</p><p>表示某个或某些特定的人或物，说话者和听话者都知道在讨论的东西。</p><ul><li><p>再次提到的人或物</p><p>再次提及某人某物，即双方都清楚说的是谁或者什么</p><blockquote><p>I saw a rebbit.The rabbit ran fast.我今天看到只兔子。这兔子跑得很快。（a rabbit 是泛指某只兔子，具体不知是哪只; the rabbit 是特指上句刚说的那只我看到的兔子。）</p><p>Please give me a carrot.请给我胡萝卜.（泛指某根胡萝卜，假如有很多根胡萝卜，想吃一根。）</p><p>Please give me the carrot.（特指对话双方都知道的那根胡萝卜，是一根特指的胡萝卜。）</p></blockquote></li><li><p>用在序数词和形容词的最高级前</p><p>序数词和最高级限定了范围，所以也是特指。</p><blockquote><p>the first rabbit 第一只兔子</p><p>the biggest carrot biggest （特指没有其他可能）</p></blockquote></li><li><p>独一无二的名字前</p><blockquote><p>太阳系中，太阳、地球、月亮都是独一无二的事物</p><p>the sun， the moon， the earth</p><p>the great wall 长城</p></blockquote></li></ul></li><li><p>泛指</p><p>泛指稍稍少见，比如西洋古典乐器：</p><blockquote><p>I like playing the piano.我喜欢弹钢琴(弹钢琴这个行为)</p><p>a piano （单纯说在弹一架钢琴）</p><p>play the guitar 弹吉他</p><p>play the violin 拉小提琴</p><p>play the flute 吹笛子。</p><p>国内乐器：</p><p>play erhu</p><p>The computer has changed our way of life.计算机改变了我们的生活(建议使用零冠词)</p></blockquote></li><li><p>在形容词前</p><p>用在某些形容词前表示一类人</p><blockquote><p>the rich 富人， the poor 穷人。把形容词转成了名词。</p><p>The rich should help the poor.富人应该帮助穷人</p></blockquote></li><li><p>固定表达</p><blockquote><p>all the time 一直;总是</p><p>by the way 顺便</p><p>out of the question 不可能;没门</p></blockquote></li></ol><h2 id="3-零冠词"><a href="#3-零冠词" class="headerlink" title="3.零冠词"></a>3.零冠词</h2><blockquote><p>零冠词是指：名词前不用冠词的情况，它的主要作用是泛指。</p></blockquote><ol><li><p>复数泛指</p><blockquote><p>A rabbit is smart. (不定冠词泛指，但容易误解)</p><p>Rabbits are smart.兔子聪明.(零冠词复数泛指, 泛指兔子这一类动物很聪明。)</p><p>The computer has changed our way of life. (定冠词泛指，容易误解)</p><p>Computers have changed our way of life. （零冠词泛指）</p><p>不可数名词没有复数的泛指:</p><p>Water is important.水是重要的</p><p>We breathe air.我们呼吸空气</p></blockquote></li><li><p>泛指概念</p><p>指脑中形成的观念，是一种抽象意义的表达。</p><blockquote><p>Summer is hot. Winter is cold.夏天热，冬天冷。（不是泛指某一个夏天或冬天，而应该理解为夏季，冬季表示季节这一概念。）</p><p>Summers are hot.(也可以)</p><p>I want to play football.(泛指足球运动这一抽象概念，而不是某支具体的足球或足球这一类运动器具。)</p><p>I like geography。我喜欢地理.(泛指地理学科这一概念)</p><p>季节、星期、月份、节假日等</p><ul><li><p>in spring 在春天</p></li><li><p>in August 在八月</p></li><li><p>on Monday 在星期一</p></li><li><p>on national day 在国庆节</p></li></ul></blockquote></li><li><p>专有名词</p><p>专有名词前一般都是零冠词</p><blockquote><p>Papa Rabbit 兔老爹(要说 the Papa Rabbit 多此一举)</p></blockquote></li><li><p>固定表达</p><blockquote><p>from time to time 不时的</p><p>face to face 面对面的</p><p>out of question 毫无疑问</p><p>注:</p><p>out of the question 不可能；没门(表否定，去掉 the 变成零冠词意义相反)</p></blockquote></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;062.png?raw&#x3D;true)</p><h1 id="Topic-13-介词-video-13"><a href="#Topic-13-介词-video-13" class="headerlink" title="Topic 13.介词(video.13)"></a>Topic 13.介词(video.13)</h1><h2 id="1-介词原理"><a href="#1-介词原理" class="headerlink" title="1.介词原理"></a>1.介词原理</h2><p>英语介词 preposition： 就是放置在前面的词, 。</p><p>介词 preposition ：就是通常放置在名词、代词等之前，即<strong>前置词</strong>。用来给他们增添附加信息的词，如时间信息、空间信息、方式信息、逻辑信息、原因、目的、对象等。</p><ol><li><p>时间信息</p><blockquote><p>before 8 o’clock 在8点前</p><p>after 8 o’clock 在8点后</p><p>at 8 o’clock 在8点时</p></blockquote></li><li><p>空间信息</p><blockquote><p>in the room 在屋子里</p><p>on the roof 在屋顶上</p><p>under the table 在桌子下</p></blockquote></li><li><p>逻辑信息</p><blockquote><p>for health(reasons) 为了健康</p><p>except (for) carrots 除了胡萝卜</p></blockquote></li></ol><h2 id="2-介词的构成形式"><a href="#2-介词的构成形式" class="headerlink" title="2.介词的构成形式"></a>2.介词的构成形式</h2><ol><li><p>简单介词</p><p>简单介词:常见的介词是单个词</p><blockquote><p>in 在…里…</p><p>to 朝…</p><p>with 和…</p></blockquote></li><li><p>短语介词</p><p>介词和其他类的词共同构成短语介词，即一个短语充当介词的功能。</p><blockquote><p>by way of 通过…的方式</p><p>at the end of 在…的最后</p><p>along with 和…一起</p><p>because of 因为…</p><p>previous to …之前</p></blockquote><p><strong>注意</strong>:<strong>短语介词</strong>和<strong>介词短语</strong>是不同的概念。短语介词相当于介词，不能单独表示完整意思，而介词短语已经是完整的意思了，往往相当于副词。</p></li><li><p>合成介词</p><p>介词互相合成</p><blockquote><p>into 到…之内</p><p>onto 到…之上</p><p>within 在…之内</p><p>notwithstanding 尽管…</p></blockquote></li><li><p>分词介词</p><p>是由动词的分词充当的</p><blockquote><p>including 包括…</p><p>regarding 关于…;至于…</p><p>considering 鉴于…;考虑到…</p><p>given 考虑到…;如果…</p></blockquote><p>介词多样，是因为介词本质上不过是前置词和后面的信息构成关系而已。所以既然以上这些结构形式都能满足这一点，所以都可以充当介词。</p></li></ol><h2 id="3-介词学习方法"><a href="#3-介词学习方法" class="headerlink" title="3.介词学习方法"></a>3.介词学习方法</h2><ol><li><p>介词学习误区</p><p>介词使用时，没有办法找到完全对应的介词翻译。如 :in， on， with …因为常用出现频率很高，所以引申义也很多，导致无法用里面、上面、字面上对应。</p><p>学习英语介词最忌讳的最需要避免的就是拼命去找个中文介词对号入座，因为那往往是不可能的。</p><blockquote><p>in two days 两天后</p><p>on the left 在左边</p><p>angry with me 生我的气</p></blockquote></li><li><p>介词学习的诀窍</p><ul><li><p>介词多含义</p><p>同一介词出现在不同的分类里，也就是可以和之后的内容构成不同类别的关系，从而表达差别很大，甚至表达毫不相干的含义。</p><ol><li><p>about在…外面，接着就引申出了以下一系列相关的含义。</p><ul><li><p>关于(外围;有涉及,非核心);</p><blockquote><p>I know something about the rabbit.我知道关于这个兔子的事儿.</p></blockquote></li><li><p>大约(从外大范围，也就是大致数一数)</p><blockquote><p>There are about 20 carrots.大约有 20 根胡萝卜.</p></blockquote></li><li><p>针对(从外向内地解决问题）</p><blockquote><p>Let’s do something about the problem.让我们做些事儿解决问题.</p></blockquote></li><li><p>某人某事有某种特性;(就像是在外面包了一层包装，有某种气质).</p><blockquote><p>There’s something dangerous about the wolf.狼有点危险的特质.(狼感觉有点危险.)</p></blockquote></li><li><p>到处(在外面 来来回回)</p><blockquote><p>Stop running about!别来来回回跑!</p></blockquote></li></ul></li><li><p>on 在…之上</p><blockquote><p>Dinner resolve on me 晚餐我付钱</p><p>The burden of paying for dinner is on me.为晚餐付钱的重任在我身上.</p></blockquote></li><li><p>beyond(在…之外):</p><blockquote><p>It’s beyond me. 我无法理解</p><p>It is beyond the things that I can understand.这在我能理解的事情的范围之外.</p></blockquote></li></ol></li><li><p>介词相互之间易混淆</p><p>在同一个类别里的介词有时候看起来很像，比如 in，on ，at 都可以表示时间、空间信息，从而弄混淆。</p><ol><li><p>从in，on， at 这三个介词的空间含义入手:</p><ul><li>in 一般表示在一堆东西中间或者说上下左右前后都能移动，说明是在一个大范围内；</li><li>on 一般表示在…之上，说明有一面确定了只能在这个平面上移动，自然范围小一点；</li><li>而 at 通常只能在很明确的一点上。那既然范围由大到小，咱们就很好理解。</li></ul><blockquote><p>at the corner; at the shop 因为角落，商店很明确不会到处移动; </p><p>in the city, in the country 因为在城市和国家里可以大范围移动。</p><p>the street 前到底是 at , on 还是 in? 这取决于要表达什么含义。</p><ul><li>如果要表达很明确的某处，比如两条街的交界(at)</li></ul><p> Right now I’m <strong>at</strong> Carrot Street and Apple Street.现在我在胡萝卜街和苹果街的交界处.</p><ul><li>如果要表达在街道的表面上(on)</li></ul><p> There is some trash <strong>on</strong> the street.街上有些垃圾.</p><ul><li>如果要表达在某条街道的范围内移动(in)</li></ul><p> I’m walking <strong>in</strong> (the area of) the street.我在大街行走.</p></blockquote></li><li><p>把空间概念引申到时间上</p><ul><li><p>一年很久所以 in a year 表示在大范围的一年内，这样的大范围也包括月份星期</p><blockquote><p>in a year，在一年内</p><p>in the month，在一个月内</p><p>in the week，在一个星期内</p></blockquote></li><li><p>如果把一天以上比作一个空间，那一天只是一个平面。</p><blockquote><p>on that day，在那一天</p><p>on Monday，在星期一</p><p>On April first，在4月1日</p></blockquote></li><li><p>而一天中的时刻就非常明确了，相当于一个点，所以是:</p><blockquote><p>at 8 o’clock，在8点钟</p><p>at that moment，在那一刻</p></blockquote></li></ul><p><strong>注意：</strong>要清楚表达的是一个范围还是具体一个点。如一个小时里有 60 分钟，那要把小时和分钟比较，即分钟是在小时的范围里。这里的 hour 显然不是一个点，所以是:</p><blockquote><p>There are 60 minutes in an hour.1小时里有60分钟.</p><p>There are 60 seconds in a minute.1分钟里有60秒.</p></blockquote><ul><li><p>为什么是in the morning？morning 比day 还小啊？</p><p>当使用 in the morning 这个短语时，通常是表达一个时间段的范围：</p><blockquote><p>There are many hours and minutes in the morning.</p><p>I eat carrots in the morning.我在早晨吃胡萝卜.(时间段,表达的意思是在早晨这个时间范围里吃胡萝卜)</p></blockquote></li><li><p>on the morning</p><p>表达的是一个相对明确的一个点，要说 on the morning </p><blockquote><p>I saw the wolf on the morning of April 1st.我在4月1日早晨看到了大灰狼.(这里要表达的意思是在 4 月 1 日早晨这个时间，和一天差不多的范围。既然是 on that day， 自然有 on that morning )</p></blockquote></li></ul></li></ol></li></ul></li></ol><h2 id="4-常见英语介词用法"><a href="#4-常见英语介词用法" class="headerlink" title="4.常见英语介词用法"></a>4.常见英语介词用法</h2><h3 id="1-表示空间的介词"><a href="#1-表示空间的介词" class="headerlink" title="1.表示空间的介词"></a>1.表示空间的介词</h3><ol><li><p>in 在…里面，表示在一个空间的内部。</p><blockquote><p>in the house 在房屋里</p><p>in the park 在公园里</p><p>in the country 在国内</p></blockquote></li><li><p>on 表示”在一个物体的表面上”（ 做空间介词有在某个面之上的含义）:</p><blockquote><p>on the table 在桌子上</p><p>on the floor 在地板上</p></blockquote></li><li><p>on the tree 和 in the tree 的区别。</p><ul><li><p>on 表示与物体有接触，是树本身所有的；</p><blockquote><p>There are some apples on the tree.树上结着一些苹果</p></blockquote></li><li><p>in 只是在树里，外来的事物进入树里。</p><blockquote><p>There are some birds in the tree.树上有些鸟</p></blockquote></li></ul></li><li><p>at 表示一个确定的具体的点:</p><blockquote><p>at the corner of the street在街道拐角</p><p>The bus stopped at the bus station.公交车在车站停下了.</p></blockquote></li><li><p>over表示”在…上方”，有可能接触，也可能不接触。（over 往往还特指正上方）</p><ul><li><p>如果表示物体与物体接触，一般表示覆盖全部遮住的意思。</p><blockquote><p>The mother put a blanket over the child.妈妈把毯子盖在孩子身上.</p></blockquote></li><li><p>如果不与物体接触的话，表示”在..的正上方”</p><blockquote><p>the bridge over the river在河上的桥</p><p>the lamp over the table在桌上方的灯</p></blockquote></li><li><p>over, 是表示一个动态的”越过上空”，比如:</p><blockquote><p>The plane flew over the mountain.飞机飞越过高山.</p><p>The rabbit climbed over the fence.兔子爬过栅栏</p></blockquote></li></ul></li><li><p>above表示高于某个平面之上（一般只要高出就行）</p><blockquote><p>the sky above us在我们上方的天空</p></blockquote></li><li><p>on, over, above 表示”在…上面”的含义区别:</p><ul><li><p>on 表示物体与物体接触</p><blockquote><p>Here is a carrot on the table.桌上有一根胡萝卜.</p></blockquote></li><li><p>over 除了更加正上方，还可以描述动态</p><blockquote><p>The rabbit jumped over the table.兔子越过桌子.</p></blockquote></li><li><p>above 在表示(不与物体接触的)上方时</p></li></ul></li><li><p>under 表示在…下面(与 over 相对):</p><blockquote><p>There is a ball under the desk.书桌下有个球.</p></blockquote></li><li><p>below 表示在…下方(与 above 相对))</p><blockquote><p>The rabbit dived below the surface of the water.兔子潜入了水下.</p></blockquote></li><li><p>under 和 below区别</p><ul><li>under表示物体之间可以接触，也可以留有一定空间,指在某物的正下方，含垂直在下方的意思。</li><li>below 表示低于某个平面，可以是正下方，也可以不是。</li></ul></li><li><p>near 在…附近;在…周边</p><blockquote><p>near the hospital 在医院附近</p></blockquote></li><li><p>by, beside 做空间介词时，两者都表示在…旁边，通常两者可以互换</p><blockquote><p>There is a hotel by&#x2F;beside the river.在河边有个旅馆.</p></blockquote></li><li><p>next to 靠近;紧挨着:</p><blockquote><p>The building next to the school.紧挨着学校的建筑。</p></blockquote></li><li><p>near, by, beside, next to这几个介词都可以表示”在…旁边”。区别：</p><ul><li><p><strong>near</strong> 表示附近的往往有些距离:</p><blockquote><p>There is a school near here.这附近有个学校</p></blockquote></li><li><p>by, beside 和 next to 都表示比较接近，往往可互换 :</p><blockquote><p>The rabbit sat by&#x2F;beside&#x2F;next to the wolf.兔子坐在狼旁边.</p></blockquote></li><li><p><strong>by</strong> 除了空间，还有其他很多词义</p></li><li><p><strong>beside</strong> 强调的是在…边上，可以引申为”非空间含义”的“和…比较”,</p><blockquote><p>My carrot looks bigger beside yours.我的胡萝卜和你的一起看着更大.</p></blockquote></li><li><p><strong>next to</strong> 强调的是”下一个,紧接着”的”相邻”。</p></li></ul></li><li><p>across 一般指从表面穿过，与介词 on 那个表面相似，是在物体表面上发生的行为</p><blockquote><p>go across the street 穿过马路</p><p>swim across the river 游过河</p></blockquote></li><li><p>through 一般指从内部穿过，与介词 in 那个内部相似，是从物体内部发生的动作</p><blockquote><p>go through the tunnel 穿过隧道</p><p>walk through the forest 穿过森林</p><p>look through the window 透过窗户看</p></blockquote></li><li><p>past 表示经过路过</p><blockquote><p>The rabbit walk past the wolf without saying any words.兔子从狼身边经过，没说一句话</p></blockquote></li><li><p>in front of 表示在…前方</p><blockquote><p>The rabbit is standing in front of the wolf.兔子站在狼前面.</p></blockquote></li><li><p>before 表在…之前，但 before 不太用作空间介词，除非是表达”在众人或者观众前”</p><blockquote><p>She played the violin before the crowd.他在众人前拉小提琴.</p></blockquote></li><li><p>behind，在…之后</p><blockquote><p>The wolf is standing behind the rabbit.狼站在兔子后面</p></blockquote></li><li><p>between 侧重在两者之间，有时会与 and 一起用构成:between … and …. 的结构</p><blockquote><p>The carrot is between the rabbit and the wolf.胡萝卜在兔子和狼之间</p></blockquote><p>注：但可用于多者之间，在三者及以上之间分别两两比较时也可以用 between</p><blockquote><p>You shouldn’t eat between meals.你不应该在正餐之间吃东西</p></blockquote></li><li><p>among 一般指在三者及更多人和物之间:</p><blockquote><p>The rabbit is standing among the carrots.兔子站在胡萝卜之间</p></blockquote></li><li><p>round, around 表示”围绕;环绕”两者作介词，意思相近，可互换。</p><blockquote><p>trees round&#x2F; around the field.环绕田地四周的树。</p><p>around the world全世界</p></blockquote></li><li><p>along 沿着;顺着</p><blockquote><p>walk along this road.沿着这条路一直走</p></blockquote></li><li><p>to 向;朝</p><blockquote><p>go to school 去上学</p></blockquote></li><li><p>toward , towards 朝着…的方向,跟 to 在词义上意思相近</p><blockquote><p>walk toward home 朝家走</p></blockquote></li><li><p>onto 到…上面</p><blockquote><p>The rabbit jumped onto the table.兔子跳到桌子上</p></blockquote></li><li><p>into到…里面;到…内部</p><blockquote><p>walk into the house 走进房子</p></blockquote></li><li><p>out of 从里向外,从里面出来</p><blockquote><p>get out of the car 从车里出来</p></blockquote></li><li><p>opposite在…对面</p><blockquote><p>Our school is opposite my house.我们的学校在我家对面</p></blockquote></li><li><p>against 与…相反;倚，靠</p><blockquote><p>Were rolling against the current.我们逆水行舟.</p><p>The rabbit was leaning against the tree.兔子正倚着一棵树。</p></blockquote></li></ol><p>以下是除了做副词，也可以做介词:</p><ol><li><p>up 沿…向上,比如</p><blockquote><p>up the hill 上山</p><p>up the river 沿河流逆流而上</p></blockquote></li><li><p>down 沿…向下</p><blockquote><p>walk down the road 沿着这条路走下去</p><p>roll down the hill 从山上滚下去</p></blockquote></li><li><p>off 离…有一些距离</p><blockquote><p>New Zealand lies off the eastern coast of Australia.新西兰离澳大利亚东海岸有些距离。</p></blockquote></li></ol><h3 id="2-表示时间的介词"><a href="#2-表示时间的介词" class="headerlink" title="2.表示时间的介词"></a>2.表示时间的介词</h3><p> in, on, at 表示的时间范围是由大到小的(空间也一样)。</p><ol><li><p>in 本意是在…里面，在范围相对较大的时间内</p><blockquote><p>in 2030 在 2030 年</p><p>in winter 在冬季</p><p>in December 在 12 月</p></blockquote></li><li><p>on的本意是在…之上，范围相对就小一些。一般表示在具体的某一天。</p><blockquote><p>on Monday 在星期一</p><p>on christmas day 在圣诞节</p></blockquote></li><li><p>at 因为空间范围很小，表示非常确定的时间点。一般说几点钟用 at </p><blockquote><p>at 6 o’clock 在 6 点</p><p>at noon 在中午</p><p>at sunset 在太阳落山之时</p><p>at dawn 在黎明时分</p><p>at (the age of) 6 在6 岁时</p></blockquote></li><li><p>during 本意是持续表示持续一段时间。</p><blockquote><p>during the past 2 days在过去的两天里</p><p>during the past 2 weeks在过去的两周里</p><p>during the past 2 years在过去的两年里</p></blockquote></li><li><p>for“因为…;因…持续”。作“非时间介词”时一般和原因有关。</p><blockquote><p>I’ve been learning English for 2 years.我持续学习英语两年时间</p></blockquote></li><li><p>since 自从.</p><blockquote><p>since last week自从上周以来</p></blockquote></li><li><p>before 一般就是用于表示时间(以及次序)的”在…之前”:</p><blockquote><p>before Monday 星期一之前</p><p>before 2020 在 2020 年之前</p><p>注意 before 很少用于空间的”在…之前”.</p></blockquote></li><li><p>after 与 before 相对一般表示时间（以及次序）上的”在…之后”。</p><blockquote><p>after two years 两年之后</p></blockquote></li><li><p>from … to … 从…时候到…时候.</p><blockquote><p>from 9:00 to 10:00从九点到十点</p></blockquote></li><li><p>by 的本意表示”在…附近&#x2F;旁边”,引申为时间上的”不超过…的边”，即”不迟于…&#x2F;在…之前” :</p><blockquote><p>by 2 o’clock 在两点之前</p><p>by tomorrow 在明天之前</p></blockquote></li><li><p>by 和 before 的区别：</p></li></ol><pre><code>在表示时间点之前时， by 和 before 的含义近似，但是 before 是泛指某个时间点之前，而 by 相当于限定了一条时间线，更侧重于&quot;不超过,不迟于&quot;这条时间线。所以:&gt;Please finish your homework by 8 PM.请在晚上8点前完成你的作业(更强调8点是截止时间不能再迟了)&gt;&gt;Please finish your homework before 8 PM.请在晚上8点前完成你的作业</code></pre><ol start="12"><li><p>until 直到…为止.</p><blockquote><p>until 8 o’clock 直到 8 点为止</p></blockquote></li></ol><h3 id="3-表示方式的介词"><a href="#3-表示方式的介词" class="headerlink" title="3.表示方式的介词"></a>3.表示方式的介词</h3><ol><li><p>in 有”…方式”的含义</p><blockquote><p>Let’s talk in English让我们用英语对话</p><p>in English 说英语</p></blockquote></li><li><p>through 可以表示通过…方式</p><blockquote><p>we succeed through hard work.我们通过努力工作而成功。</p></blockquote></li><li><p>by 通过…</p><blockquote><p>We learn english by watching videos.我们通过看视频学英语.</p><p>I go to work by car.我开车去上班.</p></blockquote></li><li><p>with “和…一起”(一般加具体的有形工具)</p><blockquote><p>We write with pens.我们用笔写字</p></blockquote></li><li><p>on “在…上面” (后接电子通讯设备较多)</p><blockquote><p>We talked on the phone.我们通过电话进行了交谈.</p></blockquote></li></ol><h3 id="4-表示原因的介词"><a href="#4-表示原因的介词" class="headerlink" title="4.表示原因的介词"></a>4.表示原因的介词</h3><ol><li><p>for “因为…;由于…”:</p><blockquote><p>This rabbit is famous for being able to speak.这只兔子因会说话出名.</p></blockquote></li><li><p>with 本意是:”和…一起”,引申为”…是和…分不开的原因”</p><blockquote><p>The rabbit is shaking with cold.兔子冷得发抖.(描述因为太冷了，所以发抖.)</p></blockquote></li><li><p>because of 因为。 because 作连词连接从句， because of 后接名词：</p><blockquote><p>The rabbit didn’t go out because of the rain.因为下雨兔子没出去。</p></blockquote></li><li><p>介词的所谓固定搭配</p><blockquote><p>due to 由于;因为</p><p>owing to 由于;因为</p><p>on account of 由于;因为</p><p>The rabbit didn’t go out due to &#x2F; owing to &#x2F; on account of the rain.因为下雨兔子没出去.</p></blockquote></li></ol><h3 id="5-表示关于的介词"><a href="#5-表示关于的介词" class="headerlink" title="5.表示关于的介词"></a>5.表示关于的介词</h3><ol><li><p>about “关于”，”在…外面”</p><blockquote><p>Could you tell me Something about your school?你能给我讲一些关于你学校的事情吗？</p></blockquote></li><li><p>of 本意”离开”,”离开了的”，引申为”此外的;附加的”，即“相关”的信息。</p><blockquote><p>He thought of something important.他想起了一些重要的事情.</p><p>think about 是”想起了关于…的一些事情”</p><p>think of 仅仅是”想起了” </p></blockquote></li><li><p>on 本意”在…上面”，引申为”关于”</p><blockquote><p>would you like some advice on learning English?你想要些关于学习英语的建议吗？</p></blockquote></li></ol><h3 id="6-表示数值的介词"><a href="#6-表示数值的介词" class="headerlink" title="6.表示数值的介词"></a>6.表示数值的介词</h3><ol><li><p>at 可以表示价格，比率等数值点</p><blockquote><p>at a high price 在一个高的价格(点)</p><p>at a fast rate 一个很快的速率</p></blockquote></li><li><p>by 之后可接某种度量标准</p><blockquote><p>They get paid by the hour.他们按小时拿报酬(可以引申为相关某种属性的意思，进一步引申为使用某种标准，所以按小时计算就可以理解为与每小时相关,按小时的属性。)</p></blockquote></li><li><p>for 可以表示”以…的价钱”</p><blockquote><p>I bought these books for one 100 yuan.我买这些书花了 100 元。</p></blockquote></li></ol><h3 id="7-表示状态的介词"><a href="#7-表示状态的介词" class="headerlink" title="7.表示状态的介词"></a>7.表示状态的介词</h3><ol><li><p>in 表示在某个状态中</p><blockquote><p>in progress 在进行状态中</p><p>in a dilemma 处于进退两难的境地</p></blockquote></li><li><p>on 空间本意为”在…之上”，可以引申理解为”受到之下…的支持(的状态)”</p><blockquote><p>on a diet 在节食(就说在节食支持的状态)</p><p>on drugs 吃药(在药物支持的状态)</p></blockquote></li><li><p>at 本意是”在某个地点”,可以引申为”在某个状态”,</p><blockquote><p>at work 在工作</p><p>at dinner 在吃晚饭</p></blockquote></li><li><p>under 本意表示”在…下面”,这里引申为”在一个框架前提之下”</p><blockquote><p>under construction 在施工中</p><p>under discussion 在讨论中</p></blockquote></li></ol><h3 id="8-表示排除的介词"><a href="#8-表示排除的介词" class="headerlink" title="8.表示排除的介词"></a>8.表示排除的介词</h3><ol><li><p>besides表示”除了…还”</p><blockquote><p>I like many things besides carrots.除了胡萝卜，我还喜欢很多东西。</p></blockquote></li><li><p>except 表示”除了…”，也是最直接的排除的含义。</p><blockquote><p>Everyone went to the party except the rabbit.大家都去了聚会，除了兔子。</p></blockquote></li><li><p>except for 表”除了…”,用法和 except 相似,但是往往用来对之前的内容进行反驳</p><blockquote><p>The party is great except for the loud music.聚会很棒，除了嘈杂的音乐</p></blockquote></li><li><p>except 和 except for区别：</p><p>except 通常表示从整体中剔除出去。所以之前那句表示兔子没去参加聚会。</p><p>except for 这里是要给出与 the party is great 相反的原因,相当于”美中不足的是…”</p></li></ol><h2 id="5-介词短语"><a href="#5-介词短语" class="headerlink" title="5.介词短语"></a>5.介词短语</h2><ol><li><p>介词短语：介词和介词宾语的组合。</p><blockquote><p>名词 in the room</p><p>代词 in it</p><p>数词 the age of 20</p><p>形容词 in general</p><p>副词 from here</p><p>in the room 在屋子里</p><p>on the roof 在屋顶上</p><p>under the table 在桌子下</p></blockquote></li><li><p>介词短语和短语介词区别：</p><p>短语介词相当于介词，意思不完整</p><p>介词短语意思已经完整，可以充当各种句子成分</p><blockquote><p>主语：Between 10 and 11 is a good time for me.十点到 11 点间适合我.</p><p>主语补(语表语):The meeting is at 2 o’clock.会议在两点钟.</p><p>定语:This is the key to the house.这是房子的钥匙.</p><p>宾语补语:I found the carrot in good condition.我发现那个胡萝卜保存完好.</p><p>介词短语充当状语来修饰动词，描述动作的时间、地点、方式等:</p><p>The rabbit ate a carrot at noon.中午,兔子吃了一根胡萝卜.</p><p>The rabbit is eating a carrot in the kitchen.兔子正在厨房里吃一根胡萝卜.</p><p>The rabbit likes traveling by car.兔子喜欢乘车出游.</p><p>in tears 哭了</p></blockquote></li></ol><h2 id="6-介词固定搭配"><a href="#6-介词固定搭配" class="headerlink" title="6.介词固定搭配"></a>6.介词固定搭配</h2><ol><li><p>固定搭配：很多名词、动词、形容词都是约定俗成的和某些介词搭配使用。</p><blockquote><p>for example 比如</p><p>at ease 自在</p><p>in turn 依次</p><p>the need for something对…的需要</p><p>long for 渴望,不会说成:</p><p>ready for 为…准备,不会说</p></blockquote></li><li><p>“固定搭配”不是绝对的，具体的语境往往还会决定到底用哪个介词最合适。</p></li><li><p>“短语动词 “,phrasal verbs：当<strong>动词和介词</strong>搭配在一起，营造出看似完全无关的含义。</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;063.png?raw&#x3D;true)</p></li></ol><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><ol><li>介词，就是前置词，通过和之后的内容信息构成关系，来表达时间空间方式、逻辑的含义。</li><li>英语介词的构成多种多样，包括简单介词、短语介词、合成介词、分词介词等。</li><li>常用介词的常见含义。</li><li>介词能和其他词构成介词短语，一旦构成介词短语，就可以独立表达完整意义，可以作为不同的句子成分了。</li><li>而很多介词和其他词的所谓固定搭配，往往也是和介词引申义契合的。但是还是有一些介词短语需要作为新单词去记忆，尤其是所谓固定搭配的短语动词，数量众多，也非常常用。</li></ol><h1 id="Topic-14-名词-video-14"><a href="#Topic-14-名词-video-14" class="headerlink" title="Topic 14.名词(video.14)"></a>Topic 14.名词(video.14)</h1><blockquote><p>名词的分类</p><ol><li><p>普通名词：日常生活里经常见到的一种物体的类别</p></li><li><p>专有名词（首字母大写）：有一些事物世界上只有一个，如<strong>人名</strong>、地球、亚洲、中国银行、新年。</p></li></ol><p> Earth， Asia ，China， Bank of China， New Year</p></blockquote><h2 id="1-名词的概念"><a href="#1-名词的概念" class="headerlink" title="1.名词的概念"></a>1.名词的概念</h2><ol><li><p>普通名词</p><ul><li><p>普通名词可数：拼写末尾加个s（通常情况下）</p><ol><li><p>+s的情况</p><blockquote><p>一只兔子  one rabbit</p><p>两只兔子  two rabbits.</p><p>rabbit是单数形式</p><p>rabbits 是复数形式</p></blockquote></li><li><p>不加s</p><blockquote><p>box 的复数 boxes</p><p>man 的复数 men</p><p>child 的复数 children</p></blockquote></li><li><p>指多个体的集合</p><blockquote><p>team 队伍</p><p>audience 听众</p><p>fruit 水果集合。</p><p>名词是多个体一起的统称，到底是单数还是复数，要看具体情况。</p><p>team:</p><p>This is a large team.这是一个大团队.(指一个队伍,单数)</p><p>The team are working together.团队成员在互相合作(指队伍中的所有成员,复数)</p><p>基本只有复数意义：</p><p>police 警察的集合。 </p><p>people 一群人的集合。</p><p>只有单数意义</p><p>baggage 携带行李的总集合。 </p><p>furniture 某个地点所有家具的总集合。</p></blockquote></li></ol></li><li><p>普通名词不可数：抽象名词，也有一些实体名词也不可数，或者说是数不清。</p><blockquote><p>peace 和平 </p><p>honesty 诚实 </p><p>water 水</p><p>air 空气</p><p>beer 啤酒</p><p>milk 牛奶</p><p>wood 木材</p><p>paper 纸</p></blockquote></li></ul></li><li><p>专有名词：</p><p>通常说来，专有名词的独一无二的特性导致了它们的不可数。但是有的时候，可数和不可数也是相对的。</p><ul><li><p>专有名词可数</p><blockquote><p>Theres Michael downstairs looking for you.楼下有个叫 Michael 的人在找你。（世上有很多个叫 Michael 的人，楼下的那个Michael 只是其中之一。）</p><p>Which Michael are you talking about? Are you talking about the Michael whom we met last week?你是说哪个 Michael? 你是说上周我们见到的那个 Michael 吗？</p><p>There are three Michaels in my class.我班上有三个叫 Michael 的同学。(专有名词变得可数)</p></blockquote></li><li><p>专有名词不可数</p></li></ul></li></ol><h2 id="2-名词所有格"><a href="#2-名词所有格" class="headerlink" title="2.名词所有格"></a>2.名词所有格</h2><blockquote><ol><li><p>语法上的格，是反映某个词在句中的位置:</p><ul><li>主格就是该词在句中充当主语。</li></ul></li><li><p>名词的主格宾格都是名词本身的形式。</p><blockquote><p>Rabbits love carrots.兔子喜爱胡萝卜.(主格 rabbits 和宾格 carrots 只是名词复数)</p></blockquote></li><li><p>所有格:通常为了表示所有所属关系的。</p></li></ol></blockquote><ol><li><p>‘S所有格: “…的…”</p><blockquote><p>the rabbit’s carrot兔子的胡萝卜(‘s表明后接的 carrot 的所有权,只起限定修饰的作用。)</p><p>the team’s success队伍的成功</p><p>the paper’s quality纸张的质量</p><p>the piece’s influence和平的影响</p><p>Michael’s computerMichael 的电脑</p><p>Tom and Jerry’s room (Tom 和 Jerry 共有的房间)</p><p>Tom’s and Jerry’s rooms(Tom 和 Jerry 各自的房间,注意房间是分属不同的两人的，所以需要变复数。)</p></blockquote><ul><li><p>所有格用在有生命的人和动物之后表示所属权</p></li><li><p>用在非人物后表示某种性质。通过前面名词的所有格来限定修饰后接的名词。</p><blockquote><p>today’s news 今天的新闻</p><p>the moon’s brightness 月亮的亮度</p><p>a meter’s length 一米的长度</p><p>China’s reputation 中国的声誉</p></blockquote></li></ul></li><li><p>of所有格</p><p>没有生命的名词来做限定，用 of 构成所有格，是用来描述所修饰名词的性质特征.</p><blockquote><p>the quality of the paper 纸张的力量</p><p>the influence of the peace 和平的影响</p><p>the news of today 今天的新闻</p><p>the brightness of the moon 月亮的亮度</p><p>the length of a meter 一米的长度</p><p>the reputation of China 中国的声誉</p></blockquote></li><li><p>双重所有格</p><blockquote><p>I am Michael’s friend. 我是 Michael 的朋友</p><p>I am one of Michael’s friends.我是 Michael 众多朋友中的一员(of 后面的 Michael’s 来限定修饰 of 之前的 friend)</p><p>a photo of Michael’s Michael拥有的照片的一张</p><p>a photo of Michael Michael出镜的照片之一</p></blockquote></li></ol><h2 id="3-总结-2"><a href="#3-总结-2" class="headerlink" title="3.总结"></a>3.总结</h2><ol><li>英语名词:分为普通名词和专有名词。</li><li>普通名词:分为可数名词和不可数名词，专有名词只在某些语境下才可数。</li><li>普通名词的可数名词又可细分为个体名词和集合名词。不可数名词可再分为物质名词和抽象名词。</li><li>名词所有格有三类：’s，…of…，双重所有格。</li></ol><h1 id="Topic-15-代词-video-15"><a href="#Topic-15-代词-video-15" class="headerlink" title="Topic 15.代词(video.15)"></a>Topic 15.代词(video.15)</h1><blockquote><p>代词：人称代词、物主代词、反身代词、强调代词、相互代词、指示代词、不定代词、疑问代词、连接代词、关系代词。</p><p>代词pronoun 开头的， pro 在这里是替代的意思， noun 是名词,所以代词的原始含义就是替代名词的词.</p></blockquote><table><thead><tr><th align="center">人称</th><th align="center">主格</th><th align="center">宾格</th><th align="center">形容词性</th><th align="center">名词性</th><th align="center">反身</th></tr></thead><tbody><tr><td align="center">我</td><td align="center">I</td><td align="center">me</td><td align="center">my</td><td align="center">mine</td><td align="center">myself</td></tr><tr><td align="center">我们</td><td align="center">we</td><td align="center">us</td><td align="center">our</td><td align="center">ours</td><td align="center">ourselves</td></tr><tr><td align="center">你</td><td align="center">you</td><td align="center">you</td><td align="center">your</td><td align="center">yours</td><td align="center">yourself</td></tr><tr><td align="center">你们</td><td align="center">you</td><td align="center">you</td><td align="center">your</td><td align="center">yours</td><td align="center">yourselves</td></tr><tr><td align="center">他</td><td align="center">he</td><td align="center">him</td><td align="center">his</td><td align="center">his</td><td align="center">himself</td></tr><tr><td align="center">他们</td><td align="center">they</td><td align="center">them</td><td align="center">their</td><td align="center">theirs</td><td align="center">themselves</td></tr><tr><td align="center">她</td><td align="center">she</td><td align="center">her</td><td align="center">her</td><td align="center">hers</td><td align="center">herself</td></tr><tr><td align="center">她们</td><td align="center">they</td><td align="center">them</td><td align="center">their</td><td align="center">theirs</td><td align="center">themselves</td></tr><tr><td align="center">它</td><td align="center">it</td><td align="center">it</td><td align="center">its</td><td align="center">its</td><td align="center">itself</td></tr><tr><td align="center">它们</td><td align="center">they</td><td align="center">them</td><td align="center">their</td><td align="center">theirs</td><td align="center">themselves</td></tr></tbody></table><table><thead><tr><th align="center">意义</th><th align="center">指示代词</th></tr></thead><tbody><tr><td align="center">这</td><td align="center">this</td></tr><tr><td align="center">这些</td><td align="center">these</td></tr><tr><td align="center">那</td><td align="center">that</td></tr><tr><td align="center">那些</td><td align="center">those</td></tr></tbody></table><ol><li><p>人称代词</p><ul><li><p>人称代词的介绍</p><blockquote><p>我，我们，你，你们，他，他们，她，她们，它，它们</p><p>I，we，you，you，he，they，she，they，it，they。(you 语境不明时不能确定单复数，而 they 在语境不明时也不知道性别)</p></blockquote></li><li><p>人称代词的”格”</p><p>人称代词作主语和宾语要区分开,称为主格和宾格.</p></li><li><p>主格，宾格的常见疑问</p><p>作主语或主格是 “you and I”</p><blockquote><p>You and I saw him.你和我看见了他.</p></blockquote><p>作宾语或宾格是:”you and me”</p><blockquote><p>He saw you and me.他看见了你和我.</p></blockquote></li></ul></li><li><p>物主代词</p><p>物主代词:表达”所属关系”</p><blockquote><p>It is my carrot.The carrot is mine. ·  它是我的胡萝卜，这胡萝卜是我的.</p></blockquote><ol><li>形容词性物主代词</li><li>名词性物主代词</li></ol></li><li><p>反身代词</p><p>反身代词:用来称呼自己。</p><blockquote><p>I saw myself.我看见了我自己.</p></blockquote></li><li><p>强调代词</p><p>强调代词:样子跟上面的反身代词一样，但却有区别.</p><blockquote><p>The rabbit washed himself.兔子把自己洗白白.(himself是反身代词用法,做 wash 的宾语)</p><p>The rabbit washed the carrots himself.兔子自己洗了胡萝卜.( himself 是强调代词，强调是兔子自己洗的胡萝卜，在句中做状语)</p></blockquote></li><li><p>相互代词</p><ul><li>each other 表两者之间</li><li>one another表三者之间&#x2F;三者以上之间</li></ul></li><li><p>指示代词</p><ul><li><p>指示代词:如”这，这些，那，那些”来指示某个人或物的词也是代词。”这，这些”通常指代离说话人较近的人或物，而”那，那些”那是指代离说话人较远的人或物。</p><blockquote><p>This is a rabbit.这是一只兔子.</p><p>These are carrots.这些是胡萝卜.</p><p>That is a wolf.那是一只狼.</p><p>Those are apples.那些是苹果.</p></blockquote></li><li><p>this， that， these， those 限定范围，后面接名词</p><blockquote><p>this rabbit 这只兔子</p><p>that rabbit 那只兔子</p><p>these rabbits 这些兔子</p><p>those rabbits 那些兔子</p></blockquote></li></ul></li><li><p>不定代词:不确定的代表名词多少的词</p><ul><li><p>many;much</p><p>many 用来代替或修饰可数名词的复数。 much 用来代替或修饰不可数名词。</p><blockquote><p>many rabbits许多兔子</p><p>much water许多水</p></blockquote></li><li><p>a few,few;a little,little</p><p>a few,few 后接可数名词复数， a little,little 后接不可数名词。a few, a little 表示肯定的意义，意为”一些”。 few, little 表示否定的意义，意为”几乎没有”。</p><blockquote><p>a few carrots 一些胡萝卜</p><p>few carrots 很少胡萝卜</p><p>a little water 一些水</p><p>little water 很少水</p></blockquote></li><li><p>some;any</p><ol><li><p>some 一般用在肯定句中, any 一般用在否定句和疑问句中。</p><blockquote><p>The rabbit needs some carrots.兔子需要一些胡萝卜.</p><p>Does the rabbit need any carrots?兔子需要一些胡萝卜吗？</p><p>The rabbit doesn’t need any carrots.兔子不需要任何胡萝卜.</p></blockquote></li><li><p>也有例外，如果需要得到对方正面肯定的回答，会在句中用some</p><blockquote><p>Would you like some coffee？你想要一些咖啡吗？</p></blockquote></li><li><p>any 表示”任何一个”时，可以用在肯定句中</p><blockquote><p>The rabbit can eat any carrot.兔子可以吃任何一根胡萝卜.</p></blockquote></li></ol></li><li><p>each;every:表示”每(一)…”，后接单数。</p><p>each 可以做代词，单独做主语，every 后面要跟名词。</p><ol><li><p>each carrot &#x2F; every carrot每一根胡萝卜</p><blockquote><p>There are many carrots.Each is big.这有很多胡萝卜.每个都很大.</p></blockquote></li><li><p>each 表示两个或两个以上的每一个， every 表示 3 个及 3 个以上的每一个。</p><blockquote><p>There are many carrots on each side of the street.街道两旁有许多胡萝卜.</p></blockquote></li></ol></li><li><p>either;neither</p><p>either 是两者中的每一个， neither 是两者中每一个都不。 either 或 neither 作主语，谓语动词要用单数形式。</p><blockquote><p>Give the rabbit this or that carrot. Either is good.给兔子这根或那根胡萝卜.(两者中)哪一个都很好.</p><p>Don’t give this rabbit this or that carrot. Neither is good.不要给兔子这一根或那根胡萝卜.(两者中)哪一个都不好.</p><p>Either of the carrots is good.(两个)胡萝卜哪一根都很好.</p><p>Neither of the carrots is good.(两个)根胡萝卜哪一根都不好.</p></blockquote></li><li><p>both;all表示都(有区别)</p><p>both 是指两者都，而 all是指三者及以上都。做主语时，谓语、动词都要用复数形式。</p><blockquote><p>Both of the two rabbits are cute.两只兔子都很可爱.</p><p>All of the rabbits are cute.全部兔子都很可爱.</p></blockquote></li><li><p>other;the other;another</p><ol><li><p>other 表”另外的;其他的”修饰名词:</p><blockquote><p>I like this carrot. I Don’t like other carrots.我喜欢这根胡萝卜.我不喜欢其他的胡萝卜.</p></blockquote></li><li><p>the other 特指两者中的另一个</p><p>This carrot is bigger than the other carrot.这根胡萝卜比另一根胡萝卜大.</p></li><li><p>another 泛指三者及以上中的另一个，不确定指具体的哪一个：</p><p>The rabbit doesn’t like this carrot. Give him another carrot.兔子不喜欢这根胡萝卜，给他另一根.</p></li></ol></li><li><p>one;it</p><p>one 不是数词，而是不定代词</p><blockquote><p>The rabbit doesn’t like this carrot. Give him another carrot.</p><p>one 来代替carrot:</p><p>The rabbit doesn’t like this carrot. Give him another one.兔子不喜欢这根胡萝卜，给它另一个.</p></blockquote></li></ul></li><li><p>复合不定代词:由every,sum,any, no 和其他某些代词构成的</p><ul><li><p>指人的复合不定代词:</p><blockquote><p>everyone &#x2F; everybody每人;人人</p><p>someone &#x2F; somebody某人</p><p>anyone &#x2F; anybody任何人</p><p>no one &#x2F; nobody没人</p></blockquote></li><li><p>指物的复合不定代词:</p><blockquote><p>everything每一件事;一切事</p><p>something某事</p><p>anything任何事</p><p>nothing 没有事</p></blockquote><blockquote><p>Everyone is here.每个人都到了.</p><p>The rabbit needs something to eat.兔子需要一些吃的东西.</p><p>Nothing can stop the rabbit from eating carrots.没有什么能阻止兔子吃胡萝卜.</p></blockquote></li><li><p>形容词在修饰复合不定代词时要后置</p><blockquote><p>The rabbit has something important to do.兔子有些重要的事情做.</p><p>The rabbit has nothing important to do.兔子没有重要的事情做.</p></blockquote></li></ul></li><li><p>疑问代词:指代未知的人或物</p><p>who,whom,what ,witch,whose</p><blockquote><p>Who saw the rabbit?谁看见兔子了？</p><p>Whom did the Rabbit see?兔子看见谁了？(whom 是动作see的承受者，是宾语或宾格。)</p><p>whom 用 who 取代(不是所有的 whom 都能用 who 取代.当疑问代词作介词的宾语，紧跟介词就必须用whom):</p><p>Who did the rabbit see?兔子看见谁了?</p><p>From whom did the rabbit get the carrots?兔子从谁那得到了胡萝卜?</p><p>What did the Rabbit see？兔子看见了什么？</p><p>Which is the best carrot？哪一个是最好的胡萝卜？</p><p>Whose is this carrot?这是谁的胡萝卜？</p></blockquote></li><li><p>连接代词</p><p>who,whom,whos,what, which 以及whoever,whomever,whatever,whichever</p><blockquote><p>I don’t know who you are.我不知道你是谁.(who 引导了宾语从句)</p><p>What he said isn’t true.他说的话不是真的.(what 引导了主语从句)</p><p>The important thing is which rabbit is smarter.重要的是哪只兔子更聪明.(which 引导了表语从句)</p></blockquote><ul><li><p>whoever， whomever whatever， whichever 中的 ever 表示任何一切的意思，起强调作用</p><blockquote><p>The rabbit wants to eat whatever he likes.兔子想吃他喜欢的任何东西.</p></blockquote></li></ul></li><li><p>关系代词:专用于定语有 6 个</p><p>who， whom，whose， which，that ,as</p><blockquote><p>The rabbit who became hungry ate a carrot.饿了的兔子吃了根胡萝卜.</p><p>The rabbit whom I saw ate a carrot.我看见的那只兔子吃了根胡萝卜.</p><p>The rabbit whose ears are long ate a carrot.那只耳朵长的兔子吃了根胡萝卜.</p><p>The rabbit ate the carrot which&#x2F;that I bought.兔子吃了我买的胡萝卜.</p><p>The rabbit ate the carrot, as was expected.兔子如预料的那样吃了胡萝卜.</p></blockquote></li></ol><h1 id="Topic-16-数词-video-16"><a href="#Topic-16-数词-video-16" class="headerlink" title="Topic 16.数词(video.16)"></a>Topic 16.数词(video.16)</h1><p>数词分为:基数词和序数词。</p><p>基数词表示数量上的多少：我要吃三根胡萝卜.</p><p>序数词表示顺序的先后：我要吃第三根胡萝卜.</p><h2 id="1-基数词"><a href="#1-基数词" class="headerlink" title="1.基数词"></a>1.基数词</h2><ol><li><p>基数词的构成形式</p><ul><li><p><strong>1 one, 2 two, 3 three, 4 four, 5 five, 6 six, 7 seven, 8 eight, 9 nine, 10 ten</strong></p></li><li><p>11 eleven, 12 twelve, 13 thirteen, 14 fourteen, 15 fifteen, 16 sixteen, 17 seventeen, 18 eighteen, 19 nineteen.</p></li><li><p>20 twenty, 30 thirty, 40 forty, 50 fifty, 60 sixty, 70 seventy, 80 eighty, 90 ninety</p></li><li><p>21 twenty-one, 66 sixty-six, 97 ninety-seven</p></li><li><p>100 one hundred， 200 two hundred (不能像变复数那样加s)</p></li><li><p>百和剩下的余数之间用 and 连接</p><blockquote><p>365 three hundred and sixty-five</p><p>999 nine hundred and ninety-nine</p><p>101 one hundred and one.</p></blockquote></li><li><p>几千在 thousand 前面加上数字几：</p><blockquote><p>1000 one thousand</p><p>2000 two thousand</p><p>8000 eight thousand</p><p>3546 three thusand five hundred and forty-six</p></blockquote></li><li><p>千 thousand， 百万 million，十亿 billion</p><blockquote><p>10,000 ten thousand (一万)</p><p>100,000 one hundred thousand (十万)</p><p>10,000,000 ten million (一千万)</p><p>100,000,000 one hundred million (十亿)</p><p>“478,873,467,823”: four hundred and seventy-eight billion eight hundred and seventy-three millio four hundred and sixty-seven thousand eight hundred twenty-three</p></blockquote></li></ul></li><li><p>基数词可充当的句子成分</p><ul><li><p>主语和表语</p><blockquote><p>One and two is three.一加二等于三.</p></blockquote></li><li><p>宾语</p><blockquote><p>It costs fifty.它要(花费) 50 元.</p></blockquote></li><li><p>定语</p><blockquote><p>There are two hundred students.有二百个学生.</p></blockquote></li><li><p>同位语</p><blockquote><p>You two can go with me.你们两个可以跟我一起去.</p></blockquote></li></ul></li><li><p>表示不确切的数量</p><ul><li><p>“成百上千”，”成千上万”:hundreds of, thousands of, millions of。(注:基数词要用复数加 s)</p><blockquote><p>thousands of carrots 数以千计的胡萝卜(至少有 2000 根胡萝卜，具体几个以”千”这个单位来算)</p></blockquote></li><li><p>加一层”不确切”的数，放在 thousands 前面：</p><blockquote><p>tens of thousands of carrots数以万计的胡萝卜</p><p>hundreds of thousands of carrots几十万根胡萝卜</p></blockquote></li></ul></li></ol><h2 id="2-序数词"><a href="#2-序数词" class="headerlink" title="2.序数词"></a>2.序数词</h2><ol><li><p>序数词的构成形式</p><ul><li><p>大多数只要在相应的基数词后加”th”</p><blockquote><p>seventh 第7</p><p>thirteenth 第13</p></blockquote></li><li><p>例外:</p><blockquote><p>one-&gt;first, two-&gt;second,three-&gt;third, five-&gt;fifth, eight-&gt;eighth, nine-&gt;ninth, twelve-&gt;twelfth.</p></blockquote></li><li><p>基数词的基础上把 y 变为ie 后面加th</p><blockquote><p>第20 twentieth, 第30 thirtieth, 第40 fortieth, 第50 fiftieth, 第60 sixtieth, 第70 seventieth, 第80 eightieth, 第90 ninetieth</p></blockquote></li><li><p>整十、整百等部分都是基数词，只有个位数字变序数词(基本都是阿拉伯数字加”th”)</p><blockquote><p>第22 twenty-second, 第56 fifty-sixth, 第one hundred and first</p><p>7th 第7，13th 第13th</p><p>例外:</p><p>first -&gt; 1st</p><p>second -&gt; 2nd</p><p>third -&gt; 3 rd</p><p>20 以上的个位数字是 1，2，3 的序数词，则是相应的阿拉伯数字加st，nd，rd这几个拼写</p><p>21st 第21, 52nd 第52, 63rd 第63, 101st 第101</p><p>第11，第12，第13还是阿拉伯数字加”th”:</p><p>11th，12th，13th.</p></blockquote></li></ul></li><li><p>序数词可充当的句子成分</p><ul><li><p>一般情况下要加the</p><blockquote><p>The fifth to pay the bill will get this prize.第五个付款的(人)将得到这个奖品.</p><p>Please give me The second.请给我第二个.</p><p>He is The 13th person to fall over this morning.他是今天早上第 13 个摔倒的人了.</p><p>She was The fifth to pay the bill.他是第 5 个付款的人.</p></blockquote></li><li><p>不能加the的情况:</p><blockquote><p>This is my first book.这是我的第一本书.(在序数词前有其他的代词修饰 book ，表示这个名词已经被限定了，不能再加the)</p></blockquote></li><li><p>用基数词的表达跟序数词的表达相近：</p><blockquote><p>Room 315 315号房(第315的房间)</p><p>Page 200第200页</p><p>Catch 22第22条军规</p></blockquote></li></ul></li></ol><h2 id="3-数词的用法"><a href="#3-数词的用法" class="headerlink" title="3.数词的用法"></a>3.数词的用法</h2><ol><li><p>分数:分子用基数词，分母用序数词。如果分子大于1，分母的序数词还需将 s 变成复数。</p><blockquote><p>one third 1&#x2F;3</p><p>three fifths 3&#x2F;5</p><p>one second; a half 1&#x2F;2</p><p>one fourth; a quarter 1&#x2F;4</p><p>three fourths; three quarters 3&#x2F;4</p></blockquote></li><li><p>小数</p><blockquote><p>左边部分按基数词写，右边部分是按顺序写出个位基数词。</p><p>one point three four1.34</p><p>zero point five seven0.57</p><p>twelve point eight nine six12.896</p></blockquote></li><li><p>百分数</p><blockquote><p>基数词 + percent 表达</p><p>tweenty-five percent 25%</p><p>two point five percent 2.5%</p></blockquote></li><li><p>倍数:</p><p>half、twice、 three times 再搭配固定的表达</p><ul><li><p>倍数 + the + 计量 + of:</p><blockquote><p>This carrot is half&#x2F;twice&#x2F;three times the size of that one.这根胡萝卜是一根的一半&#x2F;两倍&#x2F;三倍.</p></blockquote></li><li><p>倍数 + as…as…:</p><blockquote><p>I have half&#x2F;twice&#x2F;three times as many carrots as he has.我有的胡萝卜是它的一半&#x2F;两倍&#x2F;三倍.</p></blockquote></li><li><p>倍数 + 比较级 + than:</p><blockquote><p>I can eat three times faster than he can.我吃东西的速度比它快三倍.</p></blockquote></li><li><p>by 倍数：</p><blockquote><p>I have increased my income by three times.我增加了三位收入.</p></blockquote></li></ul></li><li><p>数字符号和算术</p><blockquote><p>2 plus 2 is 4.2+2&#x3D;4</p><p>4 minus 2 is 2.4&#x2F;2&#x3D;2</p><p>2 multiplied by&#x2F;times 3 is 6.2*3&#x3D;6</p><p>8 divided by 4 is 2.8&#x2F;4&#x3D;2</p><p>2 squared is 4.2**2&#x3D;4</p><p>2 cubed is 8.2**3&#x3D;8</p><p>4 is more than 3.4&gt;3</p><p>2 is less than 3.2&lt;3</p></blockquote></li><li><p>单位</p><ul><li><p>时间</p><p>半点之前用 post 来表示， 7: 15 就表达成 7 点过了 15 分；</p><p>半点之后用 to 来表达， 7: 50 就表达成差时分 8 点。</p><blockquote><p>at seven 7:00</p><p>a quarter past seven 7:15</p><p>half past seven 7:30</p><p>ten to eight 7:50</p><p>7: 50 读成 seven fifty 也没有问题。</p></blockquote></li><li><p>日期</p><p>一般具体到年月日区分，英式日月年，美式月日年</p><blockquote><p>日的表达是序数词，表示一个月中的第几天，在读的时候要把 the 读出。</p><p>英式 ：</p><p>12th December ,2020</p><p>2020年12月12日</p><p>美式：</p><p>December 12th，2020</p><p>2020年12月12日</p></blockquote></li><li><p>年代</p><blockquote><p>500 B.C. 公元前 500 年</p><p>500 A.D. 公元 500 年</p><p>2020(可不加A.D.) 公元 2020 年</p><p>2020’s &#x2F; 2020s 21 世纪 20 年代</p><p>1980’s &#x2F; 1980s 20 世纪 80 年代</p></blockquote></li><li><p>长度</p><ol><li>长形容词 long 或名词length；</li><li>宽形容词 wide 或名词width；</li><li>高形容词 high 或名词height，</li></ol><ul><li><p>基数词 + 单位词(复数) + 形容词(长宽高):</p><blockquote><p>The river is one 1000 meters long.这条河有 1 千米长.</p></blockquote></li><li><p>基数词 + 单位词(复数) + in + 名词(长宽高):</p><blockquote><p>The river is one 1000 meters in length.这条河有 1 千米长.</p><p>This room is 20 by 35 meters.这个房间是 20米* 35 米.</p></blockquote></li><li><p>面积的单位是 square meters</p><blockquote><p>This room is 700 square meters.这个房间有 700 平方米.</p><p>This box is 8 by 5 by 6 centimeters.盒子的长宽高分别是 8 厘米, 5 厘米和 6 厘米.</p></blockquote></li></ul></li><li><p>温度</p><blockquote><p>温度单位是摄氏度的情况下，可以省略 centigrade or Celsius。</p><p>37 degress centigrade37°c</p><p>37 degrees Fahrenheit37°F</p><p>10 degrees below zero-10°</p></blockquote></li></ul></li></ol><h1 id="Topic-17-形容词-video-17"><a href="#Topic-17-形容词-video-17" class="headerlink" title="Topic 17.形容词(video.17)"></a>Topic 17.形容词(video.17)</h1><h2 id="1-形容词做句子成分"><a href="#1-形容词做句子成分" class="headerlink" title="1.形容词做句子成分"></a>1.形容词做句子成分</h2><ol><li><p>定语</p><ul><li><p>前置定语</p><ol><li><p>直接放在要描述的对象之前,起限定描述作用.</p><blockquote><p>a hungry rabbit一只饿了的兔子</p></blockquote></li><li><p>多个形容词不加连词做前置定语，要考虑顺序</p><blockquote><p>限定词(冠词、物主代词) + 主观特征 + 尺寸 + 形状 + 新旧 + 颜色 + 来源 + 材料 + 用途</p><p>a beautiful big round new black Chinese wooden table(a 是冠词限定词在最开始的位置)</p></blockquote></li></ol></li><li><p>后置定语</p><ol><li><p>形容词修饰复合不定代词somebody，anybody，everything， nothing 等</p><blockquote><p>somebody nice 某个好人</p><p>anybody absent 不在场的人</p><p>everything possible 所有可能的事儿</p><p>nothing wrong 没不对的事儿</p></blockquote></li></ol></li><li><p>形容词短语作定语</p><p>一般说来，形容词短语会放在描述的对象之后。</p><blockquote><p>carrots good for the rabbit对兔子有好处的胡萝卜</p><p>the rabbit eager to eat carrots急于吃胡萝卜的兔子</p><p>the rabbit busy eating carrots忙着吃胡萝卜的兔子</p></blockquote><p>用定语从句替换：</p><blockquote><p>the rabbit eager to eat carrots</p><p>the rabbit that is eager to eat carrots 急于吃胡萝卜的兔子</p><p>the rabbit busy eating carrots</p><p>he rabbit that is busy eating carrots忙着吃胡萝卜的兔子</p></blockquote></li></ul></li><li><p>表语</p><ul><li><p>主系表结构</p></li><li><p>只做表语，如一些以”a”前缀开头的形容词</p><blockquote><p>alive，asleep，alone</p><p>The rabbit is alive&#x2F;asleep&#x2F;alone.兔子是活的&#x2F;睡着的&#x2F;孤单的.</p><p>一般不做定语 :</p><p>an alive&#x2F;asleep&#x2F;alone rabbit 一只活的&#x2F;睡着的&#x2F;孤独的兔子</p><p>做定语，则换词:</p><p>a living&#x2F;sleeping&#x2F;lonely rabbit 一只活的&#x2F;睡着的&#x2F;孤独的兔子</p><p>某些情况下，可做后置定语</p><p>the only rabbit alife 唯一一只活着的兔子(情况较少见)</p><p>不能说：</p><p>the only rabbit alone 唯一一只孤独的兔子</p><p>the rabbit alive 活的兔子</p><p>比较身体状况的形容词，如 ill， well</p><p>只能说</p><p>The rabbit is ill&#x2F;well.兔子是健康的&#x2F;生病的.</p><p>不能说:</p><p>an ill&#x2F;well rabbit.一只生病的&#x2F;健康的兔子.]</p><p>做定语，则要换词:</p><p>a sick&#x2F;healthy rabbit.一只生病的&#x2F;健康的兔子.</p></blockquote></li></ul></li><li><p>补语</p><blockquote><p>Carrots make rabbits happy.胡萝卜让兔子开心.(形容词happy补充说明了宾语 rabbits 的状态)</p></blockquote></li><li><p>状语</p><blockquote><p>The rabbit came home, tired and hungry.兔子回到家,又累又饿.(tired and hungry 表现出兔子回到家时的状态)</p></blockquote></li></ol><h2 id="2-复合形容词"><a href="#2-复合形容词" class="headerlink" title="2.复合形容词"></a>2.复合形容词</h2><ol><li><p>形容词 + 形容词&#x2F;现在分词&#x2F;过去分词</p><blockquote><p>a red-pot cole 一块红热的煤</p><p>a good-looking abbit (形容词 + 现在分词)一只好看的兔子</p><p>a new-born baby (形容词 + 过去分词)一个新生儿</p></blockquote></li><li><p>副词 + 形容词&#x2F;现在分词&#x2F;过去分词</p><blockquote><p>all-round (副词 + 形容词) 全面的</p><p>hard-working (副词 + 现在分词) 努力的</p><p>recently-built (副词 + 过去分词) 最近建成的</p></blockquote></li><li><p>形容词&#x2F;数词 + 名词</p><ul><li><p>要求第二个词，也就是”名词 + ed”(和动词过去式无关)。往往是修饰人或动物的，因为人或动物才有”所有者属性”(才能用whose)。</p><blockquote><p>a white-haired man</p><p>a man whose hair is white白发的</p><p>a kind-hearted woman</p><p>a woman whose heart is kind 好心的，善良的</p></blockquote></li><li><p>如果不是这种情况，不能转成whose，不能加ed</p><blockquote><p>a long-distance call 长途电话</p></blockquote></li><li><p>数字和形容词可以作修饰限定</p><blockquote><p>a one-way street (数词 + 名词)单行街道</p></blockquote></li></ul></li><li><p>名词 + 形容词&#x2F;现在分词&#x2F;过去分词</p><ul><li><p>与定语从句等效原理类似</p><blockquote><p>a snow-white rabbit</p><p>a rabbit that is white like snow一只雪白的兔子</p><p>a carrot-eating rabbit</p></blockquote></li><li><p>名词 + 现在分词等于:</p><blockquote><p>a rabbit that eats carrots一只吃胡萝卜的兔子</p><p>a heart-broken rabbit &#x3D; a rabbit whose heart is broken一只心碎的兔子</p></blockquote></li></ul></li></ol><h2 id="3-形容词的比较级和最高级"><a href="#3-形容词的比较级和最高级" class="headerlink" title="3.形容词的比较级和最高级"></a>3.形容词的比较级和最高级</h2><h3 id="1-形容词比较级和最高级的构成"><a href="#1-形容词比较级和最高级的构成" class="headerlink" title="1.形容词比较级和最高级的构成"></a>1.形容词比较级和最高级的构成</h3><ol><li><p>一般情况下，构成比较级和最高级形容词，直接在形容词词尾加 -er，-est :</p><blockquote><p>long -&gt; longer -&gt; longest 长，更长，最长</p><p>tall -&gt; taller -&gt; tallest 高，更高，最高</p></blockquote></li><li><p>e 结尾的词在其后加-r，-st</p><blockquote><p>late -&gt; later -&gt; latest 迟，更迟，最迟</p><p>larger -&gt; larger -&gt; largest 大，更大，最大</p></blockquote></li><li><p>辅音字母加-y结尾的词，把 y 变i，再加-e r, -e s t，</p><blockquote><p>happy-&gt; happier -&gt; happiest 快乐，更快乐，最快乐</p><p>busy -&gt; busier -&gt; busiest 忙，更忙，最忙</p></blockquote></li><li><p>重读闭音节单词，先双写词尾的辅音字母，再加 -er, -est，比如：</p><blockquote><p>big -&gt; bigger -&gt; biggest 大，更大，最大</p><p>fat -&gt; fastter -&gt; fattest 胖，更胖，最胖</p></blockquote></li><li><p>多音节词和部分双音节词,在词前加 more ，most</p><blockquote><p>iteresting -&gt; more interesting -&gt; most interesting 有趣，更有趣，最有趣</p><p>difficult -&gt; more difficult -&gt; most difficult 难，更难，最难</p></blockquote></li><li><p>有些形容词不规则变化</p><blockquote><p>good -&gt; better -&gt; best 好，更好，最好</p><p>bad -&gt; worse -&gt; worst 坏，更坏，最坏</p><p>many -&gt; more -&gt; most 多，更多，最多</p><p>little -&gt;less -&gt;least 少，更少，最少</p></blockquote></li></ol><h3 id="2-形容词比较级的用法"><a href="#2-形容词比较级的用法" class="headerlink" title="2.形容词比较级的用法"></a>2.形容词比较级的用法</h3><ol><li><p>…比…更…</p><blockquote><p>This carrot is bigger than that one. 这根胡萝卜比那根大.</p></blockquote></li><li><p>大几倍:</p><blockquote><p>This carrot is three times bigger than that one.这根胡萝卜比那根大 3 倍.(用倍数 three times 加形容词比较级)</p></blockquote></li><li><p>表示”…和…一样…”</p><blockquote><p>This carrot is as big as that one. 这根胡萝卜跟那根胡萝卜一样大.</p><p>3 倍那么大:</p><p>This carrot is three times as big as that one. 这根胡萝卜是那根的 3 倍那么大.</p></blockquote></li><li><p>“越来越…”</p><blockquote><p>prettier and prettier 越来越漂亮</p><p>more and more beautiful 越来越漂亮</p><p>The rabbit is smarter and smarter. 兔子越来越聪明了.</p></blockquote></li><li><p>“越…(原因)，就越…(结果)”</p><ul><li><p>the + 比较级(原因) + 补充内容</p><blockquote><p>The more carrots the rabbit eats, the smarter he will become. 兔子吃越多胡萝卜，就会变得越聪明.</p></blockquote></li><li><p>the + 比较级(结果) + 补充内容.</p><blockquote><p>The more carrots the rabbit eats, the smarter he will become. 兔子吃越多胡萝卜，就会变得越聪明.(表示假设)</p><p>The more carrots the rabbit ate, the smarter he became.兔子吃了越来越多胡萝卜，就会变得越聪明.(描述过去的事实)</p></blockquote></li><li><p>可省略，靠语境 ：</p><blockquote><p>the more the better 越多越好</p></blockquote></li></ul></li></ol><h3 id="3-形容词最高级的用法"><a href="#3-形容词最高级的用法" class="headerlink" title="3.形容词最高级的用法"></a>3.形容词最高级的用法</h3><ol><li><p>最高级的运用跟事先设定的一个范围有关系，都是</p><ul><li><p>in + 地点</p></li><li><p>off + 所属范围</p></li></ul><blockquote><p>Magic mirror on the wall, who is the fairest one of all? 魔镜告诉我，谁是世上最美的人？</p></blockquote></li><li><p>最高级前面加序数词表示”第几最…”，</p><blockquote><p>Magic mirror on the wall， who is the second fairest one of all？魔镜告诉我，谁是所有人当中第二漂亮的女人？</p></blockquote></li><li><p>形容词最高级，修饰名词时，前面一般都加-the(特指)</p><blockquote><p>Snow White is the most beautiful woman in the world. 白雪公主是世上最漂亮的女人.</p><p>The queen is a most beautiful woman. 皇后是一位非常漂亮的女人.( most 在这里表示很非常，相当于 very much。)</p><p>The queen is a very beautiful woman.皇后是一位非常漂亮的女人.</p></blockquote></li><li><p>否定 + 比较级 &#x3D; 最高级</p></li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><ol><li>形容词通常充当句中的定语、表语、补语、状语。</li><li>形容词作定语，可以前置，也可以后置。<ul><li>前置时往往要考虑顺序，一般遵循以下顺序限定词加主观特征，加尺寸、加形状，加新旧，加颜色、加来源，加材料、加用途。</li><li>复合代词需形容词做后置定语。形容词短语，一般做后置定语。大多数形容词既能做定语，也能做表语。但也有些形容词，如asleep，通常只做表语。</li></ul></li><li>复合形容词有多种构成形式</li><li>形容词有比较级和最高级，表达更&#x2F;最的含义。音节少的词，一般构成是形容词加-er，-est。音节多的词一般构成是more， most 加形容词，比较级，通常表达”更…”，还有个常用意思是”越…越…”，最高级，一般表达”最”，但也可能是”非常”。</li></ol><h1 id="Topic-18-副词-video-18"><a href="#Topic-18-副词-video-18" class="headerlink" title="Topic 18.副词(video.18)"></a>Topic 18.副词(video.18)</h1><blockquote><p>副词主要用法：</p><ol><li><p>副词修饰哪些词性</p></li><li><p>副词在句中做什么成分</p></li></ol></blockquote><h2 id="1-副词修饰的词性"><a href="#1-副词修饰的词性" class="headerlink" title="1.副词修饰的词性"></a>1.副词修饰的词性</h2><ol><li><p>修饰动词</p><blockquote><p>This is a fast rabbit.这是只快速的兔子.（ fast 是修饰名词的形容词）</p><p>This rabbit runs fast.这只兔子跑得快.（fast 是修饰动词的副词）</p></blockquote></li><li><p>修饰形容词和副词</p><blockquote><p>This is a very fast rabbit.这是只很快的兔子.(very 修饰做形容词的fast)</p><p>This rabbit runs very fast.这只兔子跑得很快.(very 修饰做副词的fast)</p><p>This carrot is very good.这胡萝卜很好.(very 修饰的形容词good)</p><p>I’m doing very well.我很好，或者我一切顺利.(very 修饰的副词well)</p></blockquote></li><li><p>修饰名词</p><blockquote><p>This rabbit runs very fast.</p><p>This rabbit here runs very fast.这里的这只兔子跑得很快.(副词 here 修饰了名词,强调”这里”这只兔子)</p></blockquote></li><li><p>修饰句子</p><blockquote><p>Obviously, this rabbit here runs very fast.显然，这里的这只兔子跑得很快.(Obviously,修饰的是整个句子)</p></blockquote></li></ol><h2 id="2-副词在句中成分"><a href="#2-副词在句中成分" class="headerlink" title="2.副词在句中成分"></a>2.副词在句中成分</h2><ol><li><p>状语，定语</p><p>Obviously, this rabbit here runs very fast.（除了here，其他都是状语。）</p></li><li><p>表语</p><blockquote><p>The wolf is abroad.狼在国外.(表语的副词只能用在(变位)系动词be之后)</p></blockquote></li><li><p>宾语补语</p><blockquote><p>Let me in!让我进来! (in是宾语补语)</p><p>Let me out!让我出去! (out是宾语补语)</p></blockquote></li></ol><h2 id="2-副词的形式"><a href="#2-副词的形式" class="headerlink" title="2.副词的形式"></a>2.副词的形式</h2><blockquote><p>一般是 <strong>形容词变副词</strong></p></blockquote><ol><li><p>直接加-ly(大多数情况):</p><blockquote><p>quick → quickly, happy → happily, slow → slowly</p></blockquote></li><li><p>以 辅音字母 + -y 结尾的形容词：变-y为-i再加-ly.</p><blockquote><p>happy → happily, heavy → heavily, busy → busily</p></blockquote></li><li><p>以-le结尾的形容词：掉-e加-y。</p><blockquote><p>terrible → terribly, simple → simply, gentle → gently</p></blockquote></li><li><p>以-ic结尾的形容词：这类形容词通常在后面加上-ally来形成副词。</p><blockquote><p>basic → basically, scientific → scientifically, economic → economically</p></blockquote></li><li><p>不规则变化：</p><blockquote><p>good → well, hard (努力地) → hardly (几乎不), fast (快速的) → fast (快速地)</p></blockquote></li><li><p>部分形容词与副词同形：</p><blockquote><p>fast, high, low, straight, wrong</p></blockquote></li></ol><h2 id="3-副词的种类"><a href="#3-副词的种类" class="headerlink" title="3.副词的种类"></a>3.副词的种类</h2><ol><li><p>方式副词</p><blockquote><p>This rabbit runs fast.这只兔子跑得快.(fast 是形容兔子跑的方式)</p></blockquote><p>可位于句首、句中或句尾(不是所有方式副词都能)</p><blockquote><p>Suddenly, the driver turned left.</p><p>The driver suddenly turned left.</p><p>The driver turned left suddenly.司机突然左转.</p></blockquote></li><li><p>程度副词</p><p>副词一般位于它修饰的形容词或副词之前。</p><blockquote><p>This is a very fast rabbit.(修饰形容词 fast)</p><p>This rabbit runs very fast.(修饰副词 fast)</p></blockquote></li><li><p>地点副词</p><blockquote><p>The rabbit eats carrots indoors&#x2F;outdoors.兔子在室内&#x2F;室外吃胡萝卜.</p><p>The rabbit eats carrots upstairs&#x2F;downstairs.兔子在楼上&#x2F;楼下吃胡萝卜.</p><p>限定地点，表明兔子习惯在哪吃胡萝卜</p></blockquote><blockquote><p>地点副词一般出现在句尾，但有时为了表强调，会置于句首</p><p>Here you can relax and forget about all your troubles.在这里你可以放松并忘记所有烦恼.</p></blockquote></li><li><p>时间副词</p><blockquote><p>The rabbit ate some carrots yesterday.这兔子昨天吃了些胡萝卜.</p><p>The rabbit is eating some carrots now.这兔子正在吃些胡萝卜.</p><p>The rabbit will eat some carrots later.这兔子之后要吃些胡萝卜.(表明兔子在什么时间吃胡萝卜)</p></blockquote><blockquote><p>时间副词一般出现在句尾，但有时会放到句首或句中</p><p>The rabbit has already eaten some carrots.兔子已经吃了些胡萝卜.</p></blockquote></li><li><p>频率副词：限定频率</p><p>大部分频率副词都位于行为动词之前， be 动词、助动词、情态动词之后。</p><blockquote><p>The rabbit eats carrots every day.兔子每天都吃胡萝卜.</p><p>Sometimes, the rabbit eats carrots.这兔子有时候吃胡萝卜.</p><p>The rabbit usually eats carrots.这兔子经常吃胡萝卜.</p><p>The rabbit eats carrots three times a day.兔子一天三顿吃胡萝卜.</p></blockquote></li><li><p>疑问副词：用来构成特殊疑问句的副词。</p><blockquote><p>How does the rabbit eat carrots？这兔子怎么吃胡萝卜？(对方式提问)</p><p>Where does the rabbit eat carrots？这兔子在哪儿吃胡萝卜？(对地点提问)</p><p>When does the rabbit eat carrots？这兔子啥时候吃胡萝卜? (对时间提问)</p><p>Why does the rabbit eat carrots？这兔子为什么吃胡萝卜？(对原因提问)</p></blockquote></li><li><p>连接副词</p><p>名词性从句会用到副词。(属于连接副词)</p><blockquote><p>How the rabbit eats carrots is interesting.这兔子如何吃胡萝卜这件事儿更有趣.(how 引导主语从句)</p><p>I don’t know where the rabbit eats carrots.我不知道这兔子在哪儿吃胡萝卜.(why 引导宾语从句)</p><p>That is why the rabbit eats carrots.这就是为什么这兔子吃胡萝卜.(why 引导表语从句)</p></blockquote></li><li><p>关系副词</p><p>关系副词引导形容词性从句。</p><blockquote><p>This was the place where the rabbit ate the carrot.这就是兔子吃掉胡萝卜的地方.</p><p>This is the reason why the rabbit ate the carrot.这就是兔子吃掉胡萝卜的原因.</p><p>That was the day when the rabbit ate the carrot for the first time.那就是兔子第一次吃胡萝卜的那天.</p></blockquote></li><li><p>句子副词</p><p>句子副词一般在句子的开头，且用逗号和主句分开。</p><blockquote><p>Obviously，this rabbit here runs very fast.显然，这里的这只兔子跑得很快.(obviously 修饰的是整个句子)</p></blockquote></li></ol><h2 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h2><ol><li>副词主要是描述、补充、修饰各类词性，包括动词、形容词、副词、名词，也可以修饰整个句子。</li><li>相应的副词在句中可充当状语，最经常定语、表语、补语。</li><li>副词的形式不复杂，通常和相应形容词拼写一致，或加词尾-ly，或去词尾 -e加-ly。</li><li>从种类或用途上说，副词可描述方式、程度、地点、时间、频率。可以造特殊疑问句，可构成从句，也可描述整句。</li></ol><h1 id="Topic-19-连词-video-19"><a href="#Topic-19-连词-video-19" class="headerlink" title="Topic 19.连词(video.19)"></a>Topic 19.连词(video.19)</h1><blockquote><ol><li><p>连词，就是把语句连接起来，增加语句逻辑性的词。</p></li><li><p>分类：</p><p>并列连词：把处于同等的、并列的语法地位的单词、词组或句子连起来。</p><p>从属连词：专门连接英文主句和从句。</p></li></ol></blockquote><h2 id="1-并列连词"><a href="#1-并列连词" class="headerlink" title="1.并列连词"></a>1.并列连词</h2><blockquote><p>并列连词：连接并列的同等语法地位的单词、词组和句子。</p></blockquote><ol><li><p>并列关系</p><blockquote><p>The rabbit is smart and cute.兔子聪明且可爱.</p><p>The rabbit teaches English and makes videos.兔子教英语并做视频.</p><p>Both the rabbit and the wolf like carrots.兔子和狼都喜欢胡萝卜.</p><p>The rabbit not only teaches English but also makes videos.兔子不仅教英语还做视频.</p><p>The rabbit teaches not only English, but also German.兔子教的不仅是英语还有德语.</p></blockquote><p>并列关系表”否定”</p><blockquote><p>The rabbit likes neither apples nor pears.兔子既不喜欢苹果，也不喜欢梨子.</p><p>Neither the rabbit nor the wolf likes apples.兔子和狼都不喜欢苹果.(谓语动词 likes 和前面的 Wolf 一致，就近原则。)</p></blockquote></li><li><p>选择关系</p><blockquote><p>What does the rabbit like? Apples or carrots?兔子喜欢什么？苹果还是胡萝卜？</p><p>Either the rabbit or the wolf is going to the party this evening.不是兔子就是狼会去参加今晚的聚会.</p><p>The rabbit neither ate nor slept yesterday.兔子昨天既没吃也没睡.</p><p>Hurry up, or&#x2F;or else&#x2F;otherwise you’ll be late.快点，否则你要迟到了.</p><p>Either the rabbit or I am going to the party this evening.不是兔子就是我将要参加今晚的聚会.(谓语动词是am,就近原则)</p></blockquote><blockquote><p><strong>not only… but also…</strong></p><p>Not only the rabbit but also his friends are going to the party this evening.不仅兔子，还有他的朋友们也会去参加今晚的聚会.</p></blockquote></li><li><p>转折关系</p><p>虽然…但是…</p><blockquote><p>The rabbit cooked some carrots, but he didn’t eat any.兔子煮了些胡萝卜，但他没吃.</p><p>The rabbit cooked some carrots, yet he didn’t eat any.兔子煮了胡萝卜，但他没吃.</p><p>I haven’t eaten yet, yet I’m not hungry.我还没吃，但我还不饿.(yet 是并列连词表”转折”，而不是副词，表示”还没有”。第一个 yet 是副词，第二个才是连词。)</p></blockquote></li><li><p>因果关系</p><ul><li><p>前因后果</p><blockquote><p>The rabbit is busy, so he won’t go to the party tonight.兔子很忙，所以今天晚上他不能参加聚会了.</p><p>therefore 替代so:</p><p>The rabbit is busy, therefore he won’t go to the party tonight.兔子很忙，所以今天晚上他不能参加聚会了.</p></blockquote></li><li><p>前果后因</p><blockquote><p>The rabbit will skip lunch, for he is busy making a video.兔子不吃午餐了，因为它在忙着做视频.(for 不是表”为了…”的介词，而是表”因为”的连词。)</p></blockquote></li></ul></li></ol><h2 id="2-从属连词"><a href="#2-从属连词" class="headerlink" title="2.从属连词"></a>2.从属连词</h2><blockquote><ol><li>从属连词：连接英文主句和从句的</li><li>从属连词分类</li></ol><ul><li>引导名词性从句，包括主语从句、宾语从句、表语从句、同语从句。</li><li>引导副词性从句，即状语从句。</li></ul></blockquote><ol><li><p>引导名词性从句的连词</p><ul><li><p>that 引导四种名词性从句</p><ol><li><p>只起连接作用</p></li><li><p>在句中没有实际意义；</p></li><li><p>在宾语从句中可省略主语从句.</p></li></ol><blockquote><p>That the rabbit ate the carrot was obvious.兔子吃了胡萝卜，这很明显.（主语从句）</p><p>I saw (that) the reabbit ate the carrot.我看见兔子吃了胡萝卜.（宾语从句）</p><p>I don’t know if the rabbit ate the carrot.我不知道兔子是否吃了胡萝卜.（宾语从句）</p><p>The fact is that the rabbit ate the carrot.事实是兔子吃了胡萝卜.（表语从句）</p><p>The question whether the rabbit will eat the carrot is on all our minds.兔子是否会吃胡萝卜这个问题萦绕在我们所有人心中.（同位语从句）</p></blockquote></li></ul></li><li><p>引导状语从句的连词</p><ul><li><p>时间状语从句的连词：</p><blockquote><p>when 当…时候，while 当…时候，as 当…时候，before 在…之前，after 在…之后，until 直到…为止，since 自…以来</p></blockquote></li><li><p>地点状语从句的连词：</p><blockquote><p>where 在…地方，wherever 无论在…地方</p></blockquote></li><li><p>比较状语从句的连词：</p><blockquote><p>than 比，as 与…一样…(出现在as…as…结构中)</p></blockquote></li><li><p>条件状语从句的连词：</p><blockquote><p>if 如果，unless 除非</p></blockquote></li><li><p>让步状语从句的连词：</p><blockquote><p>although 虽然;尽管(不与并列连词but连用)</p><p>though 虽然;尽管(不与并列连词but连用)</p><p>even though 即使</p><p>even if 即使</p><p>while 虽然;尽管</p></blockquote></li><li><p>方式状语从句的连词：</p><blockquote><p>as 像…;与…一样</p><p>as if 好像</p><p>as though 好像</p></blockquote></li><li><p>原因状语从句的连词：</p><blockquote><p>because 因为(从属连词；连接主句和从句的；不是并列连词；不与并列连词 so 连用)</p><p>since 因为(表示间接&#x2F;附带原因，语气弱于because)</p><p>as 因为(语气最弱)</p></blockquote></li><li><p>目的状语从句的连词：</p><blockquote><p>in order that 目的是…;为了</p><p>so that 以便</p><p>so 以便</p></blockquote></li><li><p>结果状语从句的连词：</p><blockquote><p>so…that… 太…以至于…(注意与so that区分)</p><p>such…that… 太…以至于…</p><p>so 因此;所以</p></blockquote></li></ul></li></ol><h2 id="3-总结-3"><a href="#3-总结-3" class="headerlink" title="3.总结"></a>3.总结</h2><ol><li>英语连词类：并列连词和从属连词。前者连接处于并列的同等语法地位的词，词组和句子，后者连接主句和从句。</li><li>并列连词从逻辑上又可分为并列关系，选择关系，转折关系，因果关系等。</li><li>从属连词引导的是两大类从句名词性从句和副词性从句。</li></ol><h1 id="Topic-20-叹词-video-20"><a href="#Topic-20-叹词-video-20" class="headerlink" title="Topic 20.叹词(video.20)"></a>Topic 20.叹词(video.20)</h1><blockquote><p>感叹词定义为：负责表达情感的声音、单词、词组</p></blockquote><ol><li><p>打招呼：<strong>hello, hi, hey, yo, hiya</strong></p><blockquote><p>Hey，what’s up? Ah, nothing much.嗨，有什么事吗？没啥事.</p><p>Yo, yo, flu-hating rapper.唷，唷，反流感饶舌歌手.</p></blockquote></li><li><p>惊讶：<strong>oh, ooh, oh my god! Jesus! gee, oh my! huh?! wow,gosh, oh dear, dearme,oh my goo ness, ohboy</strong></p><blockquote><p>Oh, my god. Oh, my god. Oh, my god. Oh, my god.天啊…</p><p>Just let me see it.就让我帮你看嘛</p><p>Wow.Wow.And it’s definitely all gone?哇.哇.真的完全都没有了？</p><p>Boy, oh boy. Oh, it’s only a matter of time.哎哟，妈哎，要不了多久.</p></blockquote></li><li><p>犹豫：<strong>humm, er, uh, erm, well, oh well</strong></p><blockquote><p>Well, well, well, look what we have here.瞧瞧， 瞧瞧，这是谁呀.</p></blockquote></li><li><p>高兴：<strong>ah! yeah! hooray! aha! alas! Thank god!</strong></p><blockquote><p>Yay! Oh so you’re not, you’re not mad at us anymore?呀！那你不再生我们的气了？</p><p>Thank god，Thank god.How’s LJ and Sofia?谢天谢地.LJ和索菲亚怎么样？</p></blockquote></li><li><p>感动：<strong>aww</strong></p><blockquote><p>Aww. Bunny.真可爱，小兔子.</p></blockquote></li><li><p>疼痛：ow, ouch</p><blockquote><p>Ouch!好痛！</p></blockquote></li><li><p>鼓励：<strong>yes! congratulations! congrats! bravo! come on (c’mon), attaboy</strong></p><blockquote><p>Bravo! Well done! Bravo! Congratulations, Mr Molesley.好！太好了！恭喜，莫斯利先生.</p><p>Come on, come on,come on,come on.快点，快点，快点，快点，</p></blockquote></li><li><p>赞同：<strong>yes, yep, ok, okey, indeed, cool, bingo, great, excellent, brilliant, fantastic</strong></p><blockquote><p>Yep, yep, yep, yep, yep, yep.对， 对， 对，对，没错</p><p>I remember when she took me out on her dad’s boat.我还记得她驾驶她爸的船带我出海.</p><p>Oh,brilliant. Absolutely brilliant. Well done, you.Thank you…干得漂亮.太好了，你真是厉害.</p></blockquote></li><li><p>反对：<strong>on, nope, no way, nah</strong></p><blockquote><p>Nope, that,I, I guess, uh,that – that’s it.没有，没，我觉得，应该就这样.</p></blockquote></li><li><p>确认：<strong>please? yeah? eh? right?</strong></p><blockquote><p>Eh?Oh, Bob, he was nothing compared to you.嗯？哦，巴伯，他根本比不上你.</p></blockquote></li><li><p>后悔：<strong>oops</strong></p><blockquote><p>Ooops.Nobody told me it was uncrackable.呃.可没人这么跟我说过它不可攻破.</p></blockquote></li><li><p>伤心：<strong>no, oh no</strong></p><blockquote><p>Oh, no! No, no, no. Don’t freak out. Don’t freak out.不是吧，不是吧，别别别，别慌，别慌.</p></blockquote></li><li><p>厌恶：<strong>eww,ugh</strong></p><blockquote><p>Eww. No. Then where – where is she?呃，啥…不是 没有…那她在哪？</p></blockquote></li><li><p>使注意：<strong>psst</strong></p><blockquote><p>Psst, psst, psst. Why do you “psst” me? I’m not going anywhere.嘶.嘶.嘶.干嘛偷偷摸摸的？我又不会逃跑.</p></blockquote></li><li><p>使安静：<strong>sssh</strong></p><blockquote><p>Ssh,ssh. Look after Rosie.嘘，别说了，照顾好萝丝.</p></blockquote></li><li><p>不耐烦：<strong>oh man, duh, darn, damn, blah blah blah, yadda yadda</strong></p><blockquote><p>Oh, man, oh, man. I swear to god, I ain’t know he was gonna kill the man.天呐，老天，我对天发誓，真不知道他会杀了那小子.</p></blockquote></li><li><p>愤怒：<strong>Jesus, for god’s sake, jesus christ, shit, fuck, what the fuck, what the hell</strong></p><blockquote><p>Yes. For god’s sake, Sheldon, do I have to hold up a sarcasm sign every time I open my mouth?是.天啊，哪次我武器说话都得举个讽刺的牌子吗？</p></blockquote></li></ol><h1 id="Topic-21-限定词-video-21"><a href="#Topic-21-限定词-video-21" class="headerlink" title="Topic 21.限定词(video.21)"></a>Topic 21.限定词(video.21)</h1><blockquote><p>限定词：顾名思义就是限定讨论描述范围的词。</p></blockquote><p>只要是限定了它之后的名词的词，都可以被称作限定词：</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;064.png?raw&#x3D;true)</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;065.png?raw&#x3D;true)</p><h1 id="Topic-22-构词法-video-22"><a href="#Topic-22-构词法-video-22" class="headerlink" title="Topic 22.构词法(video.22)"></a>Topic 22.构词法(video.22)</h1><blockquote><ol><li>英语构词法主要包括派生、合成、混合、截短、缩写、转化。</li><li>词根，词缀（前缀，后缀）</li></ol></blockquote><ol><li><p>派生构词</p><ul><li><p>后缀：-ible表”能被…”意思，属于形容词。</p><blockquote><p>visible 能被看见的</p><p>audible 能被听见的</p><p>edible 能被吃的。</p></blockquote></li><li><p>后缀：-ibility表”能见度”。</p></li><li><p>前缀：in-表”不…”。</p><blockquote><p>invisible 看不见的</p><p>innotable 听不见</p><p>inedible 不能吃的</p></blockquote></li><li><p>前缀：en-表”使得…”</p><blockquote><p>enlarch “使…变大”</p></blockquote></li><li><p>词根词缀的组合方式多样</p><blockquote><ol><li><p>前缀 + 词根，比如 construct v.建造</p></li><li><p>词根 + 后缀，比如 structure n.建筑物</p></li><li><p>前缀 + 词根 + 后缀，比如 construction n.构建</p></li></ol></blockquote><blockquote><ol><li><p>前缀 + 前缀 +词根，如 reconstruct v.再次建造</p></li><li><p>词根 + 后缀 + 后缀，如structural adj.建筑结构的</p></li><li><p>前缀 + 词跟 + 后缀 +后缀，如constructional adv.建筑的</p></li><li><p>前缀 + 前缀 + 词跟 + 后缀 + 后缀 + 后缀，如，reconstructionally adv.再次建筑地</p></li></ol></blockquote></li></ul></li><li><p>合成构词</p><blockquote><p>waterfall n.瀑布</p><p>waterproof adj.防水的</p><p>underwater adj.水下的</p></blockquote><p>合成构词的词性可多种多样。</p><blockquote><p>副词out + 动词break &#x3D; 名词outbreak</p><p>数词one + 名词way &#x3D; 形容词one-way</p><p>形容词high + 名词class &#x3D; 形容词high-class</p><p>介词before + 名词hand &#x3D; 副词beforehand</p></blockquote></li><li><p>混合构词</p><p>把第一个单词的前一小节和第二个单词的后一小节拼在一起</p><blockquote><p>brunch &#x3D; breakfast 的 br + lunch 的 unch。</p><p>smoke烟 + fog雾 &#x3D; smog烟雾</p><p>smoke烟 + haze薄雾 &#x3D; smaze烟霭</p><p>snow(雪) + ice冰块 &#x3D; snice雪冰态</p><p>website网站 + seminar会谈 &#x3D; webinar网上会谈</p></blockquote></li><li><p>截短构词</p><p>去头或者去尾都可以。</p><blockquote><p><del>tele</del>phone &#x3D; phone</p><p><del>air</del>plane &#x2F; <del>aero</del>plane &#x3D; plane</p><p>math<del>ematics</del> &#x3D; math</p><p>exam<del>ination</del> &#x3D; exam</p><p>app~~lication &#x3D; app</p><p><del>in</del>flu<del>ence</del> &#x3D; flu </p><p><del>re</del>frige<del>rator</del> &#x3D; fridge</p></blockquote></li><li><p>缩写构词</p><p>一般是首字母缩写。</p><blockquote><p>VIP &#x3D; very important person </p><p>radar 雷达 &#x3D; Radio Detection and Ranging</p></blockquote></li><li><p>转化构词</p><p>使用一个单词的不同词性。</p></li></ol><blockquote><p>总结：</p><ol><li>派生构词，用源自希腊语和拉丁语的词根以及前缀、后缀构成单词。</li><li>合成构词，用源自日耳曼语的单词合并在一起构成单词。</li><li>混合构词，选取一个词的前部和另一词的后部混合起来构成单词。</li><li>截短构词，截取一个长单词的一部分作为单词。</li><li>缩写构词，选取几个单词的首字母或一部分构成缩写单词。</li><li>转换构词，使用一个单词的不同词性。</li></ol></blockquote><h1 id="Topic-23-句子成分-分类-video-23"><a href="#Topic-23-句子成分-分类-video-23" class="headerlink" title="Topic 23.句子成分&amp;分类(video.23)"></a>Topic 23.句子成分&amp;分类(video.23)</h1><ol><li><p>句子成分：</p><p>主语、谓语、宾语、定语、状语、宾语补语、表语、同谓语</p><blockquote><p>句子成分和词性之间没有一一对应的关系。定语可能是形容词、副词、数词、动词的现在、分词、介词、短语等。</p></blockquote></li><li><p>句子分类：</p><ul><li><p>按照结构复杂度分</p><p>简单句、复合句（并列复合句），复杂句（主从复合句）。</p></li><li><p>按句子的用途来分</p><ol><li><p>陈述句。</p></li><li><p>疑问句</p><blockquote><p>Did the rabbit eat the carrot? 兔子吃了胡萝卜吗？</p></blockquote><ul><li><p>一般疑问句:</p><blockquote><p>Did the rabbit eat the carrot? 兔子吃这根胡萝卜吗？</p></blockquote></li><li><p>特殊疑问句：</p><blockquote><p>What did the rabbit eat？ 兔子吃了什么？</p></blockquote></li><li><p>选择疑问句：</p><blockquote><p>Did the rabbit eat a carrot or an apple? 兔子吃过胡萝卜还是苹果？</p></blockquote></li><li><p>反义疑问句：</p><blockquote><p>The rabbit ate a carrot, didn’t he? 兔子吃了一个胡萝卜，不是吗？</p></blockquote></li></ul></li><li><p>祈使句：</p><blockquote><p>Eat the carrot! 吃了这胡萝卜!</p></blockquote></li><li><p>感叹句</p><blockquote><p>What a tasty carrot！ 多么好吃的一根胡萝卜!</p></blockquote></li></ol></li></ul></li></ol><h1 id="Topic-24-被动-video-24"><a href="#Topic-24-被动-video-24" class="headerlink" title="Topic 24.被动(video.24)"></a>Topic 24.被动(video.24)</h1><blockquote><ol><li>主动语态：强调动作的执行者</li><li>被动语态：强调动作的承受者</li></ol><ul><li>构成：</li></ul><p> be + 动词过去分词</p><ul><li>表明动作的执行者</li></ul><p> by + 动作的执行者</p></blockquote><ol><li><p>主+谓(无动作承受者,没有被动语态)</p><blockquote><p>The rabbit slept.兔子睡觉.</p></blockquote></li><li><p>主 + 谓 + 宾</p><blockquote><p>The rabbit ate the carrot. 兔子吃了胡萝卜. –&gt; The carrot was eaten by the rabbit.胡萝卜被兔子吃了.无需表明”被谁…”：</p><p>A carrot was eaten.胡萝卜被 吃了.(和非谓语动词过去分词作主语补语)</p><p>The rabbit was frightened by the wolf.兔子被狼吓着了.</p></blockquote></li><li><p>主+ 谓 + 宾 + 宾</p><blockquote><p>主+ 谓 + 直接宾语 + 间接宾语</p><p>The rabbit gave the carrot to the wolf.兔子给了狼胡萝卜.(直接宾语 the carrot 和间接宾语 the wolf)</p><p>The wolf was given the carrot by the rabbit.狼被兔子给了胡萝卜.(强调间接宾语 the wolf)</p><p>The carrot was given to the wolf by the rabbit.胡萝卜被兔子给了狼.(强调直接宾语The carrot)</p><p>都知道兔子给狼可简写：</p><p>The wolf was given the carrot.狼被给了胡萝卜.</p><p>The carrot was given to the wolf.胡萝卜被给了狼.</p><p>主语 + 谓语 + 间接宾语 +直接宾语(省略to)</p><p>The rabbit gave the wolf the carrot.兔子给了狼胡萝卜.</p><p>变被动还原to：The carrot was given to the wolf (by the rabbit).胡萝卜(被兔子)给了狼.</p></blockquote></li><li><p>主 + 谓 + 宾 + 宾补</p><blockquote><p>The wolf invited the rabbit to her party.狼邀请了兔子去她的聚会.</p><p>被动：The rabbit was invited to the party by the wolf. 兔子被狼邀请去了聚会.</p><p>The rabbit made the wolf laugh.兔子把狼逗笑了.(laugh省略 to 的动词不定式) &#x3D; The rabbit made the wolf to laugh. 兔子把狼逗笑了.</p><p>改被动还原 to ：The wolf was made to laugh (by the rabbit).狼被(兔子)逗笑了.</p></blockquote></li><li><p>主 + 系 + 表(无被动语态)</p><blockquote><p>The rabbit is smart. 兔子聪明绝顶.</p></blockquote></li></ol><blockquote><p>被动态可和时态、语气、情态、助词相结合：</p><p>![001](<a href="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_%E5%85%B6%E4%BB%96/1.English/1.English">https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H03_其他/1.English/1.English</a> Grammar&#x2F;066.png?raw&#x3D;true)</p></blockquote><h1 id="Topic-25-倒装-video-25"><a href="#Topic-25-倒装-video-25" class="headerlink" title="Topic 25.倒装(video.25)"></a>Topic 25.倒装(video.25)</h1><blockquote><ol><li><p>倒装句：为了强调某些信息，而颠倒了缘由语序的句式。</p></li><li><p>分类：</p><ul><li><p>完全倒装：句中的谓语动词放在主语前</p></li><li><p>部分倒装：句中往往只有助动词提前。</p></li><li><p>形式倒装：谓语动词不提前。</p></li></ul></li></ol></blockquote><h2 id="1-完全倒装"><a href="#1-完全倒装" class="headerlink" title="1.完全倒装"></a>1.完全倒装</h2><blockquote><p>完全倒装结构：谓语部分完全放在主语之前。</p><p>完全倒装句分为：副词和介词短语在句首的倒装，以及表语的倒装。</p></blockquote><ol><li><p>副词在句首的倒装</p><ul><li><p>地点副词在句首的倒装，以 “here；there” 等为代表。</p><blockquote><p>There goes the last bus.末班公共汽车开走了.</p><p>正常语序是:The last bus goes.末班公共汽车开走了.</p></blockquote></li><li><p>时间副词在句首的倒装，以 “now; then” 等为代表。</p><blockquote><p>Now comes to wolf’s turn! 现在轮到大灰狼啦！</p></blockquote></li><li><p>表运动方向的副词在句首的倒装，如 “in; out; up; down; away” 等。(句子要完全倒装,可以使动作显得更加生动，容易让读者有一种画面感)</p><blockquote><p>Up went the carrots into the air. 胡萝卜飞向空中.</p></blockquote></li></ul></li><li><p>介词短语在句首的倒装</p><p>介词短语在句首的倒装。</p><blockquote><p>At the table set a rabbit.桌边上坐着一只兔子.</p></blockquote></li><li><p>表语的倒装</p><p>作表语的形容词，分词，介词短语”such”，置于句首时，需要完全倒装.</p><blockquote><p>Seated on the ground is a group of rabbits.席地而坐的是一群兔子们.</p><p>Such were the wolf’s tricks.这就是大灰狼的把戏.</p></blockquote></li></ol><h2 id="2-部分倒装"><a href="#2-部分倒装" class="headerlink" title="2.部分倒装"></a>2.部分倒装</h2><blockquote><p>部分倒装(partial inversion)的形式主要是将助动词和谓语动词分离，助动词提前。</p></blockquote><ol><li><p>句首有否定意义的词:</p><blockquote><p>Never before <strong>have</strong> I eaten such a delicious carrot.我以前从未吃过如此美味的胡萝卜.</p><p>相当于 :</p><p>I have never eaten such a delicious carrot.我以前从未吃过如此美味的胡萝卜.</p></blockquote></li><li><p>句首有only：</p><blockquote><p>Only in this way <strong>can</strong> we grow delicious carrots.只有用这种方法我们才能种出美味的胡萝卜.</p><p>Only then <strong>did</strong> the rabbit meet the wolf.直到那时，兔子才遇见了狼.</p></blockquote></li><li><p>“if…should…” 构成虚拟语气:</p><blockquote><p>If I should win the lottery， I would buy a huge pile of carrots.如果我能赢得大奖，我就会买一大堆胡萝卜.(这是正常语序的虚拟语气，把 if 去掉，条件句要进行部分倒装)</p><p>Should I win the lottery, I would buy a huge pile of carrots.如果我能赢得大奖，我就会买一大堆胡萝卜.</p></blockquote></li><li><p>“固定句型”</p><blockquote><p>Rabbits love eating carrots; So do wolves.兔子喜欢吃胡萝卜，狼也是.</p><p>—I was afraid.—我害怕</p><p>—So was I. ( &#x3D; I was afraid, too)—我也是.</p><p>The rabbit can’t ride a bicycle; neither &#x2F;nor can the wolf.兔子不会骑自行车，狼也不会.</p></blockquote></li></ol><h2 id="3-形式倒装句"><a href="#3-形式倒装句" class="headerlink" title="3.形式倒装句"></a>3.形式倒装句</h2><p>形式倒装：把强调的内容提至句首，谓语动词并不提前，也就是句子的某些部分”前置”。</p><ol><li><p>感叹句：</p><blockquote><p>What a delicious carrot it is!多么美味的一根胡萝卜!</p></blockquote></li><li><p>the more…, the more… 比较级句型：</p><blockquote><p>The more carrots you eat, the healthier you become.吃胡萝卜越多，你就越健康.</p><p>相当于:</p><p>If you eat more carrots, you will become healthier.如果你多吃些胡萝卜，你就会更健康.</p></blockquote></li><li><p>however, whatever 引导的让步状语从句:</p><blockquote><p>However long this video is, you should watch it till the end.不论这个视频多长，你都应该看完.</p></blockquote></li><li><p>as, though 引导让步状语从句时，采用形式倒装：</p><blockquote><p>Much as he likes the carrot, he doesn’t want to eat it.尽管他非常喜欢胡萝卜，但他不想吃它.</p></blockquote></li></ol><h1 id="Topic-26-强调-video-26"><a href="#Topic-26-强调-video-26" class="headerlink" title="Topic 26.强调(video.26)"></a>Topic 26.强调(video.26)</h1><blockquote><p>强调就是用某种方法突出一句话中包含的多个信息中的某一个信息。</p></blockquote><ol><li><p>“口气”强调</p><ul><li><p>把需要强调的内容着重说出来：</p><blockquote><p>Rabbits like carrots.(rabbit重读)兔子喜欢胡萝卜.(是兔子而不是大灰狼喜欢胡萝卜)</p><p>Rabbits like carrots. (like重读)兔子喜欢胡萝卜.(兔子喜欢而不是讨厌胡萝卜。)</p><p>Rabbits like carrots.(carrots重读)兔子喜欢胡萝卜.</p></blockquote></li><li><p>用语气词来强调：</p><blockquote><p>Wow, Rabbits like carrots!</p><p>Oh my god, rabbits like carrots!</p><p>Bloody hell, rabbits like carrots!</p></blockquote></li></ul></li><li><p>书面格式强调</p><blockquote><p>最简单的方法是：标点符号，粗体，斜体，大小写(英文)</p></blockquote></li><li><p>词汇强调</p><ul><li><p>强调词：really ，very，just， ever 等</p><blockquote><p>Rabbits really like carrots!兔子真的喜欢!</p><p>I eat very fast!我吃东西很快!</p><p>I eat very, very, very fast! 我吃东西很很很快 (very fast 不能体现快，还可多强调几次)!</p></blockquote><blockquote><p>very 不仅能强调副词，还能强调名词</p><p>I missed the very beginning of the movie.我错过了电影刚刚开始那一段.</p><p>This is just unbelievable! 这绝对难以置信! (just 强调形容词unbelievable)</p><p>All I ever wanted is that carrot. 我所要的就是那根胡萝卜.(ever 强调动词 wanted)</p></blockquote><blockquote><p>强调词组</p><p>What in the world(&#x3D;on earth) are you talking about？你到底在说什么？(in the world 或 on earth 来强调代词what,不是在这个世界上)</p></blockquote></li><li><p>重复某个词</p><blockquote><p>He went on and on.他说个不停.</p><p>He walked and walked.他走个不停.</p></blockquote></li><li><p>助动词：要强调句中的谓语动词，可在肯定句里使用助动词 do 或者does</p><blockquote><p>Rabbits do like carrots! 兔子确实喜欢胡萝卜!</p><p>–Did you give me a thumbs-up？你给我点赞了没有啊？</p><p>–I did give you a thumbs-up! 我给你点过 赞啦~！</p></blockquote></li><li><p>强调代词</p><blockquote><p>myself 主要目的是强调，从句子里去除，不影响句意。不出反身代词myself 。</p><p>I can do it myself!我自己能做!</p><p>I myself went there!我本人去了那里!</p></blockquote></li></ul></li><li><p>句式强调</p><ul><li><p>倒装</p><p>如果想强调正常语式中出现的某个信息，可以把它提前，称倒装句。、</p><blockquote><p>原句：I did not eat a single carrot yesterday. 我昨天没有吃胡萝卜.</p><p>强调：Not a single carrot did I eat yesterday. 我昨天没有吃胡萝卜.</p><p>原句：I have never met a wolf. 我从没遇见过狼.</p><p>强调：Never have I met a wolf. 我从没遇见过狼.</p><p>原句：You go off! 你去吧!</p><p>强调：Off you go! 你去吧!</p><p>原句：The wolf comes (here)! 狼来了!</p><p>强调：Here comes the wolf! 狼来了!</p></blockquote></li><li><p>感叹</p><p>感叹句自带强调功能。</p><blockquote><p>The carrot is big! –&gt; How big the carrot is! 这胡萝卜真大!</p><p>You’ve grown a big carrot! –&gt; What a big carrot you’ve grown! 你种了好大一根胡萝卜!</p></blockquote></li><li><p>it + be动词 + that… 句式 (若指人，that可换为who。)</p><blockquote><p>The rabbit will eat the carrot. 兔子将要吃这根胡萝卜.</p><p>It is the rabbit who&#x2F;that will eat the carrot. 是这只兔子将要吃胡萝卜.</p></blockquote><blockquote><p>I met a lovely rabbit in the field this morning.我今早在田野中遇见一只可爱的兔子.</p><p>强调主语:It was I that&#x2F;who met a lovely rabbit in the field this morning.是我今早在田野中遇见一只可爱的兔子.</p><p>强调宾语：It was a lovely rabbit that&#x2F;who I met in the field this morning.有一只可爱的兔子，我今早在田野中遇见了它.</p><p>强调地点状语：It was in the field that I met a lovely rabbit this morning.就是在田野中，我今早在田野中遇见一只可爱的兔子.</p><p><strong>注：</strong>that 引导的从句 that I met a lovely rabbit this morning 相当于 where I met a lovely rabbit this morning （可以理解为地点状语从句）</p><p>强调时间状语：It was this morning that I met a lovely rabbit in the field. 就是今早，我在田野中遇见一只可爱的兔子.</p><p>注：that 引导的从句 that I met a lovely rabbit in the field 相当于 when I met a lovely rabbit in the field（可以理解为时间状语从句）</p><p>强调met：I did meet a lovely rabbit in the field this morning. 我今早确实在田野中遇见一只可爱的兔子.</p><p>强调lovely：I met a really lovely rabbit in the field this morning!我今早在田野中遇见一只超级可爱的兔子!</p><p>What a lovely rabbit I met in the field this morning!我今早在田野中遇见一只兔子，它好可爱!</p><p>How lovely the rabbit I met in the field this morning was!我今早在田野中遇见一只兔子，它好可爱!</p></blockquote></li></ul></li></ol><p>总结：</p><ol><li><p>口气，包括：重读某个词，用叹词强调，或使用某种语音语调语气。</p></li><li><p>书面格式，包括：粗体斜体，下划线，全部大写，各种标点等。</p></li><li><p>词汇强调，包括：增添强调词，重复某个词，使用助动词强调代词。</p></li><li><p>句式强调，包括：倒装，感叹， it + be动词 + that…(“强调句式”)。</p></li></ol><h1 id="Topic-27-省略-video-27"><a href="#Topic-27-省略-video-27" class="headerlink" title="Topic 27.省略(video.27)"></a>Topic 27.省略(video.27)</h1><blockquote><p>让表达更简洁，不重复啰嗦。</p></blockquote><h2 id="1-词法省略"><a href="#1-词法省略" class="headerlink" title="1.词法省略"></a>1.词法省略</h2><ol><li><p>省略冠词</p><ul><li><p>独一无二：在某个范围内独一无二的称号或身份前的定冠词可以省略，如chairman，president，head 等职位，往往就一个可以省略冠词：</p><blockquote><p>The rabbit was appointed the chairman of （the） Carrottown Committee.兔子被任命为胡罗城委员会主席.</p><p>The wolf served as （the ） head of our team.狼是我们组的头儿(队长).</p></blockquote></li><li><p>并列关系</p><p>and 可指代的是同一个人或事物。（有无冠词意义不同）</p><blockquote><p>a teacher and video creator</p></blockquote><blockquote><p>Both the rabbit and （the ） wolf will be invited to the party. 兔子和狼都会被邀请参加这个聚会.</p><p>Is this bunny a boy or （a ） girl？ 这只小兔子是男孩还是女孩？</p></blockquote></li><li><p>某些独立主格结构</p><blockquote><p>省略前：The rabbit came in, with a carrot in his hand.兔子进来了，手里拿着一根胡萝卜.</p><p>省略后：The rabbit came in, carrot in hand.兔子进来了，手里拿着一根胡萝卜.</p></blockquote></li></ul></li><li><p>省略介词</p><ul><li><p>时间介词</p><blockquote><p>I ate ten carrots (on) that day. 我那天吃了 10 根胡萝卜.</p><p>I worked (for ) 60 hours ( in ) last week. 我上周工作了 60 小时.</p></blockquote></li><li><p>“做某事儿”，很多表达动作中的介词往往也可有可无，通常等于动名词转换成了现在分词:</p><blockquote><p>I am busy (in ) making videos.我正忙着做视频.</p><p>There’s no use (in ) crying over spilled milk.覆水难收(英文谚语.字面意思：牛奶泼出来就没办法了.)</p></blockquote></li></ul></li><li><p>省略动词不定式</p><ul><li><p>并列关系</p><blockquote><p>He wanted to stay here and read.他想待在这里读书.</p></blockquote></li><li><p>不定式中的 bear infinity(裸不定式):</p><blockquote><p>The wolf helped me (to ) eat the carrot. 狼帮助我吃胡萝卜。</p><p>The wolf made me (to ) watch the video. 狼让我看视频.</p></blockquote></li></ul></li><li><p>省略从句引导词(宾语从句)</p><blockquote><p>This is the rabbit (that ) we met yesterday.这就是我们昨天见到的那只兔子.</p><p>The rabbit said (that ) the carrots were tasty. 兔子说胡萝卜很美味.</p></blockquote></li></ol><h2 id="2-句法省略"><a href="#2-句法省略" class="headerlink" title="2.句法省略"></a>2.句法省略</h2><blockquote><p>句子中某些成分的省略。</p></blockquote><ol><li><p>简单句的省略</p><ul><li><p>祈使句：</p><blockquote><p>(You ) open the door, please.请打开门.</p></blockquote></li><li><p>感叹句</p><blockquote><p>What a smart rabbit (he is)!多聪明的一只兔子啊!</p><p>How (fast) time flies! 时间过得真快啊!</p></blockquote></li><li><p>口语表达</p><blockquote><p>—What did you eat？—你吃了什么?</p><p>—(I ate) a carrot. —(我吃了)一根胡萝卜.</p><p>—Who ate the carrot?—谁吃了胡萝卜？</p><p>—The rabbit (ate the carrot).—兔子(吃了胡萝卜).</p><p>—Who is Papa Rabbit?—哪位是兔老爹？</p><p>—I am (Papa Rabbit).—我就是(兔老爹).</p><p>省略宾语不定式的一部分，但保留to。</p><p>—Would you like to eat a carrot?—你想来一根胡萝卜吗？</p><p>—Yes, I’d like to (eat a carrot).—是的，我想(来一根胡萝卜).</p></blockquote></li></ul></li><li><p>并列句的省略</p><p>并列之中的第二个或者后几个成分中，重复的部分可以省略。</p><blockquote><p>The rabbit went home after work, and (the rabbit) ate a carrot.兔子下班后回家，然后(他)吃了一根胡萝卜.</p><p>The rabbit has eaten a carrot, but the wolf hasn’t (eaten a carrot).兔子吃了一根胡萝卜，但狼没吃(吃了一根胡萝卜).</p><p>The story made the rabbit happy, but (the story made) the wolf sad.这故事让兔子高兴，让狼悲伤.</p><p>The rabbit likes carrots and the wolf (likes) apples.兔在吃胡萝卜，狼(爱吃)苹果.</p></blockquote></li><li><p>复杂句的省略</p><ul><li><p>从句：</p><blockquote><p>The rabbit will eat the carrot, but I don’t know when (he will eat it).兔子要吃这胡萝卜，但我不知道啥时候(他吃它).(宾语从句)</p><p>When young, the rabbit went to school every day.当(他)小的时候，兔子每天上学.</p><p>When (the rabbit was) young， he went to school every day.</p><p>If (it is) possible， I’ll be there on time.如果可能，我将按时到那.(包含条件状语从句)</p><p>I can eat more carrots than you (can eat carrots).我吃胡萝卜比你多.(包含比较状语从句)</p><p>You are smarter than I (am smart).你比我聪明.(包含比较状语从句)</p></blockquote></li><li><p>主句</p><blockquote><p>(I am) sorry to hear that.很抱歉，听到这个.(主语:”我”)</p><p>—Shall I give you a thumbs-up？—我应该给你点赞吗？</p><p>—If you‘d like (you can give me a thumbs-up).—如果你愿意的话.</p></blockquote></li></ul></li></ol><h2 id="3-总结-4"><a href="#3-总结-4" class="headerlink" title="3.总结"></a>3.总结</h2><ol><li>省略可分为:词法省略,句法省略。</li><li>词法省略：冠词省略、介词省略、不定式省略、从句引导词省略。</li><li>句法省略：简单句的省略、并列句的省略、复杂句的省略。</li></ol><h1 id="Topic-28-主谓一致-video-28"><a href="#Topic-28-主谓一致-video-28" class="headerlink" title="Topic 28.主谓一致(video.28)"></a>Topic 28.主谓一致(video.28)</h1><blockquote><p>英语语法的主谓一致将就三大原则：语法一致、意义一致、就近一致</p></blockquote><h2 id="1-语法一致"><a href="#1-语法一致" class="headerlink" title="1.语法一致"></a>1.语法一致</h2><blockquote><p>语法一致：让句子的谓语动词在形式上和主语的单复数保持一致。</p></blockquote><ol><li><p>单数&#x2F;复数 主语</p><ul><li><p>可数名词单复数：</p><blockquote><p>Time is money.时间是金钱. (time 是单数名词)</p><p>Carrots are delicious.胡萝卜好吃(是好吃的).</p><p>A number of carrots have been eaten.一些胡萝卜被吃了.</p><p>A lot of carrot juice has been sold.很多胡萝卜汁被卖出了.(不可数)</p></blockquote></li><li><p>非谓语动词，做主语也相当于单数名词</p><blockquote><p>To eat a carrot every day is good for the rabbit. 一天吃一根胡萝卜对兔子有好处(是有好处的).</p><p>Eating carrots is healthy. 吃胡萝卜很健康(是健康的).</p></blockquote></li><li><p>一般情况下，and 连接不同的名词作主语，会接复数谓语动词 (注：意义一致时可能是单数)</p><blockquote><p>The rabbit and the wolf are at the party.兔子和狼都参加了聚会.</p></blockquote></li></ul></li><li><p>假象主语</p><p>有”欺骗性”句子，包含了一些特定的短语，使得主语看起来是复数，但其实是单数</p><blockquote><p>as well as</p><p>The rabbit as well as other animals gets a carrot.兔子，其他动物都得到了一根胡萝卜.(as well as other animals 其实可以视作对 the rabbit 的补充信息)</p><p>except</p><p>All the animals except the wolf get the carrots.除了狼，所有的动物都得到了胡萝卜.</p><p>but</p></blockquote></li><li><p>不定代词作主语</p><p>谓语动词要和不定代词的概念保持一致</p><blockquote><p>表达”每一个”，是单数</p><p>Everyone gets a carrot.每一位都得到了一根胡萝卜.</p><p>Each of them gets a carrot.它们中的每一个都得到了一根胡萝卜.</p><p>不定代词表复数</p><p>Both of them like carrots.他俩都喜欢胡萝卜.</p><p>Some of them are afraid of the wolf.他们中有一些害怕狼.</p><p>表“没有”，单复数谓语动词都行</p><p>None of them get&#x2F;gets a carrot.它们中谁都没得到胡萝卜.</p><p>Neither of them is &#x2F;are afraid of the wolf.他们都不怕狼.</p></blockquote></li></ol><h2 id="2-意义一致"><a href="#2-意义一致" class="headerlink" title="2.意义一致"></a>2.意义一致</h2><blockquote><p>意义一致：就是主语意义为单数，则谓语动词用单数；主语意义为复数，则谓语动词也需要用复数。</p></blockquote><ol><li><p>同一个主语多种身份</p><blockquote><p>The teacher and video creator is a rabbit.这位老师兼视频创作者是只兔子.(主语单数)</p><p>The teacher and the video creator are rabbits.这位老师和这位视频创作者是兔子.（主语复数）</p></blockquote></li><li><p>复数名词的单数意义</p><p>主语形式上看起来是复数，但表达单数。</p><blockquote><p>Ten years is a long time.十年是一段很长的时间.(把十年看成一个整体，表示”十年这时间段”)</p><p>相当于</p><p>The duration of ten years is a long time.</p><p>Two coins isn’t a lot. 两枚硬币不算多.</p><p>A knife and fork is needed for eating the carrot. 一副刀叉是吃胡萝卜必须的.（一副刀叉）</p><p>Bread and butter is also needed at dinner.面包和黄油也是晚饭必需的.</p></blockquote></li><li><p>不定代词的单复数意义</p><p>不定代词做主语时，具体语义判断到底是复数还是单数主语</p><blockquote><p>All(&#x3D;Everythong) is quiet. 一切都很安静.</p><p>All are quiet. 大家都很安静.</p></blockquote></li><li><p>名词的形和意</p><p>名词往往能通过形式看出单复数，但有的时候也不靠谱。</p><ul><li><p>形复意单(用单数谓语动词)</p><p>名词看起来是复数，但是意义是单数。</p><blockquote><p>Physics is my favorite subject. 物理是我最喜欢的学科.</p></blockquote></li><li><p>形单意复(用复数谓语动词)</p><p>看起来是单数，但是意义是复数</p><blockquote><p>The cattle are on the hill.牛群在山上.</p></blockquote></li><li><p>单复数同形名词(用单复数谓语动词都可)</p><p>sheep，deer 鹿，means 方式，series 系列，species 物种等这样的词单复数同形，要看主语代表的是单数还是复数意义</p><blockquote><p>A sheep is eating grass. 一只绵羊在吃草.</p><p>The sheep are eating grass. 一群绵羊在吃草.</p></blockquote></li><li><p>集合名词(用单复数谓语动词都可)</p><p>有些名词既可代表一个集合，即单数意义，也可以代表集合中的全部成员,即复数意义。如：army、audience、 police、 team 等</p><blockquote><p>The rabbit’s family is huge.这个兔子家庭很大.(family 强调了整体概念，是单数)</p><p>The rabbits family are all at home.这个兔子家庭的所有成员都在家.( family 强调了多个家庭成员)</p><p>All the furniture here is expensive. 所有的这里的家具都很贵.</p></blockquote></li><li><p><strong>the + 形容词</strong></p><p>名词主语，也可以视作集合名词，可表单数意义，也可表复数意义</p><blockquote><p>The young are expected to learn from the old. 年轻人(们)应该向老人(们)学习.</p><p>The new is going to replace the old. 新事物会取代旧事物.</p></blockquote></li></ul></li></ol><h2 id="3-就近一致"><a href="#3-就近一致" class="headerlink" title="3.就近一致"></a>3.就近一致</h2><blockquote><p>就近一致：谓语动词的单复数由最近的主语决定。</p></blockquote><ol><li><p>or; either… or…等</p><blockquote><p>or…或者…</p><p>either… or…要么…要么…</p><p>neither… nor…既不…也不…</p><p>not only… but also…不仅…而且…</p><p>等连接两个名词或代词作主语时，谓语动词和离得最近的词一致。</p></blockquote><blockquote><p>Either you or I am going to the party.不是你就是我会去参加聚会.</p><p>Not only the rabbit but also many other animals like carrots.不只是兔子，还有其他很多动物也喜欢胡萝卜.</p></blockquote></li><li><p>there be  句型</p><blockquote><p>There is a carrot and two apples on the table. 桌上有一根胡萝卜和两个苹果.(is 离 carrot 最近)</p></blockquote></li></ol><h1 id="Topic-29-英文标点-video-29"><a href="#Topic-29-英文标点-video-29" class="headerlink" title="Topic 29.英文标点(video.29)"></a>Topic 29.英文标点(video.29)</h1><ol><li><p>逗号</p><ul><li><p>断句</p><p>逗号最主要的作用就是分割句子，便于理解</p><blockquote><p>Well, yes, let’s eat, my dear wolf. 是的，让我们吃饭饭吧，亲爱的狼.</p></blockquote></li><li><p>列举</p><blockquote><p>Let’s eat carrots, apples and bananas. 让我们吃胡萝卜，苹果和香蕉.</p><p>Let’s eat carrots, red apples and bananas. 让我们吃胡萝卜，红苹果和香蕉.(有歧义) </p><p>–&gt; Let’s eat carrots, comma, red apples, and banana. 让我们吃胡萝卜，红苹果，和香蕉.</p></blockquote></li><li><p>同位语</p><blockquote><p>I love my parents, the rabbit and wolf. (有歧义) </p><p>–&gt;I love my parents, the rabbit, and the wolf. 我爱我父母，兔子，和狼.</p></blockquote></li><li><p>引语</p><p>如果引语在前，则末尾要使用逗号.</p><blockquote><p>The wolf said to the rabbit, “Let’s eat, rabbit.” 狼对兔子说：”我们吃饭吧，兔子.”</p><p>“Well, yes, let’s eat, my dear wolf,” the rabbit said. “哦，好的，我们吃饭吧，亲爱的狼.”兔子说.</p><p>“Well, yes, let’s eat, my dear wolf,” saidthe rabbit. “哦，好的，我们吃饭吧，亲爱的狼.”兔子说.</p></blockquote></li><li><p>插入语</p><blockquote><p>“Wow, yes,” said the rabbit, “let’s eat, my dear wolf.”  “哦，好的,”兔子说.”我们吃饭吧，亲爱的狼.”</p><p>This carrot, I think, is very tasty！ 这根胡萝卜，我觉得，很好吃！</p></blockquote></li><li><p>并列句，复杂句</p><blockquote><p>The rabbit was hungry, and he ate some carrots. 兔子饿了，于是他吃了些胡萝卜.</p><p>The rabbit ate some carrot, but he was still hungry. 兔子吃了些胡萝卜，但它还是饿.</p><p>The rabbit didn’t eat more carrots, because he was on a diet. 兔子没吃更多胡萝卜，因为他在减肥.</p></blockquote></li><li><p>附加疑问句</p><blockquote><p>This is a tasty carrot，isn’t it? 这胡萝卜很美味，不是吗？</p></blockquote></li><li><p>时间地点数字格式</p><p>写时间，地点时，咱们也要用到逗号来分割，表示顺序</p><blockquote><p>Dec,2021</p><p>Dec 1st,2021</p><p>Chengdu,Sichuan,China</p></blockquote><p>之前咱们讲数字时也提到，英文长数字往往用逗号，每三位隔开，便于识别</p><blockquote><p>473,394,237,831,521</p></blockquote></li></ul></li><li><p>句号</p><ul><li>陈述句的结尾</li><li>缩略语(Mr.Rabbit)</li><li>小数点(0.01) 和网址(<a href="http://www.yingyutu.com/">www.YingYuTu.com</a>)</li></ul></li><li><p>分号</p><p>表示并列有关的意思，可以用于连接两个独立的句子</p><blockquote><p>The rabbit likes carrot; the wolf likes rabbits. 兔子喜欢胡萝卜；狼喜欢兔子.</p><p>The rabbit likes carrots; the wolf likes apples. 兔子喜欢胡萝卜；狼喜欢苹果.</p></blockquote></li><li><p>冒号</p><ul><li><p>列举：用来介绍或者解释后面的内容</p><blockquote><p>We have two lunch options: carrots, apples. 我们有两个午餐选项：胡萝卜，苹果.</p></blockquote></li><li><p>引语</p><blockquote><p>The rabbit said, “I want to eat carrots.” 兔子：“我想吃胡萝卜。”(注意中英文区别)</p><p>The rabbit: I want to eat carrots.</p></blockquote></li><li><p>主标题，副标题</p><blockquote><p>Carrots: Rabbits’ Favourite Food 胡萝卜：兔子最爱</p></blockquote></li><li><p>时间表达</p><blockquote><p>9:58</p></blockquote></li></ul></li><li><p>引号</p><ul><li><p>引语</p><blockquote><p>The wolf said to the rabbit, “Let’s eat, rabbit.” 狼对兔子说：”我们吃饭吧，兔子.”</p></blockquote></li><li><p>“单引号”，在双引号中出现</p><blockquote><p>“Please give this video a thumbs-up,” I always said, “and don’t tell me ‘I’ll do so next time’”. “请给这个视频点赞,” 我总是说，”而且别和我说’下次一定.’</p></blockquote></li><li><p>表强调</p><blockquote><p>Please don’t be a “freeloader”. 请不要做个”白嫖怪”.</p></blockquote></li><li><p>书籍、报纸、文章、杂志等名称可以用引号表示</p><blockquote><p>Have you read “The Little Prince”? 你看过《小王子》吗？</p></blockquote></li></ul></li><li><p>破折号</p><ul><li><p>解释说明:</p><blockquote><p>You’ve met my best friend — the wolf. 你见过最好的朋友了——狼.</p></blockquote></li><li><p>做句中说明部分——比如同位语——的界限：</p><blockquote><p>All the animals — the rabbit, the wolf, and their friends — will go to the party. 所有的动物——兔子，狼和它们的朋友们——都将去参加聚会.</p></blockquote></li><li><p>一句话突然中断:</p><blockquote><p>Carrots or apples？ Hmm, I didn’t—well，I guess I’ll choose carrots. 胡萝卜还是苹果？嗯，我不——好吧，我还是选胡萝卜吧.</p></blockquote></li></ul></li><li><p>问号，叹号</p><p>问号用于问句，叹号用于感叹句感叹词之后：</p><blockquote><p>What on earth does the rabbit want? 兔子到底要什么啊？</p><p>What a picky rabbit! 好挑剔的一只兔子!</p></blockquote></li><li><p>连字符，撇号</p><ul><li><p>连字符主要用来构词</p></li><li><p>撇号主要构成所有格：</p><blockquote><p>the rabbit’s carrots 兔子的胡萝卜</p></blockquote></li><li><p>撇号主要构成缩略：</p><blockquote><p>I’d better ( &#x3D; I had better ) 我最好…</p></blockquote></li></ul></li><li><p>省略号：3 个点居下。</p><blockquote><p>To be continued…</p></blockquote><ul><li><p>表示犹豫</p><blockquote><p>Could you…give this video… a thumbs-up? 你能…给这视频…点赞吗？</p></blockquote></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实践——小程序的开发</title>
      <link href="/2024/03/01/2.Java/1.Java%E5%90%8E%E7%AB%AF/2.Java%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%8F%91/"/>
      <url>/2024/03/01/2.Java/1.Java%E5%90%8E%E7%AB%AF/2.Java%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频网站：<a href="http://pt.1000phone.com/joinClassroom/2657/1710766169863">视频与笔记</a></p><h1 id="1-环境的搭建"><a href="#1-环境的搭建" class="headerlink" title="1.环境的搭建"></a>1.环境的搭建</h1><ol><li><p>JDK（8，11，13，17，21版本皆可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">环境变量:</span><br><span class="line">JAVA_HOME:JDK路径</span><br><span class="line">path：%JAVA_HOME%\bin(关联javac.exe,java.exe)</span><br></pre></td></tr></table></figure></li><li><p>Idea安装：2020  社区版，旗舰版</p></li><li><p>MySQL：5&#x2F;8</p></li><li><p>navicat：不破解试用14天（破解注意关闭防火墙）</p></li><li><p>Maven：项目管理工具（解压即可）</p><ul><li><p>创建本地仓库<strong>repository</strong>空⽂件夹（注意：与Maven在同一目录）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/001.png?raw=true" alt="001"></p></li><li><p>在Maven目录先&#x2F;conf&#x2F;settings.xml里，在53行左右插入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>本地路径/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置阿里云镜像，在161行插入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>保存</strong></p></li></ul></li></ol><h1 id="2-创建web项目"><a href="#2-创建web项目" class="headerlink" title="2.创建web项目"></a>2.创建web项目</h1><h2 id="2-1-创建web项目"><a href="#2-1-创建web项目" class="headerlink" title="2.1 创建web项目"></a>2.1 创建web项目</h2><ul><li><p><a href="https://start.spring.io/">进入官网</a>：<a href="https://start.spring.io/">https://start.spring.io/</a></p></li><li><p>根据下图所示进行设置并下载（资源damo01）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/002.png?raw=true" alt="002"></p></li><li><p>添加到Idea中</p></li></ul><h2 id="2-2-Idea的配置"><a href="#2-2-Idea的配置" class="headerlink" title="2.2 Idea的配置"></a>2.2 Idea的配置</h2><ul><li><p>自动配置</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/003.png?raw=true" alt="002"></p></li><li><p>不区分大小写</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/004.png?raw=true" alt="002"></p></li><li><p>maven配置</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/005.png?raw=true" alt="002"></p></li></ul><ol><li><p>在pom.xml文件下修改以下两个版本号，运行项目</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/006.png?raw=true" alt="002"></p></li></ol><h1 id="3-pom-xml结构"><a href="#3-pom-xml结构" class="headerlink" title="3.pom.xml结构"></a>3.pom.xml结构</h1><ol><li><p>依赖：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/007.png?raw=true" alt="002"></p></li><li><p>MySQL的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>找依赖的网址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></li><li><p>maven管理项目</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/008.png?raw=true" alt="002"></p></li></ol><h1 id="4-项目的构建"><a href="#4-项目的构建" class="headerlink" title="4.项目的构建"></a>4.项目的构建</h1><h2 id="4-1-项目的执行流程"><a href="#4-1-项目的执行流程" class="headerlink" title="4.1 项目的执行流程"></a>4.1 项目的执行流程</h2><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/009.png?raw=true" alt="002"></p><h2 id="4-2-项目的构建"><a href="#4-2-项目的构建" class="headerlink" title="4.2 项目的构建"></a>4.2 项目的构建</h2><p>在demo下创建5个包：config,controller,dao,entity,service</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/010.png?raw=true" alt="002"></p><h1 id="5-controller交互springmvc"><a href="#5-controller交互springmvc" class="headerlink" title="5.controller交互springmvc"></a>5.controller交互springmvc</h1><ul><li>拦截请求</li></ul><blockquote><ul><li>导入springmvc依赖(已有)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建类并且添加controller注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Controller</span>  <span class="comment">//拦截请求</span></span><br></pre></td></tr></table></figure><ul><li>@RequestMapping()适配请求地址。——&gt; restful设计风格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">&gt;* url: http://localhost:8080/test</span></span><br><span class="line"><span class="comment">&gt;*</span></span><br><span class="line"><span class="comment">&gt;* restful设计风格（请求方式）</span></span><br><span class="line"><span class="comment">&gt;*增 post</span></span><br><span class="line"><span class="comment">&gt;*删 delete</span></span><br><span class="line"><span class="comment">&gt;*改 put</span></span><br><span class="line"><span class="comment">&gt;*查 get</span></span><br><span class="line"><span class="comment">&gt;*/</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@RequestMapping(&quot;test&quot;)</span> <span class="comment">//第一级适配地址请求地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：当端口号被占用的时候，在resource&#x2F;application.properties文件中添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&gt;server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p>下载<a href="https://apifox.com/?utm_source=baidu&utm_medium=sem&utm_campaign=352505593&utm_content=8777860707&utm_term=apifox%E7%A6%BB%E7%BA%BF%E7%89%88&bd_vid=12715455351864083910">apifox软件</a></p></blockquote><ul><li>获取参数</li></ul><blockquote><ul><li>获取参数——&gt;获取用户请求数据</li><li>参数的名称保持⼀致。key——value键值对</li><li>路径传参 @PathVariable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;one&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTest</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询单个信息&quot;</span>);</span><br><span class="line">    System.out.println(username+password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;all/&#123;name&#125;/&#123;word&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAllTest</span><span class="params">(<span class="meta">@PathVariable</span> String name,<span class="meta">@PathVariable</span> String word)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询所有信息&quot;</span>);</span><br><span class="line">    System.out.println(name + word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;增加信息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除信息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updataTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;更新信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>响应结果</li></ul><blockquote><ul><li><p>响应⻚⾯&#x2F;数据(给前端返回数据，前后端不分离)</p></li><li><p>返回页面</p><ul><li><p>导⼊thymeleaf模版引擎依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建新⻚⾯——&gt;存放在templates⽂件中</p><p>创建一个index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义返回⻚⾯的⽅法</p><p>url：<a href="http://localhost:8080/user/topage">http://localhost:8080/user/topage</a></p><p>return”⻚⾯名称”；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回主页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;topage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回数据</p><ul><li><p>添加注解@ResponseBody（返回数据为JSON、XML）</p></li><li><p>url：<a href="http://localhost:8080/user/todata">http://localhost:8080/user/todata</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>封装实体类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password, String sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get,set</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写tostring</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSON参数的获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当传参的时候，传入JSON参数要使用</span></span><br><span class="line"><span class="meta">@RequestBody</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addTest</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>调用业务（要有业务层）</li></ul><blockquote><p>登录业务 (⽤户user)</p><p>url:<a href="http://localhost:8080/user/login?username=admin&password=123456">http://localhost:8080/user/login?username=admin&amp;password=123456</a></p><p>UserController拦截请求</p><p>创建业务层</p><p>创建接⼝定义⽅法</p><p>创建实现类实现⽅法</p><p>业务层对象的实例化（new 对象）@Autowired</p><p>调⽤⽅法得到结果</p></blockquote><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/011.png?raw=true" alt="002"></p><h1 id="6-JDBC链接数据库"><a href="#6-JDBC链接数据库" class="headerlink" title="6.JDBC链接数据库"></a>6.JDBC链接数据库</h1><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/012.png?raw=true" alt="002"></p><ol><li><p>安装<a href="https://www.32r.com/soft/115254.html">Navicat</a>，并且创建数据库</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/demo01?serverTimezone=Asia/Shanghai&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">   </span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;select  * from t_user&quot;</span>);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">4</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, name, password, sex);<span class="comment">//封装对象</span></span><br><span class="line">            System.out.println(user);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-mybatis半映色框架"><a href="#7-mybatis半映色框架" class="headerlink" title="7.mybatis半映色框架"></a>7.mybatis半映色框架</h1><p><a href="https://mybatis.net.cn/">mybatis官网</a></p><ul><li><p>配置MySQL（在全局文件）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo01?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>导入mybatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建dao</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/013.png?raw=true" alt="002"></p></li><li><p>dao.xml文件的基础配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:映射具体接口的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.demo002.dao.ScoreDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置 扫描dao 和mapper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Application文件</span><br><span class="line">@MapperScan(&quot;com.qf.demo002.dao&quot;)</span><br><span class="line"></span><br><span class="line">//全局文件</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure></li></ul><h1 id="8-基本登录API的实现"><a href="#8-基本登录API的实现" class="headerlink" title="8.基本登录API的实现"></a>8.基本登录API的实现</h1><blockquote><p>Url:<a href="http://localhost:8080/user/login?username=admin&password=123456">http://localhost:8080/user/login?username=admin&amp;password=123456</a></p><p>参数：username&#x3D;admin&amp;password&#x3D;123456</p></blockquote><ul><li>controller user&#x3D;&#x3D;》login（）</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">&gt;<span class="meta">@ResponseBody</span></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">&gt;<span class="comment">//调⽤业务 得到结果</span></span><br><span class="line">&gt;<span class="comment">//UserService userService = new UserServiceImpl();</span></span><br><span class="line">&gt;<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">&gt;<span class="comment">//响应结果</span></span><br><span class="line">&gt;<span class="keyword">return</span> result;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Service </p><ul><li>interface &#x3D;&#x3D;》定义⽅法名</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;String <span class="title function_">login</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure></blockquote><ul><li>impl 实现类 &#x3D;&#x3D;》具体业务的实现（interface的⽅法）</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Service</span> <span class="comment">//==&gt;new对象 ==》new UserServiceImpl()</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&gt;<span class="meta">@Autowired</span></span><br><span class="line">&gt;<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">&gt;<span class="comment">//具体业务的实现</span></span><br><span class="line">&gt;<span class="comment">//判断⽤户是否存在 通过⽤户名（客户端输⼊的⽤户名） 获取数据库⽤户信息（dao 链接数据库与</span></span><br><span class="line">&gt;数据库进⾏交互）</span><br><span class="line">&gt;<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.login(username);</span><br><span class="line">&gt;<span class="keyword">if</span> (user!=<span class="literal">null</span>)&#123;</span><br><span class="line">&gt;<span class="comment">//判断密码是否正确</span></span><br><span class="line">&gt;<span class="keyword">if</span> (password.equals(user.getPassword()))&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&gt;&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> <span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> <span class="string">&quot;⽤户不存在&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>userDao.interface &#x3D;&gt;定义⽅法名</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&gt;<span class="comment">//通过⽤户名获取⽤户信息</span></span><br><span class="line">&gt;User <span class="title function_">login</span><span class="params">(String name)</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>UserDao.xml</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE mapper</span><br><span class="line">  PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&gt;&lt;!--namespace:映射具体接口的全限定类名--&gt;</span><br><span class="line"></span><br><span class="line">&gt;&lt;mapper namespace=<span class="string">&quot;com.hqh.demo001.dao.UserDao&quot;</span>&gt;</span><br><span class="line">&gt;&lt;!-- id:对应⽅法名 resultType：返回结果类型 （集合返回它的范型） #&#123;参数名（⼀致）&#125;--&gt;</span><br><span class="line">&gt;&lt;select id=<span class="string">&quot;login&quot;</span> resultType=<span class="string">&quot;com.hqh.demo001.entity.User&quot;</span>&gt;</span><br><span class="line">  select * from t_user where username=#&#123;name&#125;</span><br><span class="line">&gt;&lt;/select&gt;</span><br><span class="line">&gt;&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="9-新建表，实现各类⽂件的创建"><a href="#9-新建表，实现各类⽂件的创建" class="headerlink" title="9.新建表，实现各类⽂件的创建"></a>9.新建表，实现各类⽂件的创建</h1><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/014.png?raw=true" alt="002"></p><ul><li>封装实体类</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.hqh.demo001.entity;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TScore</span> &#123;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">private</span> String idcard;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="title function_">TScore</span><span class="params">()</span> &#123;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="title function_">TScore</span><span class="params">(<span class="type">int</span> id, String cname, String idcard, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">  <span class="built_in">this</span>.cname = cname;</span><br><span class="line">  <span class="built_in">this</span>.idcard = idcard;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.id = id;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">getCname</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cname;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCname</span><span class="params">(String cname)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.cname = cname;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">getIdcard</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> idcard;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdcard</span><span class="params">(String idcard)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.idcard = idcard;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> score;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;TScore&#123;&quot;</span> +</span><br><span class="line">          <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">          <span class="string">&quot;, cname=&#x27;&quot;</span> + cname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">          <span class="string">&quot;, idcard=&#x27;&quot;</span> + idcard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">          <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">          <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ul><li>创建各层类</li></ul><blockquote><ol><li>ScoreController</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Controller</span></span><br><span class="line">&gt;<span class="meta">@RequestMapping(&quot;score&quot;)</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreController</span> &#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>ScoreService</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScoreService</span> &#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>ScoreServiceImpl</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Service</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScorceServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ScoreService</span> &#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>ScoreDao</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScoreDao</span> &#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>ScoreDao.xml</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE mapper</span><br><span class="line">&gt;PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">&gt;<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&gt;&lt;!--namespace:映射具体接⼝的全限定类名--&gt;</span><br><span class="line">&gt;&lt;mapper namespace=<span class="string">&quot;com.qf.demo002.dao.ScoreDao&quot;</span>&gt;</span><br><span class="line">&gt;&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="10-实现增删改查的api"><a href="#10-实现增删改查的api" class="headerlink" title="10.实现增删改查的api"></a>10.实现增删改查的api</h1><blockquote><ol><li>查询所有</li></ol><ul><li><p>url：<a href="http://localhost:8080/score/getAll">http://localhost:8080/score/getAll</a></p></li><li><p>⽆参数</p></li><li><p>返回值类型 成绩集合</p></li></ul><ol start="2"><li>根据id查询成绩信息</li></ol><ul><li><p>url：<a href="http://localhost:8080/score/getById">http://localhost:8080/score/getById</a></p></li><li><p>参数为键值对id&#x3D;1</p></li><li><p>返回值类型：成绩对象</p></li></ul><ol start="3"><li>通过id删除单条成绩</li></ol><ul><li><p>url：<a href="http://localhost:8080/score/deleteById">http://localhost:8080/score/deleteById</a></p></li><li><p>参数：id</p></li><li><p>返回值类型字符串</p></li></ul><ol start="4"><li>修改成绩信息</li></ol><ul><li><p>url：<a href="http://localhost:8080/score/update">http://localhost:8080/score/update</a></p></li><li><p>参数：score对象. 获取json格式数据（对象） @RequestBody</p></li><li><p>返回值：String</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cname&quot;</span><span class="punctuation">:</span><span class="string">&quot;⼆班&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;idcard&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022102007&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="number">99</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>增添单个成绩</li></ol><ul><li><p>url：<a href="http://localhost:8080/score/add">http://localhost:8080/score/add</a></p></li><li><p>参数：score对象. Json</p></li><li><p>返回值：boolean。 string</p></li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line">&gt;<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">&gt;<span class="attr">&quot;cname&quot;</span><span class="punctuation">:</span><span class="string">&quot;⼆班&quot;</span><span class="punctuation">,</span></span><br><span class="line">&gt;<span class="attr">&quot;idcard&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022102008&quot;</span><span class="punctuation">,</span></span><br><span class="line">&gt;<span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="number">98</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="12-前端"><a href="#12-前端" class="headerlink" title="12.前端"></a>12.前端</h1><blockquote><ol><li><a href="https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN">注册</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">官方开发文档</a></li><li><a href="https://www.iconfont.cn/">图标获取</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/">WXML文档</a></li></ol></blockquote><h1 id="13-项目实现"><a href="#13-项目实现" class="headerlink" title="13.项目实现"></a>13.项目实现</h1><blockquote><ol><li>数据库的导入</li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/015.png?raw=true" alt="002"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/016.png?raw=true" alt="002"></p><ol start="2"><li>项目的分析</li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/7.java%E5%AE%9E%E8%AE%AD/017.png?raw=true" alt="002"></p><ol start="3"><li>设计API</li></ol><ul><li><p>通过图⽚类型获取图⽚信息</p></li><li><p>url：<a href="http://localhost:8080/image/getByImageType?imagetype=banner">http://localhost:8080/image/getByImageType?imagetype=banner</a></p></li><li><p>参数：imagetype &#x3D;&#x3D;》String</p></li><li><p>返回值：ArrayList</p></li><li><p>获取所有项⽬信息（项⽬基本信息以及图⽚）（项⽬表与图⽚表有关系⼀对⼀的关系&#x3D;&#x3D;》联表查询）</p></li><li><p>url：<a href="http://localhost:8080/project/getAll">http://localhost:8080/project/getAll</a></p></li><li><p>参数：⽆参数</p></li><li><p>返回值类型：ArrayList</p></li><li><p>通过导航栏获取项⽬信息</p></li><li><p>url：<a href="http://localhost:8080/project/getByType?name=%E7%BE%8E%E7%94%B2">http://localhost:8080/project/getByType?name=美甲</a></p></li><li><p>参数：项⽬类型protype&#x3D;&#x3D;》String</p></li><li><p>返回值类型：ArrayList</p></li><li><p>通过项⽬id获取项⽬信息</p></li><li><p>url：<a href="http://localhost:8080/project/getById?id=1">http://localhost:8080/project/getById?id=1</a></p></li><li><p>参数：id&#x3D;&#x3D;&#x3D;》int</p></li><li><p>返回值类型：Project</p></li></ul><ol start="4"><li>实现API</li></ol><ul><li>封装实体类</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TImage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String imageurl;</span><br><span class="line">    <span class="keyword">private</span> String imagetitle;</span><br><span class="line">    <span class="keyword">private</span> String imagetype;</span><br><span class="line">    <span class="keyword">private</span> String imagestate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TImage</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TImage</span><span class="params">(<span class="type">int</span> id, String imageurl, String imagetitle, String imagetype, String imagestate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">        <span class="built_in">this</span>.imagetitle = imagetitle;</span><br><span class="line">        <span class="built_in">this</span>.imagetype = imagetype;</span><br><span class="line">        <span class="built_in">this</span>.imagestate = imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImageurl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageurl</span><span class="params">(String imageurl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagetitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagetitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagetitle</span><span class="params">(String imagetitle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagetitle = imagetitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagetype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagetype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagetype</span><span class="params">(String imagetype)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagetype = imagetype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagestate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagestate</span><span class="params">(String imagestate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagestate = imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TImage&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, imageurl=&#x27;&quot;</span> + imageurl + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagetitle=&#x27;&quot;</span> + imagetitle + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagetype=&#x27;&quot;</span> + imagetype + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagestate=&#x27;&quot;</span> + imagestate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建控制层</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageService imageService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建业务层</li></ul><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ImageService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageDao imageDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>创建数据持久层</li></ul><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射文件（接口的实现）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:映射具体接⼝的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.demo002.dao.ImageDao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>以下是整个项目的代码：</p><ul><li>首先是Demo001Application文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.hqh.demo001;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">&gt;<span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt;<span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt;<span class="meta">@MapperScan(&quot;com.hqh.demo001.dao&quot;)</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo001Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Demo001Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>entity文件夹下：</li></ul><ol><li>TImage文件</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TImage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String imageurl;</span><br><span class="line">    <span class="keyword">private</span> String imagetitle;</span><br><span class="line">    <span class="keyword">private</span> String imagetype;</span><br><span class="line">    <span class="keyword">private</span> String imagestate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TImage</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TImage</span><span class="params">(<span class="type">int</span> id, String imageurl, String imagetitle, String imagetype, String imagestate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">        <span class="built_in">this</span>.imagetitle = imagetitle;</span><br><span class="line">        <span class="built_in">this</span>.imagetype = imagetype;</span><br><span class="line">        <span class="built_in">this</span>.imagestate = imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImageurl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageurl</span><span class="params">(String imageurl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagetitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagetitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagetitle</span><span class="params">(String imagetitle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagetitle = imagetitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagetype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagetype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagetype</span><span class="params">(String imagetype)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagetype = imagetype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImagestate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImagestate</span><span class="params">(String imagestate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imagestate = imagestate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TImage&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, imageurl=&#x27;&quot;</span> + imageurl + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagetitle=&#x27;&quot;</span> + imagetitle + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagetype=&#x27;&quot;</span> + imagetype + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imagestate=&#x27;&quot;</span> + imagestate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>Project文件</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Project</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String proexplain;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double proprice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prostep;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> protypeid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String proname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> imageid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prostatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> busid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tecid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imageurl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Project</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Project</span><span class="params">(<span class="type">int</span> id, String proexplain, Double proprice, String prostep, <span class="type">int</span> protypeid, String proname, <span class="type">int</span> imageid, String prostatus, <span class="type">int</span> busid, <span class="type">int</span> tecid, String imageurl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.proexplain = proexplain;</span><br><span class="line">        <span class="built_in">this</span>.proprice = proprice;</span><br><span class="line">        <span class="built_in">this</span>.prostep = prostep;</span><br><span class="line">        <span class="built_in">this</span>.protypeid = protypeid;</span><br><span class="line">        <span class="built_in">this</span>.proname = proname;</span><br><span class="line">        <span class="built_in">this</span>.imageid = imageid;</span><br><span class="line">        <span class="built_in">this</span>.prostatus = prostatus;</span><br><span class="line">        <span class="built_in">this</span>.busid = busid;</span><br><span class="line">        <span class="built_in">this</span>.tecid = tecid;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProexplain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> proexplain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProexplain</span><span class="params">(String proexplain)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proexplain = proexplain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getProprice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> proprice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProprice</span><span class="params">(Double proprice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proprice = proprice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProstep</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prostep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProstep</span><span class="params">(String prostep)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prostep = prostep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProtypeid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> protypeid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProtypeid</span><span class="params">(<span class="type">int</span> protypeid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.protypeid = protypeid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> proname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProname</span><span class="params">(String proname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proname = proname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getImageid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imageid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageid</span><span class="params">(<span class="type">int</span> imageid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageid = imageid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProstatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prostatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProstatus</span><span class="params">(String prostatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prostatus = prostatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBusid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> busid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBusid</span><span class="params">(<span class="type">int</span> busid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.busid = busid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTecid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tecid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTecid</span><span class="params">(<span class="type">int</span> tecid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tecid = tecid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImageurl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImageurl</span><span class="params">(String imageurl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageurl = imageurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Project&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, proexplain=&#x27;&quot;</span> + proexplain + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, proprice=&quot;</span> + proprice +</span><br><span class="line">                <span class="string">&quot;, prostep=&#x27;&quot;</span> + prostep + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, protypeid=&quot;</span> + protypeid +</span><br><span class="line">                <span class="string">&quot;, proname=&#x27;&quot;</span> + proname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imageid=&quot;</span> + imageid +</span><br><span class="line">                <span class="string">&quot;, prostatus=&#x27;&quot;</span> + prostatus + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, busid=&quot;</span> + busid +</span><br><span class="line">                <span class="string">&quot;, tecid=&quot;</span> + tecid +</span><br><span class="line">                <span class="string">&quot;, imageurl=&#x27;&quot;</span> + imageurl + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>controller文件夹下：</li></ul><ol><li>ImageController</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.entity.TImage;</span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.service.ImageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageService imageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getByImageType&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;TImage&gt; <span class="title function_">getByImageType</span><span class="params">(String imagetype)</span>&#123;</span><br><span class="line">        ArrayList&lt;TImage&gt; tImages = imageService.getByImageType(imagetype);</span><br><span class="line">        <span class="keyword">return</span> tImages;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  }</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt;2. ProjectController</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  package com.hqh.demo001.controller;</span><br><span class="line"></span><br><span class="line">  import com.hqh.demo001.entity.Project;</span><br><span class="line">  import com.hqh.demo001.service.ProjectService;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">  import org.springframework.stereotype.Controller;</span><br><span class="line">  import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">  import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">  @Controller</span><br><span class="line">  @RequestMapping(&quot;project&quot;)</span><br><span class="line">  public class ProjectController &#123;</span><br><span class="line"></span><br><span class="line">      @Autowired</span><br><span class="line">      private ProjectService projectService;</span><br><span class="line"></span><br><span class="line">      @RequestMapping(&quot;getAll&quot;)</span><br><span class="line">      @ResponseBody</span><br><span class="line">      public ArrayList&lt;Project&gt; getAll()&#123;</span><br><span class="line">          ArrayList&lt;Project&gt; projects = projectService.getAll();</span><br><span class="line">          return projects;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @RequestMapping(&quot;getByType&quot;)</span><br><span class="line">      @ResponseBody</span><br><span class="line">      public ArrayList&lt;Project&gt; getByType(String name)&#123;</span><br><span class="line">          ArrayList&lt;Project&gt; projects = projectService.getByType(name);</span><br><span class="line">          return projects;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @RequestMapping(&quot;getById&quot;)</span><br><span class="line">      @ResponseBody</span><br><span class="line">      public Project getById(int id)&#123;</span><br><span class="line">          Project project = projectService.getById(id);</span><br><span class="line">          return project;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>service文件夹下：</li></ul><ol><li>ImageService接口</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.entity.TImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageService</span> &#123;</span><br><span class="line">    ArrayList&lt;TImage&gt; <span class="title function_">getByImageType</span><span class="params">(String imagetype)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>ProjectController接口</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.entity.Project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProjectService</span> &#123;</span><br><span class="line">    ArrayList&lt;Project&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Project&gt; <span class="title function_">getByType</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    Project <span class="title function_">getById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>impl文件夹下</li></ol><ul><li><p>ImageServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.dao.ImageDao;</span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.entity.TImage;</span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.service.ImageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ImageService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageDao imageDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;TImage&gt; <span class="title function_">getByImageType</span><span class="params">(String imagetype)</span> &#123;</span><br><span class="line">        ArrayList&lt;TImage&gt; tImages = imageDao.getByImageType(imagetype);</span><br><span class="line">        <span class="keyword">return</span> tImages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>PrjeceServicrImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqh.demo001.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.dao.ProjectDao;</span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.entity.Project;</span><br><span class="line"><span class="keyword">import</span> com.hqh.demo001.service.ProjectService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrjeceServicrImpl</span> <span class="keyword">implements</span> <span class="title class_">ProjectService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectDao projectDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Project&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;Project&gt; projects = projectDao.getAll();</span><br><span class="line">        <span class="keyword">return</span> projects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Project&gt; <span class="title function_">getByType</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        ArrayList&lt;Project&gt; projects = projectDao.getByType(name);</span><br><span class="line">        <span class="keyword">return</span> projects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Project <span class="title function_">getById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">Project</span> <span class="variable">project</span> <span class="operator">=</span> projectDao.getById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dao文件夹下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.hqh.demo001.dao;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> com.hqh.demo001.entity.TImage;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImageDao</span> &#123;</span><br><span class="line">   ArrayList&lt;TImage&gt; <span class="title function_">getByImageType</span><span class="params">(String imagetype)</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> com.hqh.demo001.dao;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> com.hqh.demo001.entity.Project;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProjectDao</span> &#123;</span><br><span class="line">   ArrayList&lt;Project&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   ArrayList&lt;Project&gt; <span class="title function_">getByType</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">   Project <span class="title function_">getById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>mapper文件夹下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--namespace:映射具体接⼝的全限定类名--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hqh.demo001.dao.ImageDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByImageType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hqh.demo001.entity.TImage&quot;</span>&gt;</span></span><br><span class="line">       select * from image where imagetype=#&#123;imagetype&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--namespace:映射具体接⼝的全限定类名--&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hqh.demo001.dao.ProjectDao&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hqh.demo001.entity.Project&quot;</span>&gt;</span></span><br><span class="line">       select *  from project,image where project.imageid=image.id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hqh.demo001.entity.Project&quot;</span>&gt;</span></span><br><span class="line">       select * from project,image,projecttype where project.imageid=image.id and project.projecttype.id and project.`name`=#&#123;name&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hqh.demo001.entity.Project&quot;</span>&gt;</span></span><br><span class="line">       select * from project where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><p>前端静态页面的实现</p></li><li><p>在后端的static目录下创建images，并将后端的图片放进去（删除原有的target目录，重新编译）</p></li><li><p>创建新项目，并且删除原有pages中的文件，app.js,app.json</p></li><li><p>前端新建images文件夹下</p></li><li><p>tabbar的实现</p><ul><li><p>创建pages页面（app.json）,[index,tech,my,detail],注意index文件夹（要有4个文件）</p></li><li><p>app.json:</p><p>tabBat(回车)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/index_icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/index_icon_HL.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/tech/tech&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;技师&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/skill_icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/skill_icon_HL.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/my/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/user_icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/user_icon_HL.png&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>页面的实现</p><ul><li>轮播图的实现</li></ul></li><li><p>前后端整合</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本博客搭建</title>
      <link href="/2024/01/01/5.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/01/5.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的搭建方法有两种：</p><ol><li>hexo + gitee（国内，网页加载速度快）</li><li>hexo + github（国外，网页加载速度慢）</li></ol><p><strong>安装工具：</strong></p><ol><li><p><strong>node.js：</strong><a href="https://nodejs.org/">https://nodejs.org</a></p></li><li><p><strong>git：</strong><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>（官网下载比较慢）</p></li><li><p><strong>Typora：</strong>编辑网页文档使用的工具</p></li></ol><p>注意修改安装路径。</p><h1 id="方法一：hexo-gitee"><a href="#方法一：hexo-gitee" class="headerlink" title="方法一：hexo + gitee"></a>方法一：hexo + gitee</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>服务器在国内，别人的访问自己的网页速度快。</p></li><li><p><strong>缺点：</strong></p><p>需要身份证验证（身份证正反面，手持身份证正反面），以及等待备案通过。</p></li></ul><h1 id="方法二：hexo-github"><a href="#方法二：hexo-github" class="headerlink" title="方法二：hexo + github"></a>方法二：hexo + github</h1><p>建议先看一遍：hexo + gitee 的推荐视频<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>只需要有邮箱，不需要身份验证。</p></li><li><p><strong>缺点：</strong></p><p>服务器在国外，不使用加速器可能连自己都访问不了。</p></li></ul><p>推荐加速器：watt toolkit（微软商店可以下载，无毒，开源）</p><p><strong>接下来是正式搭建：</strong></p><p>在安装好node.js，git，Typora，watt toolkit（可选）之后，</p><ul><li><strong>环境检测：</strong></li></ul><ol><li><p>在任意位置新建hexo文件夹</p></li><li><p>右键 - 显示更多选项 - Open Git Bash here</p><p>输入：</p><p>node -v<br>npm -v（这个是node附带的）<br>git -v </p></li><li><p>输入</p><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo s</p></li></ol><ul><li><strong>搭建仓库</strong></li></ul><p>1.注册登入github（提示注册名字和创建好的网站名有关）：<a href="https://github.com/">https://github.com/</a></p><p>2.点击Create a new repository进入新建仓库页面</p><p>​GitHub: Let’s build from here</p><p>3.点击Create a new repository进入新建仓库页面</p><p>​仓库名输入：用户名.github.io(我已经试过了，必须是这种格式后面才能够访问)</p><p>​勾选Public</p><p>​勾选 Add a README file</p><p>​拉到下面点击create创建</p><ul><li><p><strong>生成SSH Keys</strong></p><p>1.在任意文件夹，右键 - Git bush here</p><p>2.输入：ssh-keygen -t rsa -C “邮件地址”</p><p>3.敲4次Enter</p><p>4.进入C:\Users\用户名，在里面进入.ssh文件</p><p>5.用记事本打开id_rsa.pub,全选复制</p><p>6.打开github，点击头像 - setting - 左边找到SSH相关字样 - new SSH keys，名称随意，在下面粘贴代码，然后创建</p><p>7.测试是否成功，在Git bush here中输入：ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>，回车，然后再输入yes</p></li><li><p><strong>本地生成博客内容</strong></p></li></ul><ol><li><p>关闭Git bush here，进入hexo,blog文件夹，右键打开Git bush here</p></li><li><p>输入：</p><p>hexo g<br>hexo s</p><p>然后会输出一个网址，该网址为本地网址（不能联网访问）</p></li></ol><ul><li><strong>上线博客</strong></li></ul><ol><li><p>进入blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><p> type: git<br> repository:<br> branch: main </p><p>（每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！）</p></li></ol><p>​    2.去github，在之前生成的仓库页面点code，复制https链接</p><p>​将其粘贴到我们记事本中的repository：后面</p><p>​然后保存退出</p><p>​3.在Git bush here中输入</p><p>​npm install hexo-deployer-git –save</p><p>​hexo g</p><p>​hexo d</p><p>​然后在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p>到这里我们就搭建好了自己的网站，</p><p>网址为：<strong>用户名.github.io</strong></p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>虽然，到现在网站已经搭建好了，但是博客的主题需要自己去hexo的官网探索，推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><p>下载好以后，就是个人博客的参数配置。每次配置完成在Git bush here中输入：</p><p>hexo clean  (清除以前网页初始化)</p><p>hexo g  (生成网页)</p><p>hexo d （上传网页到github）</p><p>hexo s  (本地运行网页)</p>]]></content>
      
      
      <categories>
          
          <category> DIY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析与可视化</title>
      <link href="/2023/11/20/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/11/20/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频推荐：<a href="https://www.bilibili.com/video/BV1dA41187Yn/?spm_id_from=333.788.video.desc.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>重点学习了Numpy,Pandas,Matplotlib三个库</p><h1 id="1-第一章-数据分析与可视化概述"><a href="#1-第一章-数据分析与可视化概述" class="headerlink" title="1.第一章 数据分析与可视化概述"></a>1.第一章 数据分析与可视化概述</h1><h2 id="1-什么是数据分析"><a href="#1-什么是数据分析" class="headerlink" title="1.什么是数据分析"></a>1.什么是数据分析</h2><p>数据分析是使用适当的统计分析方法对收集来的大量数据进行分析，从中提取有用信息和形成结论，并加以详细研究和概括总结的过程。</p><h2 id="2-数据分析的流程"><a href="#2-数据分析的流程" class="headerlink" title="2.数据分析的流程"></a>2.数据分析的流程</h2><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/1.png?raw=true" alt="1.png"></p><h1 id="2-第二章-python编程基础"><a href="#2-第二章-python编程基础" class="headerlink" title="2.第二章 python编程基础"></a>2.第二章 python编程基础</h1><p><strong>注：详细语法见Python编程</strong></p><p>以下为个人认为容易忘记的知识点：</p><ol><li><p>不可变数据类型：number 、string、tuple</p></li><li><p>变数据类型：list、dictionary 、set</p></li><li><p>运算符优先级：</p><p>逻辑&lt;关系&lt;算术</p></li><li><p><strong>r” “</strong> 的字符串方式，默认不转义</p></li><li><p>切片：[:]</p></li><li><p>range（start,end,step）,生成为[,)的区间。</p></li><li><p>字典中的键必须唯一。</p></li><li><p>空集合只能使用set()创建。</p></li><li><p>“ “.join()连接字符串。</p></li><li><p><strong>lambda函数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匿名函数：</span><br><span class="line">a = lambda x,y,z:1+x*2+y*2+z*2</span><br><span class="line">a(1,2,3)</span><br></pre></td></tr></table></figure></li><li><p>文件操作</p><ul><li><p>打开文件：open()函数；</p></li><li><p>读取&#x2F;写入文件：read()、readline()、readlines()、write()等；</p></li><li><p>对读取到的数据进行处理；</p></li><li><p>关闭文件：close()。</p><table><thead><tr><th>read([size])</th><th>读取文件所有内容，返回字符串类型，参数size 表示读取的数量，以byte为单位，可以省略</th></tr></thead><tbody><tr><td><strong>readline([size])</strong></td><td><strong>读取文件一行的内容，以字符串形式返回，若定义了size，则读出一行的一部分</strong></td></tr><tr><td><strong>readlines([size])</strong></td><td><strong>读取所有的行到列表里面[line1,line2,…lineN]，(文件每一行是list的一个成员)，参数size表示读取内容的总长)</strong></td></tr></tbody></table></li></ul></li></ol><h1 id="3-第三章-NumPy数值计算基础"><a href="#3-第三章-NumPy数值计算基础" class="headerlink" title="3.第三章 NumPy数值计算基础"></a>3.第三章 NumPy数值计算基础</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>NumPy是Python的一种开源的数值计算扩展库。</p><p>它提供了两种基本的对象：</p><ol><li>ndarray：是储存单一数据类型的多维数组。</li><li>ufunc：是一种能够对数组进行处理的函数。</li></ol><p>ndarray是一个通用的同构数据容器，即其中的所有元素都需要相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i : int8,int16,int32,int64</span><br><span class="line">f : float16,float32,float64</span><br><span class="line">复数 ： complex64,complex64</span><br><span class="line">u : unicode编码</span><br><span class="line">s : 固定字符串长度</span><br><span class="line">b : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h2 id="1-array函数创建数组对象"><a href="#1-array函数创建数组对象" class="headerlink" title="1.array函数创建数组对象"></a>1.array函数创建数组对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array函数的格式：</span><br><span class="line">np.array(object, dtype,ndmin)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>接收array，表示想要创建的数组</td></tr><tr><td>dtype</td><td>接收data-type，表示数组所需的数据类型，未给定则选择保存对象所需的最小类型，默认为None</td></tr><tr><td>ndmin</td><td>接收int，制定生成数组应该具有的最小维数，默认为None</td></tr></tbody></table><p>注：在创建数组时，NumPy会为新建的数组推断出一个合适的数据类型，并保存在dtype中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">num = np.array(data,dtype = <span class="string">&#x27;float64&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-专门创建数组的函数"><a href="#2-专门创建数组的函数" class="headerlink" title="2.专门创建数组的函数"></a>2.专门创建数组的函数</h2><p>1.arange函数：创建数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">np.arange([start, ]stop, [step, ]dtype)</span><br><span class="line"></span><br><span class="line">num = np.arange(<span class="number">10</span>)</span><br><span class="line">warray = np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>2.linspace 函数：创建等差一维数组，接收元素数量作为参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">np.linspace(start, stop, num, endpoint, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">warry = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">输出结果：</span><br><span class="line">array([<span class="number">0.</span>  , <span class="number">0.25</span>, <span class="number">0.5</span> , <span class="number">0.75</span>, <span class="number">1.</span>  ])</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong>名称</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>start:</td><td>起始值，默认从0开始;</td></tr><tr><td>stop:</td><td>结束值；生成的元素不包括结束值；</td></tr><tr><td>num</td><td>要生成的等间隔样例数量</td></tr></tbody></table><p>3.logspace函数：创建等比一维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：np.logspace(start, stop, num, endpoint=True, base=10.0, dtype=None))</span><br><span class="line">logspace的参数中，start, stop代表的是10的幂,默认基数base为10，第三个参数元素个数。</span><br><span class="line"></span><br><span class="line">warry = np.logspace(0,1,5) #生成1-10的5个等比元素</span><br></pre></td></tr></table></figure><p>4.zeros函数：创建指定长度或形状的全0数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：np.zeros(shape, dtype=float, order=&#x27;C&#x27;)</span><br><span class="line"></span><br><span class="line">num = np.zeros(4)</span><br></pre></td></tr></table></figure><p>5.ones函数：创建指定长度或形状的全1数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：np. ones(shape, dtype=None, order=&#x27;C&#x27;)</span><br><span class="line"></span><br><span class="line">num = np.ones(4)</span><br></pre></td></tr></table></figure><p>6.diag函数：创建一个对角阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">np.diag(v, k=<span class="number">0</span>)</span><br><span class="line">使用eye函数可创建一个对角线为 <span class="number">1</span> 其他位置全为 <span class="number">0</span> 的矩阵。</span><br><span class="line"></span><br><span class="line">num = np.diag(data,k=<span class="number">0</span>)</span><br><span class="line">num = np.eye(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-ndarray对象属性和数据转换"><a href="#3-ndarray对象属性和数据转换" class="headerlink" title="3.ndarray对象属性和数据转换"></a>3.ndarray对象属性和数据转换</h2><p>NumPy创建的 ndarray对象属性及其说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndim</td><td>返回数组的轴的个数</td></tr><tr><td>shape</td><td>返回数组的维度</td></tr><tr><td>size</td><td>返回数组元素个数</td></tr><tr><td>dtype</td><td>返回数据类型</td></tr><tr><td>itemsize</td><td>返回数组中每个元素的字节大小</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">warray = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;秩为：&#x27;</span>,warray.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;形状为：&#x27;</span>,warray.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;元素个数为：&#x27;</span>,warray.size)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">&#x27;设置数组的shape属性。&#x27;</span></span><br><span class="line">warray.shape = (<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(warray)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">&#x27;数组的类型转换&#x27;</span></span><br><span class="line">arr1 = np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.dtype)</span><br><span class="line">arr2 = arr1.astype(np.float64)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-生成随机数"><a href="#4-生成随机数" class="headerlink" title="4.生成随机数"></a>4.生成随机数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NumPy.random模块中，提供了多种随机数的生成函数。如randint函数生成指定范围的随机整数来构成指定形状的数组。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>用法：</span><br><span class="line">np.random.randint(low, high = <span class="literal">None</span>, size = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">arr = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,size = (<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>生成[<span class="number">0</span>,<span class="number">1</span>]之间的随机数组。</span><br><span class="line">arr1 = np.random.rand(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2 = np.random.rand(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>random模块的常用随机数生成函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>seed</td><td>确定随机数生成器的种子</td></tr><tr><td>permutation</td><td>返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td>shuffle</td><td>对一个序列进行随机排序</td></tr><tr><td>binomial</td><td>产生二项分布的随机数</td></tr><tr><td>normal</td><td>产生正态（高斯）分布的随机数</td></tr><tr><td>beta</td><td>产生beta分布的随机数</td></tr><tr><td>chisquare</td><td>产生卡方分布的随机数</td></tr><tr><td>gamma</td><td>产生gamma分布的随机数</td></tr><tr><td>uniform</td><td>产生在[0,1)中均匀分布的随机数</td></tr></tbody></table><h2 id="5-数组变换"><a href="#5-数组变换" class="headerlink" title="5.数组变换"></a>5.数组变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">数组重塑:数据重塑不会改变原来的数组</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">对于定义好的数组，可以通过reshape方法改变其数据维度。</span><br><span class="line">格式：np.reshape(data, newshape, order=<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    data需要处理的数据。</span><br><span class="line">    newshape新维度——整数或整数元组，</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#reshape的参数中的其中一个可以设置为-1，表示数组的维度可以通过数据本身来推断。</span></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>np.resize(data,newshape)</span><br><span class="line">np.resize(np.arange(<span class="number">8</span>),[<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>与reshape相反的方法是数据散开（ravel）或数据扁平化（flatten）</span><br><span class="line">data.ravel()</span><br><span class="line">data.faltten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组的合并：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>hstack函数：实现横向合并</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.hstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>vstack函数：实现纵向组合是利用vstack将数组纵向合并；</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.vstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>concatenate函数：可以实现数组的横向或纵向合并，参数axis=<span class="number">1</span>时进行横向合并，axis=<span class="number">0</span>时进行纵向合并。</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组分割：</span><br><span class="line">与数组合并相反，hsplit函数、vsplit函数和split函数分别实现数组的横向、纵向和指定方向的分割。</span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向分割为:\n&#x27;</span>,np.hsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为:\n&#x27;</span>,np.vsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">split在参数axis = <span class="number">1</span>时实现数组的横向分割，axis = <span class="number">0</span>时则进行纵向分割。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组转置和轴对换</span><br><span class="line">数组转置是数组重塑的一种特殊形式，可以通过transpose方法进行转置。</span><br><span class="line"><span class="number">1.</span>转置transpose，或者T</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.transpose((<span class="number">1</span>,<span class="number">0</span>)))</span><br><span class="line"><span class="built_in">print</span>(arr.T)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>轴对换</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.swapaxes(<span class="number">0</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="6-数组的索引和切片"><a href="#6-数组的索引和切片" class="headerlink" title="6.数组的索引和切片"></a>6.数组的索引和切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式arr[1:1:10,::1:20]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组的切片返回的是原始数据，并不会产生新的数据。</span></span><br><span class="line"><span class="string">可以使用copy方法实现</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr1 = arr[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">arr[(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>)] <span class="comment"># 答案为：1，11 ,找(0,1)和(2,3)的数据</span></span><br></pre></td></tr></table></figure><h2 id="7-数组的运算"><a href="#7-数组的运算" class="headerlink" title="7.数组的运算"></a>7.数组的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">一.数组和标量间的运算</span><br><span class="line">arr = np.arange(<span class="number">4</span>)</span><br><span class="line">c = arr * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.ufunc函数:全称通用函数，针对数组进行操作，返回numpy数组，比math库效率高</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>常用的ufunc函数</span><br><span class="line">（<span class="number">1</span>）四则运算：+，-，*，/，**</span><br><span class="line">（<span class="number">2</span>）比较运算：&gt;,&lt;,!=,==</span><br><span class="line">（<span class="number">3</span>）逻辑运算：np.<span class="built_in">any</span>,np.<span class="built_in">all</span>相当于<span class="keyword">or</span>,<span class="keyword">and</span></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line">np.<span class="built_in">all</span>(a) <span class="comment"># False</span></span><br><span class="line">np.<span class="built_in">all</span>(b) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>ufunc函数的广播机制：广播指不同形状的数组之间执行算术运算。</span><br><span class="line">（<span class="number">1</span>）让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在左边加<span class="number">1</span>补齐。</span><br><span class="line">（<span class="number">2</span>）如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为<span class="number">1</span>的维度进行扩展，以匹配另一个数组的形状。</span><br><span class="line">（<span class="number">3</span>）输出数组的shape是输入数组shape的各个轴上的最大值。</span><br><span class="line">（<span class="number">4</span>）如果两个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度等于<span class="number">1</span>，则引发异常。</span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">arr2 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.条件逻辑运算</span><br><span class="line">语法：np.where(condition,x,y)</span><br><span class="line">满足条件输出x，否则y；若只有条件 (condition)，没有x和y，则输出满足条件元素的下标。</span><br><span class="line">w = np.array([<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">10</span>])</span><br><span class="line">np.where(w&gt;<span class="number">4</span>) <span class="comment"># 返回下标</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-数组读写"><a href="#8-数组读写" class="headerlink" title="8.数组读写"></a>8.数组读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一.NumPy中读写二进制文件的方法有：</span><br><span class="line"><span class="number">1.</span> np.load(“文件名.npy<span class="string">&quot;)是从二进制文件中读取数据；</span></span><br><span class="line"><span class="string">2. np.save(“文件名[.npy]&quot;</span>, arr) 是以二进制格式保存数据。（很难使用其他语言读入）</span><br><span class="line"></span><br><span class="line">二. 读写文本文件</span><br><span class="line"><span class="number">1.</span> np.loadtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>,delimiter = <span class="string">&quot;,&quot;</span>)把文件加载到一个二维数组中；</span><br><span class="line"><span class="number">2.</span> np.savetxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, arr, fmt = <span class="string">&quot;%d&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是将数组写到某种分隔符隔开的文本文件中；</span><br><span class="line"><span class="number">3.</span> np.genfromtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是结构化数组和缺失数据。</span><br><span class="line">           </span><br><span class="line">       </span><br><span class="line">           </span><br><span class="line">三.读取CSV文件</span><br><span class="line">np.loadtxt(fname, dtype=, comments=’<span class="comment">#’, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=‘bytes’)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>fname</td><td>str，读取的CSV文件名</td></tr><tr><td>delimiter</td><td>str，数据的分割符</td></tr><tr><td>usecols</td><td>tuple(元组) ，执行加载数据文件中的哪些列</td></tr><tr><td>unpack</td><td>bool，是否将加载的数据拆分为多个组，True表示拆，False不拆</td></tr><tr><td>skipprows</td><td>int，跳过多少行，一般用于跳过前几行的描述性文字</td></tr><tr><td>encoding</td><td>bytes，编码格式</td></tr></tbody></table><h2 id="9-Numpy中的数据统计与分析"><a href="#9-Numpy中的数据统计与分析" class="headerlink" title="9.Numpy中的数据统计与分析"></a>9.Numpy中的数据统计与分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一.排序</span><br><span class="line">直接排序：</span><br><span class="line">Sort函数对数据直接进行排序，调用改变原始数组，无返回值。</span><br><span class="line">格式：numpy.sort(a, axis, kind, order)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">a = np.array(a)</span><br><span class="line">np.sort(a)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>kind</td><td>排序算法，默认为“quicksort”</td></tr><tr><td>order</td><td>排序的字段名，可指定字段排序，默认为None</td></tr><tr><td>axis</td><td>使得sort函数可以沿着指定轴对数据集进行排序。axis&#x3D;1为沿横轴排序；axis&#x3D;0为沿纵轴排序；axis&#x3D;None,将数组平坦化之后进行排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">间接排序：</span><br><span class="line">np.argsort函数和np.lexsort函数根据一个或多个键值对数据集进行排序。</span><br><span class="line">np.argsort():  返回的是数组值从小到大的索引值;      </span><br><span class="line">np.lexsort():  返回值是按照最后一个传入数据排序的结果索引值.</span><br><span class="line"></span><br><span class="line">a.argsort()</span><br><span class="line">np.lexsort((b,a))</span><br></pre></td></tr></table></figure><h2 id="10-重复数据与去重"><a href="#10-重复数据与去重" class="headerlink" title="10.重复数据与去重"></a>10.重复数据与去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一.对于一维数组或者列表，unique函数去除其中重复的元素，并按元素由大到小返回一个新的元组或者列表。</span><br><span class="line">names = np.array([<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>,<span class="string">&#x27;黄色&#x27;</span>,<span class="string">&#x27;白色&#x27;</span>,<span class="string">&#x27;红色&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>,names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重后的数组：&#x27;</span>,np.unique(names)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.统计分析中有时也需要把一个数据重复若干次，使用tile和repeat函数即可实现此功能。</span><br><span class="line">tile函数的格式：np.tile(A, reps)</span><br><span class="line">其中，参数A表示要重复的数组，reps表示重复次数。</span><br><span class="line"></span><br><span class="line">repeat函数的格式：np.repeat(A, reps, axis = <span class="literal">None</span>)</span><br><span class="line">“A”: 是需要重复的数组元素，</span><br><span class="line">“repeats”: 是重复次数</span><br><span class="line">“axis”: 指定沿着哪个轴进行重复，axis = <span class="number">0</span>表示按行进行元素重复；axis = <span class="number">1</span>表示按列进行元素重复。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.常用统计函数</span><br><span class="line">常见的有<span class="built_in">sum</span>、mean、std、var、<span class="built_in">min</span>和<span class="built_in">max</span>等。</span><br><span class="line">argmax索引最大</span><br><span class="line">cumsum累计和 <span class="comment"># 输出中间值</span></span><br><span class="line">cumprod累计积 </span><br><span class="line">log1plog(<span class="number">1</span>+p) <span class="comment"># 以e为底</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">np.<span class="built_in">sum</span>(a)</span><br><span class="line">np.argmax(a)</span><br><span class="line">np.cumsum(a)</span><br><span class="line">np.cumprod(a)</span><br><span class="line">np.log1p(<span class="number">1.71</span>)</span><br></pre></td></tr></table></figure><h1 id="4-第四章-Pandas统计分析基础"><a href="#4-第四章-Pandas统计分析基础" class="headerlink" title="4.第四章 Pandas统计分析基础"></a>4.第四章 Pandas统计分析基础</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><p> Pandas有三种数据结构：Series、DataFrame和Panel。</p><p>Series类似于一维数组；</p><p>DataFrame是类似表格的二维数组；</p><p>Panel可以视为Excel的多表单Sheet。</p><h2 id="1-Pandas的数据结构"><a href="#1-Pandas的数据结构" class="headerlink" title="1.Pandas的数据结构"></a>1.Pandas的数据结构</h2><h3 id="1-Series"><a href="#1-Series" class="headerlink" title="1.Series"></a>1.Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Series 是一种一维数组对象，包含了一个值序列，并且包含了数据标签，称为索引（index），可通过索引来访问数组中的数据。</span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>Series的创建</span><br><span class="line">obj = pd.Series([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]) <span class="comment">#仅有一个数组构成</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建Series时指定索引</span><br><span class="line">i = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">v = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">t = pd.Series(v, index = i, name = <span class="string">&quot;col&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">尽管创建Series指定了index参数，实际Pandas还是有隐藏的index位置信息的。所以Series有两套描述某条数据的手段：位置和标签</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">val = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">idx1 = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">14</span>)</span><br><span class="line">idx2 = <span class="string">&#x27;hello the cruel world&#x27;</span>.split()</span><br><span class="line">s0 = pd.Series(val)</span><br><span class="line">s1 = pd.Series(val,index=idx1)</span><br><span class="line">t = pd.Series(val,index=idx2)</span><br><span class="line"><span class="built_in">print</span>(s0.index)</span><br><span class="line"><span class="built_in">print</span>(s1.index)</span><br><span class="line"><span class="built_in">print</span>(t.index)</span><br><span class="line"><span class="built_in">print</span>(s0[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>],t[<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过字典创建:如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series。</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj3 = pd.Series(sdata)</span><br><span class="line"><span class="built_in">print</span>(obj3)</span><br><span class="line">如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>键值和指定的索引不匹配</span><br><span class="line">sdata = &#123;<span class="string">&quot;a&quot;</span> : <span class="number">100</span>, <span class="string">&quot;b&quot;</span> : <span class="number">200</span>, <span class="string">&quot;e&quot;</span> : <span class="number">300</span>&#125;</span><br><span class="line">letter = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>  , <span class="string">&quot;e&quot;</span> ]</span><br><span class="line">obj =  pd.Series(sdata, index = letter)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>Series域重要的一个功能是：它在算术运算中会自动对齐不同索引的数据。</span><br><span class="line">不同索引数据的自动对齐</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj1 = pd.Series(sdata)</span><br><span class="line">states = [<span class="string">&#x27;California&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>]</span><br><span class="line">obj2 = pd.Series(sdata, index = states)</span><br><span class="line"><span class="built_in">print</span>(obj1+obj2) <span class="comment"># 实值 + 空值 = 空值</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>Series索引的修改</span><br><span class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">obj.index = [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Jeff&#x27;</span>, <span class="string">&#x27;Ryan&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-DataFrame"><a href="#2-DataFrame" class="headerlink" title="2.DataFrame"></a>2.DataFrame</h3><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">pd.DataFrame(data=<span class="literal">None</span>, index=<span class="literal">None</span>, columns=<span class="literal">None</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DataFrame的创建</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:[<span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;male&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>:[<span class="number">2001</span>, <span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2002</span>],</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">DataFrame会自动加上索引（跟Series一样），且全部列会被有序排列。如果指定了列序列，则DataFrame的列就会按照指定顺序迸行排列。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>指定索引顺序：跟Series一样，如果传入的列在数据中找不到，就会产生NAN值</span><br><span class="line">df1 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,<span class="string">&#x27;address&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>DataFrame创建时指定列名</span><br><span class="line">DataFrame构造函数的columns函数给出列的名字，index给出label标签</span><br><span class="line">df3 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;city&#x27;</span>],index = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>获取某列数据</span><br><span class="line">df3[[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;sex&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>增加一列</span><br><span class="line">df3[<span class="string">&quot;hello&quot;</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>删除一列</span><br><span class="line"><span class="keyword">del</span> df3[<span class="string">&quot;hello&quot;</span>]</span><br></pre></td></tr></table></figure><p>DataFrame的属性:</p><table><thead><tr><th><strong>函数</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td>values</td><td>元素</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>columns</td><td>列名</td></tr><tr><td>dtypes</td><td>类型</td></tr><tr><td>size</td><td>元素个数</td></tr><tr><td>ndim</td><td>维度数</td></tr><tr><td>shape</td><td>数据形状（行列数目）</td></tr></tbody></table><h2 id="2-索引对象"><a href="#2-索引对象" class="headerlink" title="2.索引对象"></a>2.索引对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>索引对象</span><br><span class="line"><span class="built_in">print</span>(df) </span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>DataFrame的Index</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> df.columns)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span> <span class="keyword">in</span> df.index)</span><br></pre></td></tr></table></figure><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。Index的常用方法和属性：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>append</td><td>连接另一个Index对象，产生一个新的Index</td></tr><tr><td>diff</td><td>计算差集，并得到一个Index</td></tr><tr><td>intersection</td><td>计算交集</td></tr><tr><td>union</td><td>计算并集</td></tr><tr><td>isin</td><td>计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td>delete</td><td>删除索引i处的元素，并得到新的Index</td></tr><tr><td>drop</td><td>删除传入的值，并得到新的Index</td></tr><tr><td>insert</td><td>将元素插入到索引i处，并得到新的Index</td></tr><tr><td>is_monotonic</td><td>当各元素均大于等于前一个元素时，返回True</td></tr><tr><td>is.unique</td><td>当Index没有重复值时，返回True</td></tr><tr><td>unique</td><td>计算Index中唯一值的数组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入索引值</span><br><span class="line">df3.index.insert(<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p>DataFrame的基础属性有values、index、columns、dtypes、ndim和shape，分别可以获取DataFrame的元素、索引、列名、类型、维度和形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br><span class="line">df.columns</span><br></pre></td></tr></table></figure><h2 id="3-Pandas索引操作"><a href="#3-Pandas索引操作" class="headerlink" title="3.Pandas索引操作"></a>3.Pandas索引操作</h2><ol><li><p>重置索引:指对索引重新排序而不是重新命名，如果某个索引值不存在的话，会引入缺失值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">DataFrame.reindex(labels = None,index = None,columns = None,axis = None,method = None,copy = True,level = None,fill_value = nan,limit = None,tolerance = None)</span><br><span class="line">    其中：</span><br><span class="line">        index：用作索引的新序列。</span><br><span class="line">        method：插值填充方式。</span><br><span class="line">        fill_value：引入缺失值时使用的替代值。</span><br><span class="line">        limit：前向或者后向填充时的最大填充量。</span><br><span class="line">        method：使用相邻的元素值进行填充(ffill向前填充,bfill向后,nearest最近的索引值填充)</span><br><span class="line">        </span><br><span class="line">obj = pd.Series([7,-1,4,3],index=[&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;,&#x27;d&#x27;])</span><br><span class="line">print(obj)</span><br><span class="line">obj.reindex([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;])</span><br></pre></td></tr></table></figure></li><li><p>更换索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不使用默认的行索引时，set_index()实现</span><br><span class="line">df4 = df3.set_index(&#x27;city&#x27;)</span><br><span class="line">df4</span><br><span class="line"></span><br><span class="line">reset_index()还原索引，重新恢复索引为默认的整型索引</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-DataFrame数据的查询与编辑"><a href="#4-DataFrame数据的查询与编辑" class="headerlink" title="4.DataFrame数据的查询与编辑"></a>4.DataFrame数据的查询与编辑</h2><h3 id="1-DataFrame数据的查询"><a href="#1-DataFrame数据的查询" class="headerlink" title="1.DataFrame数据的查询"></a>1.DataFrame数据的查询</h3><ol><li><p>选取列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w1 = df4[[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line">print(w1)</span><br></pre></td></tr></table></figure></li><li><p>选取行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">通过切片的方式选取</span><br><span class="line">df4[:2]</span><br><span class="line">df4[1:3]</span><br><span class="line"></span><br><span class="line">此外：</span><br><span class="line">head（） #默认获取前5行</span><br><span class="line">head（n）#获取前n行</span><br><span class="line">tail（）#默认获取后5行</span><br><span class="line">tail（n）#获取后n行</span><br><span class="line">sample（n）#随机抽取n行显示</span><br><span class="line">sample(frac=0.6)     #随机抽取60%的行</span><br><span class="line"></span><br><span class="line">df4.head(2)</span><br></pre></td></tr></table></figure></li><li><p>选取行和列：切片选取行具有很大的局限性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">DataFrame.loc(行索引名称或条件，列索引名称)</span><br><span class="line">DataFrame.iloc(行索引位置，列索引位置)</span><br><span class="line"></span><br><span class="line">1.loc的数据选取</span><br><span class="line">df4.loc[[&#x27;北京&#x27;,&#x27;上海&#x27;],[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line">df4.loc[df4[&#x27;year&#x27;]&gt;=2002,[&#x27;name&#x27;,&#x27;year&#x27;]]</span><br><span class="line"></span><br><span class="line">2.loc和isin配合使用</span><br><span class="line">df4.loc[df4[&#x27;year&#x27;].isin([&#x27;2001&#x27;,&#x27;2003&#x27;])] # 查询2001和2003年的数据</span><br><span class="line"></span><br><span class="line">3.使用iloc选取行和列</span><br><span class="line">df4.iloc[:,2]</span><br><span class="line">df4.iloc[[1,3],[0,2]] # 1和3行，0和2列</span><br><span class="line"></span><br><span class="line">4.使用pandas的query方法</span><br><span class="line">语法：</span><br><span class="line">DataFrame.query(self,expr,inplace,**kwargs) # expr要评估的查询字符串</span><br><span class="line">df4.query(&#x27;year &gt; 2001 &amp; year &lt;2003&#x27;)</span><br><span class="line"></span><br><span class="line">5.布尔选择：使用逻辑运算符前要加() # &amp; | !=</span><br><span class="line">df = pd.DataFrame(&#123;&#x27;price&#x27;:[1,3,5,5,4,5,3]&#125;)</span><br><span class="line">df[(df.price &gt;= 2) &amp; (df.price &lt;= 4)]</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-DataFrame数据的编辑"><a href="#2-DataFrame数据的编辑" class="headerlink" title="2.DataFrame数据的编辑"></a>2.DataFrame数据的编辑</h3><p>将需要编辑的数据提取出来，重新赋值</p><ol><li><p>增加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.增加一行直接通过append方法传入字典结构数据即可。ignore_index设置是否忽略原Index。</span><br><span class="line">data = &#123;&#x27;city&#x27;:&#x27;兰州&#x27;,&#x27;name&#x27;:&#x27;李红&#x27;,&#x27;year&#x27;:2005,&#x27;sex&#x27;:&#x27;female&#x27;&#125;</span><br><span class="line">df1.append(data,ignore_index=True)</span><br><span class="line"></span><br><span class="line">2.增加列时，只需为要增加的列赋值即可创建一个新的列。若要指定新增列的位置，可以用insert函数。</span><br><span class="line">df1[&#x27;score&#x27;] = [10,12,13,14]</span><br><span class="line">df1.insert(1,&#x27;No&#x27;,[1,2,3,4])</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop方法，axis指定，默认删除不修改原数据，加上inplace=True可以原数据删除。</span><br><span class="line">df4.drop(&#x27;广州&#x27;,inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>修改数据：直接对选择的数据赋值即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">还可以使用replace进行数据的替换</span><br><span class="line">DataFrame.replace(to_replace=None,value=None,inplace=False,limit=None,regex=False,method=&#x27;pad&#x27;)</span><br><span class="line">    参数to_replace表示被替换的值，value表示替换后的值。</span><br><span class="line">    同时替换多个值时使用字典数据，如DataFrame.replace(&#123;&#x27;B&#x27;:&#x27;E&#x27;,&#x27;C&#x27;:&#x27;F&#x27;&#125;)表示将表中的B替换为E，C替换为F</span><br></pre></td></tr></table></figure></li><li><p>修改列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pandas通过DataFrame.rename()函数，传入需要修改列名的字典形式来修改列名。</span><br><span class="line">df4.rename(columns=&#123;&#x27;no&#x27;:&#x27;number&#x27;&#125;,inplace=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-Pandas数据运算"><a href="#5-Pandas数据运算" class="headerlink" title="5.Pandas数据运算"></a>5.Pandas数据运算</h2><h3 id="1-算术运算"><a href="#1-算术运算" class="headerlink" title="1.算术运算"></a>1.算术运算</h3><p>Pandas执行算术运算时，会先按照索引进行对齐，对齐以后再进行相应的运算，没有对齐的位置会用NaN进行补齐。（数据对齐）</p><p>NAN填充缺失数据，则可以在调用add方法时提供fill_value参数的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj_one.add(obj_two, fill_value = 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2.排序"></a>2.排序</h3><ol><li><p>按索引排序</p><p>使用sort_index()方法，该方法可以用行索引或者列索引进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sort_index（axis = 0，level = None，ascending = True，inplace = False，kind =&#x27; quicksort &#x27;，na_position=&#x27;last&#x27;，sort_remaining = True ）</span><br><span class="line">     axis：轴索引，0表示index（按行），1表示columns（按列）。</span><br><span class="line">     level：若不为None，则对指定索引级别的值进行排序。</span><br><span class="line">     ascending：是否升序排列，默认为True表示升序。</span><br><span class="line"></span><br><span class="line">1.对Series进行分别排序</span><br><span class="line">ser_obj = pd.Series(range(10, 15), index=[5, 3, 1, 3, 2])</span><br><span class="line"># 按索引进行升序排列</span><br><span class="line">ser_obj.sort_index()</span><br><span class="line"># 按索引进行降序排列</span><br><span class="line">ser_obj.sort_index(ascending = False)</span><br><span class="line"></span><br><span class="line">2.按索引对DataFrame进行分别排序，axis指定方向</span><br><span class="line">df_obj = pd.DataFrame(np.arange(9).reshape(3, 3),index=[4, 3, 5]) </span><br><span class="line"># 按行索引升序排列</span><br><span class="line">df_obj.sort_index()</span><br><span class="line"># 按行索引降序排列</span><br><span class="line">df_obj.sort_index(ascending=False)</span><br></pre></td></tr></table></figure></li><li><p>按值排序</p><p>Pandas中用来按值排序的方法为sort_values()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sort_values(by,axis=0, ascending=True, inplace=False, kind=&#x27;quicksort&#x27;,na_position=&#x27;last&#x27;)</span><br><span class="line">by参数表示排序的列</span><br><span class="line">na_position参数只有两个值：first和last，若设为first，则会将NaN值放在开头；若设为False，则会将NaN值放在最后。</span><br><span class="line"></span><br><span class="line">1.</span><br><span class="line">ser_obj = pd.Series([4, np.nan, 6, np.nan, -3, 2])</span><br><span class="line"># 按值升序排列</span><br><span class="line">ser_obj.sort_values()</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">df_obj = pd.DataFrame([[0.4, -0.1, -0.3, 0.0], </span><br><span class="line">                       [0.2, 0.6, -0.1, -0.7],</span><br><span class="line">                       [0.8, 0.6, -0.5, 0.1]])</span><br><span class="line"># 对列索引值为2的数据进行排序</span><br><span class="line">df_obj.sort_values(by=2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-统计计算与描述"><a href="#3-统计计算与描述" class="headerlink" title="3.统计计算与描述"></a>3.统计计算与描述</h3><p>常用方法：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/2.png?raw=true" alt="2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果希望一次性输出多个统计指标，则调用describe()方法实现，语法：</span><br><span class="line">describe(percentiles=None, include=None, exclude=None)</span><br><span class="line">percentiles：输出中包含的百分数，位于[0,1]之间。如果不设置该参数，则默认为[0.25,0.5,0.75]，返回25%，50%，75%分位数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-层次化索引"><a href="#4-层次化索引" class="headerlink" title="4.层次化索引"></a>4.层次化索引</h3><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/3.png?raw=true" alt="3 .png"></p><ol><li><p>两层索引结构：分为内层索引和外层索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">Series和DataFrame均可以实现层次化索引，最常见的方式是在构造方法的index参数中传入一个嵌套列表。</span><br><span class="line">注意：在创建层次化索引对象时，嵌套函数中两个列表的长度必须是保持一致的，否则将会出现ValueError错误。</span><br><span class="line"></span><br><span class="line">mulitindex_series = pd.Series([15848,13472,12073.8,7813,7446,6444,15230,8269],</span><br><span class="line">                        index=[[&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河北省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;,&#x27;河南省&#x27;],</span><br><span class="line">                                [&#x27;石家庄市&#x27;,&#x27;唐山市&#x27;,&#x27;邯郸市&#x27;,&#x27;秦皇岛市&#x27;,&#x27;郑州市&#x27;,&#x27;开封市&#x27;,&#x27;洛阳市&#x27;,&#x27;新乡市&#x27;]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.通过MultiIndex类的方法构建一个层次化索引</span><br><span class="line">MultiIndex.from_tuples() # 将元组列表转换为MultiIndex。</span><br><span class="line">MultiIndex.from_arrays() # 将数组列表转换为MultiIndex。</span><br><span class="line">MultiIndex.from_product() # 从多个集合的笛卡尔乘积中创建一个MultiIndex。</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">list_tuples = [(&#x27;A&#x27;,&#x27;A1&#x27;), (&#x27;A&#x27;,&#x27;A2&#x27;), (&#x27;B&#x27;,&#x27;B1&#x27;),(&#x27;B&#x27;,&#x27;B2&#x27;), (&#x27;B&#x27;,&#x27;B3&#x27;)]</span><br><span class="line"># 根据元组列表创建一个MultiIndex对象</span><br><span class="line">multi_index = MultiIndex.from_tuples(tuples=list_tuples,names=[ &#x27;外层索引&#x27;, &#x27;内层索引&#x27;])</span><br><span class="line"></span><br><span class="line">multi_array = MultiIndex.from_arrays(arrays =[[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;B&#x27;],</span><br><span class="line">  [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;B3&#x27;]],</span><br><span class="line">  names=[&#x27;外层索引&#x27;,&#x27;内层索引&#x27;])</span><br><span class="line"></span><br><span class="line">numbers = [0, 1, 2]</span><br><span class="line">colors = [&#x27;green&#x27;, &#x27;purple&#x27;]</span><br><span class="line">multi_product = pd.MultiIndex.from_product(iterables=[numbers, colors],names=[&#x27;number&#x27;, &#x27;color&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-数据分组与聚合"><a href="#6-数据分组与聚合" class="headerlink" title="6.数据分组与聚合"></a>6.数据分组与聚合</h2><ol><li>分组是指使用特定的条件将原数据划分为多个组</li><li>聚合指的是对每个分组中的数据执行某些操作，最后将计算的结果进行整合。</li><li>分组与聚合的过程大概分为以下三步：<ul><li>拆分：将数据集按照一些标准拆分为若干个组。</li><li>应用：将某个函数或方法（内置和自定义均可）应用到每个分组。</li><li>合并：将产生的新值整合到结果对象中。</li></ul></li></ol><h3 id="1-数据的分组"><a href="#1-数据的分组" class="headerlink" title="1.数据的分组"></a>1.数据的分组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">groupby()方法将数据集按照某些标准划分成若干个组。</span><br><span class="line">语法：</span><br><span class="line">groupby(by=None, axis=0, level=None, as_index=True, sort=True,group_keys=True, squeeze=False, observed=False, **kwargs)</span><br><span class="line">    by：用于确定进行分组的依据。</span><br><span class="line">    axis：表示分组轴的方向。</span><br><span class="line">    sort：表示是否对分组标签进行排序，接收布尔值，默认为True。</span><br><span class="line"></span><br><span class="line">使用Series调用groupby()方法返回的是SeriesGroupBy对象。</span><br><span class="line">使用DataFrame调用groupby()方法返回的是DataFrameBy对象。</span><br></pre></td></tr></table></figure><ol><li><p>按列名进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(by=&#x27;Key&#x27;)</span><br><span class="line"></span><br><span class="line">查看每个分组的具体内容：</span><br><span class="line">group_obj = df.groupby(&#x27;Key&#x27;)</span><br><span class="line"># 遍历分组对象</span><br><span class="line">for i in group_obj:</span><br><span class="line">print(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>按Series对象进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ser_obj = pd.Series([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line"># 按自定义Series对象进行分组</span><br><span class="line">group_obj = df.groupby(by = ser_obj)</span><br><span class="line"></span><br><span class="line">如果Series对象与Pandas对象的索引长度不相同时，则只会将具有相同索引的部分数据进行分组。</span><br><span class="line">df = se = pd.Series([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line">group_obj = df.groupby(se)[&#x27;one&#x27;, &#x27;two&#x27;, &#x27;one&#x27;,&#x27;two&#x27;, &#x27;one&#x27;],</span><br><span class="line">    &#x27;data1&#x27;: [2, 3, 4, 6, 8],</span><br><span class="line">    &#x27;data2&#x27;: [3, 5, 6, 3, 7]&#125;)</span><br><span class="line">se = pd.Series([&#x27;a&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span><br><span class="line">group_obj = df.groupby(se)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>按字典进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当使用字典对DataFrame进行分组时，则需要确定轴的方向及字典中的映射关系，即字典中的键为列名，字典的值为自定义的分组名。</span><br></pre></td></tr></table></figure></li><li><p>按函数进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将函数作为分组键会更加灵活，任何一个被当做分组键的函数都会在各个索引值上被调用一次，返回的值会被用作分组名称。</span><br><span class="line"># 使用内置函数len进行分组</span><br><span class="line">groupby_obj = df.groupby(len)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-数据的聚合"><a href="#2-数据的聚合" class="headerlink" title="2.数据的聚合"></a>2.数据的聚合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自定义函数，将它作为参数传给agg()方法，实现Pandas对象的聚合运算。</span><br><span class="line">agg（func,axis = 0,* args,** kwargs ）</span><br><span class="line">    func：表示用于汇总数据的函数，可以为单个函数或函数列表。</span><br><span class="line">    axis：表示函数作用于轴的方向，0或index表示将函数应用到每一列；1或columns表示将函数应用到每一行，该参数的默认值为0。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>对每一列数据应用同一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通过agg()方法进行聚合，最简单的方式就是给该方法的func参数传入一个函数，这个函数既可以是内置的，也可以自定义的。</span><br><span class="line">def range_data_group(arr):</span><br><span class="line">      return arr.max()-arr.min()</span><br><span class="line"># 使用自定义函数聚合分组数据</span><br><span class="line">data_group.agg(range_data_group)  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对某列数据应用不同的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可以将两个函数的名称放在列表中，之后在调用agg()方法进行聚合时作为参数传入即可。</span><br><span class="line"></span><br><span class="line"># 对一列数据用两种函数聚合</span><br><span class="line">data_group.agg([range_data_group, sum])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了能更好地反映出每列数据的信息，可以使用“(name,function）”元组将function（函数名）替换为name（自定义名称）。</span><br><span class="line">data_group.agg([(&quot;极差&quot;, range_data_group), (&quot;和&quot;, sum)])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对不同列数据应用不同函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果希望对不同的列使用不同的函数，则可以在agg()方法中传入一个&#123;&quot;列名&quot;:&quot;函数名&quot;&#125;格式的字典。</span><br><span class="line">data_group.agg(&#123;&#x27;a&#x27;: &#x27;sum&#x27;, &#x27;b&#x27;: &#x27;mean&#x27;, &#x27;c&#x27;: range_data_group&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-分组运算"><a href="#3-分组运算" class="headerlink" title="3.分组运算"></a>3.分组运算</h3><ul><li>如果希望聚合后的数据与原数据保持一样的形状，那么可以通过transfrom()方法实现。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform(func, *args, **kwargs)</span><br><span class="line">transfrom()方法会把func函数应用到各个分组中，并且将计算结果放在适当的位置上。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform()方法返回的结果有两种，一种是可以广播的标量值（np.mean），另一种可以是与分组大小相同的结果数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>apply()方法的使用是十分灵活的，它可以在许多标准用例中替代聚合和转换，另外还可以处理一些比较特殊的用例。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply(func, axis=0, broadcast=None, raw=False, reduce=None,result_type=None, args=(), **kwds)</span><br><span class="line">     func：表示应用于某一行或某一列的函数。</span><br><span class="line">     axis：表示函数操作的轴向。</span><br><span class="line">     broadcast：表示是否将数据进行广播。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-第五章-Pandas数据的载入与预处理"><a href="#5-第五章-Pandas数据的载入与预处理" class="headerlink" title="5.第五章 Pandas数据的载入与预处理"></a>5.第五章 Pandas数据的载入与预处理</h1><h2 id="1-数据载入"><a href="#1-数据载入" class="headerlink" title="1.数据载入"></a>1.数据载入</h2><h3 id="1-读写文本文件"><a href="#1-读写文本文件" class="headerlink" title="1.读写文本文件"></a>1.读写文本文件</h3><p>CSV文件是一种纯文本文件，可以使用任何文本编辑器进行编辑，它支持追加模式，节省内存开销。</p><ol><li><p>写入CSV文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">to_csv(path_or_buf=None,sep=&#x27;,&#x27;,na_rep=&#x27;&#x27;,float_format=None,columns=None,header=True, index=True,index_label=None, mode=&#x27;w‘, ...)</span><br><span class="line">path_or_buf：文件路径。</span><br><span class="line">    index：默认为True，若设为False，则将不会显示索引。</span><br><span class="line">    sep：分隔符，默认用“，”隔开。</span><br></pre></td></tr></table></figure></li><li><p>读取CSV文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_csv(filepath_or_buffer,sep=&#x27;,&#x27;, delimiter=None, header=&#x27;infer&#x27;, names=None, index_col=None,usecols=None, prefix=None, ...)</span><br><span class="line">    sep：指定使用的分隔符，默认用“，”分隔。</span><br><span class="line">    header：指定行数用来作为列名。</span><br><span class="line">    names：用于结果的列名列表。如果文件不包含标题行，则应该将该参数设置为None。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Text文件</p><p>如果希望读取Text文件，既可以用前面提到的read_csv()函数，也可以使用read_table()函数。（read_csv()与read_table()函数的区别在于使用的分隔符不同，前者使用“，”作为分隔符，而后者使用“\t”作为分隔符。）</p></li></ol><h3 id="2-读写Excel文件"><a href="#2-读写Excel文件" class="headerlink" title="2.读写Excel文件"></a>2.读写Excel文件</h3><p>扩展名为.xls和.xlsx文件两种</p><ol><li><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">to_excel(excel_writer,sheet_name=&#x27;Sheet1&#x27;,na_rep=&#x27;&#x27;,float_format=None, columns=None, header=True, index=True, ...)</span><br><span class="line">excel_writer：表示读取的文件路径。</span><br><span class="line">    sheet_name：表示工作表的名称，默认为“Sheet1”。</span><br><span class="line">    na_rep：表示缺失数据。</span><br><span class="line">    index：表示是否写行索引，默认为True。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_excel(io,sheet_name=0,header=0,names=None,index_col=None, **kwds)</span><br><span class="line">    io：表示路径对象。</span><br><span class="line">    sheet_name：指定要读取的工作表，默认为0。</span><br><span class="line">    header：用于解析DataFrame的列标签。</span><br><span class="line">    names：要使用的列名称。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-读写JOSN文件"><a href="#3-读写JOSN文件" class="headerlink" title="3.读写JOSN文件"></a>3.读写JOSN文件</h3><ol><li><p>读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读取时会顺序变乱，需要排序</span><br><span class="line">import pandas as pd</span><br><span class="line">df = pd.read_json(&#x27;Filename&#x27;)</span><br><span class="line">df = df.sort_index</span><br></pre></td></tr></table></figure></li><li><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_json</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-读取HTML表格数据"><a href="#4-读取HTML表格数据" class="headerlink" title="4.读取HTML表格数据"></a>4.读取HTML表格数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_html(io, match=&#x27;.+&#x27;, flavor=None,header=None, index_col=None,skiprows=None, attrs=None)</span><br><span class="line">    io：表示路径对象。</span><br><span class="line">    header：表示指定列标题所在的行。</span><br><span class="line">    index_col：表示指定行标题对应的列。</span><br><span class="line">    attrs：默认为None，用于表示表格的属性值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-读写数据库文件"><a href="#5-读写数据库文件" class="headerlink" title="5.读写数据库文件"></a>5.读写数据库文件</h3><p>为了高效地读取数据库中的数据，这里需要引入SQLAlchemy。</p><p> <img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/4.png?raw=true" alt="4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read_sql()函数既可以读取整张数据表，又可以执行SQL语句。</span><br><span class="line">1.读取</span><br><span class="line">pandas.read_sql(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None, columns=None, chunksize=None)</span><br><span class="line">    sql：表示被执行的SQL语句。</span><br><span class="line">    con：接收数据库连接，表示数据库的连接信息。</span><br><span class="line">    columns：从SQL表中选择列名列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.写入</span><br><span class="line">to_sql（name，con，schema = None，if_exists =&#x27;fail&#x27;，index = True，index_label = None，chunksize = None，dtype = None ）</span><br><span class="line">    name：表示数据库表的名称。</span><br><span class="line">    con: 表示数据库的连接信息。</span><br><span class="line">    if_exists：可以取值为fail、replace或append，默认为’fail’。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-合并数据"><a href="#2-合并数据" class="headerlink" title="2.合并数据"></a>2.合并数据</h2><h3 id="1-merge数据合并"><a href="#1-merge数据合并" class="headerlink" title="1.merge数据合并"></a>1.merge数据合并</h3><p>通过1个或多个键将2个DataFrame按行合并起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pandas.merge(left, right, how=&#x27;inner&#x27;, on=None, left_on=None, right_on=None,left_index=False,</span><br><span class="line">right_index=False, sort=False, suffixes=(&#x27;_x&#x27;, &#x27;_y&#x27;), copy=True, indicator=False, validate=None)</span><br><span class="line"></span><br><span class="line">left：要合并的第一个 DataFrame 对象。</span><br><span class="line">right：要合并的第二个 DataFrame 对象。</span><br><span class="line">how：合并方式。可以是 &#x27;inner&#x27;、&#x27;outer&#x27;、&#x27;left&#x27; 或 &#x27;right&#x27;。（内连接，外连接，左连接，右连接）</span><br><span class="line">on：用于合并的列名。如果指定了该参数，则 left 和 right DataFrame 对象都必须包含该列。</span><br><span class="line">left_on：用于合并的 left DataFrame 对象中的列名。</span><br><span class="line">right_on：用于合并的 right DataFrame 对象中的列名。</span><br><span class="line">left_index：如果为 True，则使用 left DataFrame 对象中的索引作为连接键。</span><br><span class="line">right_index：如果为 True，则使用 right DataFrame 对象中的索引作为连接键。</span><br><span class="line">sort：是否对结果进行排序。如果为 True，则按照连接键对结果进行排序。</span><br><span class="line">suffixes：用于重叠列名的后缀。如果两个 DataFrame 对象中都有相同名称的列，则会在列名后面添加指定的后缀以区分它们。</span><br><span class="line">copy：是否复制数据。如果为 False，则避免复制数据以提高性能。</span><br><span class="line">indicator：是否添加一个名为 &#x27;_merge&#x27; 的列，用于指示每一行的来源。如果为 True，则添加该列。</span><br><span class="line">validate：验证连接键是否唯一。可以是 &#x27;one_to_one&#x27;、&#x27;one_to_many&#x27; 或 &#x27;many_to_one&#x27;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"># 创建第一个 DataFrame 对象</span><br><span class="line">data1 = &#123;</span><br><span class="line">    &#x27;A&#x27;: [1, 2, 3],</span><br><span class="line">    &#x27;B&#x27;: [4, 5, 6]</span><br><span class="line">&#125;</span><br><span class="line">df1 = pd.DataFrame(data1)</span><br><span class="line"># 创建第二个 DataFrame 对象</span><br><span class="line">data2 = &#123;</span><br><span class="line">    &#x27;A&#x27;: [1, 2, 4],</span><br><span class="line">    &#x27;C&#x27;: [7, 8, 9]</span><br><span class="line">&#125;</span><br><span class="line">df2 = pd.DataFrame(data2)</span><br><span class="line"># 使用 merge 函数将两个 DataFrame 对象按照 A 列进行合并</span><br><span class="line">result = pd.merge(df1, df2, on=&#x27;A&#x27;)</span><br><span class="line"></span><br><span class="line"># 显示结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="2-concat数据连接"><a href="#2-concat数据连接" class="headerlink" title="2.concat数据连接"></a>2.concat数据连接</h3><p>需要合并的DataFrame之间没有连接键。默认按行方向堆叠数据。使用axis修改方向。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pd.concat(objs,axis=0,join=&#x27;outer&#x27;,ignore_index=False,keys=None,      </span><br><span class="line">     levels=None,names=None,verify_integrity=False,copy=True)</span><br><span class="line">     </span><br><span class="line">objs： Series，DataFrame或Panel对象的序列或映射，如果传递了dict，则排序的键将用作键参数</span><br><span class="line">axis：&#123;0,1，…&#125;，默认为0,也就是纵向上进行合并。沿着连接的轴。</span><br><span class="line">join：&#123;‘inner’，‘outer’&#125;，默认为“outer”。如何处理其他轴上的索引。outer为联合和inner为交集。</span><br><span class="line">ignore_index： boolean，default False。如果为True，请不要使用并置轴上的索引值。结果轴将被标记为0，…，n-1。如果要连接其中并置轴没有有意义的索引信息的对象，这将非常有用。注意，其他轴上的索引值在连接中仍然受到尊重。</span><br><span class="line">keys： 序列，默认值无。使用传递的键作为最外层构建层次索引。如果为多索引，应该使用元组。</span><br><span class="line">levels： 序列列表，默认值无。用于构建MultiIndex的特定级别（唯一值）。否则，它们将从键推断。</span><br><span class="line">names： list，default无。结果层次索引中的级别的名称。</span><br><span class="line">verify_integrity： boolean，default False。检查新连接的轴是否包含重复项。这相对于实际的数据串联可能是非常昂贵的。</span><br><span class="line">copy： boolean，default True。如果为False，请勿不必要地复制数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line">df1 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(0,4)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(0,4)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(0,4)]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(4,8)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(4,8)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(4,8)]&#125;)</span><br><span class="line">df3 = pd.DataFrame(&#123;&#x27;A&#x27;:[&#x27;A&#123;&#125;&#x27;.format(i) for i in range(8,12)],</span><br><span class="line">                    &#x27;B&#x27;:[&#x27;B&#123;&#125;&#x27;.format(i) for i in range(8,12)],</span><br><span class="line">                    &#x27;C&#x27;:[&#x27;C&#123;&#125;&#x27;.format(i) for i in range(8,12)]&#125;)</span><br><span class="line">frames = [df1, df2, df3]</span><br><span class="line">result = pd.concat(frames)</span><br></pre></td></tr></table></figure><h3 id="3-combine-first合并数据"><a href="#3-combine-first合并数据" class="headerlink" title="3.combine_first合并数据"></a>3.combine_first合并数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当DataFrame对象中出现了缺失数据，而使用其他DataFrame对象中的数据填充缺失数据</span><br><span class="line">combine_first(other)</span><br><span class="line">other，用于接收填充缺失值的DataFrame对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-join-方法合并"><a href="#4-join-方法合并" class="headerlink" title="4.join()方法合并"></a>4.join()方法合并</h3><p>通过索引或指定列来连接多个DataFrame对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">join（other，on = None，how =&#x27;left&#x27;，lsuffix =&#x27;&#x27;，rsuffix =&#x27;&#x27;，sort = False ）</span><br><span class="line">    on：名称，用于连接列名。</span><br><span class="line">    how：可以从&#123;&#x27;&#x27;left&#x27;&#x27; ,&#x27;&#x27;right&#x27;&#x27;, &#x27;&#x27;outer&#x27;&#x27;, &#x27;&#x27;inner&#x27;&#x27;&#125;中任选一个，默认使用左连接的方式。</span><br><span class="line">    sort：根据连接键对合并的数据进行排序，默认为False。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-数据清洗"><a href="#3-数据清洗" class="headerlink" title="3.数据清洗"></a>3.数据清洗</h2><p>数据清洗的目的提高数据质量，将脏数据清洗干净，使原数据具有完整性、唯一性、权威性、合法性、一致性等特点。</p><p>脏数据：指的是对数据分析没有实际意义、格式非法、不在指定范围内的数据。</p><h3 id="1-空值（None）和缺失值（NaN）的处理"><a href="#1-空值（None）和缺失值（NaN）的处理" class="headerlink" title="1.空值（None）和缺失值（NaN）的处理"></a>1.空值（None）和缺失值（NaN）的处理</h3><p>空值一般表示数据未知、不适用或将在以后添加数据。</p><p>缺失值是指数据集中某个或某些属性的值是不完整的。</p><ol><li><p>检查或处理空值和缺失值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.使用isnull()和notnull()函数可以判断数据集中是否存在空值和缺失值。（通过info方法查看每列数据的缺失情况）</span><br><span class="line">pandas.isnull(obj) # 如果返回的结果为True，则说明有空值或缺失值</span><br><span class="line"></span><br><span class="line">2.对于缺失数据可以使用dropna()和fillna()方法对缺失值进行删除和填充。</span><br><span class="line">dropna(axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False)</span><br><span class="line">    axis：确定过滤行或列。 </span><br><span class="line">    how：确定过滤的标准。</span><br><span class="line">    thresh：表示有效数据量的最小要求。若传入了2，则是要求该行或该列至少有两个非NaN值时将其保留。</span><br><span class="line"></span><br><span class="line">fillna(value=None, method=None, axis=None, inplace=False,limit=None, downcast=None, **kwargs)</span><br><span class="line">    value：用于填充的数值。</span><br><span class="line">    method：表示填充方式，默认值为None。</span><br><span class="line">    limit： 可以连续填充的最大数量，默认None。</span><br><span class="line">注：method参数不能与value参数同时使用。</span><br><span class="line"></span><br><span class="line"># 使用66.0替换缺失值</span><br><span class="line">df_obj.fillna(&#x27;66.0&#x27;)</span><br><span class="line"># 指定列填充数据</span><br><span class="line">df_obj.fillna(&#123;&#x27;A&#x27;: 4.0, &#x27;B&#x27;: 5.0&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-重复值的处理"><a href="#2-重复值的处理" class="headerlink" title="2.重复值的处理"></a>2.重复值的处理</h3><p>Pandas提供了两个函数专门用来处理数据中的重复值，分别为duplicated()和drop_duplicates()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">duplicated()方法用于标记是否有重复值。有为True</span><br><span class="line">drop_duplicates()方法用于删除重复值。</span><br><span class="line">它们的判断标准是一样的，即只要两条数据中所有条目的值完全相等，就判断为重复值。</span><br><span class="line"></span><br><span class="line">duplicated(subset=None, keep=&#x27;first&#x27;)</span><br><span class="line">    subset：用于识别重复的列标签或列标签序列，默认识别所有的列标签。</span><br><span class="line">    keep：删除重复项并保留第一次出现的项，取值可以为first、last或False。</span><br><span class="line"></span><br><span class="line">drop_duplicates(subset=None, keep=&#x27;first&#x27;, inplace=False)</span><br><span class="line">inplace参数接收一个布尔类型的值，表示是否替换原来的数据，默认为False。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-异常值的处理"><a href="#3-异常值的处理" class="headerlink" title="3.异常值的处理"></a>3.异常值的处理</h3><p>异常值是指样本中的个别值，其数值明显偏离它所属样本的其余观测值，这些数值是不合理的或错误的。</p><p>检测方法有散点图，3σ原则（拉依达准则）和箱形图。</p><ol><li><p>散点图</p><p>通过数据分布的散点图发现异常数据</p></li><li><p>箱形图：boxplot()方法</p><p>是一种用作显示一组数据分散情况的统计图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">异常值通常被定义为小于QL – 1.5QR或大于QU + 1.5IQR的值。</span><br><span class="line">（1）QL称为下四分位数，表示全部观察中四分之一的数据取值比它小；</span><br><span class="line">（2）QU称为上四分位数，表示全部观察值中有四分之一的数据取值比它大；</span><br><span class="line">（3）IQR称为四分位数间距，是上四分位数QU与下四分位数QL之差，其间包含了全部观察值的一半。</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/5.png?raw=true" alt="5.png"></p></li><li><p>3σ原则，又称为拉依达原则，它是指假设一组检测数据只含有随机误差，对其进行计算处理得到标准偏差，按一定概率确定一个区间，凡是超过这个区间的误差都是粗大误差，在此误差的范围内的数据应予以剔除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）数值分布在（μ-σ,μ+σ)中的概率为0.682。</span><br><span class="line">（2）数值分布在（μ-2σ,μ+2σ)中的概率为0.954。</span><br><span class="line">（3）数值分布在（μ-3σ,μ+3σ)中的概率为0.997。</span><br></pre></td></tr></table></figure></li></ol><p>通常会采用如下四种方式处理这些异常值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.直接将含有异常值的记录删除。</span><br><span class="line">2.用具体的值来进行替换，可用前后两个观测值的平均值修正该异常值。</span><br><span class="line">3.不处理，直接在具有异常值的数据集上进行统计分析。</span><br><span class="line">4.视为缺失值，利用缺失值的处理方法修正该异常值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-数据转换"><a href="#4-数据转换" class="headerlink" title="4.数据转换"></a>4.数据转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">不仅可以对单个数据进行替换，也可以多个数据执行批量替换操作。</span><br><span class="line">replace（to_replace = None，value = None，inplace = False，limit = None，regex = False，method =&#x27;pad&#x27; ）</span><br><span class="line">    to_replace：表示查找被替换值的方式。</span><br><span class="line">    value：用来替换任何匹配to_replace的值，默认值None。</span><br><span class="line"></span><br><span class="line">通过astype()方法可以强制转换数据的类型。</span><br><span class="line">astype（dtype，copy = True，errors =&#x27;raise&#x27;，** kwargs ）</span><br><span class="line">    dtype：表示数据的类型。</span><br><span class="line">    errors：错误采取的处理方式，可以取值为raise或ignore。其中，raise表示允许引发异常，ignore表示抑制异常，默认为raise。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">astype()方法存在着一些局限性，只要待转换的数据中存在非数字以外的字符会出现错误，而to_numeric()函数的出现正好解决了这个问题。</span><br><span class="line">pandas.to_numeric(arg, errors=&#x27;raise&#x27;, downcast=None)</span><br><span class="line">    arg：表示要转换的数据，可以是list、tuple、Series。</span><br><span class="line">    errors：表示错误采取的处理方式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-重塑层次化索引"><a href="#5-重塑层次化索引" class="headerlink" title="5.重塑层次化索引"></a>5.重塑层次化索引</h3><p>stack()方法和unstack()方法，前者是将数据的列“旋转”为行，后者是将数据的行“旋转”为列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stack()方法可以将数据的列索引转换为行索引。</span><br><span class="line">DataFrame.stack(level=-1, dropna=True)</span><br><span class="line">    level：表示操作内层索引。若设为0，表示操作外层索引，默认为-1。</span><br><span class="line">    dropna：表示是否将旋转后的缺失值删除，若设为True，则表示自动过滤缺失值，设置为False则相反。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DataFrame.unstack(level=-1, fill_value=None)</span><br><span class="line">    level：默认为-1，表示操作内层索引，0表示操作外层索引。</span><br><span class="line">    fill_value：若产生了缺失值，则可以设置这个参数用来替换NaN。</span><br><span class="line"></span><br><span class="line">pivot(index=None, columns=None, values=None)</span><br><span class="line">    index：用于创建新DataFrame对象的行索引。</span><br><span class="line">    columns：用于创建新DataFrame对象的列索引。</span><br><span class="line">    values：用于填充新DataFrame对象中的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-数据变换与数据离散化"><a href="#4-数据变换与数据离散化" class="headerlink" title="4.数据变换与数据离散化"></a>4.数据变换与数据离散化</h2><h3 id="1-类别数据的哑变量的处理"><a href="#1-类别数据的哑变量的处理" class="headerlink" title="1.类别数据的哑变量的处理"></a>1.类别数据的哑变量的处理</h3><p>哑变量又称虚拟变量、名义变量，从名称上看就知道，它是人为虚设的变量，用来反映某个变量的不同类别。</p><p>使用哑变量处理类别转换，事实上就是将分类变量转换为哑变量矩阵或指标矩阵，矩阵的值通常用“0”或“1”表示。</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/6.png?raw=true" alt="6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对类别特征进行哑变量处理：</span><br><span class="line">pandas.get_dummies(data, prefix=None, prefix_sep=&#x27;_&#x27;, dummy_na=False,columns=None, sparse=False, drop_first=False, dtype=None)</span><br><span class="line">    data：表示哑变量处理的数据。</span><br><span class="line">    prefix：表示列名的前缀，默认为None。</span><br><span class="line">    prefix_sep：用于附加前缀作为分隔符使用，默认为“_”。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-连续性变量的离散化"><a href="#2-连续性变量的离散化" class="headerlink" title="2.连续性变量的离散化"></a>2.连续性变量的离散化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cut ()函数能够实现离散化操作。</span><br><span class="line"></span><br><span class="line">pandas.cut（x，bins，right = True，labels = None，retbins = False，precision = 3,include_lowest = False,duplicates =&#x27;raise&#x27; ）</span><br><span class="line">    x：表示要分箱的数组，必须是一维的。</span><br><span class="line">    bins：接收int和序列类型的数据。</span><br><span class="line">    right：是否包含右端点，决定区间的开闭，默认为True。</span><br><span class="line">注：cut()函数会返回一个Categorical对象，我们可以将其看作一组表示面元名称的字符串，它包含了分组的数量以及不同分类的名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果希望设置左闭右开区间，则可以在调用cut()函数时传入right=False进行修改。</span><br><span class="line">pd.cut(ages, bins=bins, right=False)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-第六章-Matplotlib数据可视化基础"><a href="#6-第六章-Matplotlib数据可视化基础" class="headerlink" title="6.第六章 Matplotlib数据可视化基础"></a>6.第六章 Matplotlib数据可视化基础</h1><p>数据可视化按照数据类型分类：</p><ol><li>时空数据可视化</li><li>层次与网络结构数据可视化</li><li>文本和跨媒体数据可视化</li><li>多变量数据可视化</li></ol><h2 id="1-Matplotlib简介"><a href="#1-Matplotlib简介" class="headerlink" title="1.Matplotlib简介"></a>1.Matplotlib简介</h2><p>可以绘制</p><ol><li>直方图：适于比较数据之间的多少。</li><li>折线图：反映一组数据的变化趋势。</li><li>条形图：显示各个项目之间的比较情况，和直方图有类似的作用。（用宽度相同的条形的高度或者长短来表示数据多少的图形，可以横置或纵置，纵置时也称为柱形图。）</li><li>散点图：显示若干数据系列中各数值之间的关系。</li><li>箱形图：识别异常值方面有一定的优越性。</li></ol><h2 id="2-Matplotlib绘图基础"><a href="#2-Matplotlib绘图基础" class="headerlink" title="2.Matplotlib绘图基础"></a>2.Matplotlib绘图基础</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Jupyter Notebook中进行交互式绘图需要执行：</span><br><span class="line">%matplotlib notebook# 将生成的交互式图嵌入notebook中</span><br><span class="line">%matplotlib inline# 将生成的静态图嵌入notebook中</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><h3 id="1-创建画布与子图"><a href="#1-创建画布与子图" class="headerlink" title="1.创建画布与子图"></a>1.创建画布与子图</h3><ol><li><p>创建新的空白画布</p><p>如果不希望在默认的画布上绘制图形，则可以调用figure()函数构建一张新的空白画布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.figure(num = None,figsize = None,dpi = None, facecolor = None,edgecolor = None, ...,** kwargs)</span><br><span class="line">    num   -- 表示图形的编号或名称。</span><br><span class="line">    figsize   -- 用于设置画布的尺寸。</span><br><span class="line">    facecolor -- 用于设置画板的背景颜色。</span><br><span class="line">    edgecolor -- 用于显示边框颜色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">figure_obj = plt.figure() # 调用figure()函数创建新的空白画布。</span><br></pre></td></tr></table></figure></li><li><p>建画布时为其添加背景颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设置facecolor参数。</span><br><span class="line"></span><br><span class="line">data_two = np.arange(200, 301)</span><br><span class="line"># 创建背景为灰色的新画布</span><br><span class="line">plt.figure(facecolor=&#x27;gray&#x27;)</span><br><span class="line"># 通过data2绘制折线图</span><br><span class="line">plt.plot(data_two)</span><br><span class="line">plt.show() </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建子图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">figure对象允许划分为多个绘图区域，每个绘图区域都是一个axes对象，它拥有属于自己的坐标系统，被称为子图。</span><br><span class="line">语法：</span><br><span class="line">subplot(nrows, ncols, index, **kwargs)</span><br><span class="line">    nrows，ncols -- 表示子区网格的行数、列数。</span><br><span class="line">           index -- 表示矩阵区域的索引。</span><br><span class="line">注：按照从左到右、从上到下的顺序对每个区域进行编号。其中，位于左上角的子区域编号为1，依次递增。</span><br><span class="line">    如果nrows、ncols和index这三个参数的值都小于10，则可以把它们简写为一个实数。（subplot(3,2,3)==subplot(323)）</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = plt.subplot(2,2,1)</span><br><span class="line">ax2 = plt.subplot(2,2,2)</span><br><span class="line">ax1.plot([1,2,3,4,5])</span><br><span class="line">ax2.plot([1,2,3,4,5])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.一次性创建一组子图</span><br><span class="line">subplots(nrows = 1,ncols = 1,sharex =False,sharey = False,squeeze = True,subplot_kw = None,gridspec_kw = None,** fig_kw)</span><br><span class="line">      nrows，ncols -- 表示子区网格的行数、列数。</span><br><span class="line">    sharex，sharey -- 表示控制x或y轴是否共享。</span><br><span class="line">subplots()函数会返回一个元组，元组的第一个元素为Figure对象（画布），第二个元素为Axes对象（子图，包含坐标轴和画的图）或Axes对象数组。</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">fig,axes = plt.subplots(2,2,sharex=True,sharey=True)</span><br><span class="line">for i in range(2):</span><br><span class="line">    for j in range(2):</span><br><span class="line">        axes[i,j].hist(np.random.randn(500),bins=50,color=&#x27;k&#x27;,alpha=0.5)</span><br><span class="line">plt.subplots_adjust(wspace=0,hspace=0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.通过Figure类的add_subplot()方法添加和选中子图。</span><br><span class="line">add_subplot(* args,** kwargs )</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(2,2,1)</span><br><span class="line">ax2 = fig.add_subplot(2,2,2)</span><br><span class="line">ax1.plot([1,2,3,4,5])</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-添加画布内容"><a href="#2-添加画布内容" class="headerlink" title="2.添加画布内容"></a>2.添加画布内容</h3><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/7.png?raw=true" alt="7.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">plt.title(&#x27;my blog&#x27;)</span><br><span class="line">1.</span><br><span class="line">这些函数之间是并列关系，没有先后顺序</span><br><span class="line">2.</span><br><span class="line">图例的添加只能在绘制完图形之后。</span><br></pre></td></tr></table></figure><h3 id="3-图表正确显示中文"><a href="#3-图表正确显示中文" class="headerlink" title="3.图表正确显示中文"></a>3.图表正确显示中文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;]</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br></pre></td></tr></table></figure><h3 id="4-绘图的保存与显示"><a href="#4-绘图的保存与显示" class="headerlink" title="4.绘图的保存与显示"></a>4.绘图的保存与显示</h3><ol><li><p>本地保存图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(fname, dpi=None, facecolor=&#x27;w&#x27;, edgecolor=&#x27;w&#x27;, ...)</span><br><span class="line">fname参数是一个包含文件名路径的字符串，或者是一个类似于Python文件的对象。如果format 参数设为None且fname参数是一个字符串，则输出格式将根据文件名的扩展名推导出来。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>显示图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Pyplot中的常用绘图"><a href="#3-Pyplot中的常用绘图" class="headerlink" title="3.Pyplot中的常用绘图"></a>3.Pyplot中的常用绘图</h2><ul><li>常见的图形绘制函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/8.png?raw=true" alt="8.png"></p><h3 id="1-颜色、线型、标记的设置"><a href="#1-颜色、线型、标记的设置" class="headerlink" title="1.颜色、线型、标记的设置"></a>1.颜色、线型、标记的设置</h3><ul><li><p>颜色</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/10.png?raw=true" alt="10.png"></p></li><li><p>线型值</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/11.png?raw=true" alt="11.png"></p></li><li><p>标记</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/12.png?raw=true" alt="12.png"></p></li></ul><h3 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2.折线图"></a>2.折线图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.plot(*args,**kwargs)</span><br><span class="line">x,y：x,y轴上的数据</span><br><span class="line">color：线条颜色</span><br><span class="line">linestyle：线条类型</span><br><span class="line">marker：点的类型</span><br><span class="line">alpha：透明度0~1</span><br></pre></td></tr></table></figure><h3 id="3-直方图"><a href="#3-直方图" class="headerlink" title="3.直方图"></a>3.直方图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.hist(x,bins = None,range = None,color = None,label = None, ..., ** kwargs)</span><br><span class="line">    x -- 表示输入值。</span><br><span class="line">     bins -- 表示绘制条柱的个数。</span><br><span class="line">    range -- bins的上下范围（最大和最小值）。</span><br><span class="line">    color -- 表示条柱的颜色，默认为None。</span><br><span class="line">    alpha -- 表示点的透明度，接收0~1之间的小数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr_random = np.random.randn(100)</span><br><span class="line"># 绘制直方图</span><br><span class="line">plt.hist(arr_random, bins=8, color=&#x27;g&#x27;, alpha=0.7)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-散点图"><a href="#4-散点图" class="headerlink" title="4.散点图"></a>4.散点图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, alpha=None, linewidths=None,  ..., **kwargs)</span><br><span class="line">      x, y -- 表示x轴和y轴对应的数据。</span><br><span class="line">         s -- 指定点的大小。</span><br><span class="line">         c -- 指定散点的颜色。</span><br><span class="line">    marker -- 表示绘制的散点类型。</span><br><span class="line">     alpha -- 表示点的透明度，接收0~1之间的小数。</span><br><span class="line"></span><br><span class="line"># x轴的数据</span><br><span class="line">x = np.arange(51)</span><br><span class="line"># 表示y轴的数据</span><br><span class="line">y = np.random.rand(51) * 10</span><br><span class="line">plt.scatter(x, y)   # 绘制散点图</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-柱状图"><a href="#5-柱状图" class="headerlink" title="5.柱状图"></a>5.柱状图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.bar(x, height, width, *, align=&#x27;center&#x27;, **kwargs)</span><br><span class="line">    x         -- 表示x轴的数据。</span><br><span class="line">    height    -- 表示条形的高度。</span><br><span class="line">    width     -- 表示条形的宽度，默认为0.8。</span><br><span class="line">    color     -- 表示条形的颜色。</span><br><span class="line">    edgecolor -- 表示条形边框的颜色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(5)</span><br><span class="line">y1, y2 = np.random.randint(1, 31,size=(2, 5))</span><br><span class="line">width = 0.25                                </span><br><span class="line">ax = plt.subplot(1, 1, 1) # 条形的宽度</span><br><span class="line">ax.bar(x, y1, width, color=&#x27;r&#x27;)</span><br><span class="line">ax.bar(x+width, y2, width, color=&#x27;g&#x27;) ax.set_xticks(x+width)</span><br><span class="line">ax.set_xticklabels([&#x27;January&#x27;, &#x27;February&#x27;, &#x27;March&#x27;, &#x27;April &#x27;, &#x27;May &#x27;]) </span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/9.png?raw=true" alt="9.png"></p><h3 id="6-饼图"><a href="#6-饼图" class="headerlink" title="6.饼图"></a>6.饼图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.pie(x,explode,labels,color,autopct,pctdistance,labeldistance,radius)</span><br><span class="line">    x：接收array,表示用于绘制饼图的数据，无默认</span><br><span class="line">    explode：接收array,指定项离饼图圆心为n个半径，默认为None</span><br><span class="line">    labels：接收array,指定每一项的名称，默认为None</span><br><span class="line">    color：接收特定string 或包含颜色字符串的array,表示颜色,默认为None</span><br><span class="line">    autopct：接收特定string, 指定数值的显示方式，默认为None</span><br><span class="line">    pctdistance：float型，指定每一项的比例和距离饼图圆心n个半径，默认为0.6</span><br><span class="line">    labeldistance：float型，指定每一项的名称和距离饼图圆心的半径数，默认为1. 1</span><br><span class="line">    radius：float型，表示饼图的半径，默认为1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-箱线图"><a href="#7-箱线图" class="headerlink" title="7.箱线图"></a>7.箱线图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.boxplot(X,notch,sym,vert,positions,widths,labels,meanline)</span><br><span class="line">    X:接收array,表示用于绘制箱线图的数据，无默认</span><br><span class="line">    notch:接收boolean,表示中间箱体是否有缺口，默认为None</span><br><span class="line">    sym:接收特定string,指定异常点形状，默认为None</span><br><span class="line">    vert:接收boolean,表示图形是纵向或者横向，默认为None</span><br><span class="line">    positions:接收array,表示图形位置，默认为None</span><br><span class="line">    widths:接收scalar或者array,表示每个箱体的宽度，默认为None</span><br><span class="line">    labels:接收array,指定每- - 个箱线图的标签，默认为None</span><br><span class="line">    meanline:接收boolean,表示是否显示均值线，默认为False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-概率图"><a href="#8-概率图" class="headerlink" title="8.概率图"></a>8.概率图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from scipy.stats import norm</span><br><span class="line">normpdf(X,mu,sigma)</span><br></pre></td></tr></table></figure><h2 id="4-图标辅助元素的定制"><a href="#4-图标辅助元素的定制" class="headerlink" title="4.图标辅助元素的定制"></a>4.图标辅助元素的定制</h2><h3 id="1-认识图表常用的辅助元素"><a href="#1-认识图表常用的辅助元素" class="headerlink" title="1.认识图表常用的辅助元素"></a>1.认识图表常用的辅助元素</h3><ul><li>坐标轴：分为单坐标轴和双坐标轴，单坐标轴按不同的方向又可分为水平坐标轴（又称x轴）和垂直坐标轴（又称y轴）。</li><li>标题：表示图表的说明性文本。图例：用于指出图表中各组图形采用的标识方式。</li><li>网格：从坐标轴刻度开始的、贯穿绘图区域的若干条线，用于作为估算图形所示值的标准。</li><li>参考线：标记坐标轴上特殊值的一条直线。</li><li>参考区域：标记坐标轴上特殊范围的一块区域。</li><li>注释文本：表示对图形的一些注释和说明。</li><li>表格：用于强调比较难理解数据的表格。</li></ul><h3 id="2-设置坐标轴的标签"><a href="#2-设置坐标轴的标签" class="headerlink" title="2.设置坐标轴的标签"></a>2.设置坐标轴的标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">设置x轴的标签：</span><br><span class="line">xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)</span><br><span class="line">设置y轴的标签：</span><br><span class="line">ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)</span><br><span class="line">    xlabel：表示x轴标签的文本。</span><br><span class="line">    fontdict：表示控制标签文本样式的字典。</span><br><span class="line">    labelpad：表示标签与x轴轴脊间的距离。</span><br><span class="line"></span><br><span class="line"># 设置x轴和y轴的标签</span><br><span class="line">plt.xlabel(&quot;x轴&quot;)</span><br><span class="line">plt.ylabel(&quot;y轴&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Axes对象使用set_xlabel()方法可以设置x轴的标签，使用set_ylabel()方法可以设置y轴的标签。set_xlabel()、set_ylabel()方法与xlabel()、ylabel()函数的参数用法相同。 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-设置刻度范围和刻度标签"><a href="#3-设置刻度范围和刻度标签" class="headerlink" title="3.设置刻度范围和刻度标签"></a>3.设置刻度范围和刻度标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.设置x轴的刻度范围</span><br><span class="line">xlim(left=None, right=None,emit=True, auto=False, *, xmin=None, xmax=None)  </span><br><span class="line">    left:表示x轴刻度取值区间的左位数。</span><br><span class="line">    right:表示x轴刻度取值区间的右位数。</span><br><span class="line">    emit:表示是否通知限制变化的观察者，默认为True。</span><br><span class="line">    auto：表示是否允许自动缩放x轴，默认为True。</span><br><span class="line">此外，Axes对象可以使用set_xlim()或set_ylim()方法设置x轴或y轴的刻度范围。  </span><br><span class="line"></span><br><span class="line">2.xticks()或yticks()函数可以设置x轴或y轴的刻度线位置和刻度标签。  </span><br><span class="line">xticks(ticks=None, labels=None, **kwargs)  </span><br><span class="line">    ticks：表示刻度显示的位置列表，该参数可以设置为空列表，以此禁用x轴的刻度。</span><br><span class="line">    labels：表示指定位置刻度的标签列表。 </span><br><span class="line">此外，Axes对象可以使用set_xticks()或set_yticks()方法设置x轴或y轴的刻度线位置，使用set_xticklabels()或set_yticklabels()方法设置x轴或y轴的刻度标签。   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置x轴的刻度范围和刻度标签</span><br><span class="line">plt.xlim(x.min() * 1.5, x.max() * 1.5)</span><br><span class="line">plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, </span><br><span class="line">                 np.pi],  [r&#x27;$-\pi$&#x27;, r&#x27;$-\pi/2$&#x27;,</span><br><span class="line">                 r&#x27;$0$&#x27;, r&#x27;$\pi/2$&#x27;, r&#x27;$\pi$&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-添加标题"><a href="#4-添加标题" class="headerlink" title="4.添加标题"></a>4.添加标题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title(label, fontdict=None, loc=‘center’, pad=None, **kwargs) </span><br><span class="line">    label:表示标题的文本。</span><br><span class="line">    fontdict:表示控制标题文本样式的字典。</span><br><span class="line">    loc:表示标题的对齐样式。</span><br><span class="line">    pad:表示标题与图表顶部的距离，默认为None。</span><br><span class="line">Axes对象还可以使用set_title()方法为图表添加标题。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加标题</span><br><span class="line">plt.title(&quot;正弦曲线和余弦曲线&quot;) </span><br></pre></td></tr></table></figure><h3 id="5-添加图例"><a href="#5-添加图例" class="headerlink" title="5.添加图例"></a>5.添加图例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">legend(handles, labels, loc, bbox_to_anchor, ncol, title, shadow, fancybox, *args, **kwargs) </span><br><span class="line">    handles:表示由图形标识构成的列表。 </span><br><span class="line">    labels:表示由图例项构成的列表。 </span><br><span class="line">    loc:用于控制图例在图表中的位置。</span><br><span class="line">    ncol:表示图例的列数，默认值为1。</span><br><span class="line">    title：表示图例的标题，默认值为None。 </span><br><span class="line">    shadow ：表示是否在图例后面显示阴影，默认值为None。</span><br><span class="line">    fancybox：表示是否为图例设置圆角边框，默认值为None </span><br><span class="line"></span><br><span class="line">lines = plt.plot(x, y1, x, y2)</span><br><span class="line"># 添加图例</span><br><span class="line">plt.legend(lines, [&#x27;正弦&#x27;, &#x27;余弦&#x27;], shadow=True, fancybox=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-显示指定样式的网格"><a href="#6-显示指定样式的网格" class="headerlink" title="6.显示指定样式的网格"></a>6.显示指定样式的网格</h3><p>可分为垂直网格和水平网格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grid(b=None, which=&#x27;major&#x27;, axis=&#x27;both&#x27;, **kwargs) </span><br><span class="line">    b：表示是否显示网格。</span><br><span class="line">    which：表示显示网格的类型，默认为major。</span><br><span class="line">    axis：表示显示哪个方向的网格，默认为both。</span><br><span class="line">    linewidth 或 lw：网格线的宽度。</span><br><span class="line">还可以使用Axes对象的grid()方法显示网格。 </span><br><span class="line"></span><br><span class="line"># 显示网格</span><br><span class="line">plt.grid(b=True, axis=&#x27;y&#x27;, linewidth=0.3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-添加参考线"><a href="#7-添加参考线" class="headerlink" title="7.添加参考线"></a>7.添加参考线</h3><p>分为水平参考线，垂直参考线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.添加水平参考线：</span><br><span class="line">axhline(y=0, xmin=0, xmax=1, linestyle=&#x27;-&#x27;, **kwargs) </span><br><span class="line">    y:表示水平参考线的纵坐标。</span><br><span class="line">    xmin:表示水平参考线的起始位置，默认为0。</span><br><span class="line">    xmax:表示水平参考线的终止位置，默认为1。</span><br><span class="line">    linestyle:表示水平参考线的类型，默认为实线。</span><br><span class="line"></span><br><span class="line">2.添加垂直参考线：</span><br><span class="line">axvline(x=0, ymin=0, ymax=1, linestyle=&#x27;-&#x27;, **kwargs) </span><br><span class="line">    x:表示垂直参考线的横坐标。</span><br><span class="line">    ymin:表示垂直参考线的起始位置，默认为0。</span><br><span class="line">    ymax:表示垂直参考线的终止位置，默认为1。</span><br><span class="line">    linestyle:表示垂直参考线的类型，默认为实线。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加参考线</span><br><span class="line">plt.axvline(x=0, linestyle=&#x27;--&#x27;)</span><br><span class="line">plt.axhline(y=0, linestyle=‘--’)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-添加参考区域"><a href="#8-添加参考区域" class="headerlink" title="8.添加参考区域"></a>8.添加参考区域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.添加水平参考区域</span><br><span class="line">axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs) </span><br><span class="line">    ymin:表示水平跨度的下限，以数据为单位。</span><br><span class="line">    ymax:表示水平跨度的上限，以数据为单位。</span><br><span class="line">    xmin:表示垂直跨度的下限，以轴为单位，默认为0。</span><br><span class="line">    xmax:表示垂直跨度的上限，以轴为单位，默认为1。</span><br><span class="line"></span><br><span class="line">2.添加垂直参考区域</span><br><span class="line">axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs) </span><br><span class="line">    xmin:表示垂直跨度的下限。</span><br><span class="line">    xmax:表示垂直跨度的上限。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加参考区域</span><br><span class="line">plt.axvspan(xmin=0.5, xmax=2.0, alpha=0.3)</span><br><span class="line">plt.axhspan(ymin=0.5, ymax=1.0, alpha=0.3) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-文本注解"><a href="#9-文本注解" class="headerlink" title="9.文本注解"></a>9.文本注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.添加无指向型注释文本</span><br><span class="line">plt.text(x,y,fontdict=None,**kwargs)</span><br><span class="line">    x, y:表示注释文本的位置。</span><br><span class="line">    s:表示注释文本的内容。</span><br><span class="line">    horizontalalignment或ha：表示水平对齐的方式，可以取值为&#x27;center&#x27;、&#x27;right&#x27;或 &#x27;left&#x27;。</span><br><span class="line">    verticalalignment或va：表示垂直对齐的方式，可以取值为&#x27;center&#x27;、&#x27;top&#x27;、&#x27;bottom&#x27;、&#x27;baseline&#x27;或&#x27;center_baseline&#x27;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"># 添加无指向型注释文本</span><br><span class="line">plt.text(3.10, 0.10, &quot;y=sin(x)&quot;, bbox=dict(alpha=0.2))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.添加指向型注释文本</span><br><span class="line">plt.annotate(s,xy,*args,**kwargs) # 实现带有指向性的文本注释</span><br><span class="line">s：表示注释文本的内容。</span><br><span class="line">    xy：表示被注释的点的坐标位置，接收元组（x,y）。</span><br><span class="line">    xytext ：表示注释文本所在的坐标位置，接收元组（x,y）。</span><br><span class="line">    arrowprops ：表示指示箭头的属性字典。</span><br><span class="line">    bbox：表示注释文本的边框属性字典。</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">(1)</span><br><span class="line">ax1.annotate(&quot;注释&quot;,xy=(2,1))</span><br><span class="line">(2)</span><br><span class="line"># 添加指向型注释文本</span><br><span class="line">plt.annotate(“最小值”, xy=(-np.pi / 2, -1.0), xytext=(-(np.pi / 2), -0.5), arrowprops=dict(arrowstyle=&quot;-&gt;&quot;)) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-数学表达式"><a href="#10-数学表达式" class="headerlink" title="10.数学表达式"></a>10.数学表达式</h3><p>自动识别使用annotate()或text()函数传入的数学字符串，并解析成对应的数学表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">要求字符串以美元符号“$”为首尾字符，且首尾字符中间包裹数学表达式。</span><br><span class="line">r‘$数学表达式$’</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">r&#x27;$\alpha &gt; \beta$&#x27;</span><br><span class="line"></span><br><span class="line">上标使用符号“^”表示，下标使用符号“_”表示。   </span><br><span class="line">r&#x27;$\alpha_i &gt; \beta_i$&#x27;</span><br><span class="line"></span><br><span class="line">使用“ \frac&#123;&#125;&#123;&#125;”可以编写分数形式的数字字符串，“\frac”的后面的两个中括号分别代表分数的分子和分母。</span><br><span class="line">r&#x27;$\frac&#123;3&#125;&#123;4&#125;$&#x27;   </span><br><span class="line"></span><br><span class="line">编写分数嵌套的数学字符串。 </span><br><span class="line">r&#x27;$\frac&#123;5 - \frac&#123;1&#125;&#123;x&#125;&#125;&#123;4&#125;$&#x27;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/13.png?raw=true" alt="13.png"></p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/14.png?raw=true" alt="14.png"></p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/15.png?raw=true" alt="15.png"></p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/16.png?raw=true" alt="16.png"></p><h3 id="11-添加表格"><a href="#11-添加表格" class="headerlink" title="11.添加表格"></a>11.添加表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">table(cellText=None, cellColours=None, cellLoc=&#x27;right&#x27;, colWidths=None, …, **kwargs) </span><br><span class="line">    cellText：表示表格单元格中的数据，可以是一个二维列表。</span><br><span class="line">    cellColours：表示单元格的背景颜色。</span><br><span class="line">    cellLoc：表示单元格文本的对齐方式，支持&#x27;left&#x27;、&#x27;center&#x27;、&#x27;right&#x27;三种取值，默认值为&#x27;right&#x27;。</span><br><span class="line">    colWidths：表示每列的宽度。</span><br><span class="line">    rowLabels：表示行标题的文本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加表格</span><br><span class="line">plt.table(cellText=[[6, 6, 6], [8, 8, 8]], colWidths=[0.1] * 3, rowLabels=[‘第1行’, ‘第2行’], colLabels=[&#x27;第1列&#x27;, &#x27;第2列&#x27;, &#x27;第3列&#x27;], loc=&#x27;lower right&#x27;)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-绘图的填充"><a href="#12-绘图的填充" class="headerlink" title="12.绘图的填充"></a>12.绘图的填充</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">fill_between()填充区域</span><br><span class="line"></span><br><span class="line">1.曲线与x轴的填充</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.fill_between(x,0,y,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line"></span><br><span class="line">2.填充部分区域</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.fill_between(x[15:300],0,0.4,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line"></span><br><span class="line">3.两曲线之间填充区域</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y1 = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">y2 = y1 + 0.2</span><br><span class="line">plt.plot(x,y1,&#x27;b&#x27;)</span><br><span class="line">plt.plot(x,y2,&#x27;b&#x27;)</span><br><span class="line">plt.fill_between(x,y1,y2,facecolor = &#x27;green&#x27;,alpha=0.3)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">4.使用fill进行填充</span><br><span class="line">x = np.linspace(0,1,500)</span><br><span class="line">y1 = np.sin(3 * np.pi * x) * np.exp(-4 * x)</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">ax.fill(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="7-第七章-时间序列数据分析"><a href="#7-第七章-时间序列数据分析" class="headerlink" title="7.第七章 时间序列数据分析"></a>7.第七章 时间序列数据分析</h1><p>什么是时间序列？</p><p>时间序列是指多个时间点上形成的数值序列，它既可以是定期出现的，也可以是不定期出现的。</p><p>时间序列的数据主要有：</p><ol><li>时间戳：表示特定的时刻，比如现在。</li><li>时期：比如2018年或者2018年10月。</li><li>时间间隔：由起始时间戳和结束时间戳表示。</li></ol><h2 id="1-时间序列的基本操作"><a href="#1-时间序列的基本操作" class="headerlink" title="1.时间序列的基本操作"></a>1.时间序列的基本操作</h2><ol><li><p>创建时间序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Pandas中，时间戳使用Timestamp（Series派生的子类）对象表示。</span><br><span class="line">pd.to_datetime(&#x27;20180828&#x27;)   </span><br><span class="line"></span><br><span class="line">传入的是多个datetime组成的列表，则Pandas会将其强制转换为DatetimeIndex类对象。</span><br><span class="line">date_index = pd.to_datetime([&#x27;20180820&#x27;,&#x27;20180828&#x27;,&#x27;20180908&#x27;])</span><br><span class="line"></span><br><span class="line">最基本的时间序列类型就是以时间戳为索引的Series对象。</span><br><span class="line">date_ser = pd.Series([11, 22, 33], index=date_index)</span><br><span class="line"></span><br><span class="line">将包含多个datetime对象的列表传给index参数，同样能创建具有时间戳索引的Series对象。</span><br><span class="line">date_list = [datetime(2018, 1, 1), datetime(2018, 1, 15]</span><br><span class="line">time_se = pd.Series(np.arange(6), index=date_list)</span><br><span class="line"></span><br><span class="line">如果希望DataFrame对象具有时间戳索引</span><br><span class="line">data_demo = [[11, 22, 33], [44, 55, 66]]</span><br><span class="line">date_list = [datetime(2018, 1, 23), datetime(2018, 2, 15)]</span><br><span class="line">time_df = pd.DataFrame(data_demo, index=date_list)</span><br></pre></td></tr></table></figure></li><li><p>通过时间戳索引选取子集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">最简单的选取子集的方式，是直接使用位置索引来获取具体的数据。</span><br><span class="line">time_se[3] # 根据位置索引获取数据</span><br><span class="line"></span><br><span class="line">使用datetime构建的日期获取其对应的数据。</span><br><span class="line">date_time = datetime(2015, 6, 1)</span><br><span class="line">date_se[date_time]</span><br><span class="line"></span><br><span class="line">在操作索引时，直接使用一个日期字符串（符合可以被解析的格式）进行获取。</span><br><span class="line">date_se[&#x27;20150530&#x27;]</span><br><span class="line">date_se[&#x27;2018/01/23&#x27;]</span><br><span class="line"></span><br><span class="line">获取某年或某个月的数据，则可以直接用指定的年份或者月份操作索引。</span><br><span class="line">date_se[&#x27;2015&#x27;]</span><br><span class="line"></span><br><span class="line">除了使用索引的方式以外，还可以通过truncate()方法截取 Series或DataFrame对象。</span><br><span class="line">truncate(before = None,after = None,</span><br><span class="line">axis = None,copy = True)</span><br><span class="line">    before -- 表示截断此索引值之前的所有行。</span><br><span class="line">     after -- 表示截断此索引值之后的所有行。</span><br><span class="line">      axis -- 表示截断的轴，默认为行索引方向。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-固定频率的时间序列"><a href="#2-固定频率的时间序列" class="headerlink" title="2.固定频率的时间序列"></a>2.固定频率的时间序列</h2><ol><li><p>创建固定频率的时间序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Pandas中提供了一个date_range()函数，主要用于生成一个具有固定频率的DatetimeIndex对象。</span><br><span class="line">date_range(start = None, end = None, periods = None, freq = None, tz = None, normalize = False, name = None, closed = None，** kwargs)</span><br><span class="line">    start：表示起始日期，默认为None。</span><br><span class="line">    end：表示终止日期，默认为None。</span><br><span class="line">    periods：表示产生多少个时间戳索引值。</span><br><span class="line">    freq：用来指定计时单位。</span><br><span class="line">则默认生成的时间戳是按天计算的，即freq参数为D。</span><br><span class="line"></span><br><span class="line">如果只是传入了开始日期或结束日期，则还需要用periods参数指定产生多少个时间戳。</span><br><span class="line">pd.date_range(start=&#x27;2018/08/10&#x27;, periods=5)</span><br><span class="line">pd.date_range(end=&#x27;2018/08/10&#x27;, periods=5)</span><br><span class="line"></span><br><span class="line">如果希望时间序列中的时间戳都是每周固定的星期日，将freq参数设为“W-SUN”。</span><br><span class="line">dates_index = pd.date_range(&#x27;2018-01-01&#x27;, periods=5, freq=&#x27;W-SUN&#x27;)</span><br><span class="line"></span><br><span class="line">日期中带有与时间相关的信息，且想产生一组被规范化到当天午夜的时间戳，可以将normalize参数的值设为True。</span><br><span class="line">pd.date_range(start=&#x27;2018/8/1 12:13:30&#x27;, </span><br><span class="line">periods=5, normalize=True, tz=&#x27;Asia/Hong_Kong&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>时间序列的频率、偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认生成的时间序列数据是按天计算的，即频率为“D”。</span><br><span class="line">“5D”表示每5天。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/17.png?raw=true" alt="17.png"></p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/18.png?raw=true" alt="18.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">每个基础频率还可以跟着一个被称为日期偏移量的DateOffset对象，需要先导入pd.tseries.offsets模块后才行。</span><br><span class="line">from pandas.tseries.offsets import *</span><br><span class="line">DateOffset(months=4, days=5)</span><br><span class="line"></span><br><span class="line">还可以使用offsets模块中提供的偏移量类型进行创建。</span><br><span class="line">Week(2) + Hour(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>时间序列的移动</p><p>移动是指沿着时间轴方向将数据进行前移或后移。</p><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/19.png?raw=true" alt="19.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pandas对象中提供了一个shift()方法，用来前移或后移数据，但数据索引保持不变。</span><br><span class="line">shift(periods=1, freq=None, axis=0)</span><br><span class="line">    periods -- 表示移动的幅度，可以为正数，也可以为负数，默认值是1，代表移动一次。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-时间周期及计算"><a href="#3-时间周期及计算" class="headerlink" title="3.时间周期及计算"></a>3.时间周期及计算</h2><ol><li><p>创建时期对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Period类表示一个标准的时间段或时期，比如某年、某月、某日、某小时等。</span><br><span class="line"></span><br><span class="line">创建Period类对象的方式比较简单，只需要在构造方法中以字符串或整数的形式传入一个日期即可。</span><br><span class="line">pd.Period(2018)</span><br><span class="line">pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line"></span><br><span class="line">Period对象能够参与数学运算</span><br><span class="line">period = pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line">period + 1</span><br><span class="line"></span><br><span class="line">相同频率的两个Period对象进行数学运算</span><br><span class="line">pd.Period(&#x27;2017/6&#x27;)</span><br><span class="line">other_period = pd.Period(201201, freq=&#x27;M&#x27; )</span><br><span class="line">period - other_period</span><br><span class="line"></span><br><span class="line">如果希望创建多个Period对象，且它们是固定出现的，则可以通过period_range()函数实现。</span><br><span class="line">period_index = pd.period_range(&#x27;2012.1.8&#x27;,&#x27;2012.3.31&#x27;, freq=&#x27;M&#x27;)</span><br><span class="line"></span><br><span class="line">除了使用上述方式创建PeriodIndex外，还可以直接在PeriodIndex的构造方法中传入一组日期字符串。</span><br><span class="line">str_list = [&#x27;2010&#x27;, &#x27;2011&#x27;, &#x27;2012&#x27;]</span><br><span class="line">pd.PeriodIndex(str_list, freq=&#x27;A-DEC&#x27;)</span><br><span class="line"></span><br><span class="line">asfreq()方法来转换时期的频率。</span><br><span class="line">asfreq(freq，method = None，how = None，normalize = False，fill_value = None )</span><br><span class="line">          freq -- 表示计时单位。</span><br><span class="line">           how -- 可以取值为start或end，默认为end。</span><br><span class="line">     normalize -- 表示是否将时间索引重置为午夜。</span><br><span class="line">    fill_value -- 用于填充缺失值的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-重采样"><a href="#4-重采样" class="headerlink" title="4.重采样"></a>4.重采样</h2><ol><li><p>重采样方法（resample）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Pandas中的resample()是一个对常规时间序列数据重新采样和频率转换的便捷的方法。</span><br><span class="line">resample(rule, how=None, axis=0, fill_method=None, closed=None, label=None, ...)</span><br><span class="line">    rule        -- 表示重采样频率的字符串或DateOffset。</span><br><span class="line">    fill_method -- 表示升采样时如何插值。</span><br><span class="line">    closed      -- 设置降采样哪一端是闭合的。</span><br><span class="line"></span><br><span class="line">time_ser.resample(&#x27;W-MON&#x27;).mean()</span><br><span class="line">how参数不再建议使用，而是采用新的方式“.resample(...).mean()”求平均值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果重采样时传入closed参数为left，则表示采样的范围是左闭右开型的。</span><br><span class="line">time_ser.resample(&#x27;W-MON&#x27;, closed=&#x27;left&#x27;).mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>降采样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">降采样时间颗粒会变大，数据量是减少的。为了避免有些时间戳对应的数据闲置，可以利用内置方法聚合数据。</span><br><span class="line"></span><br><span class="line">股票数据比较常见的是OHLC重采样，包括开盘价、最高价、最低价和收盘价。</span><br><span class="line">date_index = pd.date_range(&#x27;2018/06/01&#x27;, periods=30)</span><br><span class="line">shares_data = np.random.rand(30)</span><br><span class="line">time_ser = pd.Series(shares_data, index=date_index)</span><br><span class="line">time_ser.resample(&#x27;7D&#x27;).ohlc()</span><br><span class="line"></span><br><span class="line">降采样相当于另外一种形式的分组操作，它会按照日期将时间序列进行分组，之后对每个分组应用聚合方法得出一个结果。</span><br><span class="line">time_ser.groupby(lambda x: x.week).mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>升采样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">升采样的时间颗粒是变小的，数据量会增多，这很有可能导致某些时间戳没有相应的数据。</span><br><span class="line"></span><br><span class="line">常用的解决办法就是插值，具体有如下几种方式：</span><br><span class="line">    1.通过ffill(limit)或bfill(limit)方法，取空值前面或后面的值填充，limit可以限制填充的个数。</span><br><span class="line">    2.通过fillna(‘ffill’)或fillna(‘bfill’)进行填充，传入ffill则表示用NaN前面的值填充，传入bfill则表示用后面的值填充。</span><br><span class="line">    3.使用interpolate()方法根据插值算法补全数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-数据统计—滑动窗口"><a href="#5-数据统计—滑动窗口" class="headerlink" title="5.数据统计—滑动窗口"></a>5.数据统计—滑动窗口</h2><p>滑动窗口指的是根据指定的单位长度来框住时间序列，从而计算框内的统计指标。（相当于一个长度指定的滑块在刻度尺上面滑动，每滑动一个单位即可反馈滑块内的数据。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rolling(window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)</span><br><span class="line">    window      -- 表示窗口的大小。</span><br><span class="line">    min_periods -- 每个窗口最少包含的观测值数量。</span><br><span class="line">    center      -- 是否把窗口的标签设置为居中。</span><br><span class="line">    win_type    -- 表示窗口的类型。</span><br><span class="line">    closed      -- 用于定义区间的开闭。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-时序模型—ARIMA"><a href="#6-时序模型—ARIMA" class="headerlink" title="6.时序模型—ARIMA"></a>6.时序模型—ARIMA</h2><p>ARIMA的全称叫做<strong>差分整合移动平均自回归模型</strong>，又称作整合移动平均自回归模型，是一种用于时间序列预测的常见统计模型。</p><p>ARIMA模型主要由AR、I与MA模型三个部分组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">记作:ARIMA(p,d,q)</span><br><span class="line"></span><br><span class="line">p--代表预测模型中采用的时序数据本身的滞后数，即自回归项数。</span><br><span class="line">d--代表时序数据需要进行几阶差分化，才是稳定的，即差分的阶数。</span><br><span class="line">q--代表预测模型中采用的预测误差的滞后数，即滑动平均项数。</span><br><span class="line"></span><br><span class="line">ARIMA模型的基本思想是：将预测对象随时间推移而形成的数据序列视为一个随机序列，用一定的数学模型来近似描述这个序列，这个模型一旦被识别后，就可以从时间序列的过去值及现在值来预测未来值。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/4.python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/20.png?raw=true" alt="20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop大数据处理</title>
      <link href="/2023/11/18/3.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB/1.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/"/>
      <url>/2023/11/18/3.%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB/1.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频推荐：<a href="https://www.bilibili.com/video/BV1WY4y197g7/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>为了让我快速搭建Hadoop集群，因为学习的过程中总会有配置出错的时候，再加上Hadoop集群搭建一次需要消耗的时间实在是太长了，所以写了这个笔记。当然，我也省略了很多操作，比如打开vim之后，输入i开始编辑，按esc退出编辑模式，:wq保存退出。所以需要熟悉一点点Linux命令。</p><p>温馨提示：建议每次搭建好了一个集群之后，就拍摄一次快照（虽然一个快照3个G大小左右）。</p><h1 id="第一章-搭建Hadoop集群"><a href="#第一章-搭建Hadoop集群" class="headerlink" title="第一章 搭建Hadoop集群"></a>第一章 搭建Hadoop集群</h1><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.下载vmware</span><br><span class="line">2.下载centos镜像</span><br><span class="line">3.配置vmware虚拟机的网络设置</span><br><span class="line">4.安装好centos，命名为hadoop01</span><br><span class="line">5.打开终端，输入：</span><br><span class="line">ping www.baidu.com</span><br><span class="line">6.有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br></pre></td></tr></table></figure><p>以上配置如果不会可以看视频：<a href="https://www.bilibili.com/video/BV1Kf4y1z7Nw?p=1&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">Hadoop安装</a></p><h2 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">以下正式开始，注意root登录：</span><br><span class="line"><span class="number">1.</span>创建/export目录，在export目录下创建data，servers,software三个目录：</span><br><span class="line">mkdir -p /export/data /export/servers /export/software</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>克隆两个虚拟机并命名为hadoop02，hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>配置主机名，修改后重新打开终端可以查看：(<span class="number">3</span>个都要操作)</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname 主机名</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>IP映射配置（<span class="number">3</span>个，IP地址参考自己的）</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span> hadoop01</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.135</span> hadoop02</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.136</span> hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>设置静态IP(最后ens33可能不同，输入en然后TAB键补齐),<span class="number">3</span>个修改：</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">修改（没有的需要自己打）：</span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.121</span><span class="number">.2</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">DNS1=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>可选，修改时区并配置自动时间同步（<span class="number">3</span>个）：</span><br><span class="line">安装ntp软件</span><br><span class="line">yum install -y ntp</span><br><span class="line">更新时区</span><br><span class="line">rm -f /etc/localtime;sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">同步时间</span><br><span class="line">ntpdate -u ntp.aliyun.com</span><br><span class="line">开启ntp服务并设置开机自启</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>重启（<span class="number">3</span>个），输入：</span><br><span class="line">reboot</span><br><span class="line">ping www.baidu.com</span><br><span class="line">有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>SSH免密登录，输入：</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">连续<span class="number">4</span>次回车</span><br><span class="line">cd ~/.ssh</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop01</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop02</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop03</span><br><span class="line">ssh hadoop01</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop02</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop03</span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line"><span class="number">9.J</span>DK和Hadoop安装,注意以下版本号请根据实际版本号：</span><br><span class="line">使用xFTP上传JDK和Hadoop安装包到/export/software/</span><br><span class="line">cd /export/software/</span><br><span class="line">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /export/servers/</span><br><span class="line">tar -zxvf hadoop-<span class="number">2.10</span><span class="number">.0</span>.tar.gz -C /export/servers/</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv jdk-8u241-linux-x64 jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">mv hadoop-<span class="number">2.10</span><span class="number">.0</span> hadoop-<span class="number">2.10</span><span class="number">.0</span> (这里解压后文件名一样，可以不修改)</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>配置环境变量：</span><br><span class="line">vim /etc/profile</span><br><span class="line">在文件最底部输入：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/<span class="built_in">bin</span></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/export/servers/hadoop-<span class="number">2.10</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/<span class="built_in">bin</span>:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line">退出后：</span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p>到此没有出现错误的话，那么恭喜，可以接着往下一步进行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">接下来对主节点hadoop01进行配置：</span><br><span class="line">（1）</span><br><span class="line">cd /export/servers/hadoop-2.10.0/etc/hadoop</span><br><span class="line">vim hadoop-env.sh </span><br><span class="line">找到export JAVA_HOME，修改为：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-1.8.0</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">vim core-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/export/servers/hadoop-2.10.0/tmp&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（3）</span><br><span class="line">vim hdfs-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop02:5009&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（4）</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（5）</span><br><span class="line">vim yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（6）</span><br><span class="line"> vim slaves </span><br><span class="line"> </span><br><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br><span class="line"></span><br><span class="line">（7）</span><br><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line">scp -r /export/ hadoop02:/</span><br><span class="line">scp -r /export/ hadoop03:/</span><br><span class="line"></span><br><span class="line">然后3个需要输入：</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">需要对主节点hadoop01操作</span><br><span class="line">（8）必须格式化处理一次</span><br><span class="line">cd /export/servers/hadoop-2.10.0</span><br><span class="line">ls -l</span><br><span class="line">如果有tmp目录</span><br><span class="line">需要输入：rm -rf /export/servers/hadoop-2.10.0/tmp/</span><br><span class="line">格式化：</span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>如果到此没有出错，那么需要进行一下最最最重要的一步：</p><p><strong>拍摄快照</strong>，<strong>拍摄快照</strong>，<strong>拍摄快照</strong></p><p>重要的事情说三遍。</p><h2 id="Hadoop集群测试"><a href="#Hadoop集群测试" class="headerlink" title="Hadoop集群测试"></a>Hadoop集群测试</h2><p><strong>注：每次开机需要启动一次服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）启动服务</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">注：start换成stop停止服务</span><br><span class="line"></span><br><span class="line">（2）查看服务</span><br><span class="line">jps</span><br><span class="line"></span><br><span class="line">（3）通过UI查看Hadoop运行状态</span><br><span class="line">在浏览器网址栏输入：</span><br><span class="line">HDFS的UI端口：</span><br><span class="line">hadoop01:50070</span><br><span class="line">YARN的UI端口：</span><br><span class="line">hadoop01:8088</span><br></pre></td></tr></table></figure><h2 id="Hadoop集群初体验"><a href="#Hadoop集群初体验" class="headerlink" title="Hadoop集群初体验"></a>Hadoop集群初体验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">（1）在/export/data目录下，输入：</span><br><span class="line">cd /export/data</span><br><span class="line">vim word.txt</span><br><span class="line">编写内容：</span><br><span class="line">hello world</span><br><span class="line">hello computer</span><br><span class="line">hello hadoop</span><br><span class="line"></span><br><span class="line">（2）在HDFS上创建/wordcount/input,并上传word.txt:</span><br><span class="line">hadoop fs -mkdir -p /wordcount/input</span><br><span class="line">hadoop fs -put /export/data/word.txt /wordcount/input</span><br><span class="line"></span><br><span class="line">（3）HDFS的UI端口查看：</span><br><span class="line">hadoop01:50070</span><br><span class="line"></span><br><span class="line">（4）查看MapReduce实例程序：</span><br><span class="line">cd /export/servers/hadoop-2.10.0/share/hadoop/mapreduce</span><br><span class="line">ls -l</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.10.0.jar wordcount /wordcount/input /wordcount/output</span><br><span class="line"></span><br><span class="line">（5）HDFS的UI端口查看结果：</span><br><span class="line">hadoop01:50070</span><br></pre></td></tr></table></figure><h1 id="第二章-初识Hadoop"><a href="#第二章-初识Hadoop" class="headerlink" title="第二章 初识Hadoop"></a>第二章 初识Hadoop</h1><ol><li><p>什么是大数据？</p><p>大数据是数字化时代、信息化时代的基础（技术）支撑，以数据为生活赋能。</p></li><li><p>大数据的4个主要特征（4v）：</p><p>大量（volume）</p><p>多样（variety）：结构化数据，非结构化数据，半结构化数据</p><p>高速（velocity）：</p><p>价值（value）：价值密度的高低和数据总量的大小成反比。</p></li><li><p>大数据的应用场景：医疗行业的应用，金融行业的应用，零售业的应用</p></li><li><p>Hadoop的优势：</p><p>扩容能力强</p><p>成本低</p><p>高效率</p><p>可靠性</p><p>高容错率</p></li><li><p>Hadoop的生态体系：</p><ol><li><p>分布式存储系统（HDFS）：</p><p>Hadoop分布式文件系统的简称</p></li><li><p>MapReduce分布式计算框架：</p><p>是一种计算模型，用于大规模数据集的并行计算</p></li><li><p>YARN资源管理平台：</p><p>Hadoop2.0中的资源管理器，为上层的应用提供统一的资源管理和调度</p></li><li><p>Sqoop数据迁移工具：</p><p>用于Hadoop和传统数据库间进行数据的转换。</p></li><li><p>Mahout数据挖掘算法库：</p><p>方便快捷地创建智能应用程序</p></li><li><p>HBase分布式数据库：</p><p>针对结构化数据的可伸缩、高可靠、高性能、分布式和面向列的动态模型数据库</p></li><li><p>Zookeeper分布式协调服务：</p><p>分布式应用程序协调服务</p></li><li><p>Hive基于Hadoop的数据仓库：</p><p>可以将结构化的数据文件映射为一张数据表</p></li><li><p>Flume日志收集工具：</p><p>是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。支持在日志系统中定制各类数据发送方用于收集数据。</p></li></ol></li><li><p>大数据的核心工作：数据存储，数据计算，数据传输</p><ul><li><p>数据存储：</p><p>HDFS</p><p>HBase是大数据体系内使用非常广泛的NoSQL KV型数据库技术HBase是基于HDFS之上构建的。</p></li><li><p>数据计算：</p><p>MapReduce：组件是最早一代的大数据分布式计算引擎对大数据的发展做出了卓越的贡献</p><p> Hive：是一款以SQL为要开发语言的分布式计算框架。</p><p>Spark：是目前全球范围内最火热的分布式内存计算引擎。是大数据体系中的明星计算产品</p><p>Flink：同样也是一款明星级的大数据分布式内存计算引擎。</p></li><li><p>数据传输：</p><p>Flume：是一款流式数据采集工具，可以从非常多的数据源中完成数据采集传输的任务。</p><p> Sqoop：是一款ETL工具，可以协助大数据体系和关系型数据库之间进行数据传输。</p><p>Kafka：是一款分布式的消息系统，可以完成海量规模的数据传输工作。</p><p>Pulsar：同样是一款分布式的消息系统。</p></li></ul></li><li><p>大数据软件生态</p><ul><li>存储：Apache Hadoop HDFS、Apache HBase、Apache Kudu、云平台</li><li>计算：Apache Hadoop MapReduce、Apache Spark、Apache Flink</li><li>传输：Apache Kafka、Apache Pulsar、Apache Flume、Apache Sqoop</li></ul></li><li><p>商业发行版本：CDH，HDP，星环</p></li></ol><h1 id="第三章-HDFS分布式文件系统"><a href="#第三章-HDFS分布式文件系统" class="headerlink" title="第三章 HDFS分布式文件系统"></a>第三章 HDFS分布式文件系统</h1><p>Hadoop三大组件（HDFS，MapReduce，YARN）</p><h2 id="HDFS的基本概念"><a href="#HDFS的基本概念" class="headerlink" title="HDFS的基本概念"></a>HDFS的基本概念</h2><ol><li>NameNode（名称节点&#x2F;主节点）：是HDFS集群的主服务器</li><li>DataNode（数据节点）：是HDFS集群的从服务器</li><li>Secondary NameNode（辅助名称节点）：通过http从NameNode拉取数据（edits和fsimage）然后合并完成后提供给NameNode使用</li><li>Block（数据块）</li><li>Rack（机架）</li><li>Metadata（元数据）：<ul><li>维护HDFS中文件和目录的信息</li><li>记录文件内容，存储相关信息</li><li>用来记录HDFS中所有DataNode的信息</li></ul></li></ol><h2 id="HDFS的特点"><a href="#HDFS的特点" class="headerlink" title="HDFS的特点"></a>HDFS的特点</h2><ol><li>优点<ul><li>高容错</li><li>流式数据访问</li><li>支持超大文件</li><li>高数据吞吐量：一旦写入就不能进行修改了，只能追加或者删除。</li><li>可构建在廉价的机器上</li></ul></li><li>缺点<ul><li>高延迟</li><li>不适合小文件存取场景</li><li>不适合并发写入：不支持并发多用户的写操作</li></ul></li></ol><h2 id="HDFS存储架构"><a href="#HDFS存储架构" class="headerlink" title="HDFS存储架构"></a>HDFS存储架构</h2><ol><li><p>大数据体系中，分布式的调度主要有2类架构模式：</p><ul><li>去中心化模式</li><li>中心化模式（主从架构&#x2F;主从模式）：就是中心化模式，表示有一个主节点来作为管理者，管理协调下属一批从节点工作。</li></ul></li><li><p>NameNode：：存储的是元数据信息。</p><p>DataNode：存储真正的数据信息</p><p>SecondaryNameNode：主要帮助NameNode完成元数据整理工作。</p></li><li><p>HDFS文件的读写原理（略）</p></li></ol><h2 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h2><h3 id="一键启停脚本"><a href="#一键启停脚本" class="headerlink" title="一键启停脚本"></a>一键启停脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><h3 id="HDFS文件系统基本信息"><a href="#HDFS文件系统基本信息" class="headerlink" title="HDFS文件系统基本信息"></a>HDFS文件系统基本信息</h3><p>HDFS同Linux系统一样，均是以 &#x2F; 作为根目录的组织形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs 新版命令，只是前缀不同</span><br><span class="line"></span><br><span class="line">1.创建文件夹</span><br><span class="line">hadoop fs -mkdir [-p] &lt;path&gt; ...</span><br><span class="line">    path 为待创建的目录</span><br><span class="line">    -p选项的行为与Linux mkdir -p一致，它会沿着路径创建父目录。</span><br><span class="line"></span><br><span class="line">2.查看目录内容</span><br><span class="line">hadoop fs -ls [-h] [-R] [&lt;path&gt; ...] </span><br><span class="line">path 指定目录路径</span><br><span class="line">-h 人性化显示文件size</span><br><span class="line">-R 递归查看指定目录及其子目录</span><br><span class="line"></span><br><span class="line">3.上传文件到HDFS指定目录下</span><br><span class="line">hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">-f 覆盖目标文件（已存在下）</span><br><span class="line">-p 保留访问和修改时间，所有权和权限。</span><br><span class="line">localsrc 本地文件系统（客户端所在机器）</span><br><span class="line">dst 目标文件系统（HDFS）</span><br><span class="line"></span><br><span class="line">4.查看HDFS文件内容</span><br><span class="line">hadoop fs -cat &lt;src&gt; ... </span><br><span class="line">    读取指定文件全部内容，显示在标准输出控制台</span><br><span class="line">    </span><br><span class="line">    读取大文件可以使用管道符配合more</span><br><span class="line">        hadoop fs -cat &lt;src&gt; | more</span><br><span class="line">        hdfs dfs -cat &lt;src&gt; | more</span><br><span class="line"></span><br><span class="line">5.下载HDFS文件</span><br><span class="line">hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</span><br><span class="line">    下载文件到本地文件系统指定目录，localdst必须是目录</span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line">    -p 保留访问和修改时间，所有权和权限。</span><br><span class="line"></span><br><span class="line">6.拷贝HDFS文件</span><br><span class="line">hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt; </span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line"></span><br><span class="line">7.追加数据到HDFS文件中</span><br><span class="line">hadoop fs -appendToFile &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">    将所有给定本地文件的内容追加到给定dst文件。 </span><br><span class="line">    dst如果文件不存在，将创建该文件。 </span><br><span class="line">    如果&lt;localSrc&gt;为-，则输入为从标准输入中读取。</span><br><span class="line"></span><br><span class="line">8.HDFS数据移动操作</span><br><span class="line">hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</span><br><span class="line">    移动文件到指定文件夹下</span><br><span class="line">    可以使用该命令移动数据，重命名文件的名称</span><br><span class="line"></span><br><span class="line">9.HDFS数据删除操作</span><br><span class="line">hadoop fs -rm -r [-skipTrash] URI </span><br><span class="line">[URI ...] 删除指定路径的文件或文件夹</span><br><span class="line">    -skipTrash 跳过回收站，直接删除（默认回收站是关闭状态）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HDFS shell其它命令：<a href="https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html">官方命令指导文档</a></p><h2 id="HDFS分布式文件存储"><a href="#HDFS分布式文件存储" class="headerlink" title="HDFS分布式文件存储"></a>HDFS分布式文件存储</h2><ol><li><p>问题：文件大小不一，不利于统一管理</p><p>解决：设定统一的管理单位，block块</p></li><li><p>NameNode基于一批edits和一个fsimage文件的配合完成整个文件系统的管理和维护</p><ul><li>edits文件：是一个流水账文件，记录了hdfs中的每一次操作，以及本次操作影响的文件其对应的block</li><li>FSImage文件：将全部的edits文件，合并为最终结果</li></ul></li></ol><h1 id="第四章-MapReduce分布式计算框架"><a href="#第四章-MapReduce分布式计算框架" class="headerlink" title="第四章 MapReduce分布式计算框架"></a>第四章 MapReduce分布式计算框架</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><ol><li>MapReduce核心思想是：分而治之</li><li>MapReduce作为一种分布式计算模型，它主要用于解决海量数据的计算问题。<ul><li>Map阶段：负责将任务分解，并行处理</li><li>Reduce阶段：负责将任务合并，即把Map阶段的结果进行全局汇总</li></ul></li><li>从数据格式上看map（）函数接受键值对数据，输出键值对数据。reduce（）函数将map（）输出的键值对作为输入，把相同的key的value进行汇总输出新的键值对。</li></ol><h2 id="MapReduce工作原理"><a href="#MapReduce工作原理" class="headerlink" title="MapReduce工作原理"></a>MapReduce工作原理</h2><p>（见课本：P73页- P100）</p><h1 id="第五章-Zookeeper分布式协调服务"><a href="#第五章-Zookeeper分布式协调服务" class="headerlink" title="第五章 Zookeeper分布式协调服务"></a>第五章 Zookeeper分布式协调服务</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1M741137qY?p=74">黑马程序员</a></p><h2 id="初识Zookeeper"><a href="#初识Zookeeper" class="headerlink" title="初识Zookeeper"></a>初识Zookeeper</h2><ol><li><p>Zookeeper简介</p><ul><li>Zookeeper是进行分布式服务的协调</li><li>本质上是一个分布式的小文件存储系统</li></ul></li><li><p>Zookeeper的特性：其他特性都是为了满足Zookeeper全局数据一致性</p><ul><li>全局数据一致性：每个服务器都保存一份相同的数据副本，客户端连接到集群的任意节点上，看到的数据都是一致的。</li><li>可靠性</li><li>顺序性</li><li>数据更新原子性</li><li>实时性</li></ul></li><li><p>Zookeeper集群的角色</p><p>每一个Zookeeper都是由多台服务器节点组成，这些节点通过复制保证各个服务器节点之间的数据一致。<strong>只要这些服务器节点过半数可用，那么整个Zookeeper集群就可用。</strong></p><ol><li>leader：Zookeeper集群工作的核心，也是事务性请求的唯一调度者和处理者。</li><li>follower：负责处理客户端的非事务请求。</li><li>observer：负责观察Zookeeper集群的最新状态变化，并将这些状态进行同步。</li></ol></li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ol><li>数据采用树状层次结构</li><li>Znode的类型：<ul><li>临时节点：生命周期依赖于创建它们的会话</li><li>永久节点：生命周期<strong>不</strong>依赖于创建它们的会话</li></ul></li><li>Znode的属性：其中重要的概念是<code>Zxid(Zookeeper Transaction ID)</code>，<code>Zookeeper</code>结点的每一次更改都具有唯一的<code>Zxid</code>，如果<code>Zxid-1</code> 小于<code> Zxid-2</code> ，则<code>Zxid-1</code> 的更改发生在 <code>Zxid-2 </code>更改之前<ul><li><code>czxid</code>：数据结点创建时的事务ID——针对于<code>zookeeper</code>数据结点的管理：我们对结点数据的一些写操作都会导致<code>zookeeper</code>自动地为我们去开启一个事务，并且自动地去为每一个事务维护一个事务<code>ID</code></li><li><code>ctime</code>数据结点创建时的时间</li><li><code>mZxid</code>数据结点最后一次更新时的事务ID</li><li><code>mtime</code>数据结点最后一次更新时的时间</li><li><code>pZxid</code>数据节点最后一次修改此<code>znode</code>子节点更改的<code>zxid</code></li><li><code>cversion</code>子结点的更改次数</li><li><code>dataVersion</code>结点数据的更改次数</li><li><code>aclVersion</code>结点的ACL更改次数——类似<code>linux</code>的权限列表，维护的是当前结点的权限列表被修改的次数</li><li><code>ephemeralOwner</code>如果结点是临时结点，则表示创建该结点的会话的<code>SessionID</code>；如果是持久结点，该属性值为0</li><li><code>dataLength</code>数据内容的长度</li><li><code>numChildren</code>数据结点当前的子结点个数</li></ul></li></ol><h2 id="Zookeeper的Watch机制"><a href="#Zookeeper的Watch机制" class="headerlink" title="Zookeeper的Watch机制"></a>Zookeeper的Watch机制</h2><p>Watch机制：实现分布式的通知功能。</p><ol><li>Watch机制的特点<ul><li>一次性触发：后续发生同样的事件，也不会再次触发。</li><li>事件封装：</li><li>异步发送</li><li>先注册，再触发</li></ul></li><li>Watch机制的通知状态和事件类型（107）</li></ol><h2 id="Zookeeper的选举机制"><a href="#Zookeeper的选举机制" class="headerlink" title="Zookeeper的选举机制"></a>Zookeeper的选举机制</h2><ol><li>选举机制：<ul><li>服务器ID：设置myid参数文件，编号越大，在算法中的权重越大</li><li>选举状态：4种。竞选，随从，观察，领导者。</li><li>数据ID：选举过程中，数据越新，权重越大</li><li>逻辑时钟：投票次数。</li></ul></li><li>选举机制的类型<ul><li>全新集群选举</li><li>非全新集群选举</li></ul></li></ol><h2 id="Zookeeper的集群部署"><a href="#Zookeeper的集群部署" class="headerlink" title="Zookeeper的集群部署"></a>Zookeeper的集群部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1.上传文件到：/export/softwere</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">cd /export/software/</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line">cd ../servers/</span><br><span class="line">mv apache-zookeeper-3.7.0-bin/ zookeeper-3.7.0</span><br><span class="line"></span><br><span class="line">5.</span><br><span class="line">cd zookeeper-3.7.0/conf/</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg </span><br><span class="line">找到并修改：dataDir=/export/data/zookeeper/zkdata</span><br><span class="line">最下方输入：</span><br><span class="line">server.1=hadoop01:2888:3888</span><br><span class="line">server.2=hadoop02:2898:3898</span><br><span class="line">server.3=hadoop03:2889:3889</span><br><span class="line"></span><br><span class="line">6.</span><br><span class="line">mkdir -p /export/data/zookeeper/zkdata</span><br><span class="line">cd /export/data/zookeeper/zkdata</span><br><span class="line">echo 1 &gt;myid</span><br><span class="line"></span><br><span class="line">7.</span><br><span class="line">vim /etc/profile</span><br><span class="line">最下面输入：</span><br><span class="line">export ZK_HOME=/export/servers/zookeeper-3.7.0</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$ZK_HOME/bin</span><br><span class="line">保存退出</span><br><span class="line"></span><br><span class="line">8.</span><br><span class="line">scp -r /export/servers/zookeeper-3.7.0/ hadoop02:/export/servers/</span><br><span class="line">scp -r /export/servers/zookeeper-3.7.0/ hadoop03:/export/servers/</span><br><span class="line"></span><br><span class="line">scp -r /export/data/zookeeper/ hadoop02:/export/data/</span><br><span class="line">scp -r /export/data/zookeeper/ hadoop03:/export/data/</span><br><span class="line"></span><br><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line"></span><br><span class="line">3个输入：</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">在Hadoop02输入：</span><br><span class="line">cd /export/data/zookeeper/zkdata/</span><br><span class="line">echo 2 &gt;myid</span><br><span class="line"></span><br><span class="line">在Hadoop03输入：</span><br><span class="line">cd /export/data/zookeeper/zkdata/</span><br><span class="line">echo 3 &gt;myid</span><br><span class="line"></span><br><span class="line">9.</span><br><span class="line">启动服务，3个依次输入：</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line">查看角色：</span><br><span class="line">zkServer.sh status</span><br><span class="line">注意：在输入这个命令的时候报错，无法查看mode的话，极大的可能性是没有关闭防火墙（究极折磨，我配置了10多次才找到问题，问老师真问题的边都没找到）</span><br><span class="line">如果出错输入：</span><br><span class="line">systemctl stop firewalld  #停止firewall防火墙</span><br><span class="line">systemctl disable firewalld  #禁止firewall开机启动</span><br><span class="line">（详细解决方案；https://blog.csdn.net/white_mvlog/article/details/112878757）</span><br><span class="line"></span><br><span class="line">关闭服务：</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure><h2 id="Zookeeper的shell操作"><a href="#Zookeeper的shell操作" class="headerlink" title="Zookeeper的shell操作"></a>Zookeeper的shell操作</h2><table><thead><tr><th align="center">常用命令</th><th align="center">命令描述</th></tr></thead><tbody><tr><td align="center">ls &#x2F;</td><td align="center">查看Zookeeper中所包含的内容</td></tr><tr><td align="center">ls2 &#x2F;</td><td align="center">查看当前节点数据，并能看见更新次数等数据</td></tr><tr><td align="center">create &#x2F;zk “test”</td><td align="center">创建一个新的节点zk以及与他关联的字符串</td></tr><tr><td align="center">get &#x2F;zk</td><td align="center">获取zk所包含的信息</td></tr><tr><td align="center">set &#x2F;zk “zkbak”</td><td align="center">对zk所关联的字符串进行设置</td></tr><tr><td align="center">delete &#x2F;zk</td><td align="center">删除节点</td></tr><tr><td align="center">rmr</td><td align="center">递归删除节点</td></tr><tr><td align="center">help</td><td align="center">帮助命令</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.启动服务：</span><br><span class="line">zkServer.sh start</span><br><span class="line"></span><br><span class="line">2.连接zookeeoper服务：</span><br><span class="line">zkCli.sh -server localhost:2181</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">ls /</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line">ls2 /</span><br><span class="line"></span><br><span class="line">5.create [-s] [-e] path data acl</span><br><span class="line">-s:是否开启节点的序列化特性</span><br><span class="line">-e:开启临时节点特性，不指定则是永久节点</span><br><span class="line">path：创建的路径</span><br><span class="line">data：创建节点的数据</span><br><span class="line">acl:权限控制，，一般了解</span><br><span class="line"></span><br><span class="line">6.监听节点</span><br><span class="line">get /testnode-tem watch</span><br><span class="line">set /testnode-tem testwatch</span><br></pre></td></tr></table></figure><h1 id="第六章-YARN资源管理框架"><a href="#第六章-YARN资源管理框架" class="headerlink" title="第六章 YARN资源管理框架"></a>第六章 YARN资源管理框架</h1><h2 id="YARN体系结构"><a href="#YARN体系结构" class="headerlink" title="YARN体系结构"></a>YARN体系结构</h2><p>YARN：是一个通用的资源管理系统和调度平台</p><p>YARN的三大核心组件：</p><ol><li>ResourceManager：是一个全局的资源管理系统，负责整个YARN集群资源的监控、分配和管理工作。<ul><li>负责处理客户端请求</li><li>接收和监控NodeManager的资源情况</li><li>启动和监控ApplicationMaster</li><li>资源的分配和调度</li></ul></li><li>NodeManager：是每个节点上的资源和任务管理器。</li><li>ApplicationMaster：</li></ol><h1 id="第七章-Hive数据仓库"><a href="#第七章-Hive数据仓库" class="headerlink" title="第七章 Hive数据仓库"></a>第七章 Hive数据仓库</h1><h2 id="数据仓库简介"><a href="#数据仓库简介" class="headerlink" title="数据仓库简介"></a>数据仓库简介</h2><ol><li><p>数据仓库是一个面向主题的，集成的，随时间变化的，但信息本身相对稳定的数据集合。</p><p>数据处理大致分为2类：</p><ul><li>联机事务处理（OLTP）：传统关系数据库的主要应用</li><li>联机分析处理（OLAP）：数据仓库的主要应用</li></ul></li><li><p>数据仓库的结构：数据源，数据存储及管理，OLAP服务器，前端工具。</p></li><li><p>数据仓库的数据模型</p><ul><li>星型模型</li><li>雪花模型：星型模型的扩展</li></ul></li><li><p>事务表，维度表</p></li></ol><h2 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h2><ol><li><p>Hive是建立再Hadoop文件系统上的数据仓库，是一种可以存储，查询和分析存储在Hadoop中的大规模数据的工具。</p></li><li><p>Hive使用的是HQL查询语言</p><table><thead><tr><th>对比项</th><th>Hive</th><th>MySQL</th></tr></thead><tbody><tr><td>查询语言</td><td>HQL</td><td>SQL</td></tr><tr><td>数据更新</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>多表插入</td><td>支持</td><td>不支持</td></tr></tbody></table></li><li><p>Hive系统架构</p><ul><li>用户接口：CLI，JDBC&#x2F;ODBC，webUI。CLI为Shell终端命令行。</li><li>跨语言服务</li><li>底层的驱动引擎：编译器，优化器，执行器。</li><li>元数据存储系统</li></ul></li><li><p>Hive数据模型：Hive中所有的数据都存储在HDFS中。包含：</p><ul><li>数据库</li><li>表</li><li>分区</li><li>桶表</li></ul></li></ol><h2 id="Hive的安装"><a href="#Hive的安装" class="headerlink" title="Hive的安装"></a>Hive的安装</h2><p>安装分为3种模式：嵌入模式，本地模式，远程模式。</p><p><strong>注：</strong>要先启动HDFS服务：start-dfs.sh</p><ol><li><p>嵌入模式（可忽略，只测试使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">嵌入模式：使用的内嵌Derby数据库存储元数据。一次只能连接一个客户端。</span><br><span class="line"></span><br><span class="line">1.上传文件到/export/software</span><br><span class="line"></span><br><span class="line">2.解压</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv apache-hive-3.1.2-bin/ hive-3.1.2</span><br><span class="line">cd hive-3.1.2</span><br><span class="line"></span><br><span class="line">4.启动Hive程序</span><br><span class="line">bin/hive</span><br></pre></td></tr></table></figure></li><li><p>本地模式，远程模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">本地模式，远程模式</span><br><span class="line">1.安装MySQL服务</span><br><span class="line">yum install mysql mysql-server mysql-devel</span><br><span class="line">systemctl start mysqld</span><br><span class="line">mysql</span><br><span class="line">use mysql;</span><br><span class="line">update user set host=&quot;%&quot;;</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &quot;root&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">2.在/export/software下，解压</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /export/servers/</span><br><span class="line"></span><br><span class="line">3.复制MySQL安装包(JDBC的jar包)</span><br><span class="line">cp mysql-connector-java-8.0.17.jar /export/servers/apache-hive-3.1.2-bin/lib/</span><br><span class="line"></span><br><span class="line">4.重命名</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv apache-hive-3.1.2-bin/ hive-3.1.2</span><br><span class="line"></span><br><span class="line">5.Hive的配置</span><br><span class="line">（1）</span><br><span class="line">cd hive-3.1.2/conf/</span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">vim hive-env.sh</span><br><span class="line">添加</span><br><span class="line">export HADOOP_HOME=/export/servers/hadoop-2.10.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（2）vim hive-site.xml</span><br><span class="line">输入：</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">&lt;value&gt; jdbc:mysql://hadoop01:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">&lt;description&gt;Mysql 连接协议&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">        &lt;dеѕсrірtіоn&gt;JDВС连接驱动&lt;/dеѕсrірtіоn&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;用户名&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;密码&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.初始化，在hive-3.1.2/bin目录下：</span><br><span class="line">./schematool -dbType mysql -initSchemayu</span><br></pre></td></tr></table></figure></li><li><p>远程服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.复制hive:</span><br><span class="line">scp -r /scp -r /export/servers/hive-3.1.2/ hadoop02:/export/servers/</span><br><span class="line">scp -r /export/servers/hive-3.1.2/ hadoop03:/export/servers/</span><br><span class="line"></span><br><span class="line">2.在Hive目录下，启动服务（注意启动dfs,yarn服务）：</span><br><span class="line">bin/hiveserver2</span><br><span class="line">(输入完成后，命令行将无法进行其他操作)</span><br><span class="line"></span><br><span class="line">3.进入Hadoop02，输入:</span><br><span class="line">ssh hadoop01</span><br><span class="line">cd /export/servers/hive-3.1.2/</span><br><span class="line">bin/beeline</span><br><span class="line">! connect jdbc:hive2://hadoop01:10000</span><br><span class="line">如果出错：</span><br><span class="line">cd /export/servers/hadoop-2.10.0/etc/hadoop/</span><br><span class="line">vim core-site.xml </span><br><span class="line">添加：</span><br><span class="line">        &lt;!--置超级代理--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crash Course Computer Science</title>
      <link href="/2023/11/04/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.Crash%20Course%20Computer%20Science%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/"/>
      <url>/2023/11/04/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.Crash%20Course%20Computer%20Science%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>视频1：<a href="https://www.bilibili.com/video/BV1EW411u7th/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">B站</a></p><p>视频2：<a href="https://github.com/1c7/crash-course-computer-science-chinese">GitHub</a></p><p>一个科普向系列视频，在短短 8 个小时里非常生动且全面地科普了关于计算机科学的方方面面：计算机的历史、计算机是如何运作的、组成计算机的各个重要模块、计算机科学中的重要思想等。正如它的口号所说的 <em>Computers are not magic!</em></p><h2 id="课程目标："><a href="#课程目标：" class="headerlink" title="课程目标："></a>课程目标：</h2><p>从高层次总览一系列计算机话题，快速入门计算机科学。</p><h1 id="第一课：计算机早期历史"><a href="#第一课：计算机早期历史" class="headerlink" title="第一课：计算机早期历史"></a>第一课：计算机早期历史</h1><h2 id="1、计算机技术的影响——进入信息时代"><a href="#1、计算机技术的影响——进入信息时代" class="headerlink" title="1、计算机技术的影响——进入信息时代"></a>1、计算机技术的影响——进入信息时代</h2><ul><li><p>出现自动化农业设备与医疗设备</p></li><li><p>全球通信和全球教育机会变得普遍</p></li><li><p>出现意想不到的虚拟现实&#x2F;无人驾驶&#x2F;人工智能等新领域</p></li></ul><h2 id="2、计算机的实质："><a href="#2、计算机的实质：" class="headerlink" title="2、计算机的实质："></a>2、计算机的实质：</h2><p>极其简单的组件，通过一层层的抽象，来做出复杂的操作。</p><p>计算机中的很多东西，底层其实都很简单，让人难以理解的，是一层层精妙的抽象。像一个越来越小的俄罗斯套娃。</p><h2 id="3、关于计算的历史："><a href="#3、关于计算的历史：" class="headerlink" title="3、关于计算的历史："></a>3、关于计算的历史：</h2><ol><li>公元前 2500 年：算盘出现，为十进制，功能类似一个计数器。</li><li>公元前 2500 年-公元 1500年：星盘、计算尺等依靠机械运动的计算设备出现</li><li>公元 1613 年：computer 的概念出现，当时指的是专门做计算的职业，</li><li>1694 年：步进计算器出现，是世界上第一台能自动完成加减乘除的计算器。</li><li>1694-1900 年：计算表兴起，类似于字典，可用于查找各种庞大的计算值。</li><li>1823 年：差分机的设想出现，可以做函数计算，但计划最后失败。</li><li>19 世纪中期：分析机的设想出现，设想存在可计算一切的通用计算机。</li><li>1890 年：打孔卡片制表机。原理：在纸上打孔→孔穿过针→针泡入汞→电路连通→齿轮使计数+1。</li></ol><h1 id="第二课：电子计算机的发展史"><a href="#第二课：电子计算机的发展史" class="headerlink" title="第二课：电子计算机的发展史"></a>第二课：电子计算机的发展史</h1><h2 id="1、电子计算机元器件变化："><a href="#1、电子计算机元器件变化：" class="headerlink" title="1、电子计算机元器件变化："></a>1、电子计算机元器件变化：</h2><p>继电器→真空管→晶体管</p><h2 id="2、计算机的出现背景："><a href="#2、计算机的出现背景：" class="headerlink" title="2、计算机的出现背景："></a>2、计算机的出现背景：</h2><p>20世纪人口暴增，科学与工程进步迅速，航天计划成形。以上导致数据的复杂度急剧上升、计算量暴增，对于计算的自动化、高速有迫切的需求。</p><h2 id="3、电子计算机的发展："><a href="#3、电子计算机的发展：" class="headerlink" title="3、电子计算机的发展："></a>3、电子计算机的发展：</h2><p>1945年 哈佛马克1：使用继电器，用电磁效应，控制机械开关，缺点为有磨损和延迟。</p><p>*最早还因为有虫子飞进去导致故障，引申出bug&#x3D;故障的意思。</p><p>1943年 巨人1号：使用真空管（三极管），制造出世界上第一个可编程的计算机。</p><p>1946年 ENIAC：第一个电子数值积分计算机，为第一台通用计算机。</p><p>1947年 晶体管出现：使用的是固态的半导体材料，相对真空管更可靠。</p><p>1950s 空军ANFSQ-7： 真空管到达计算极限。</p><p>1957年 IBM 608： 第一个消费者可购买的晶体管计算机出现。</p><h1 id="第三课：布尔逻辑与逻辑门"><a href="#第三课：布尔逻辑与逻辑门" class="headerlink" title="第三课：布尔逻辑与逻辑门"></a>第三课：布尔逻辑与逻辑门</h1><h2 id="1、计算机为什么使用二进制："><a href="#1、计算机为什么使用二进制：" class="headerlink" title="1、计算机为什么使用二进制："></a>1、计算机为什么使用二进制：</h2><ol><li>计算机的元器件晶体管只有2种状态，通电（1）&amp;  断电（0），用二进制可直接根据元器件的状态来设计计算机。</li><li>而且，数学中的“布尔代数”分支，可以用True和False（可用1代表True，0代表False）进行逻辑运算，代替实数进行计算。</li><li>进制数越多（十进制等），信号越容易混淆，影响计算。对于当时每秒运算百万次以上的晶体管，信号混淆是特别让人头疼的的。</li></ol><h2 id="2、布尔代数-布尔代数在计算机中的实现"><a href="#2、布尔代数-布尔代数在计算机中的实现" class="headerlink" title="2、布尔代数&amp;布尔代数在计算机中的实现"></a>2、布尔代数&amp;布尔代数在计算机中的实现</h2><ol><li>变量：没有常数，仅True和False这两个变量。</li><li>三个基本操作：NOT&#x2F;AND&#x2F;OR。</li></ol><h3 id="1）NOT操作："><a href="#1）NOT操作：" class="headerlink" title="1）NOT操作："></a>1）NOT操作：</h3><ol><li>命名：称为NOT门&#x2F;非门。</li><li>作用：将输入布尔值反转。输入的True或False，输出为False或True。</li><li>晶体管的实现方式：<ul><li>半导体通电True，则线路<strong>接地</strong>，无输出电流，为False。</li><li>半导体不通电False，则输出电流从右边输出，为True。</li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/1.png?raw=true" alt="1.png"></p><h3 id="2）AND操作"><a href="#2）AND操作" class="headerlink" title="2）AND操作"></a>2）AND操作</h3><ol><li><p>命名：AND门&#x2F;与门</p></li><li><p>作用：由2个输入控制输出，仅当2个输入input1和input2都为True时，输出才为True，2个输入的其余情况，输出均为False。</p><p>*可以理解为，输入有假，输出为假，反之（输入为真-真，输出才为真）。</p></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/2.png?raw=true" alt="2.png"></p><p>3.用晶体管实现的方式：</p><p>串联两个晶体管，仅当2个晶体管都通电，输出才有电流（True）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/3.png?raw=true" alt="3.png"></p><h3 id="3）OR操作"><a href="#3）OR操作" class="headerlink" title="3）OR操作"></a>3）OR操作</h3><p>1.命名：OR门&#x2F;或门</p><p>2.作用：由2个输入控制输出，只要其中一个输入为True，则输出True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/4.png?raw=true" alt="4.png"></p><p>3.用晶体管实现的方式：</p><p>使用2个晶体管，将它们并联到电路中，只要有一个晶体管通电，则输出有电流（True）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/5.png?raw=true" alt="5.png"></p><h2 id="3、特殊的逻辑运算——异或"><a href="#3、特殊的逻辑运算——异或" class="headerlink" title="3、特殊的逻辑运算——异或"></a>3、特殊的逻辑运算——异或</h2><p>1.命名：XOR门&#x2F;异或门</p><p>2.作用：2个输入控制一个输出。当2个输入相同（均为True时，输出False），输出false。反之，输入不同（一个True时，一个False），输出为True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/6.png?raw=true" alt="6.png"></p><p>3.图示：</p><p>先用一个OR门，将其与AND门并联，AND门与NOT门串联，最后让NOT与AND门并联，获得输出。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/7.png?raw=true" alt="7.png"></p><h2 id="4、逻辑门的符号表示"><a href="#4、逻辑门的符号表示" class="headerlink" title="4、逻辑门的符号表示"></a>4、逻辑门的符号表示</h2><p>1.作用：将逻辑门简化，将逻辑门用于构建更大的组件，而不至于太复杂。</p><p>2.图示：</p><ul><li><p>非门：用三角形+圆圈表示</p></li><li><p>与门：用D型图案表示</p></li><li><p>或门：用类似D向右弯曲的图案表示</p></li><li><p>异或门：用或门+一个圆弧表示</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/8.png?raw=true" alt="8.png"></p><h2 id="5、抽象的好处"><a href="#5、抽象的好处" class="headerlink" title="5、抽象的好处"></a>5、抽象的好处</h2><p>使得分工明确，不同职业的工程师各司其职,而不用担心其他细节。</p><h1 id="第四课：二进制"><a href="#第四课：二进制" class="headerlink" title="第四课：二进制"></a>第四课：二进制</h1><h2 id="1、二进制的原理，存储单元MB-GB-TB解释"><a href="#1、二进制的原理，存储单元MB-GB-TB解释" class="headerlink" title="1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释"></a>1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释</h2><p>0.计算机中的二进制表示：</p><p>单个数字1或0，1位二进制数字命名为位(bit),也称1比特。</p><p>1.字节（byte）的概念：</p><p>1byte&#x3D;8bit，即1byte代表8位二进制数。最早期的电脑为八位的，即以八位二进制为单位处理数据。为了方便，将八位二进制命名为1字节（1byte）.</p><p>2.十进制与二进制的区别：</p><p>十进制有10个数字，0-9，逢10进1（不存在10这个数字），则每向左进一位，数字大10倍。<br>二进制有2个数字，0-1，逢2进1,（不存在2这个数字），则每向左进一位，数字大2倍。</p><p>如何进行二进制与十进制联系起来？</p><p>将十进制与二进制的位数提取出来，编上单位：<br>eg：二进制的1011&#x3D;1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3&#x3D; 11（从右往左数）</p><p>eg：十进制的1045&#x3D; 1 * 10^3 + 0 * 10^2 + 4 * 10^1 + 5 *10^0</p><p>3.十进制与二进制的图示：</p><p>十进制的263</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/9.png?raw=true" alt="9.png"></p><p>二进制的10110111</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/10.png?raw=true" alt="10.png"></p><p>4.二进制的运算：</p><p>相同的位数相加，逢2进1</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/11.png?raw=true" alt="11.png"></p><p>5.byte在电脑中的单位换算：</p><p>1kb&#x3D;2^10bit &#x3D; 1024bit &#x3D;1000b</p><p>1TB&#x3D;1000GB</p><p>1GB&#x3D;十亿字节&#x3D;1000MB&#x3D;10^6KB</p><p>6.32位与64位电脑的区别</p><p>32位的最大数为43亿左右</p><p>64位的最大数为9.2*10^18</p><h2 id="2、正数、负数、正数、浮点数的表示"><a href="#2、正数、负数、正数、浮点数的表示" class="headerlink" title="2、正数、负数、正数、浮点数的表示"></a>2、正数、负数、正数、浮点数的表示</h2><p>1）计算机中表示数字的方法</p><p>1.整数：</p><p>表示方法:</p><p>第1位：表示正负 1是负，0是正（补码）<br>其余31位&#x2F;63位： 表示实数</p><p>2.浮点数（Floating Point Numbers）：</p><p>定义：小数点可在数字间浮动的数（非整数）</p><p>表示方法：IEEE 754标准下</p><p>用类似科学计数法的方式，存储十进制数值</p><p>浮点数&#x3D;有效位数<em>指数<br>32位数字中：第1位表示正负，第2-9位存指数。剩下23位存有效位数<br>eg：625.9&#x3D;0.6259（有效位数）</em>10^3（指数）</p><h2 id="3、美国信息交换标准代码-ASCⅡ，用来表示字符"><a href="#3、美国信息交换标准代码-ASCⅡ，用来表示字符" class="headerlink" title="3、美国信息交换标准代码-ASCⅡ，用来表示字符"></a>3、美国信息交换标准代码-ASCⅡ，用来表示字符</h2><p>1.全称：美国信息交换标准代码</p><p>2.作用：用数字给英文字母及符号编号</p><p>3.内容：7位代码，可存放128个不同的值。</p><p>4.图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/12.png?raw=true" alt="12.png"></p><h2 id="4、UNICODE，统一所有字符编码的标准"><a href="#4、UNICODE，统一所有字符编码的标准" class="headerlink" title="4、UNICODE，统一所有字符编码的标准"></a>4、UNICODE，统一所有字符编码的标准</h2><p>1.诞生背景：1992诞生，随着计算机在亚洲兴起，需要解决ASCⅡ不够表达所有语言的问题。</p><p>为提高代码的互用性，而诞生的编码标准。</p><p>2.内容：UNICODE为17组的16位数字，有超过100万个位置，可满足所有语言的字符需求。</p><h1 id="第五课：算术逻辑单元"><a href="#第五课：算术逻辑单元" class="headerlink" title="第五课：算术逻辑单元"></a>第五课：算术逻辑单元</h1><h2 id="1、什么是算术逻辑单元"><a href="#1、什么是算术逻辑单元" class="headerlink" title="1、什么是算术逻辑单元"></a>1、什么是算术逻辑单元</h2><p>1.命名：简称ALU，Arithmetic&amp;Logic Unit</p><p>2.组成：ALU有2个单元，1个算术单元和1个逻辑单元（Arithmetic Unit和Logic Unit）</p><p>3.作用：计算机中负责运算的组件，处理数字&#x2F;逻辑运算的最基本单元。</p><h2 id="2、算术单元"><a href="#2、算术单元" class="headerlink" title="2、算术单元"></a>2、算术单元</h2><p>1）基本组件：</p><ul><li><p>由半加器、全加器组成</p></li><li><p>半加器、全加器由AND、OR、NOT、XOR门组成</p></li></ul><p>2）加法运算</p><p>1.组件：AND、OR、NOT、XOR门</p><p>2.元素：输入A，输入B，输出（均为1个bit，即0或1）</p><p>3.半加器：</p><ul><li><p>作用：用于计算个位的数字加减。</p></li><li><p>输入：A，B</p></li><li><p>输出：总和，进位</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/13.png?raw=true" alt="13.png"></p><ul><li>抽象：</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/14.png?raw=true" alt="14.png"></p><p>4.全加器：</p><p>作用：用于计算超过1位的加法，由于涉及进位，因此有3个输入（C充当进位）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/15.png?raw=true" alt="15.png"></p><p>原理图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/16.png?raw=true" alt="16.png"></p><p>3）如何用半加器与全加器做8位数的加法</p><p>说明：以8位行波加法器为例</p><ol><li>用半加器处理第1位数（个位）的加法，得到的和为结果的第1位。</li><li>将输出的进位，输入到第2位用的全加器的输入C中。</li><li>将第2位的2个数用全加器计算，得到的和为结果的第2位（sum）。</li><li>将第2位计算的进位连接到百位的全加器输入C中。</li><li>在第3-8位上，循环第3-4步的操作。</li></ol><p>*现在电脑使用的加法器叫“超前进位加法器”</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/17.png?raw=true" alt="17.png"></p><p>4）算术单元支持的其他运算</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/18.png?raw=true" alt="18.png"></p><h2 id="3、溢出的概念"><a href="#3、溢出的概念" class="headerlink" title="3、溢出的概念"></a>3、溢出的概念</h2><p>内容：在有限的空间内，无法存储位数过大的数，则称为溢出。</p><p>说明：第8位的进位如果为1，则无法存储，此时容易引发错误，所以应该尽量避免溢出。</p><h2 id="4、逻辑单元"><a href="#4、逻辑单元" class="headerlink" title="4、逻辑单元"></a>4、逻辑单元</h2><p>作用：执行逻辑操作，如NOT、AND、OR等操作，以及做简单的数值测试。</p><h2 id="5、ALU的抽象"><a href="#5、ALU的抽象" class="headerlink" title="5、ALU的抽象"></a>5、ALU的抽象</h2><p>1）作用：ALU的抽象让工程师不再考虑逻辑门层面的组成，简化工作。</p><p>2）图示：</p><p>像一个大“V”。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/19.png?raw=true" alt="19.png"></p><p>3）说明：</p><p>图示内容包括：</p><ul><li><p>输入A，B</p></li><li><p>输出</p></li><li><p>标志：溢出、零、负数</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/20.png?raw=true" alt="20.png"></p><h1 id="第六课-寄存器与内存"><a href="#第六课-寄存器与内存" class="headerlink" title="第六课 寄存器与内存"></a>第六课 寄存器与内存</h1><h2 id="0、课程导入"><a href="#0、课程导入" class="headerlink" title="0、课程导入"></a>0、课程导入</h2><p>当玩游戏、写文档时如果断电，进度会丢失，这是为什么？</p><ul><li><p>原因是这是电脑使用的是RAM（随机存取存储器），俗称内存，内存只能在通电情况下存储数据。</p></li><li><p>本节课程将讲述内存的工作原理。</p></li></ul><h2 id="1、概念梳理"><a href="#1、概念梳理" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><p>锁存器：锁存器是利用AND、OR、NOT逻辑门，实现存储1位数字的器件。</p><p>寄存器：1组并排的锁存器</p><p>矩阵：以矩阵的方式来存放锁存器的组合件，n<em>n门锁矩阵可存放n^2个锁存器，但同一时间只能写入&#x2F;读取1个数字。（早期为16</em>16矩阵）</p><p>位址：锁存器在矩阵中的行数与列数。eg.12行 8列</p><p>多路复用器：一组电线，输入2进制的行址&amp;列址，可启用矩阵中某个锁存器</p><p>内存（RAM）：随机存取存储器，由一系列矩阵以及电路组成的器件，可根据地址来写入、读取数据。类似于人类的短期记忆，记录当前在做什么事情。</p><h2 id="2、锁存器"><a href="#2、锁存器" class="headerlink" title="2、锁存器"></a>2、锁存器</h2><p>作用：存储1位数字。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/21.png?raw=true" alt="21.png"></p><h2 id="2-5、门锁："><a href="#2-5、门锁：" class="headerlink" title="2.5、门锁："></a>2.5、门锁：</h2><p>锁存器需要同时输入2个数字，不太方便。</p><p>为了使用更方便，只用1根电线控制数据输入，发展了门锁这个器件。另外，用另一根电线来控制整个结构的开关。（和复位作用不同）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/22.png?raw=true" alt="22.png"></p><h2 id="3、寄存器"><a href="#3、寄存器" class="headerlink" title="3、寄存器"></a>3、寄存器</h2><p>作用：并排使用门锁，存储多位数字</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/23.png?raw=true" alt="23.png"></p><h2 id="4、门锁矩阵"><a href="#4、门锁矩阵" class="headerlink" title="4、门锁矩阵"></a>4、门锁矩阵</h2><p>作用：</p><p>n*n的矩阵有n^2个位址，则可以存储n^2个数。但1个矩阵只可记录1位数字，n个矩阵组合在一起，才可记录n位数。如1个8位数，会按位数分成8个数，分别存储在8个矩阵的同一个位址中。</p><p>8个矩阵，则可以记录256个8位数字。</p><p>通俗理解：</p><p>16*16的门锁矩阵，可理解为1个公寓，1个公寓256个房间。</p><p>8个门锁矩阵并排放，则有了8个公寓。</p><p>规定每一个公寓同一个编号的房间，都有一样的标记（地址），共同组成8位数字。</p><p>那么8个公寓就能存 （8*256 &#x2F; 8）个数字。</p><p>原因：</p><p>16*16的门锁矩阵虽然有256个位置，但每次只能存&#x2F;取其中1个位置的数字。因此，要表示8位数字，就需要同时调用8个门锁矩阵。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/24.png?raw=true" alt="24.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/25.png?raw=true" alt="25.png"></p><p>使用方法：在多路复用器中输入位址，x行x列（2进制），即可点亮x行x列的锁存器。</p><p>举例：</p><table><thead><tr><th>行列数</th><th>矩阵1</th><th>矩阵2</th><th>矩阵3</th><th>矩阵4</th><th>矩阵5</th><th>矩阵6</th><th>矩阵7</th><th>矩阵8</th></tr></thead><tbody><tr><td>1行5列</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>2行3列</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><h2 id="5、内存"><a href="#5、内存" class="headerlink" title="5、内存"></a>5、内存</h2><p>粗略定义：将一堆独立的存储模块和电路看做1个单元，组成内存方块，n个内存方块组成内存模块。在一个电路板上所有的内存方块统称为内存(RAM)。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/26.png?raw=true" alt="26.png"></p><h1 id="第七课-中央处理器（CPU）"><a href="#第七课-中央处理器（CPU）" class="headerlink" title="第七课 中央处理器（CPU）"></a>第七课 中央处理器（CPU）</h1><h2 id="1、概念梳理-1"><a href="#1、概念梳理-1" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>CPU（Central Processing Unit）：中央处理单元，负责执行程序。通常由寄存器&#x2F;控制单元&#x2F;ALU&#x2F;时钟组成。与RAM配合，执行计算机程序。CPU和RAM之间用“地址线”、“数据线”和“允许读&#x2F;写线”进行通信。</p></li><li><p>指令：指示计算机要做什么，多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>时钟：负责管理CPU运行的节奏，以精确地间隔，触发电信号，控制单元用这个信号，推动CPU的内部操作。</p></li><li><p>时钟速度：CPU执行“取指令→解码→执行”中每一步的速度叫做“时钟速度”，单位赫兹Hz，表示频率。</p></li><li><p>超频&#x2F;降频：</p></li><li><p>超频，修改时钟速度，加快CPU的速度，超频过多会让CPU过热或产生乱码。</p></li><li><p>降频，降低时钟速度，达到省电的效果，对笔记本&#x2F;手机很重要。</p></li><li><p>微体系框架：以高层次视角看计算机，如当我们用一条线链接2个组件时，这条线只是所有必须线路的抽象。</p></li></ul><h2 id="2、CPU工作原理"><a href="#2、CPU工作原理" class="headerlink" title="2、CPU工作原理"></a>2、CPU工作原理</h2><h3 id="1）必要组件："><a href="#1）必要组件：" class="headerlink" title="1）必要组件："></a>1）必要组件：</h3><ul><li><p>指令表：给CPU支持的所有指令分配ID</p></li><li><p>控制单元：像指挥部，有序的控制指令的读取、运行与写入。</p></li><li><p>指令地址寄存器：类似于银行取号。该器件只按顺序通报地址，让RAM按顺序将指令交给指令寄存器。</p></li><li><p>指令寄存器：存储具体的指令代码。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/27.png?raw=true" alt="27.png"></p><h3 id="2）过程"><a href="#2）过程" class="headerlink" title="2）过程"></a>2）过程</h3><ul><li><p>取指令：指令地址寄存器发地址给RAM→RAM发该地址内的数据给指令寄存器→指令寄存器接受数据</p></li><li><p>解码：指令寄存器根据数据发送指令给控制单元 →控制单元解码（逻辑门确认操作码）</p></li><li><p>执行阶段：控制单元执行指令(→涉及计算时→调用所需寄存器→传输入&amp;操作码给ALU执行）→调用RAM特定地址的数据→RAM将结果传入寄存器→指令地址寄存器+1</p></li></ul><h3 id="3）图示："><a href="#3）图示：" class="headerlink" title="3）图示："></a>3）图示：</h3><p>第一个CPU</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/28.png?raw=true" alt="28.png"></p><h1 id="第八课-指令和程序"><a href="#第八课-指令和程序" class="headerlink" title="第八课 指令和程序"></a>第八课 指令和程序</h1><h2 id="1、概念梳理-2"><a href="#1、概念梳理-2" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>指令：指示计算机要做什么的代码（机器码），多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>注:指令和数据都是存在同一个内存里的。</p></li><li><p>指令集：记录指令名称、用法、操作码以及所需RAM地址位数的表格。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/29.png?raw=true" alt="29.png"></p><p>程序</p><h2 id="2、指令的执行"><a href="#2、指令的执行" class="headerlink" title="2、指令的执行"></a>2、指令的执行</h2><ul><li><p>原则：</p></li><li><p>RAM每一个地址中，都存放0或1个数据。</p></li><li><p>特定的数字组合，就表示为一个指令，否则表示一个值。</p></li><li><p>LOAD指令：</p></li><li><p>计算机会按地址的顺序，读取RAM中所记录的指令&#x2F;数据。</p></li><li><p>计算机接受到指令后，如LOAD_A，则通过数据线将数据传至寄存器A。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/30.png?raw=true" alt="30.png"></p><ul><li><p>ADD指令：</p></li><li><p>ADD B A指令告诉ALU，把寄存器B和寄存器中的数字加起来，存到寄存器A中。</p></li><li><p>JUMP指令：</p></li><li><p>遇到JUMP指令，程序会跳转至对应的RAM地址读取数据。</p></li><li><p>JUMP指令可以有条件跳转（如JUMP-negative），也可以无条件跳转。</p></li></ul><h2 id="3、计算机指令长度"><a href="#3、计算机指令长度" class="headerlink" title="3、计算机指令长度"></a>3、计算机指令长度</h2><p>由于早期计算机每个字只有8位，指令只占4位，意味着只能有16个指令，这远远不够。</p><p>现代计算机有两种方式解决指令不够用的问题：</p><p>最直接的是用更多位来表示指令，如32位或64位。</p><p>采用“可变指令长度”，令不同的指令的长度不同，尽量节约位数。</p><p>假设1个字为16位，如果某指令不需要操作内存，则可以省去寻址的位数。</p><p>该情况下，部分指令后面需要跟数据，如JUMP，称为立即值。</p><h1 id="第九课-高级CPU设计"><a href="#第九课-高级CPU设计" class="headerlink" title="第九课 高级CPU设计"></a>第九课 高级CPU设计</h1><h2 id="0、概念梳理"><a href="#0、概念梳理" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><ul><li><p>缓存：在CPU中的小块RAM，用于存储批量指令。</p></li><li><p>缓存命中：想要的数据已经在缓存里</p></li><li><p>缓存未命中：想要的数据不在缓存里</p></li><li><p>脏位：缓存里每块空间，有个特殊标记，叫脏位，用于检测缓存内的数据是否与RAM一致。</p></li><li><p>多核处理器：一个CPU芯片中，有多个独立处理单元。</p></li></ul><h2 id="1、现代CPU如何提升性能："><a href="#1、现代CPU如何提升性能：" class="headerlink" title="1、现代CPU如何提升性能："></a>1、现代CPU如何提升性能：</h2><p>早期通过加快晶体管速度，来提升CPU速度。但很快该方法到达了极限。</p><p>后来给CPU设计了专门除法电路+其他电路来做复杂操作：如游戏，视频解码</p><h2 id="2、缓存："><a href="#2、缓存：" class="headerlink" title="2、缓存："></a>2、缓存：</h2><p>为了不让CPU空等数据，在CPU内部设置了一小块内存，称为缓存，让RAM可以一次传输一批数据到CPU中。（不加缓存，CPU没位置放大量数据）</p><p>缓存也可以当临时空间，存一些中间值，适合长&#x2F;复杂的运算。</p><p>空等原因：从RAM到CPU的数据传输有延迟（要通过总线，RAM还要时间找地址、取数据、配置、输出数据）。</p><h2 id="3、缓存同步："><a href="#3、缓存同步：" class="headerlink" title="3、缓存同步："></a>3、缓存同步：</h2><p>缓存同步一般发生在CPU缓存已满，但CPU仍需往缓存内输入数据。此时，被标记为脏位的数据会优先传输回RAM,腾出位置以防被覆盖，导致计算结果有误。</p><h2 id="4、指令流水线："><a href="#4、指令流水线：" class="headerlink" title="4、指令流水线："></a>4、指令流水线：</h2><p>作用：让取址→解码→执行三个步骤同时进行。并行执行指令，提升CPU性能。</p><p>原本需要3个时钟周期执行1个指令，现在只需要1个时钟周期。</p><p>设计难点：数据具有依赖性。</p><p>数据依赖性解决方法：</p><p>动态排序、乱序运行、预测分支（高端CPU）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/31.png?raw=true" alt="31.png"></p><h2 id="5、一次性处理多条指令"><a href="#5、一次性处理多条指令" class="headerlink" title="5、一次性处理多条指令"></a>5、一次性处理多条指令</h2><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/32.png?raw=true" alt="32.png"></p><h2 id="6、同时运行多个指令流（多核CPU）"><a href="#6、同时运行多个指令流（多核CPU）" class="headerlink" title="6、同时运行多个指令流（多核CPU）"></a>6、同时运行多个指令流（多核CPU）</h2><p>多核处理器：一个CPU芯片中，有多个独立处理单元。但因为它们整合紧密，可以共享一些资源。</p><h2 id="7、超级计算机（多个CPU）"><a href="#7、超级计算机（多个CPU）" class="headerlink" title="7、超级计算机（多个CPU）"></a>7、超级计算机（多个CPU）</h2><p>在一台计算机中，用无数个CPU，做怪兽级的复杂运算，如模拟宇宙形成。</p><h1 id="第十课-早期的编程方式"><a href="#第十课-早期的编程方式" class="headerlink" title="第十课 早期的编程方式"></a>第十课 早期的编程方式</h1><h2 id="1、早期，程序如何进入计算机"><a href="#1、早期，程序如何进入计算机" class="headerlink" title="1、早期，程序如何进入计算机"></a>1、早期，程序如何进入计算机</h2><p>程序必须人为地输入计算机。早期，电脑无内存的概念，人们通过打孔纸卡等物理手段，输入数据（数字），进入计算机。</p><h2 id="2、早期计算机的编程"><a href="#2、早期计算机的编程" class="headerlink" title="2、早期计算机的编程"></a>2、早期计算机的编程</h2><ul><li><p>打孔纸卡&#x2F;纸带：在纸卡上打孔，用读卡器读取连通电路，进行编程。原因，穿孔纸卡便宜、可靠也易懂。62500张纸卡&#x3D;5MB数据</p></li><li><p>插线板：通过插拔线路的方式，改变器件之间的连接方式，进行编程。</p></li><li><p>面板拨开关（1980s前）：通过拨动面板上的开关，进行编程。输入二进制操作码，按存储按钮，推进至下一个内存位，直至操作完内存，按运行键执行程序。（内存式电脑）</p></li></ul><h2 id="3、现代计算机基础结构——冯诺依曼计算机"><a href="#3、现代计算机基础结构——冯诺依曼计算机" class="headerlink" title="3、现代计算机基础结构——冯诺依曼计算机"></a>3、现代计算机基础结构——冯诺依曼计算机</h2><p>冯诺依曼计算机的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存</p><h1 id="第十一课-编程语言发展史"><a href="#第十一课-编程语言发展史" class="headerlink" title="第十一课 编程语言发展史"></a>第十一课 编程语言发展史</h1><h2 id="0、概念梳理-1"><a href="#0、概念梳理-1" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><p>伪代码：用自然语言（中文、英语等）对程序的高层次描述，称为“伪代码”</p><p>汇编器：用于将汇编语言装换成机器语言。一条汇编语句对应一条机器指令。</p><p>助记符（汇编器）：</p><p>软件</p><h2 id="1、早期二进制写代码"><a href="#1、早期二进制写代码" class="headerlink" title="1、早期二进制写代码"></a>1、早期二进制写代码</h2><p>先前都是硬件层面的编程，硬件编程非常麻烦，所以程序员想要一种更通用的编程方法，就是软件。</p><p>早期，人们先在纸上写伪代码，用”操作码表”把伪代码转成二进制机器码，翻译完成后，程序可以喂入计算机并运行。</p><h2 id="2、汇编器-助记符"><a href="#2、汇编器-助记符" class="headerlink" title="2、汇编器&amp;助记符"></a>2、汇编器&amp;助记符</h2><p>背景：1940~1950s，程序员开发出一种新语言， 更可读 更高层次。每个操作码分配一个简单名字，叫”助记符”。但计算机不能读懂“助记符”，因此人们写了二进制程序“汇编器来帮忙”</p><p>作用：汇编器读取用”汇编语言”写的程序，然后转成”机器码”。</p><h2 id="3、最早高级编程语言“A-0”"><a href="#3、最早高级编程语言“A-0”" class="headerlink" title="3、最早高级编程语言“A-0”"></a>3、最早高级编程语言“A-0”</h2><p>汇编只是修饰了一下机器码，一般来说，一条汇编指令对应一条机器指令，所以汇编码和底层硬件的连接很紧密，汇编器仍然强迫程序员思考底层逻辑。</p><p>1950s，为释放超算潜力，葛丽丝·霍普博士，设计了一个高级编程语言，叫 “Arithmetic Language Version 0”，一行高级编程语言 可以转成几十条二进制指令。但由于当时人们认为，计算机只能做计算，而不能做程序，A-0未被广泛使用。</p><p>过程：高级编程语言→编译器→汇编码&#x2F;机器码</p><h2 id="4、开始广泛应用的高级编程语言FORTRAN"><a href="#4、开始广泛应用的高级编程语言FORTRAN" class="headerlink" title="4、开始广泛应用的高级编程语言FORTRAN"></a>4、开始广泛应用的高级编程语言FORTRAN</h2><p>1957年由IBM1957年发布，平均来说，FORTRAN 写的程序，比等同的手写汇编代码短 20 倍， FORTRAN 编译器会把代码转成机器码。</p><h2 id="5、通用编程语言——COBOL"><a href="#5、通用编程语言——COBOL" class="headerlink" title="5、通用编程语言——COBOL"></a>5、通用编程语言——COBOL</h2><p>1959年，研发可以在不同机器上通用编程语言。</p><p>最后研发出一门高级语言：”普通面向商业语言”，简称 COBOL</p><p>每个计算架构需要一个 COBOL 编译器，不管是什么电脑都可以运行相同的代码，得到相同结果。</p><h2 id="6、现代编程语言-1960s-2000"><a href="#6、现代编程语言-1960s-2000" class="headerlink" title="6、现代编程语言:1960s-2000"></a>6、现代编程语言:1960s-2000</h2><p>1960s起，编程语言设计进入黄金时代。</p><p>1960 ：LGOL, LISP 和 BASIC 等语言</p><p>70年代有：Pascal，C 和 Smalltalk</p><p>80年代有：C++，Objective-C 和 Perl</p><p>90年代有：Python，Ruby 和 Java</p><h2 id="7、安全漏洞-补丁由来："><a href="#7、安全漏洞-补丁由来：" class="headerlink" title="*7、安全漏洞&amp;补丁由来："></a>*7、安全漏洞&amp;补丁由来：</h2><p>在1940年代，是用打孔纸带进行的，但程序出现了问题（也就是漏洞），为了节约时间，只能贴上胶带也就是打补丁来填补空隙，漏洞和补丁因此得名。</p><h1 id="第十二课-编程基础-语句和函数"><a href="#第十二课-编程基础-语句和函数" class="headerlink" title="第十二课 编程基础-语句和函数"></a>第十二课 编程基础-语句和函数</h1><h2 id="1、变量、赋值语句"><a href="#1、变量、赋值语句" class="headerlink" title="1、变量、赋值语句"></a>1、变量、赋值语句</h2><p>如a&#x3D;5 ，其中a为可赋值的量，叫做变量。把数字 5 放a里面.这叫”赋值语句”，即把一个值赋给一个变量</p><h2 id="2、if判断"><a href="#2、if判断" class="headerlink" title="2、if判断"></a>2、if判断</h2><p>可以想成是 “如果 X 为真，那么执行 Y，反之，则不执行Y”，if语句就像岔路口，走哪条路取决于条件的真假。</p><h2 id="3、while循环"><a href="#3、while循环" class="headerlink" title="3、while循环"></a>3、while循环</h2><p>当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环。</p><h2 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h2><p>for循环不判断条件，判断次数，会循环特定次数，不判断条件。for 的特点是，每次结束， i 会 +1</p><h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><p>当一个代码很常用的时候，我们把它包装成一个函数（也叫方法或者子程序），其他地方想用这个代码，只需要写函数名即可。</p><h1 id="第13课-算法入门"><a href="#第13课-算法入门" class="headerlink" title="第13课 算法入门"></a>第13课 算法入门</h1><p>0、基本慨念</p><p> 算法：解决问题的基本步骤</p><h2 id="1、选择排序"><a href="#1、选择排序" class="headerlink" title="1、选择排序"></a>1、选择排序</h2><p>数组：一组数据</p><p>选择排序的复杂度为O(n²)</p><h2 id="2、大O表示法"><a href="#2、大O表示法" class="headerlink" title="2、大O表示法"></a>2、大O表示法</h2><p>大O表示法（算法）的复杂度：算法的输入大小和运行步骤之间的关系，来表示运行速度的量级</p><h2 id="3、归并排序"><a href="#3、归并排序" class="headerlink" title="3、归并排序"></a>3、归并排序</h2><p>归并排序的算法复杂度为O（n*log n），n是需要比较+合并的次数，和数组大小成正比，log n是合并步骤所需要的的次数，归并排序比选择排序更有效率</p><h2 id="4、Dijkstra算法"><a href="#4、Dijkstra算法" class="headerlink" title="4、Dijkstra算法"></a>4、Dijkstra算法</h2><p>一开始复杂度为O(n²)，后来复杂度为O（nlog n +I），在下图中，n表示节点数，I表示有多少条线。</p><p><img src="https://uploader.shimo.im/f/ImlyyiTnRAcamLST.PNG?sm_xform=image/crop,x_1,y_65,w_599,h_340/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第十四集-数据结构"><a href="#第十四集-数据结构" class="headerlink" title="第十四集 数据结构"></a>第十四集 数据结构</h1><h2 id="1、数组-下标"><a href="#1、数组-下标" class="headerlink" title="1、数组 下标"></a>1、数组 下标</h2><p>数组（Array），也叫列表（list）或向量（Vector），是一种数据结构。为了拿出数组中某个值，我们要指定一个下标（index），大多数编程语言里，数组下标都从 0 开始，用方括号 [ ] 代表访问数组。注意：很容易混淆 “数组中第 5 个数” 和 “数组下标为 5 的数”，数组下标为5的数是数组里面的第6个数</p><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><p>即字母 数字 标点等组成的数组，字符串在内存里以0结尾。</p><h2 id="3、矩阵"><a href="#3、矩阵" class="headerlink" title="3、矩阵"></a>3、矩阵</h2><p>可以把矩阵看成数组的数组</p><h2 id="4、结构体"><a href="#4、结构体" class="headerlink" title="4、结构体"></a>4、结构体</h2><p> 把几个有关系的变量存在一起叫做结构体</p><h2 id="5、指针"><a href="#5、指针" class="headerlink" title="5、指针"></a>5、指针</h2><p>指针是一种特殊变量，指向一个内存地址，因此得名。</p><h2 id="6、节点"><a href="#6、节点" class="headerlink" title="6、节点"></a>6、节点</h2><p>以指针为变量的结构体叫节点</p><h2 id="7、链表"><a href="#7、链表" class="headerlink" title="7、链表"></a>7、链表</h2><p>用节点可以做链表，链表是一种灵活数据结构，能存很多个 节点 (node)，灵活性是通过每个节点 指向 下一个节点实现的。链表可以是循环的也可以是非循环的，非循环的最后一个指针是0</p><h2 id="8、队列"><a href="#8、队列" class="headerlink" title="8、队列"></a>8、队列</h2><p>“队列” 就像邮局排队，谁先来就排前面，这叫 先进先出（FIFO——first in first out），可以把”栈”想成一堆松饼,做好一个新松饼，就堆在之前上面,吃的时候，是从最上面开始</p><h2 id="9、栈"><a href="#9、栈" class="headerlink" title="9、栈"></a>9、栈</h2><p>栈是后进先出(LIFO)</p><h2 id="10、树"><a href="#10、树" class="headerlink" title="10、树"></a>10、树</h2><p><img src="https://uploader.shimo.im/f/7atIzqy3EJk8PP9s.PNG!thumbnail" alt="img"></p><h2 id="11、图"><a href="#11、图" class="headerlink" title="11、图"></a>11、图</h2><p>如果数据随意连接，有循环，我们称之为图，如下图</p><p><img src="https://uploader.shimo.im/f/aTSwzmtN8HxXC9Pf.PNG?sm_xform=image/crop,x_0,y_72,w_605,h_333/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第15课-阿兰图灵"><a href="#第15课-阿兰图灵" class="headerlink" title="第15课 阿兰图灵"></a>第15课 阿兰图灵</h1><h2 id="0-可判定性问题"><a href="#0-可判定性问题" class="headerlink" title="0.可判定性问题"></a>0.可判定性问题</h2><p>是否存在一种算法，输入正式逻辑语句 输出准确的”是”或”否”答案？</p><ol><li>阿隆佐邱奇，Lambda算子</li></ol><p>美国数学家 阿隆佐·丘奇，开发了一个叫”Lambda 算子”的数学表达系统，证明其不存在。</p><ol><li>图灵机</li></ol><p>只要有足够的规则，状态和纸带，图灵机可以解决一切<strong>计算</strong>问题。和图灵机一样完备，叫做图灵完备。</p><ol><li>停机问题</li></ol><p>证明图灵机不能解决所有问题。</p><ol><li>图灵测试</li></ol><p>向人和机器同时发信息，收到的回答无法判断哪个是人，哪个是计算机，则计算机达到了智能程度。</p><h1 id="第16课-软件工程"><a href="#第16课-软件工程" class="headerlink" title="第16课 软件工程"></a>第16课 软件工程</h1><h2 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h2><p>当任务庞大，函数太多，我们需要把函数打包成层级，把相关代码都放一起，打包成<strong>对象</strong>。对象可以包括其他对象，函数和变量。把函数打包成对象的思想叫做“面向对象编程”，面向对象的核心是隐藏复杂度，选择性的公布功能。</p><h2 id="3、API"><a href="#3、API" class="headerlink" title="3、API"></a>3、API</h2><p>当团队接收到子团队编写的对象时，需要文档和程序编程接口（API）来帮助合作。API控制哪些函数和数据让外部访问，哪些仅供内部。</p><h2 id="4、集成开发环境（IDE）"><a href="#4、集成开发环境（IDE）" class="headerlink" title="4、集成开发环境（IDE）"></a>4、集成开发环境（IDE）</h2><p>程序员用来专门写代码的工具</p><h2 id="6、调试（debug）"><a href="#6、调试（debug）" class="headerlink" title="6、调试（debug）"></a>6、调试（debug）</h2><p>IDE帮你检查错误，并提供信息，帮你解决问题，这个过程叫调试</p><h2 id="7、文档与注释"><a href="#7、文档与注释" class="headerlink" title="7、文档与注释"></a>7、文档与注释</h2><p>文档一般放在一个叫做README的文件里，文档也可以直接写成“注释”，放在源代码里，注释是标记过的一段文字，编译代码时，注释会被忽略。注释的唯一作用是帮助开发者理解代码。</p><h2 id="8、版本控制"><a href="#8、版本控制" class="headerlink" title="8、版本控制"></a>8、版本控制</h2><p>版本控制，又称源代码管理。大型软件公司会把会把代码放到一个中心服务器上，叫”代码仓库”，程序员可以把想修改的代码借出，修改后再提交回代码仓库。版本控制可以跟踪所有变化，如果发现bug，全部或部分代码，可以”回滚”到之前的稳定版。</p><h2 id="9、质量控制"><a href="#9、质量控制" class="headerlink" title="9、质量控制"></a>9、质量控制</h2><p>测试可以统称“质量保证测试”（QA），作用是找bug</p><h2 id="10、beta-alpha"><a href="#10、beta-alpha" class="headerlink" title="10、beta alpha"></a>10、beta alpha</h2><p>beta版软件，即是软件接近完成，但没有完全被测试过，公司有时会向公众发布beta版，以帮助发现问题。alpha是beta前的版本，一般很粗糙，只在内部测试</p><h1 id="第17课-集成电路与摩尔定律（硬件的发展）"><a href="#第17课-集成电路与摩尔定律（硬件的发展）" class="headerlink" title="第17课 集成电路与摩尔定律（硬件的发展）"></a>第17课 集成电路与摩尔定律（硬件的发展）</h1><ol><li>分立元件与数字暴政</li></ol><p>一开始，计算机都有独立组件构成，叫**”分立元件”** ， 然后不同组件再用线连在一起，这会导致计算机的构成很复杂，这个问题叫做<strong>数字暴政</strong>。</p><ol><li>集成电路与仙童半导体</li></ol><p>封装复杂性：与其把多个独立部件用电线连起来，拼装出计算机，不如把多个组件包在一起，变成一个新的独立组件。这种新的独立组件就叫集成电路（IC），仙童半导体（用硅做成）让集成电路变成了现实。为了不用焊接或用一大堆线，发明了印刷电路板（PCB），他通过蚀刻金属线的方式把零件连接到一起</p><ol><li>光刻0421</li></ol><p>即用光把复杂图案印到材料上。我们把一片薄片状的硅叫做<strong>晶圆</strong>，通过一系列生产步骤，将晶圆表面薄膜的特定部分除去的工艺叫做<strong>光刻</strong>。</p><p><img src="https://uploader.shimo.im/f/k5wCIRpRewG9dG8X.PNG!thumbnail" alt="img"></p><p>光刻组件示意图</p><p><img src="https://uploader.shimo.im/f/JGAgwsnJMLBk2L9Z.PNG!thumbnail" alt="img"></p><p>光刻成品示意图</p><ol><li>摩尔定律</li></ol><p>每两年左右，得益于材料和制造技术的发展 ，同样大小的空间，能塞进两倍数量的晶体管。</p><ol><li>进一步小型化会碰到的问题</li></ol><p>1、由于光的波长限制，精度已到极限。</p><p>2、量子隧穿效应：当晶体管非常小，电极之间可能只距离几个原子，电子会跳过间隙，会产生漏电问题</p><h1 id="第18课-操作系统"><a href="#第18课-操作系统" class="headerlink" title="第18课 操作系统"></a>第18课 操作系统</h1><ol><li>操作系统(OS)</li></ol><p>操作系统也是一种程序，不过它有操作硬件的特殊权限，可以运行和管理其他程序。</p><ol><li>批处理</li></ol><p>一个程序运行后会自动运行下一个程序。</p><ol><li>外部设备</li></ol><p>和计算机连着的其他设备，如打印机。</p><ol><li>设备驱动程序</li></ol><p>为了使所写程序和不同类型的电脑兼容，我们需要操作系统充当软件和硬件之间的媒介，更具体地说，操作系统提供程序编程接口(API)来抽象硬件,叫“设备驱动程序”。程序员可以用标准化机制，和输入输出硬件（I&#x2F;O）交互，</p><ol><li>多任务处理</li></ol><p>操作系统能使多个程序在单个CPU上同时进行的能力，叫做“多任务处理”</p><ol><li>虚拟内存</li></ol><p>多程序处理带来了一个程序所占用内存可能不连续的问题，导致程序员难以追踪一个程序，为了解决这个问题操作系统会把内存地址虚拟化，这叫“虚拟内存”。</p><ol><li>动态内存分配</li></ol><p>虚拟内存的机制使程序的内存大小可以灵活增减，叫做“动态内存分配”，对程序来说，内存看上去是连续的。</p><ol><li>内存保护</li></ol><p>给每个程序分配单独的内存，那当这个程序出现混乱时，它不会影响到其他程序的内存，同时也能有效地防止恶意程序篡改其他程序，这叫做内存保护。</p><ol><li>多用户分时操作系统（Multics）</li></ol><p>用来处理多用户同时使用一台计算机的情况，即每个用户只能用一小部分处理器，内存等，</p><ol><li>Unix</li></ol><p>把操作系统分成两个部分，一个是操作系统的核心部分，如内存管理，多任务和输入&#x2F;输出处理，这叫做“内核”，第二部分是一堆有用的工具，比如程序和运行库。</p><h1 id="第19课-内存和储存介质（存储技术的发展）"><a href="#第19课-内存和储存介质（存储技术的发展）" class="headerlink" title="第19课 内存和储存介质（存储技术的发展）"></a>第19课 内存和储存介质（存储技术的发展）</h1><ol><li>纸卡 纸带</li></ol><p>问题：读取慢 难修改 难存临时值</p><ol><li>延迟线存储器</li></ol><p>利用线的延迟在线里存储数据，又叫顺序存储器或者循环存储器。</p><p>存在问题：1 不能随意调出数据</p><p>​                 2 难以增加内存密度</p><ol><li>磁芯</li></ol><p>利用电磁感应原理</p><p>问题 成本高</p><ol><li>磁带</li></ol><p>问题 访问速度慢</p><ol><li>磁鼓</li></ol><p>与磁带相似</p><ol><li>硬盘</li></ol><p>与磁带相似</p><ol><li>内存层次结构</li></ol><p>在计算机中，高速昂贵和低速便宜的内存混合使用以取得一个平衡</p><ol><li>软盘</li></ol><p>除了磁盘是软的，其他都和硬盘一样，好处是便携</p><ol><li>光盘</li></ol><p>原理：光盘表面有很多小坑，造成光的不同反射，光学传感器会捕获到，并解码为 1 和 0</p><ol><li>固定硬盘（SSD）</li></ol><p>里面是集成电路</p><h1 id="第-20-课-文件系统"><a href="#第-20-课-文件系统" class="headerlink" title="第 20 课 文件系统"></a>第 20 课 文件系统</h1><h2 id="0-为什么要采用文件格式："><a href="#0-为什么要采用文件格式：" class="headerlink" title="0.为什么要采用文件格式："></a>0.为什么要采用文件格式：</h2><p>可以随便存文件数据，但按格式存会更方便</p><ol><li>TXT 文本文件</li></ol><p>用ASCII解码</p><ol><li>WAV 音频文件</li></ol><p>记录的是振幅</p><ol><li>BMP 图片文件：</li></ol><p>记录每个像素的红绿蓝 RGB 值</p><ol><li>目录文件：</li></ol><p>用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等</p><ol><li>平面文件系统 - Flat File System</li></ol><p>文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用</p><ol><li><p>解决文件紧密的排序造成的问题</p></li><li><p>把空间划分成一块块</p></li><li><p>文件拆分存在多个块里</p></li><li><p>碎片整理</p></li></ol><p>文件的增删改查会不可避免的造成文件散落在各个块里，如果是磁带这样的存储介质就会造成          问题，所以需要碎片整理——计算机把文件内容调换位置</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ol><li>分层文件系统 - Hierarchical File System：</li></ol><p>有不同文件夹，文件夹可以层层嵌套</p><h1 id="第21课-压缩"><a href="#第21课-压缩" class="headerlink" title="第21课 压缩"></a>第21课 压缩</h1><h2 id="0-压缩的好处"><a href="#0-压缩的好处" class="headerlink" title="0.压缩的好处"></a>0.压缩的好处</h2><p>能存更多文件，传输也更快</p><ol><li>游程编码 Run-Length Encoding</li></ol><p>适合经常出现相同值的文件，以吃豆人游戏为例：</p><p><img src="https://uploader.shimo.im/f/f8HTIVw8tvdIQPUI.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/C1HLIgWl3n3n7BQJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/A143LH7jFJEldvsg.PNG!thumbnail" alt="img"></p><ol><li>无损压缩 Lossless compression</li></ol><p>没有损失任何数据的压缩。</p><ol><li>霍夫曼树 Huffman Tree和字典编码 Dictionary coders</li></ol><p>一种高效的编码模式，以压缩图片为例</p><p><img src="https://uploader.shimo.im/f/aN7KFqbuHQoEQftu.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/SU1TRtYsTihjVmhx.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/B5CKTbb77ICVyY5T.PNG?sm_xform=image/crop,x_0,y_6,w_616,h_339/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/mBxWwpvw493swdbY.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/4C4ZzPs0GQUHOZgo.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/ThiTl2pFphNnofw1.PNG!thumbnail" alt="img"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><ol><li>感知编码 Perceptual coding和有损压缩 jpeg 格式</li></ol><p>删掉人类无法感知的数据的有损压缩方法，叫做“感知编码”，如音频文件，人类听不到超声波，所以可以舍去，MP3就是音频的一种压缩形式。</p><p>有损压缩的一个例子就是jpeg模式，如图：<img src="https://uploader.shimo.im/f/AyTzvKHDbR8xxbpk.png?sm_xform=image/crop,x_0,y_181,w_1920,h_1069/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/pkOTkVcNjH0MRgpJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/NLikalps4ttAEWhr.PNG!thumbnail" alt="img"></p><ol><li>时间冗余 Temporal redundancy</li></ol><p>一个视频由很多图片构成，其中很多图片的背景一样，这就构成了时间冗余，很多视频编码格式，只存变化的部分。进阶的视频压缩模式会找到帧与帧的相似性，然后打补丁，MPEG-4 是视频压缩的常见标准。</p><h1 id="第-22-课-命令行界面"><a href="#第-22-课-命令行界面" class="headerlink" title="第 22 课 命令行界面"></a>第 22 课 命令行界面</h1><ol><li>人机交互 （Human-Computer Interaction）发展史</li></ol><p>计算机早期同时输入程序和数据（用纸卡&#x2F;纸带）</p><p>运行开始直到结束，中间没有人类进行操作，</p><p>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上 (02:34)</p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行</p><p>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机 (02:44~05:38)</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配 (07:24)</p><ol><li>人机交互工具的变化</li></ol><p>1 早期输出数据是打印到纸上，而输入是用纸卡&#x2F;纸带一次性把程序和数据都给进去</p><p>2 QWERTY 打字机的发展</p><p>3 电传打字机 Teletype machine</p><p>   作用：用于发电报，使两人可以远距离沟通</p><ol><li>命令行界面 Command line interface</li></ol><p>输入命令，计算机会给予回应</p><h1 id="第-23课-屏幕与-2D-图形显示"><a href="#第-23课-屏幕与-2D-图形显示" class="headerlink" title="第 23课 屏幕与 2D 图形显示"></a>第 23课 屏幕与 2D 图形显示</h1><ol><li><p>PDP-1 计算机、键盘和显示器分开，屏幕显示临时值</p></li><li><p>阴极射线管 Cathode Ray Tube (CRT)</p></li></ol><p> CRT 有两种绘图方式：</p><p>​       矢量扫描 Vector Scanning</p><p><img src="https://uploader.shimo.im/f/3mKGVA1g7c1eAaja.PNG!thumbnail" alt="img"></p><p>​       光栅扫描 Raster Scanning</p><p><img src="https://uploader.shimo.im/f/dmmLkIlqiFvUxzji.PNG!thumbnail" alt="img"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><ol><li>02:14 液晶显示器 Liquid Crystal Displays (LCD)，像素 (Pixel)</li></ol><p>随着显示技术的发展，出现了LCD，LCD 也用光栅扫描。在屏幕上显示的清晰的点，叫”像素”</p><ol><li>03:32 字符生成器 Character generator，</li></ol><p>相比于像素，为了减少内存，人们更喜欢使用字符，计算机需要额外硬件，来从内存读取字符，转换成光栅图形 \N 这样才能显示到屏幕上个硬件叫 “字符生成器”，基本算是第一代显卡。它内部有一小块只读存储器，简称 ROM，存着每个字符的图形，叫”点阵图案”，</p><ol><li>屏幕缓冲区 Screen buffer</li></ol><p>为了显示，”字符生成器” 会访问内存中一块特殊区域 这块区域专为图形保留，叫 屏幕缓冲区，程序想显示文字时，修改这块区域里的值就行。</p><ol><li>05:09 矢量命令画图</li></ol><p>概念非常简单：所有东西都由线组成,矢量指令可以画出线，把许多矢量指令存在硬盘上，就能画出很多由线组成的复杂图形。</p><ol><li>06:34 Sketchpad, 光笔 (Light pen)，位图显示和画矩形</li></ol><p><strong>Sketchpad</strong> ，一个交互式图形界面，用途是计算机辅助设计 (CAD)。</p><p><strong>光笔</strong>，就是一个有线连着电脑的触控笔，有了它们，用户可以画出很完美的线条并进行缩放等操作。</p><p><strong>位图显示</strong>，内存中的位对应着屏幕上显示的像素。</p><p>想画更复杂的图形，如<strong>画矩形</strong>，我们需要四个值，起点的x y坐标，高度和宽度。</p><h1 id="第-24-课-冷战和消费主义"><a href="#第-24-课-冷战和消费主义" class="headerlink" title="第 24 课 冷战和消费主义"></a>第 24 课 冷战和消费主义</h1><p>本课概括：政府和消费者推动了计算机的发展</p><p>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展</p><p>冷战导致美国往计算机领域投入大量资源 (00:00~01:43)</p><p>范内瓦·布什 预见了计算机的潜力，提出假想机器 Memex</p><p>帮助建立 国家科学基金会，给科学研究提供资金 (01:43~03:43)</p><p>1950 年代消费者开始买晶体管设备，收音机大卖</p><p>日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子 (03:43~04:29）</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月</p><p>NASA 预算大大增加，用集成电路来制作登月计算机 (04:29~06:27)</p><p>集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次</p><p>美国造超级计算机进一步推进集成电路 (04:29~07:11)</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败</p><p>很多公司倒闭，英特尔转型处理器 (07:11~08:23)</p><h1 id="第-25-课-个人计算机革命"><a href="#第-25-课-个人计算机革命" class="headerlink" title="第 25 课 个人计算机革命"></a>第 25 课 个人计算机革命</h1><p>本集概括：继续讲计算机发展史</p><p>00:18 1970年代初成本下降，个人计算机变得可行</p><p>​           RAM：random-access memory 随机访问存储器</p><p>​           ROM：read-only memory 只读存储器</p><p>01:51 Altair 8800 第一台取得商业成功的个人计算机</p><p>02:32 比尔·盖茨 和 保罗·艾伦写 BASIC 解释器，解释器和编译器类似，区别是解释器运行时转换，而编译器提前转换</p><p>03:45 乔布斯提议卖组装好的计算机，Apple-I 诞生</p><p>04:40 1977年出现3款开箱即用计算机：</p><p>“Apple-II”，”TRS-80 Model I”，”Commodore PET 2001”</p><p>06:26 IBM 意识到个人计算机市场</p><p>IBM PC 发布，采用<strong>开放架构</strong>，兼容的机器都叫 IBM Compatible (IBM 兼容)</p><p>生态系统产生雪球效应：</p><p>因为用户多，软硬件开发人员更愿意花精力在这个平台</p><p>因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机</p><p>08:44 苹果选<strong>封闭架构</strong>，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额</p><h1 id="第-26-集：图形用户界面-GUI"><a href="#第-26-集：图形用户界面-GUI" class="headerlink" title="第 26 集：图形用户界面 (GUI)"></a>第 26 集：图形用户界面 (GUI)</h1><p>——GUI是“事件驱动编程”，代码可以在任意时间执行以响应事件，而不像传统代码一样自上而下。</p><p>01:10 图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart）——设想计算机成为未来知识性员工应对问题的工具，并发明了鼠标。</p><p>03:20 1970年成立 帕洛阿尔托研究中心（Palo Alto Research Center）</p><p>03:29 1973年完成 Xerox Alto(施乐奥托) 计算机——创立了桌面，窗口等计算机概念</p><p>06:38 1981年的 Xerox Star system(<strong>施乐之星系统</strong>)</p><p>​         创建了文档概念</p><p>07:45 所见即所得 WYSIWYG——施乐打印出来的东西和计算机上一样，并发明了剪切 复制 黏贴等计算机概念</p><p>08:18 史蒂夫·乔布斯去施乐参观</p><p>09:15 1983年推出 Apple Lisa</p><p>09:31 1984年推出 Macintosh 成功</p><p>10:12 1985年推出 Windows 1.0，之后出到 3.1</p><p>10:43 1995年推出 Windows 95 提供新的图形界面，并有Mac没有的新功能，如多任务和受保护内存</p><p>11:08 1995年微软做失败的 Microsoft Bob——类似于房子的设计</p><h1 id="第-27-集：3D-图形"><a href="#第-27-集：3D-图形" class="headerlink" title="第 27 集：3D 图形"></a>第 27 集：3D 图形</h1><h2 id="1-线框渲染-Wireframe-Rendering"><a href="#1-线框渲染-Wireframe-Rendering" class="headerlink" title="1.线框渲染 Wireframe Rendering"></a>1.线框渲染 Wireframe Rendering</h2><p>有图形算法 负责把3D坐标”拍平”显示到2D屏幕上，这叫3D投影(包括正交投影和透视投影)，所有的点都从3D转成2D后，就可以用画2D线段的函数来连接这些点，这叫线框渲染，</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="2-网格-Mesh"><a href="#2-网格-Mesh" class="headerlink" title="2.网格 Mesh"></a>2.网格 Mesh</h2><p>如果我们需要画比立方体复杂的图形，三角形比线段更好，在3D图形学中我们叫三角形”多边形”(Polygons)，一堆多边形的集合叫 网格，网格越密，表面越光滑，细节越多，</p><h2 id="3-三角形更常用因为能定义唯一的平面"><a href="#3-三角形更常用因为能定义唯一的平面" class="headerlink" title="3.三角形更常用因为能定义唯一的平面"></a>3.三角形更常用因为能定义唯一的平面</h2><h2 id="4-扫描线渲染-Scanline-Rendering——填充图形的经典算法"><a href="#4-扫描线渲染-Scanline-Rendering——填充图形的经典算法" class="headerlink" title="4. 扫描线渲染 Scanline Rendering——填充图形的经典算法"></a>4. 扫描线渲染 Scanline Rendering——填充图形的经典算法</h2><p>​          填充的速度叫做<strong>填充速率</strong></p><p><img src="https://uploader.shimo.im/f/mr2JAWcJ3gFXXRwH.PNG!thumbnail" alt="img"></p><p>​          <strong>抗锯齿</strong>——边缘羽化，如果像素在多边形内部，就直接涂颜色，如果多边形划过像素，颜色就浅一些</p><p><img src="https://uploader.shimo.im/f/jkKX3F6kzl8i7qdw.PNG!thumbnail" alt="img"></p><h2 id="5-遮挡-Occlusion"><a href="#5-遮挡-Occlusion" class="headerlink" title="5.遮挡 Occlusion"></a>5.遮挡 Occlusion</h2><p>用排序算法，从远到近排列，然后从远到近渲染，这叫<strong>画家算法</strong></p><h2 id="6-深度缓冲-Z-Buffering"><a href="#6-深度缓冲-Z-Buffering" class="headerlink" title="6. 深度缓冲 Z Buffering"></a>6. 深度缓冲 Z Buffering</h2><p>另一种画遮挡的方法，简而言之，Z-buffering 算法会记录场景中每个像素和摄像机的距离，在内存里存一个数字矩阵，首先，每个像素的距离被初始化为”无限大”，然后 Z-buffering 从列表里第一个多边形开始处理，也就是A，它和扫描线算法逻辑相同，但不是给像素填充颜色，而是把多边形的距离和 Z-Buffer 里的距离进行对比，它总是记录更低的值，因为没对多边形排序，所以后处理的多边形并不总会覆盖前面的。</p><p>07:45 Z Fighting 错误</p><p>采用深度缓冲算法，哪个图形在前将会变化</p><p>07:51 背面剔除 Back Face Culling</p><p>由于游戏角色的头部或地面，只能看到朝外的一面，所以为了节省处理时间，会忽略多边形背面，这很好,但有个bug是 如果进入模型内部往外看，头部和地面会消失</p><p>08:53 表面法线 Surface Normal</p><p>在3D图形上任取一小个区域，它面对的方向叫“表面法线”</p><p>09:33 平面着色 Flat Shading</p><p>基本的照明算法，缺点是使多边形边界明显，看上去不光滑</p><p>09:43 高洛德着色 Gouraud shading, 冯氏着色 Phong Shading</p><p>不只用一种颜色上色</p><p>10:06 纹理映射 Texture Mapping</p><p>纹理在图形学中指外观，纹理有多种算法来达到花哨效果，最经典的是纹理映射。</p><p><img src="https://uploader.shimo.im/f/VXjgN5i6k5eDAh5n.PNG!thumbnail" alt="img"></p><p>纹理映射示意图</p><p>11:24 图形处理单元 GPU, Graphics Processing Unit</p><p>方便并行处理多个图形，并把图形分成一个个小块来处理。</p><p>（28-30：介绍网络的发展和支撑他们的基础原理和技术）</p><h1 id="第-28-集：计算机网络"><a href="#第-28-集：计算机网络" class="headerlink" title="第 28 集：计算机网络"></a>第 28 集：计算机网络</h1><h2 id="1-局域网-Local-Area-Networks-LAN"><a href="#1-局域网-Local-Area-Networks-LAN" class="headerlink" title="1. 局域网 Local Area Networks - LAN"></a>1. 局域网 Local Area Networks - LAN</h2><p>计算机近距离构成的小型网络，叫局域网（LAN），以太网是经典的局域网</p><h2 id="2-媒体访问控制地址-Media-Access-Control-address-MAC"><a href="#2-媒体访问控制地址-Media-Access-Control-address-MAC" class="headerlink" title="2.媒体访问控制地址 Media Access Control address - MAC"></a>2.媒体访问控制地址 Media Access Control address - MAC</h2><p>用于确认局域网和WiFi传输的对象</p><h2 id="3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA"><a href="#3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA" class="headerlink" title="3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA"></a>3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA</h2><p>多台电脑共享一个传输媒介，叫做载波侦听多路访问，共享媒介又称载体，如WiFi的载体是空气，以太网的载体是电线。载体传输数据的速度叫带宽，</p><h2 id="4-指数退避-Exponential-Backoff"><a href="#4-指数退避-Exponential-Backoff" class="headerlink" title="4.指数退避 Exponential Backoff"></a>4.指数退避 Exponential Backoff</h2><p>当多台计算机同时想要传输数据时，就会发生冲突，当计算机检测到冲突 就会在重传之前等待一小段时间，，这一段时间包括固定时间+随机时间，再次堵塞时固定时间将会指数级增加，这叫做指数退避。</p><h2 id="5-冲突域-Collision-Domain"><a href="#5-冲突域-Collision-Domain" class="headerlink" title="5.冲突域 Collision Domain"></a>5.冲突域 Collision Domain</h2><p>载体和其中的设备总称为“冲突域”，为了避免冲突，可以用<strong>交换器</strong></p><p>07:08 电路交换 Circuit Switching</p><p>缺点：不灵活且数量昂贵</p><p><img src="https://uploader.shimo.im/f/hJq9a6Aagi0SsyRH.PNG!thumbnail" alt="img"></p><h2 id="6-报文交换-Message-Switching"><a href="#6-报文交换-Message-Switching" class="headerlink" title="6. 报文交换 Message Switching"></a>6. 报文交换 Message Switching</h2><p>报文的具体格式简称IP，每一个电脑都会有一个IP地址</p><p>好处，可以用不同路由，通信更可靠也更能容错。</p><p>坏处，当报文比较大的时候，会堵塞线路。解决方法是 将大报文分成很多小块，叫”<strong>数据包</strong>“，来进行运输，这叫“<strong>分组交换</strong>”。路由器会平衡与其他路由器之间的负载  以确保传输可以快速可靠，这叫”<strong>阻塞控制</strong>“</p><p>消息沿着路由跳转的次数 叫”<strong>跳数</strong>“(hop count)，看到哪条线路的跳数很高，说明出了故障，这叫跳数限制。</p><p><img src="https://uploader.shimo.im/f/aqKJCrYbYM99btzH.PNG!thumbnail" alt="img"></p><h1 id="第-29-集：互联网"><a href="#第-29-集：互联网" class="headerlink" title="第 29 集：互联网"></a>第 29 集：互联网</h1><h2 id="1。电脑连接互联网的过程"><a href="#1。电脑连接互联网的过程" class="headerlink" title="1。电脑连接互联网的过程"></a>1。电脑连接互联网的过程</h2><p>你所用的电脑首先要连接到局域网，家里WiFi路由器连着的所有设备，组成了<strong>局域网</strong>，局域网再连到<strong>广域网（WAN）</strong>，广域网的路由器一般属于你的<strong>互联网服务提供商（ISP）</strong>，再连更大的WAN，往复几次，最后连到互联网主干。</p><h2 id="2-IP-互联网协议-Internet-Protocol"><a href="#2-IP-互联网协议-Internet-Protocol" class="headerlink" title="2.IP - 互联网协议 - Internet Protocol"></a>2.IP - 互联网协议 - Internet Protocol</h2><p>IP负责把数据包送到正确的计算机</p><h2 id="3-UDP-用户数据报协议-User-Datagram-Protocol"><a href="#3-UDP-用户数据报协议-User-Datagram-Protocol" class="headerlink" title="3. UDP - 用户数据报协议 - User Datagram Protocol"></a>3. UDP - 用户数据报协议 - User Datagram Protocol</h2><p>UDP负责把数据包传送到正确的程序，有端口号（哪个程序），校验和（数据是否损坏）</p><h2 id="4-校验和-Checksum"><a href="#4-校验和-Checksum" class="headerlink" title="4.校验和 - Checksum"></a>4.校验和 - Checksum</h2><p>UDP校验和只有16位，超过这个数，弃高位。</p><h2 id="5-TCP-传输控制协议-Transmission-Control-Protocol"><a href="#5-TCP-传输控制协议-Transmission-Control-Protocol" class="headerlink" title="5.TCP - 传输控制协议 - Transmission Control Protocol"></a>5.TCP - 传输控制协议 - Transmission Control Protocol</h2><p>如果要控制所有数据必须到达，就用传输控制协议</p><h3 id="TCP的特点"><a href="#TCP的特点" class="headerlink" title="TCP的特点"></a>TCP的特点</h3><p>1 控制发送的文件按顺序到达</p><p>2 要求接收方确认无误后发送确认码（ACK），确认码的成功率和来回时间可以用来推测网络的拥堵程度，TCP可以根据这个调整传输率。由于这个特点，TCP对时间要求高的程序不适用</p><h2 id="6-DNS-域名系统-Domain-Name-System"><a href="#6-DNS-域名系统-Domain-Name-System" class="headerlink" title="6 DNS - 域名系统 - Domain Name System"></a>6 DNS - 域名系统 - Domain Name System</h2><p>计算机访问网站时需要两样，IP地址和端口号，但记数字很难，所以互联网通过域名系统把域名和IP地址一一对应。域名系统是树状结构</p><p><img src="https://uploader.shimo.im/f/FCIyLhtvPZsSZzCA.PNG!thumbnail" alt="img"></p><p>10:47 OSI - 开放式系统互联通信参考模型 - Open System Interconnection</p><p><img src="https://uploader.shimo.im/f/FOLq1XgUBomAvLQu.PNG!thumbnail" alt="img"></p><h1 id="第-30-集：万维网（WWW）"><a href="#第-30-集：万维网（WWW）" class="headerlink" title="第 30 集：万维网（WWW）"></a>第 30 集：万维网（WWW）</h1><h2 id="1-基本单位"><a href="#1-基本单位" class="headerlink" title="1.基本单位"></a>1.基本单位</h2><p>万维网在互联网上运行，它的基本单位是页面</p><h2 id="2-超链接-Hyperlinks"><a href="#2-超链接-Hyperlinks" class="headerlink" title="2.超链接 Hyperlinks"></a>2.超链接 Hyperlinks</h2><p>点超链接可以去到另一个页面，文字超链接又叫超文本</p><p><img src="https://uploader.shimo.im/f/LSiZMkwxeCJMvmby.PNG!thumbnail" alt="img"></p><p>超链接工作过程中示意</p><h2 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3.状态码"></a>3.状态码</h2><p>状态码代表所访问网页的状态</p><h2 id="4-URL-统一资源定位器-Uniform-Resource-Locator"><a href="#4-URL-统一资源定位器-Uniform-Resource-Locator" class="headerlink" title="4.URL - 统一资源定位器 - Uniform Resource Locator"></a>4.URL - 统一资源定位器 - Uniform Resource Locator</h2><p>网页的唯一网址</p><h2 id="5-HTTP-超文本传输协议-HyperText-Transfer-Protocol"><a href="#5-HTTP-超文本传输协议-HyperText-Transfer-Protocol" class="headerlink" title="5.HTTP - 超文本传输协议 - HyperText Transfer Protocol"></a>5.HTTP - 超文本传输协议 - HyperText Transfer Protocol</h2><h2 id="6-HTML-超文本标记语言-HyperText-Markup-Language"><a href="#6-HTML-超文本标记语言-HyperText-Markup-Language" class="headerlink" title="6.HTML - 超文本标记语言 - HyperText Markup Language"></a>6.HTML - 超文本标记语言 - HyperText Markup Language</h2><h2 id="7-万维网发展史"><a href="#7-万维网发展史" class="headerlink" title="7.万维网发展史"></a>7.万维网发展史</h2><p>1 第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的</p><p>2 1991年万维网就此诞生</p><p>3  Jerry 和 David 的万维网指南 后来改名成 Yahoo</p><p>4 搜索引擎 JumpStation</p><p>（包括爬虫 索引 用法）</p><p>5 搜索引擎 Google</p><p>   改进排序方法，按照链接指向的多少来排序</p><h2 id="8-网络中立性"><a href="#8-网络中立性" class="headerlink" title="8.网络中立性"></a>8.网络中立性</h2><p>平等地对待每个数据包</p><h1 id="第-31-集：计算机安全"><a href="#第-31-集：计算机安全" class="headerlink" title="第 31 集：计算机安全"></a>第 31 集：计算机安全</h1><h2 id="1-保密性-完整性-可用性-Secrecy-Integrity-Availability"><a href="#1-保密性-完整性-可用性-Secrecy-Integrity-Availability" class="headerlink" title="1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability"></a>1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability</h2><p>计算机为了安全，要实现三性</p><p>保密性：只有有权限的人，才能读取计算机系统和数据</p><p>完整性：只有有权限的人，才能使用和修改系统和数据</p><p>可用性：有权限的人，可以随时访问计算机系统和数据</p><h2 id="2-Threat-Model-威胁模型"><a href="#2-Threat-Model-威胁模型" class="headerlink" title="2.Threat Model 威胁模型"></a>2.Threat Model 威胁模型</h2><p>为了实现这三个目标，安全专家会从 \N 抽象层面想象”敌人”可能是谁，这叫”威胁模型分析”，模型会对攻击者有个大致描述：\N 能力如何，目标可能是什么，可能用什么手段，攻击手段又叫”攻击矢量”，”威胁模型分析”让你能为特定情境做准备，不被可能的攻击手段数量所淹没。</p><p>很多安全问题可以总结成两个：</p><p>你是谁？你能访问什么？</p><h2 id="3-身份验证-Authentication-的三种方式："><a href="#3-身份验证-Authentication-的三种方式：" class="headerlink" title="3.身份验证 (Authentication) 的三种方式："></a>3.身份验证 (Authentication) 的三种方式：</h2><p>What you know, 你知道什么 ex、用户名和密码</p><p>What you have, 你有什么      </p><p>What you are, 你是什么</p><h2 id="4-访问控制-Access-Control"><a href="#4-访问控制-Access-Control" class="headerlink" title="4.访问控制 Access Control"></a>4.访问控制 Access Control</h2><p>Bell LaPadula model <strong>不能向上读取，不能向下写入</strong></p><h2 id="5-安全内核"><a href="#5-安全内核" class="headerlink" title="5.安全内核"></a><strong>5.安全内核</strong></h2><p>安全内核应该有一组尽可能少的操作系统软件，和尽量少的代码。</p><h2 id="6-独立安全检查和质量验证"><a href="#6-独立安全检查和质量验证" class="headerlink" title="6.独立安全检查和质量验证"></a>6.独立安全检查和质量验证</h2><p>最有效的验证手段</p><h2 id="7-隔离-Isolation-沙盒-Sandbox"><a href="#7-隔离-Isolation-沙盒-Sandbox" class="headerlink" title="7.隔离 Isolation, 沙盒 Sandbox"></a>7.隔离 Isolation, 沙盒 Sandbox</h2><p>优秀的开发人员，应该计划当程序被攻破后，\N如何限制损害，控制损害的最大程度，并且不让它危害到计算机上其他东西，这叫”隔离”。要实现隔离，我们可以”沙盒”程序，这好比把生气的小孩放在沙箱里，他们只能摧毁自己的沙堡，不会影响到其他孩子，方法是给每个程序独有的内存块，其他程序不能动。一台计算机可以运行多个虚拟机，如果一个程序出错，最糟糕的情况是它自己崩溃，或者搞坏它处于的虚拟机。</p><h1 id="第-32-集：黑客与攻击"><a href="#第-32-集：黑客与攻击" class="headerlink" title="第 32 集：黑客与攻击"></a>第 32 集：黑客与攻击</h1><h2 id="1-社会工程学-Social-Engineering"><a href="#1-社会工程学-Social-Engineering" class="headerlink" title="1.社会工程学 Social Engineering"></a>1.社会工程学 Social Engineering</h2><p>欺骗别人获得信息，或让人安装易于攻击的系统</p><h2 id="2-钓鱼-Phishing"><a href="#2-钓鱼-Phishing" class="headerlink" title="2.钓鱼 Phishing"></a>2.钓鱼 Phishing</h2><h2 id="3-假托-Pretexting"><a href="#3-假托-Pretexting" class="headerlink" title="3.假托 Pretexting"></a>3.假托 Pretexting</h2><h2 id="4-木马-Trojan-Horses"><a href="#4-木马-Trojan-Horses" class="headerlink" title="4.木马 Trojan Horses"></a>4.木马 Trojan Horses</h2><h2 id="5-NAND镜像-NAND-Mirroring"><a href="#5-NAND镜像-NAND-Mirroring" class="headerlink" title="5.NAND镜像 NAND Mirroring"></a>5.NAND镜像 NAND Mirroring</h2><p>——来避免输错密码后等待</p><h2 id="6-漏洞利用-Exploit"><a href="#6-漏洞利用-Exploit" class="headerlink" title="6.漏洞利用 Exploit"></a>6.漏洞利用 Exploit</h2><h2 id="7-缓冲区溢出-Buffer-Overflow"><a href="#7-缓冲区溢出-Buffer-Overflow" class="headerlink" title="7. 缓冲区溢出 Buffer Overflow"></a>7. 缓冲区溢出 Buffer Overflow</h2><p>——一种常见的漏洞利用</p><h2 id="9-边界检查-Bounds-Checking和金丝雀"><a href="#9-边界检查-Bounds-Checking和金丝雀" class="headerlink" title="9.边界检查 Bounds Checking和金丝雀"></a>9.边界检查 Bounds Checking和金丝雀</h2><p>——防止缓冲区溢出的手段，金丝雀，留出一些不用的空间，当空间变少时，说明有攻击者乱来。</p><p>​      </p><h2 id="10-代码注入-Code-Injection"><a href="#10-代码注入-Code-Injection" class="headerlink" title="10. 代码注入 Code Injection"></a>10. 代码注入 Code Injection</h2><p>把代码注入到程序中，造成混乱</p><h2 id="11-零日漏洞-Zero-Day-Vulnerability"><a href="#11-零日漏洞-Zero-Day-Vulnerability" class="headerlink" title="11.零日漏洞 Zero Day Vulnerability"></a>11.零日漏洞 Zero Day Vulnerability</h2><p>当软件制造者不知道软件有新漏洞被发现了，这个漏洞被称为“零日漏洞”</p><h2 id="12-计算机蠕虫-Worms"><a href="#12-计算机蠕虫-Worms" class="headerlink" title="12.计算机蠕虫 Worms"></a>12.计算机蠕虫 Worms</h2><p>如果有足够多的电脑有漏洞，让恶意程序可以在电脑间互相传播，这种恶意程序叫做蠕虫</p><h2 id="13-僵尸网络-Botnet"><a href="#13-僵尸网络-Botnet" class="headerlink" title="13.僵尸网络 Botnet"></a>13.僵尸网络 Botnet</h2><p>如果黑客掌握足够多电脑，那他们可以组成“僵尸网络”</p><h1 id="第-33-集：加密"><a href="#第-33-集：加密" class="headerlink" title="第 33 集：加密"></a>第 33 集：加密</h1><h2 id="1-加密-Encryption，解密-Decryption"><a href="#1-加密-Encryption，解密-Decryption" class="headerlink" title="1. 加密 - Encryption，解密 - Decryption"></a>1. 加密 - Encryption，解密 - Decryption</h2><p>01:11 凯撒加密 Caesar cipher——一种替换加密  Substitution cipher，把字母替换成其他字母</p><p>01:59 移位加密 Permutation cipher</p><p><img src="https://uploader.shimo.im/f/nuMi5nxzR4tm7n0B.PNG!thumbnail" alt="img"></p><p> 列移位加密 Columnar transposition cipher</p><p>02:37 德国 Enigma 加密机 一种进阶的替换加密，每一次的映射都不同。</p><p>04:54 1977年”数据加密标准” - Data Encryption Standard (DES)</p><p>05:24 2001年”高级加密标准” - Advanced Encryption Standard (AES)</p><h2 id="2-密钥交换-Key-exchange"><a href="#2-密钥交换-Key-exchange" class="headerlink" title="2. 密钥交换 - Key exchange"></a>2. 密钥交换 - Key exchange</h2><p><img src="https://uploader.shimo.im/f/ZIH2mA0XASRyEZJ6.PNG!thumbnail" alt="img"></p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/tdQzQBGdJZeJ84Ch.PNG!thumbnail" alt="img"></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/LoC5ZUDOgkDD2qvT.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_341/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/QFokhbpbQMRrmOqf.PNG!thumbnail" alt="img"></p><p> 用颜色来举例”单向函数”和”密钥加密”的原理</p><p>实例：迪菲-赫尔曼密钥交换 - Diffie-Hellman Key Exchange</p><p>用模幂计算来得到秘钥</p><h2 id="3-非对称加密-Asymmetric-encryption"><a href="#3-非对称加密-Asymmetric-encryption" class="headerlink" title="3. 非对称加密 - Asymmetric encryption"></a>3. 非对称加密 - Asymmetric encryption</h2><p>以上的例子，双方用一样的秘钥加密和解密信息，叫对称解密。也可以人们用公钥加密信息，只有有私钥的人能解密，或者反过来，这叫非对称解密。最有名的非对称加密算法是RSA</p><h1 id="第-34-集：机器学习与人工智能"><a href="#第-34-集：机器学习与人工智能" class="headerlink" title="第 34 集：机器学习与人工智能"></a>第 34 集：机器学习与人工智能</h1><h2 id="以区分飞蛾为例"><a href="#以区分飞蛾为例" class="headerlink" title="以区分飞蛾为例"></a>以区分飞蛾为例</h2><h3 id="1-分类-Classification"><a href="#1-分类-Classification" class="headerlink" title="1. 分类 Classification"></a>1. 分类 Classification</h3><h3 id="2-做分类的算法-分类器-Classifier"><a href="#2-做分类的算法-分类器-Classifier" class="headerlink" title="2.做分类的算法 分类器 Classifier"></a>2.做分类的算法 分类器 Classifier</h3><h3 id="3-用于分类的值是特征-Feature"><a href="#3-用于分类的值是特征-Feature" class="headerlink" title="3.用于分类的值是特征 Feature"></a>3.用于分类的值是特征 Feature</h3><h3 id="4-特征值-种类叫做标记数据-Labeled-data"><a href="#4-特征值-种类叫做标记数据-Labeled-data" class="headerlink" title="4. 特征值+种类叫做标记数据 Labeled data"></a>4. 特征值+种类叫做标记数据 Labeled data</h3><p><img src="https://uploader.shimo.im/f/a9Ah3JjIXKXZ28ni.PNG!thumbnail" alt="img"></p><p>标记数据</p><h3 id="5-决策边界-Decision-boundaries"><a href="#5-决策边界-Decision-boundaries" class="headerlink" title="5. 决策边界 Decision boundaries"></a>5. 决策边界 Decision boundaries</h3><p><img src="https://uploader.shimo.im/f/IzBKYfZaW7WtLbSj.PNG!thumbnail" alt="img"></p><p>虚线为决策边界</p><h3 id="6-混淆矩阵-Confusion-matrix"><a href="#6-混淆矩阵-Confusion-matrix" class="headerlink" title="6.混淆矩阵 Confusion matrix"></a>6.混淆矩阵 Confusion matrix</h3><p><img src="https://uploader.shimo.im/f/okVZ8JqZA6pWxhpS.PNG!thumbnail" alt="img"></p><p>右下角表为混淆矩阵</p><h3 id="7-03-49-决策树-Decision-tree"><a href="#7-03-49-决策树-Decision-tree" class="headerlink" title="7.03:49 决策树 Decision tree"></a>7.03:49 决策树 Decision tree</h3><p><img src="https://uploader.shimo.im/f/7uyq1kVlmi43tbqE.PNG!thumbnail" alt="img"></p><h3 id="8-支持向量机-Support-Vector-Machines"><a href="#8-支持向量机-Support-Vector-Machines" class="headerlink" title="8.支持向量机 Support Vector Machines"></a>8.支持向量机 Support Vector Machines</h3><p>本质上是用任意线段来切分决策空间，不一定是直线。</p><h3 id="9-人工神经网络-Artificial-Neural-Network"><a href="#9-人工神经网络-Artificial-Neural-Network" class="headerlink" title="9.人工神经网络 Artificial Neural Network"></a>9.人工神经网络 Artificial Neural Network</h3><p>不用统计学的算法。模拟人类学习的过程，将数据进行加权求和修正等一系列处理。</p><h3 id="10-深度学习-Deep-learning"><a href="#10-深度学习-Deep-learning" class="headerlink" title="10.深度学习 Deep learning"></a>10.深度学习 Deep learning</h3><p><img src="https://uploader.shimo.im/f/ukyADGkYjWhrb0pL.PNG!thumbnail" alt="img"></p><p>得名原因：有很多的隐藏层</p><ol start="11"><li>弱AI, 窄AI Weak AI, Narrow AI</li></ol><p>只能做指定内容的内容</p><h3 id="12-强AI-Strong-AI"><a href="#12-强AI-Strong-AI" class="headerlink" title="12. 强AI Strong AI"></a>12. 强AI Strong AI</h3><p>通用的，和人一样智能的AI叫做强AI，目前没有人能做到。</p><h3 id="14-强化学习-Reinforcement-Learning"><a href="#14-强化学习-Reinforcement-Learning" class="headerlink" title="14.强化学习 Reinforcement Learning"></a>14.强化学习 Reinforcement Learning</h3><p>学习什么管用，什么不管用，自己发现成功的策略，这叫强化学习。</p><h1 id="第-35-集：计算机视觉"><a href="#第-35-集：计算机视觉" class="headerlink" title="第 35 集：计算机视觉"></a>第 35 集：计算机视觉</h1><h2 id="1-颜色跟踪算法——跟踪一个像素"><a href="#1-颜色跟踪算法——跟踪一个像素" class="headerlink" title="1.颜色跟踪算法——跟踪一个像素"></a>1.颜色跟踪算法——跟踪一个像素</h2><h2 id="2-检测垂直边缘的算法"><a href="#2-检测垂直边缘的算法" class="headerlink" title="2. 检测垂直边缘的算法"></a>2. 检测垂直边缘的算法</h2><p>物体的边缘有多个色素，不适合颜色跟踪算法。要识别边缘，可以判断其两边像素的颜色差异程度</p><h2 id="3-核-过滤器-kernel-or-filter"><a href="#3-核-过滤器-kernel-or-filter" class="headerlink" title="3. 核&#x2F;过滤器 kernel or filter"></a>3. 核&#x2F;过滤器 kernel or filter</h2><p>——用来检测垂直边缘的算法的数学符号，如下绿色的图。</p><p><img src="https://uploader.shimo.im/f/k3LX2p7wLd9R8OlD.PNG!thumbnail" alt="img"></p><p>核或过滤器图示</p><p><img src="https://uploader.shimo.im/f/PsMwdbwYAM4fx6VN.PNG!thumbnail" alt="img"></p><p>算法示例</p><h2 id="4-卷积-convolution"><a href="#4-卷积-convolution" class="headerlink" title="4. 卷积 convolution"></a>4. 卷积 convolution</h2><p>把核应用于像素块</p><h2 id="5-Prewitt-算子-Prewitt-Operators"><a href="#5-Prewitt-算子-Prewitt-Operators" class="headerlink" title="5.Prewitt 算子 Prewitt Operators"></a>5.Prewitt 算子 Prewitt Operators</h2><p>水平和垂直边缘增强的核叫Prewitt 算子 </p><ol start="6"><li>维奥拉·琼斯 人脸检测 Viola-Jones Face Detection</li></ol><h2 id="7-卷积神经网络-Convolutional-Neural-Networks"><a href="#7-卷积神经网络-Convolutional-Neural-Networks" class="headerlink" title="7.卷积神经网络 Convolutional Neural Networks"></a>7.卷积神经网络 Convolutional Neural Networks</h2><p>用一层层不同的核来识别复杂场景，用脸来举例，先识别边缘，然后形状，器官…直至某一层把所有特征堆积在一起，识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息</p><h1 id="第-36-集：自然语言处理-NLP"><a href="#第-36-集：自然语言处理-NLP" class="headerlink" title="第 36 集：自然语言处理 NLP"></a>第 36 集：自然语言处理 NLP</h1><h2 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h2><p>通过<strong>词性 Parts of speech</strong>和<strong>短语结构规则 Phrase structure rules</strong>构建<strong>分析树 Parse tree，</strong>并结合<strong>语言模型 Language Model</strong>来实现<strong>语音识别 Speech recognition</strong></p><h2 id="2-实现原理："><a href="#2-实现原理：" class="headerlink" title="2.实现原理："></a>2.实现原理：</h2><p><strong>快速傅立叶变换 Fast Fourier Transform，</strong>把波形转换成频率 </p><h2 id="3-音素-Phonemes"><a href="#3-音素-Phonemes" class="headerlink" title="3. 音素 Phonemes"></a>3. 音素 Phonemes</h2><p>构成单词的声音片段</p><h2 id="4-语音合成-Speech-Synthesis"><a href="#4-语音合成-Speech-Synthesis" class="headerlink" title="4.语音合成 Speech Synthesis"></a>4.语音合成 Speech Synthesis</h2><h1 id="第-37-集：机器人"><a href="#第-37-集：机器人" class="headerlink" title="第 37 集：机器人"></a>第 37 集：机器人</h1><h2 id="1-机器人发展中的例子"><a href="#1-机器人发展中的例子" class="headerlink" title="1.机器人发展中的例子"></a>1.机器人发展中的例子</h2><p>02:08 法国吃饭鸭 - Digesting Duck, Canard Digerateur</p><p>02:23 土耳其行棋傀儡, 下国际象棋(假的，有人控制)</p><p>02:43 第一台计算机控制的机器出现在1940年代晚期，叫数控机器, Computer Numerical Control(CNC)</p><p>03:32 1960年 Unimate，第一个商业贩卖的 可编程工业机器人</p><h2 id="2-机器人控制的回路"><a href="#2-机器人控制的回路" class="headerlink" title="2.机器人控制的回路"></a>2.机器人控制的回路</h2><p>04:08 负反馈回路 negative feedback loop</p><p>05:17 比例-积分-导数控制器 Proportional–Integral–Derivative controller <strong>PID 控制器</strong></p><p> 通过控制三个值，比例值——实际值和理想值差多少，积分值——一段时间误差的总和，前两者用来修正错误：导数值（微分值）——期望值和实际值之间的变化率，用来避免未来的错误，这也叫预期控制，来控制进程。</p><h2 id="3-机器人三定律-Three-Laws-of-Robotics"><a href="#3-机器人三定律-Three-Laws-of-Robotics" class="headerlink" title="3. 机器人三定律 Three Laws of Robotics"></a>3. 机器人三定律 Three Laws of Robotics</h2><p>——让机器人不要伤害人类</p><h1 id="第38课-计算机心理学"><a href="#第38课-计算机心理学" class="headerlink" title="第38课 计算机心理学"></a>第38课 计算机心理学</h1><h2 id="0、计算机中用到的心理学原理"><a href="#0、计算机中用到的心理学原理" class="headerlink" title="0、计算机中用到的心理学原理"></a>0、计算机中用到的心理学原理</h2><p>社会心理学 认知心理学 行为心理学 感知信息学</p><h2 id="1、易用度"><a href="#1、易用度" class="headerlink" title="1、易用度"></a>1、易用度</h2><p>指人造物体，比如软件，达到目的的效率有多高</p><h2 id="2、颜色强度排序和颜色排序"><a href="#2、颜色强度排序和颜色排序" class="headerlink" title="2、颜色强度排序和颜色排序"></a>2、颜色强度排序和颜色排序</h2><p>人类擅长给颜色强度排序，所以颜色强度很适合现实连续值；而人类不擅长给颜色排序，所以如果数据没有顺序，用不同颜色就很合适，如分类数据。</p><h2 id="3、分组更好记"><a href="#3、分组更好记" class="headerlink" title="3、分组更好记"></a>3、分组更好记</h2><p>信息分块会更好记。分块是指把信息分成更小，更有意义的块，如电话号码分块，界面设计分块。</p><h2 id="4、直观功能"><a href="#4、直观功能" class="headerlink" title="4、直观功能"></a>4、直观功能</h2><p>直观功能为如何操作物体提供线索，如平板用于推，旋钮用来转，直观功能做得好，用户只需要看一眼就知道怎么搞，而不需要其他东西来说明。ex.门把手让人想拉开门，但如果门需要推开，那这就是个不好的直观功能，不如直接采用平板门来的好。</p><h2 id="5、认出VS回想"><a href="#5、认出VS回想" class="headerlink" title="5、认出VS回想"></a>5、认出VS回想</h2><p>和直观功能相关的一个心理学概念是认出和回想，这就是选择题比填空题简单的原因。一般来说，用感觉触发记忆会容易得多，比如文字、图片和声音，所以我们用图标表示功能，如垃圾桶表示回收站。但是，让所有菜单选项好找好记，有时候意味着用的时候会慢一些。这与另一个心理学概念冲突：”专业知识”，当你用界面熟悉之后，速度会更快一些，所以 好的界面应该提供多种方法来实现目标，一个好例子是复制粘贴，可以在”编辑”的下拉菜单中找到，也可以用快捷键，两者都不耽误，鱼与熊掌兼得。</p><h2 id="6、让机器有一定的情商以及Facebook的研究"><a href="#6、让机器有一定的情商以及Facebook的研究" class="headerlink" title="6、让机器有一定的情商以及Facebook的研究"></a>6、让机器有一定的情商以及Facebook的研究</h2><p>我们也希望电脑能有一点情商，能根据用户的状态做出合适地反应，让使用电脑更加愉快。因为情绪会影响日常活动，比如学习，沟通和决策，情感系统会用传感器，录声音，录像（你的脸）以及生物指标，比如出汗和心率，得到的数据和计算模型结合使用，模型会估算用户的情绪，给最好的回应用户。</p><h2 id="7、用软件修正注视位"><a href="#7、用软件修正注视位" class="headerlink" title="7、用软件修正注视位"></a>7、用软件修正注视位</h2><p>心理学研究也表明，如果想说服，讲课，或引起注意 ，眼神注视非常重要。为此，研究人员开发了计算机视觉和图形软件  来纠正头部和眼睛，看视频的人会觉得对方在直视他们</p><h2 id="8、把机器人做得像人"><a href="#8、把机器人做得像人" class="headerlink" title="8、把机器人做得像人"></a>8、把机器人做得像人</h2><p>人也喜欢像人的机器人。人机交互，简称HRI，是一个研究人类和计算机交互的领域。</p><p><img src="https://uploader.shimo.im/f/j4Yisrm3WQ3oxnYS.jpg?sm_xform=image/crop,x_0,y_143,w_1440,h_795/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p>​                                                                  恐怖谷原理</p><h2 id="9、开放性问题"><a href="#9、开放性问题" class="headerlink" title="9、开放性问题"></a>9、开放性问题</h2><p>计算机该不该对人类说谎等</p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><h1 id="第-39-集：教育科技"><a href="#第-39-集：教育科技" class="headerlink" title="第 39 集：教育科技"></a>第 39 集：教育科技</h1><h2 id="1-通过调速，暂停等技巧，加强学习效率"><a href="#1-通过调速，暂停等技巧，加强学习效率" class="headerlink" title="1. 通过调速，暂停等技巧，加强学习效率"></a>1. 通过调速，暂停等技巧，加强学习效率</h2><h2 id="2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC"><a href="#2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC" class="headerlink" title="2.大型开放式在线课程 - Massive Open Online Courses (MOOC)"></a>2.大型开放式在线课程 - Massive Open Online Courses (MOOC)</h2><h2 id="3-智能辅导系统-Intelligent-Tutoring-Systems"><a href="#3-智能辅导系统-Intelligent-Tutoring-Systems" class="headerlink" title="3.智能辅导系统 - Intelligent Tutoring Systems"></a>3.智能辅导系统 - Intelligent Tutoring Systems</h2><h2 id="4-判断规则-Production-rule"><a href="#4-判断规则-Production-rule" class="headerlink" title="4.判断规则 - Production rule"></a>4.判断规则 - Production rule</h2><h2 id="5-域模型-Domain-Model"><a href="#5-域模型-Domain-Model" class="headerlink" title="5.域模型 - Domain Model"></a>5.域模型 - Domain Model</h2><p>判断规则和选择算法，组合在一起成为域模型</p><h2 id="6-贝叶斯知识追踪-Bayesian-knowledge-tracing"><a href="#6-贝叶斯知识追踪-Bayesian-knowledge-tracing" class="headerlink" title="6.贝叶斯知识追踪 Bayesian knowledge tracing"></a>6.贝叶斯知识追踪 Bayesian knowledge tracing</h2><p>把学生的知识掌握当成隐藏变量，根据学生答题的正确度，更新学生掌握程度的估算值。具体而言，贝叶斯知识追踪有一组方程，会用这四个概率，更新学生模型，评估其掌握程度。</p><p>学生已经学会的概率</p><p>瞎猜的概率</p><p>失误的概率</p><p>做题过程中学会的概率</p><h2 id="7-自适应性程序"><a href="#7-自适应性程序" class="headerlink" title="7.自适应性程序"></a>7.自适应性程序</h2><p>一种算法，选择适合学生的问题，让学生学。</p><h2 id="8-教育数据挖掘-Educational-Data-Mining"><a href="#8-教育数据挖掘-Educational-Data-Mining" class="headerlink" title="8. 教育数据挖掘 Educational Data Mining"></a>8. 教育数据挖掘 Educational Data Mining</h2><p>看学生答题时停顿的时间，观察学生停顿和加速视频的时间段，看论坛问题，来评估学生的程度。</p><h1 id="第-40-集：奇点，天网，计算机的未来"><a href="#第-40-集：奇点，天网，计算机的未来" class="headerlink" title="第 40 集：奇点，天网，计算机的未来"></a>第 40 集：奇点，天网，计算机的未来</h1><h2 id="1-普适计算-Ubiquitous-Computing"><a href="#1-普适计算-Ubiquitous-Computing" class="headerlink" title="1. 普适计算 Ubiquitous Computing"></a>1. 普适计算 Ubiquitous Computing</h2><p>计算机融入生活的方方面面</p><h2 id="2-奇点-Singularity"><a href="#2-奇点-Singularity" class="headerlink" title="2.奇点 Singularity"></a>2.奇点 Singularity</h2><p>——智能科技的失控性发展</p><p><img src="https://uploader.shimo.im/f/N9exVZGxSDnTyUm1.PNG?sm_xform=image/crop,x_0,y_58,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h2 id="3-把工作分为4个象限，讨论自动化带来的影响"><a href="#3-把工作分为4个象限，讨论自动化带来的影响" class="headerlink" title="3.把工作分为4个象限，讨论自动化带来的影响"></a>3.把工作分为4个象限，讨论自动化带来的影响</h2><p><img src="https://uploader.shimo.im/f/mVxPWiKkDzby1Vt1.PNG!thumbnail" alt="img"></p><h2 id="4-机器人的存在时间可能长过人类，可以长时间探索宇宙"><a href="#4-机器人的存在时间可能长过人类，可以长时间探索宇宙" class="headerlink" title="4.机器人的存在时间可能长过人类，可以长时间探索宇宙"></a>4.机器人的存在时间可能长过人类，可以长时间探索宇宙</h2><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>整个视频看完后，感觉质量很高。对于计算机的结构了解更加的透彻了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/11/02/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/MySQL/"/>
      <url>/2023/11/02/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?spm_id_from=333.788.videopod.episodes&vd_source=57f624a3047115cf4dc411a666dee694">黑马程序员</a></p><p>书籍：学校教材</p><p>初学的时候只是知道数据库的重要性，但是不知到重要在哪里。到后面学习的东西越来越多，我才发现：不管是用java做管理系统，python做可视化系统，Hadoop做大数据系统都会使用到数据库。所以重新学习是有必要的，顺带把以前的学的东西重新在梳理一遍。</p><h1 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1.数据库概述"></a>1.数据库概述</h1><p>数据库技术：一般包含数据处理和数据管理。</p><h2 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1.数据库的基本概念"></a>1.数据库的基本概念</h2><h3 id="1-信息与数据库"><a href="#1-信息与数据库" class="headerlink" title="1.信息与数据库"></a>1.信息与数据库</h3><h4 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a>1.数据</h4><p>数据：是描述事物的符号记录，是数据库中存储的基本对象。（广义上说：文字，图形，图像，声音，视频等都属与数据的范畴。）</p><h4 id="2-信息"><a href="#2-信息" class="headerlink" title="2.信息"></a>2.信息</h4><ol><li>信息：是现实世界事物的存在方式或运动状态的反映。</li><li>信息：是一种已经被加工为特定形式的数据。</li><li>信息的主要特征是：<ul><li>信息的传递需要物质载体，信息的获取和传递要消费能量；</li><li>信息可以感知；信息可以存储、压缩、加工、传递、共享、扩散、再生和增值；</li><li>而数据是信息的载体和具体表现形式，信息不随数据形式的变化而变化。</li></ul></li></ol><h4 id="3-数据与信息的载体联系和区别"><a href="#3-数据与信息的载体联系和区别" class="headerlink" title="3.数据与信息的载体联系和区别"></a>3.数据与信息的载体联系和区别</h4><p>数据是信息的载体，但并非任何数据都能成为信息，只有经过加工处理后，具有新内容的数据才能成为信息。</p><h2 id="2-数据库的相关术语"><a href="#2-数据库的相关术语" class="headerlink" title="2.数据库的相关术语"></a>2.数据库的相关术语</h2><h3 id="1-数据库（DB）"><a href="#1-数据库（DB）" class="headerlink" title="1.数据库（DB）"></a>1.数据库（DB）</h3><ol><li>数据库(Database，DB)是长期存储在计算机内、有组织、可共享的大量数据的集合。</li><li>数据库中的数据需要创建数据模型来描述，如网络、层次、关系模型。</li><li>优点：数据库中的数据具有较小的冗余度，较高的数据独立性，易扩展性，可为多个用户所共享。</li></ol><h3 id="2-数据库管理系统-DBMS"><a href="#2-数据库管理系统-DBMS" class="headerlink" title="2.数据库管理系统(DBMS)"></a>2.数据库管理系统(DBMS)</h3><ol><li>数据库管理系统(Database Management System，DBMS)：是维护和管理数据库的软件，是数据库与用户之间的界面。</li><li>功能：<ul><li>数据定义功能</li><li>数据操作功能</li><li>数据库的运行管理功能</li><li>数据库的建立和维护功能</li></ul></li><li><strong>注：</strong>关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样增加了速度并提高了灵活性。</li></ol><h3 id="3-数据库系统（DBS）"><a href="#3-数据库系统（DBS）" class="headerlink" title="3.数据库系统（DBS）"></a>3.数据库系统（DBS）</h3><ol><li>数据库系统（Data Base  System ，简称 DBS ) 是指引入数据库后的计算机应用系统。</li><li>数据库系统通常包括硬件和软件，由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员构成。</li></ol><h3 id="4-包含关系"><a href="#4-包含关系" class="headerlink" title="4.包含关系"></a>4.包含关系</h3><ol><li><p>关系：DB&lt;DBMS&lt;DBS</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/12.MySQL/001.png?raw=true" alt="001.png"></p></li><li><p>数据库系统结构</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/12.MySQL/002.png?raw=true" alt="001.png"></p></li></ol><h2 id="3-数据管理技术的发展阶段"><a href="#3-数据管理技术的发展阶段" class="headerlink" title="3.数据管理技术的发展阶段"></a>3.数据管理技术的发展阶段</h2><h3 id="1-人工管理阶段"><a href="#1-人工管理阶段" class="headerlink" title="1.人工管理阶段"></a>1.人工管理阶段</h3><ol><li>数据和应用程序一一对应，应用程序中的数据无法被其他程序利用。</li><li>程序与程序之间存在大量重复数据，存在着数据冗余。</li><li>数据的独立性很差，数据的类型、结构发生变化，则程序必须相应改变，因而数据的结构性差。</li></ol><h3 id="2-文件系统阶段"><a href="#2-文件系统阶段" class="headerlink" title="2.文件系统阶段"></a>2.文件系统阶段</h3><ol><li>通过文件系统来管理数据，而且数据可长期保存在设备上。</li><li>数据依然是面向某一特定的应用程序；</li><li>数据的共享程度比较低、数据冗余度大；</li><li>整体上看，数据没有结构，但记录内有结构；</li><li>数据的独立性仍然较差，数据的逻辑结构改变必须修改应用程序；</li><li>应用程序自己控制数据。</li></ol><h3 id="3-数据库系统阶段"><a href="#3-数据库系统阶段" class="headerlink" title="3.数据库系统阶段"></a>3.数据库系统阶段</h3><ol><li>数据结构化：是数据库的主要特征之一，是数据库系统与文件系统的本质区别。</li><li>数据的共享性程度高，冗余度小，容易扩充等：数据据不再是面向某个应用程序，而是面向整个系统，因此可以被多个用户、多个应用以多种不同的语言共享使用。</li><li>数据独立性高：数据不再是面向某个应用程序，而是面向整个系统，因此可以被多个用户、多个应用以多种不同的语言共享使用。</li></ol><h2 id="4-数据库的体系结构"><a href="#4-数据库的体系结构" class="headerlink" title="4.数据库的体系结构"></a>4.数据库的体系结构</h2><h3 id="1-数据库的三级模式"><a href="#1-数据库的三级模式" class="headerlink" title="1.数据库的三级模式"></a>1.数据库的三级模式</h3><blockquote><p>DBMS将数据库的体系结构分为三级模式：外模式、模式和内模式。</p></blockquote><ol><li><p>外模式（逻辑结构）</p><p>用户模式或者子模式，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。（一个数据库可以有多个外模式，一个应用程序只有一个外模式）</p></li><li><p>模式</p><p>逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。一个数据库只有一个模式。</p></li><li><p>内模式（物理结构）</p><p>内模式又称为存储模式或者物理模式。一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</p></li></ol><h3 id="2-两级映像"><a href="#2-两级映像" class="headerlink" title="2.两级映像"></a>2.两级映像</h3><blockquote><p>三级模式结构之间差别很大，为了实现这3个抽象级别的联系和转换，DBMS在三级模式结构之间提供了两级映像：外模式&#x2F;模式映像，模式&#x2F;内模式映像.</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/12.MySQL/003.png?raw=true" alt="001.png"></p></blockquote><ol><li>外模式&#x2F;模式：逻辑独立性</li><li>模式&#x2F;内模式：物理独立性</li></ol><h2 id="5-数据模型"><a href="#5-数据模型" class="headerlink" title="5.数据模型"></a>5.数据模型</h2><ol><li><p>模型是现实世界特征的模拟和抽象。</p></li><li><p>数据模型(Data Model)也是一种模型，它是现实世界数据特征的抽象。</p></li><li><p>将事物以数据的形式存储到计算机的流程</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/12.MySQL/004.png?raw=true" alt="001.png"></p></li></ol><blockquote><ul><li>概念模型：使用实体联系模型（E-R模型，即E-R图），与具体的DBMS无关。</li><li>数据模型：机器世界使用的模型，将E-R图转换为某一种数据模型，数据模型与DBMS相关。</li></ul></blockquote><h3 id="1-概念模型与E-R方法"><a href="#1-概念模型与E-R方法" class="headerlink" title="1.概念模型与E-R方法"></a>1.概念模型与E-R方法</h3><ol><li>概念模型：用于信息世界的建模，是现实世界与信息世界的第一层抽象，是数据库设计人员进行数据库设计的有力工具，也是数据库设计人员和用户之间进行交流的语言。</li><li>信息世界中的基本概念<ul><li>实体(Entity)</li><li>属性(Attitude)</li><li>域(Domain)</li><li>码(Key)：也称关键字。用于区别实体中不同个体的一个属性或几个属性的组合。当有多个属性可作为码而选定其中一个称为“主码”。某属性虽非该实体主码，却是另一实体的主码，则称“外部码”或“外码”。</li><li>实体型(Entity Type)</li><li>实体集(Entity Set)</li><li>联系：实体集之间的联系<ul><li>一对一联系(1:1)</li><li>一对多联系(1:n)</li><li>多对多联系(m:n)</li></ul></li></ul></li><li>实体——联系方法(E-R方法)<ul><li>用E-R图来表示现实世界中抽象出实体和实体间联系的数据模型</li><li>实体：矩形框。</li><li>联系：菱形。有些联系，自身也会有某些属性，同实体与属性的连接类似。</li><li>属性：椭圆。</li></ul></li></ol><h3 id="2-数据模型的分类"><a href="#2-数据模型的分类" class="headerlink" title="2.数据模型的分类"></a>2.数据模型的分类</h3><ol><li>数据模型的三个要素：数据结构、数据操作和完整性约束。（精确描述系统的静态特性、动态特性和完整性约束条件）<ul><li>数据结构：是从静态特性描述数据，是研究对象类型的集合。</li><li>数据操作：指可以对数据库中各种对象进行的操作，是操作的集合，包括操作及有关的操作规则，是对系统动态特性的描述。</li><li>约束条件：约束条件是一组完整性规则的集合。完整性规则是给定的数据模型中数据及其联系所具有的制约和依存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</li></ul></li><li>DBMS常用数据模型：层次模型、网状模型、<strong>关系模型</strong>。</li></ol><h3 id="3-关系数据模型"><a href="#3-关系数据模型" class="headerlink" title="3.关系数据模型"></a>3.关系数据模型</h3><ol><li><p>关系数据模型：使用关系(二维表)来表示实体和实体之间联系。</p></li><li><p>关系型数据库：关系型数据模型对应的数据库。</p></li><li><p>关系型数据库管理系统：支持关系数据模型的数据库管理系统。</p></li><li><p>关系数据模型：是由关系数据结构、关系操作的集合和关系完整性约束三部分组成。从用户观点来看，关系模型中逻辑数据结构是一张简单的二维表，由<strong>行</strong>和<strong>列</strong>组成。</p></li><li><p>关系数据模型概念</p><ul><li>关系：一个关系就是一张二维表，每个关系都有一个关系名。例如：学生表就是学生关系。 </li><li>元组（记录）：二维表中的行称为元组，每一行是一个元组，对应一条记录。</li><li>属性（字段）：二维表的列称为属性，又称为字段。</li><li>关系模式：对关系的描述，关系模式一般表示为关系名(属性 1 ，属性 2 ， … ，属性 n )。</li><li>域：表示属性的取值范围。例如，性别属性的域是{男，女}。</li><li>关键字（码）：在关系的属性中，能够唯一标识元组的属性(或属性组合)称为关键字（码）。</li><li>候选关键字（候选码）：候选码可以用来唯一地标识不同的元组的属性或者属性组合。</li><li>主码(主键)：是从候选码中选择一个用来作为主码。</li><li>分量：表示元组中的一个属性值，例如：王芳就是学生王芳的分量。</li><li>外码(外部关键字，外键)：指某个属性不是A表的主码，但是B表的主码，则在A表中这个属性称为外键。</li><li>主属性和非主属性：在一个关系中，包含在任何候选关键字中的各个属性称为主属性；不包含在任一候选码中的属性称为非主属性。</li></ul></li><li><p>关系的性质：</p><ul><li>所有的属性都是原子的</li><li>元组的顺序无关紧要，可任意交换。</li><li>属性的顺序是非排序的，可任意交换。</li><li>同一属性名下的诸属性值（同列）是同类型数据，且来自同一个域。</li><li>关系中没有重复元组，任意元组在关系中都是唯一的。</li><li>属性必须具有不同的属性名，不同的属性可来自同一个域。</li></ul></li></ol><h3 id="4-关系的完整性规则"><a href="#4-关系的完整性规则" class="headerlink" title="4.关系的完整性规则"></a>4.关系的完整性规则</h3><ol><li>实体完整性：元组在主码上<strong>不能相同</strong>或者<strong>不能为空值（NULL）</strong></li><li>参照完整性：外码的取值要么为空，要么取主码表中的取值。</li><li>用户自定义完整性：针对某一具体数据的约束条件，由具体应用环境决定。</li></ol><h2 id="6-关系运算"><a href="#6-关系运算" class="headerlink" title="6.关系运算"></a>6.关系运算</h2><h3 id="1-传统的集合运算"><a href="#1-传统的集合运算" class="headerlink" title="1.传统的集合运算"></a>1.传统的集合运算</h3><ol><li>并(Union)：关系R和S的并为属于R或属于S的所有元组组成的集合，删去重复的元组，其结果仍为n元关系。</li><li>并(Union)：关系R和S的交为：由既属于R又属于S的元组组成，其结果仍为n元关系。</li><li>差(Difference)：关系R和S的差为：由属于R而不属于S的所有元组组成，其结果仍为n元关系。</li><li>笛卡尔乘积(Cartesian Product)：设关系R和S分别是n元和m元关系，若R有k1个元组，S有k2个元组，则关系R和S的笛卡尔积有k1×k2个元组。</li></ol><h3 id="2-专门的关系运算"><a href="#2-专门的关系运算" class="headerlink" title="2.专门的关系运算"></a>2.专门的关系运算</h3><ol><li><p>选择(Selection)：选择又称为限制，它是在关系中满足给定条件的元组的子集。</p></li><li><p>投影（Projection）：关系R上的投影是从R中选择出若干属性列组成新的关系。</p></li><li><p>连接(Join)</p><ul><li>内连接：是只将满足连接条件的记录保存在结果中。</li><li>外连接(OUTER JOIN)：除了将满足条件的元组保存在结果中，还把舍弃的元组也保存在结果关系中，而在其他属性上填空值(Null)。<ul><li>左外连接(LEFT OUTER JOIN或LEFT JOIN)：只把左边关系R中要舍弃的元组保留</li><li>右外连接(RIGHT OUTER JOIN或RIGHT JOIN)：只把右边关系S中要舍弃的元组保留</li><li>完全外连接（FULL JOIN）：左边关系和右边关系中不满足连接条件的元组也放在结果</li></ul></li></ul></li><li><p>连接运算常用的连接：条件连接、等值连接和自然连接。</p><ul><li>条件连接：当要满足某个给定条件时，称为条件连接。</li><li>等值连接：给定条件为相等的连接。</li><li>自然连接：若关系R和S具有相同的属性组B，则连接条件是两个关系R和S中所对应的同名属性组B中的所有属性的值必须对应相等。</li></ul></li></ol><h1 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2.数据库设计"></a>2.数据库设计</h1><h2 id="1-关系数据库的规范化"><a href="#1-关系数据库的规范化" class="headerlink" title="1.关系数据库的规范化"></a>1.关系数据库的规范化</h2><ol><li><p>未进行规范设计：</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常</li><li>删除异常</li></ul></li><li><p>范式</p><ul><li><p>第一范式(1NF)</p></li><li><p>第二范式(2NF)</p></li><li><p>第三范式(3NF)</p></li><li><p>BC范式(3.5NF)</p></li></ul></li></ol><h2 id="2-数据库设计步骤"><a href="#2-数据库设计步骤" class="headerlink" title="2.数据库设计步骤"></a>2.数据库设计步骤</h2><ol><li>需求分析：分析用户的需求。</li><li>概念结构设计：对需求说明书提供的所有数据和处理要求进行抽象与综合处理，按一定的方法构造反映用户环境的数据及其相互联系的概念模型。（与DBMS无关，实现E-R图）</li><li>逻辑结构设计：为某个特定的DBMS所接受的逻辑模型所表示的概念模式，同时将概念设计阶段得到的应用视图转换成特定DBMS下的应用视图。（关系模式）</li><li>数据库物理设计：把逻辑设计阶段得到的逻辑数据库在物理上加以实现。（表结构设计）</li><li>数据库实施：数据的载入与应用程序的编码和调试。</li><li>数据库运行和维护<ul><li>数据库的转储和恢复。</li><li>数据库的安全性、完整性控制。</li><li>数据库性能的监督、分析和改造。</li><li>数据库的重组织与重构造。</li></ul></li></ol><h1 id="3-MySQL安装"><a href="#3-MySQL安装" class="headerlink" title="3.MySQL安装"></a>3.MySQL安装</h1><h2 id="1-MySQL下载，安装，卸载"><a href="#1-MySQL下载，安装，卸载" class="headerlink" title="1.MySQL下载，安装，卸载"></a>1.MySQL下载，安装，卸载</h2><ol><li><a href="https://www.mysql.com/">MySQL官网</a></li><li><a href="https://dev.mysql.com/downloads/installer/">下载地址</a></li><li><a href="https://www.bilibili.com/video/BV1jcabemEr7/?spm_id_from=333.337.search-card.all.click&vd_source=57f624a3047115cf4dc411a666dee694">安装视频</a></li><li><a href="https://www.bilibili.com/video/BV1Jh4y1u7PX/?spm_id_from=333.337.search-card.all.click&vd_source=57f624a3047115cf4dc411a666dee694">卸载视频</a></li></ol><h2 id="2-MySQL的使用与介绍"><a href="#2-MySQL的使用与介绍" class="headerlink" title="2.MySQL的使用与介绍"></a>2.MySQL的使用与介绍</h2><ol><li><p>启动和关闭MySQL服务（管理员运行CMD）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">net start mysql80</span><br><span class="line"># 关闭服务</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL数据库服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 登录</span><br><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p用户登录</span><br><span class="line">mysql -u root -proot</span><br><span class="line">/*</span><br><span class="line">    -h : MySQL服务所在的主机IP </span><br><span class="line">    -P : MySQL服务端口号， 默认3306 </span><br><span class="line">    -u : MySQL数据库用户名 </span><br><span class="line">    -p : MySQL数据库用户名对应的密码 </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 退出（任选其一）</span><br><span class="line">exit</span><br><span class="line">quit</span><br><span class="line">\q</span><br></pre></td></tr></table></figure></li><li><p>MySQL的相关命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看帮助信息</span><br><span class="line">help</span><br><span class="line">\h</span><br><span class="line">?</span><br><span class="line"></span><br><span class="line"># 查看MySQL支持的字符集</span><br><span class="line">show character set;</span><br></pre></td></tr></table></figure></li><li><p>SQL语法</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1). SQL语句可以单行或多行书写，以分号结尾。 </span><br><span class="line">2). SQL语句可以使用空格/缩进来增强语句的可读性。 </span><br><span class="line">3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </span><br><span class="line">4). 注释： </span><br><span class="line">    单行注释：-- 注释内容 或 # 注释内容 </span><br><span class="line">    多行注释：/* 注释内容 */ </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>SQL语句的分类：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DDL:数据定义语言，用来定义数据库对象(数据库,表,字段) </span><br><span class="line"></span><br><span class="line">DML:数据操作语言，用来对数据库表中的数据进行增删改 </span><br><span class="line"></span><br><span class="line">DQL:数据查询语言，用来查询数据库中表的记录 </span><br><span class="line"></span><br><span class="line">DCL:数据控制语言，用来创建数据库用户、控制数据库的 访问权限</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-DDL语句"><a href="#4-DDL语句" class="headerlink" title="4.DDL语句"></a>4.DDL语句</h1><h2 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h2><ol><li><p>系统数据库</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">information_schema：主要存储系统中一些数据库对象信息，包括用户信息，字符集信息和分区信息。</span><br><span class="line">mysql ：主要存储账户信息、权限信息、和时区信息等。</span><br><span class="line">performance_schema：主要用于收集数据库服务器性能参数。</span><br><span class="line">sys：该库通过视图的形式把information_schema和performance_schema结合起来，查询出更容易理解的数据，帮助DBA快速获取数据库系统的各种数据库对象信息，使DBA和开发人员能够快速定位性能瓶颈。</span><br></pre></td></tr></table></figure></li><li><p>数据库操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有数据库 </span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 查询当前数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">create database [if not exists] 数据库名 [ default charset 字符集 ] [ collate 排序规则 ]; </span><br><span class="line">    /*</span><br><span class="line">    create database if not extists itcast;（不存在, 则创建该数据库，存在，则不创建。）</span><br><span class="line">    create database itheima default charset utf8mb4; 创建一个itheima数据库，并且指定字符集</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line"># 删除数据库</span><br><span class="line">drop database [ if exists ] 数据库名 ;</span><br><span class="line"></span><br><span class="line"># 切换数据库</span><br><span class="line">use 数据库名 ; </span><br><span class="line"></span><br><span class="line"># 修改数据库</span><br><span class="line">alter database 数据库名 &#123;[default]character set &lt;字符集&gt;|[default] collate &lt;校对规则&gt;&#125;；</span><br><span class="line">    /*</span><br><span class="line">alter database jwgl</span><br><span class="line">    Default character set gb123</span><br><span class="line">    Default collate gb2312_chinese_ci;</span><br><span class="line">    */</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-表操作"><a href="#2-表操作" class="headerlink" title="2.表操作"></a>2.表操作</h2><ol><li><p>数据类型</p><ul><li><p>数值类型</p><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1byte</td><td align="center">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2byte</td><td align="center">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3byte</td><td align="center">大整数值</td></tr><tr><td align="center">INT&#x2F;INTEGER</td><td align="center">4byte</td><td align="center">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8byte</td><td align="center">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4byte</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8byte</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center">M+2byte</td><td align="center">小数值(精确定点数)</td></tr></tbody></table></li><li><p>字符串类型</p><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">CHAR(M)</td><td align="center">0-255 bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">VARCHAR(M)</td><td align="center">0-65535 bytes</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYBLOB(M)</td><td align="center">0-255 bytes</td><td align="center">不超过255个字符的二进制数据</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255 bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB(M)</td><td align="center">0-65535 bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65535 bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB(M)</td><td align="center">0-16777215 bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16777215 bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB(M)</td><td align="center">0-4294967295 bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4294967295 bytes</td><td align="center">极大文本数据</td></tr></tbody></table></li><li><p>日期时间类型</p><table><thead><tr><th align="center">类型</th><th>大小</th><th>格式</th><th>范围</th><th>描述</th></tr></thead><tbody><tr><td align="center">DATE</td><td>3bytes</td><td>YYYY-MM-DD</td><td>1000-01-01 至 9999-12-31</td><td>日期值</td></tr><tr><td align="center">TIME</td><td>3bytes</td><td>HH:MM:SS</td><td>-838:59:59 至 838:59:59</td><td>时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td>1bytes</td><td>YYYY</td><td>1901 至 2155</td><td>年份值</td></tr><tr><td align="center">DATETIME</td><td>8bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td>4bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></li></ul></li><li><p>表管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前数据库所有表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"># 查看指定表结构</span><br><span class="line">describe/desc 表名;</span><br><span class="line"></span><br><span class="line"># 查询指定表的建表语句</span><br><span class="line">show create table 表名 ;</span><br><span class="line"></span><br><span class="line"># 创建表结构（注：最后没逗号）</span><br><span class="line">create table 表名( </span><br><span class="line">字段1 类型 [ comment 字段1注释 ], </span><br><span class="line">字段2 类型 [ comment 字段2注释 ], </span><br><span class="line">...... </span><br><span class="line">字段n 类型 [ comment 字段n注释 ] </span><br><span class="line">) [ comment 表注释 ] ;</span><br><span class="line"></span><br><span class="line"># 复制数据库表</span><br><span class="line">create table 表名1 like 表名2/select语句; </span><br><span class="line">    /*</span><br><span class="line">    like:表示只复制表结构</span><br><span class="line">        create table stu like xsjbxxb;</span><br><span class="line">    select语句:将查询结果添加到要创建的表中（不能复制主键，外键）</span><br><span class="line">        create table stu select * from xsjbxxb;</span><br><span class="line">    */</span><br></pre></td></tr></table></figure></li><li><p>表操作（修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 添加字段</span><br><span class="line">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br><span class="line"># 修改数据类型</span><br><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br><span class="line"># 修改字段名和字段类型</span><br><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新类型(长度) [COMMENT 注释 ][ 约束 ];</span><br><span class="line"># 删除字段</span><br><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br><span class="line"># 修改表名</span><br><span class="line">ALTER TABLE 表名 RENAME [ TO ] 新表名;</span><br><span class="line"># 删除表</span><br><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="line"># 删除指定表, 并重新创建表</span><br><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-DML语句"><a href="#5-DML语句" class="headerlink" title="5.DML语句"></a>5.DML语句</h1><p>对数据库中表的数据记录进行增、删、改操作。</p><ol><li><p>添加数据（INSERT）</p><ul><li><p>单条数据添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：给指定字段添加数据 </span><br><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class="line"></span><br><span class="line"># 方式二：给全部字段添加数据</span><br><span class="line">INSERT INTO 表名 VALUES (值1, 值2, ...);</span><br></pre></td></tr></table></figure></li><li><p>多条数据添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：给指定字段添加数据 </span><br><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值 </span><br><span class="line">1, 值2, ...) ; </span><br><span class="line"></span><br><span class="line"># 方式二：给全部字段添加数据</span><br><span class="line">INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...) ; </span><br><span class="line">    /*</span><br><span class="line">        字符串和日期型数据应该包含在引号中。 </span><br><span class="line">        插入数据大小，应该在字段的规定范围内.</span><br><span class="line">    */</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将其他的表数据插入表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名1（字段列表，逗号隔开）</span><br><span class="line">Select 表名2字段列表 from 表名2; </span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改数据（UPDATE）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ][limit 子句] ; </span><br><span class="line">    /*</span><br><span class="line">修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p>删除数据（DELETE）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-DQL语句"><a href="#6-DQL语句" class="headerlink" title="6.DQL语句"></a>6.DQL语句</h1><ul><li><p>用来查询数据库中表的记录。</p></li><li><p>查询的结果集一般不被存储，每次查询都会从数据库表中提取数据。</p></li><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br><span class="line"></span><br><span class="line">执行顺序：</span><br><span class="line">FROM &gt; WHERE &gt; ORDER BY &gt; HAVING &gt; SELECT &gt; ORDER BY &gt; LIMIT</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">SELECT 子句：表示从表中查询指定的列。</span><br><span class="line">FROM子句：表示查询的数据源，可以是表或视图。</span><br><span class="line">WHERE子句：用于指定查询筛选条件。</span><br><span class="line">GROUP BY子句：用于将查询结果按指定的列进行分组；其中HAVING为可选参数，用于对分组后的结果集进行筛选。</span><br><span class="line">ORDER BY子句：用于对查询结果集按指定的列进行排序。</span><br><span class="line">LIMIT子句：用于限制查询结果集的行数。参数OFFSET为偏移量，当OFFSET值为0时，表示从查询结果的第1条记录开始，如果OFFSET为1时，表示查询结果从第2条记录开始。</span><br><span class="line">INTO子句：用于保存查询结果，其中INTO OUTFILE用于将查询结果全部保存到文件中，INTO DUMPFILE只保存一行，INTO var_name用于将查询结果保存到变量var_name。</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-单表查询"><a href="#1-单表查询" class="headerlink" title="1.单表查询"></a>1.单表查询</h2><h3 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1.基础查询"></a>1.基础查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 查询多个字段</span><br><span class="line">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class="line"></span><br><span class="line"># 查询所有字段</span><br><span class="line">SELECT * FROM 表名 ;</span><br><span class="line"></span><br><span class="line"># 字段别名（AS可以省略）</span><br><span class="line">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class="line">/*</span><br><span class="line">as 可以省略</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 表别名</span><br><span class="line">Select 表别名.字段 ... from 表名 [as] 表别名；</span><br><span class="line">/*</span><br><span class="line">别名中有空格时，用引号引起来(其他无空格则不用引号)</span><br><span class="line">表取别名之后只能使用表别名</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 查询所有/去掉重复记录</span><br><span class="line">Select all/distinct/distinctrow  字段名 from 表名;</span><br><span class="line"></span><br><span class="line"># 表达式查询</span><br><span class="line">SELECT 表达式 ... FROM 表名;</span><br><span class="line">-- eg:select xm,year(now())-year(csrq) from xsjbxxb;</span><br></pre></td></tr></table></figure><h3 id="2-条件查询（where）"><a href="#2-条件查询（where）" class="headerlink" title="2.条件查询（where）"></a>2.条件查询（where）</h3><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表 ; </span><br></pre></td></tr></table></figure></li><li><p>条件</p><p>注：使用时间类型的数据时要用引号引起来；</p><table><thead><tr><th align="center">比较运算符</th><th>功能</th></tr></thead><tbody><tr><td align="center">&gt;&#x3D;</td><td>大于等于</td></tr><tr><td align="center">&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td align="center">[not] IN(元素1，2)</td><td>在in之后的列表中的值，多选一 （不允许在值列表中出现NUll值数据）(or、||）</td></tr><tr><td align="center">BETWEEN … AND …</td><td>在某个范围之内(闭区间**)** (and、&amp;&amp;)</td></tr><tr><td align="center">LIKE</td><td>占位符模糊查询(通配符_匹配单个字符**,%**匹配任意个字符0个或多个),查询结果为空为empty set。注：在MySQL默认的转义字符为“\”，如果使用其他转义字符时，需要加关键字ESCAPE。</td></tr><tr><td align="center">IS [not] NULL</td><td>判断字段的值是否是NULL (返回true或者false)。注：一个字段值是空值或者不是空值，要表示为“is null“或“is not null”。不能表示为：“&#x3D;null”或“&lt;&gt;null”。</td></tr><tr><td align="center">NOT 或 !</td><td>非 , 不是</td></tr></tbody></table></li></ol><h3 id="3-聚合函数"><a href="#3-聚合函数" class="headerlink" title="3.聚合函数"></a>3.聚合函数</h3><blockquote><p>将一列数据作为一个整体，进行纵向计算 。</p><p>注意 : NULL值是不参与所有聚合函数运算的。</p></blockquote><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 聚合函数(字段列表) FROM 表名 ;</span><br></pre></td></tr></table></figure></li><li><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count ([all&#x2F;distinct] 表达式)</td><td>统计数量(*返回所有行得数目，包含null所在的行)</td></tr><tr><td>max ([all&#x2F;distinct] 表达式)</td><td>最大值</td></tr><tr><td>min([all&#x2F;distinct] 表达式)</td><td>最小值</td></tr><tr><td>avg([all&#x2F;distinct] 表达式)</td><td>平均值</td></tr><tr><td>sum([all&#x2F;distinct] 表达式)</td><td>求和</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Count(distinct xb)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-分组查询"><a href="#4-分组查询" class="headerlink" title="4.分组查询"></a>4.分组查询</h3><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [with rollup][HAVING 分组后过滤条件];</span><br><span class="line">/*</span><br><span class="line">1.注：group by 1 数字1代表查询表中的次序</span><br><span class="line">2.with rollup:表示对分组的数据进行分类汇总</span><br><span class="line">3.HAVING：对分组后的结果集进行筛选</span><br><span class="line">    4.where与having区别：</span><br><span class="line">    （1）where是从数据表中进行数据筛选，而having是根据条件对已分组的数据进行操作。</span><br><span class="line">    （2）Having后可以使用聚合函数，且只能和group by一起使用，where则不行。</span><br><span class="line">    5.执行顺序：where，group by，聚合函数，having</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-排序查询"><a href="#5-排序查询" class="headerlink" title="5.排序查询"></a>5.排序查询</h3><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ; </span><br><span class="line">/*</span><br><span class="line">1.查询的结果进行升序(asc)和降序排列(desc),默认为升序</span><br><span class="line">2.如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ，也可使用列表中的次序来进行查询</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6.分页查询"></a>6.分页查询</h3><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT [OFFSET] 起始索引, 查询记录数; </span><br><span class="line">/*</span><br><span class="line">1.起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</span><br><span class="line">2.分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</span><br><span class="line">3.如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-多表查询"><a href="#2-多表查询" class="headerlink" title="2.多表查询"></a>2.多表查询</h2><blockquote><ol><li>各个表结构之间也存在着各种联系，基本上分为三种：</li></ol><ul><li>一对多（在多的一方建立外键，指向一的一方的主键）</li><li>多对多（建立第三张中间表，中间表至少包含两个外键，分别关联两方主键）</li><li>一对一（在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)）</li></ul><ol start="2"><li>多表查询是通过各个表间的相关列，从两个或多个表中检索数据。</li><li>需要指定连接条件，即指定每个表中要用于联接的列。典型的连接条件是在一个表中指定外键，在另一个表中指定与其关联的键。</li></ol></blockquote><h3 id="1-连接查询"><a href="#1-连接查询" class="headerlink" title="1.连接查询"></a>1.连接查询</h3><h4 id="1-内连接：A-B（inner-join）"><a href="#1-内连接：A-B（inner-join）" class="headerlink" title="1.内连接：A&amp;&amp;B（inner join）"></a>1.内连接：A&amp;&amp;B（inner join）</h4><blockquote><ul><li>两表连接时，连接的字段名称可以不同，但必须具有相同的数据类型、长度、精度；连接字段一般是数据表的主键和外键；</li></ul></blockquote><ol><li><p>隐式内连接</p><ul><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 , 表2 WHERE 条件(表1.字段名 比较运算符 表2.字段名);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显式内连接</p><ul><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件(表1.字段名 比较运算符 表2.字段名)；</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><ol><li>输出的字段时表1，表2中都有的字段，则必须在输出的字段名前加上表名区分。即’表名.字段名’。</li><li>如果连接到的表中有列名相同，并且连接的条件就是列名相等，那么on条件也可以换成using子句。即’using(两表中相同的列名)’。</li></ol></blockquote><h4 id="2-外连接（left-join-right-join）："><a href="#2-外连接（left-join-right-join）：" class="headerlink" title="2.外连接（left join&#x2F;right join）："></a>2.外连接（left join&#x2F;right join）：</h4><ol><li><p>左外连接：除包括满足条件的行外，还包括不满足条件的记录（此时右表相应列的值为null）</p><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ... ; </span><br></pre></td></tr></table></figure></li></ul></li><li><p>右外连接：</p><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ... ;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="3-交叉连接（cross-join）"><a href="#3-交叉连接（cross-join）" class="headerlink" title="3.交叉连接（cross join）"></a>3.交叉连接（cross join）</h4><p>在没有where子句的情况下，为笛卡尔积；</p><ol><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select 字段列表 from 表1 cross join 表2;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-自连接（可以是内连接，也可以是外连接）"><a href="#4-自连接（可以是内连接，也可以是外连接）" class="headerlink" title="4.自连接（可以是内连接，也可以是外连接）"></a>4.自连接（可以是内连接，也可以是外连接）</h4><blockquote><ol><li>就是自己连接自己，可以是内连接查询，也可以是外连接查询</li><li>在自连接查询中，必须要为表起别名，不然不知道所指定的条件、返回的字段，到底是哪一张表的字段。</li></ol></blockquote><ol><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ... ; </span><br></pre></td></tr></table></figure></li></ol><h4 id="5-联合查询"><a href="#5-联合查询" class="headerlink" title="5.联合查询"></a>5.联合查询</h4><blockquote><ol><li>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</li><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。 <ul><li>union all ：会将全部的数据直接合并在一起.</li><li>union ：会对合并之后的数据去重。</li></ul></li></ol></blockquote><ol><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ... </span><br><span class="line">UNION [ ALL ] </span><br><span class="line">SELECT 字段列表 FROM 表B ....; </span><br></pre></td></tr></table></figure></li></ol><h3 id="2-子查询"><a href="#2-子查询" class="headerlink" title="2.子查询"></a>2.子查询</h3><blockquote><ol><li>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</li><li>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个。</li><li>子查询结果分类：</li></ol><ul><li>A. 标量子查询（子查询结果为单个值）</li><li>B. 列子查询(子查询结果为一列) </li><li>C. 行子查询(子查询结果为一行) </li><li>D. 表子查询(子查询结果为多行多列)</li></ul><ol start="4"><li>子查询位置分类：</li></ol><ul><li>A. WHERE之后 </li><li>B. FROM之后 </li><li>C. SELECT之后</li></ul></blockquote><h4 id="1-标量子查询"><a href="#1-标量子查询" class="headerlink" title="1.标量子查询"></a>1.标量子查询</h4><blockquote><ol><li>子查询返回的结果是单个值</li><li>比较操作符：&#x3D; &lt;&gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</li></ol></blockquote><ol><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select xh,cj from xsxkb where kcdm = (select kcdm from kcdmb where kcmc = ‘微机原理与应用’);</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-列子查询"><a href="#2-列子查询" class="headerlink" title="2.列子查询"></a>2.列子查询</h4><blockquote><ol><li>子查询返回的结果是一列（可以是多行）</li><li>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</li></ol></blockquote><ol><li><p>操作符</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表中，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table></li><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select xh,xm from xsjbxxb where xh in(Select xh from xsxkb where cj &gt;90);</span><br><span class="line"></span><br><span class="line">Select xm from xsjbxxb where xh = some(Select xh from xsxkb where cj &lt;60);</span><br><span class="line"></span><br><span class="line">Select xm from xsjbxxb where csrq &lt;= all(Select csrq from xsjbxxb);</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-行子查询"><a href="#3-行子查询" class="headerlink" title="3.行子查询"></a>3.行子查询</h4><blockquote><ol><li>子查询返回的结果是一行（可以是多列）。</li><li>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</li></ol></blockquote><ol><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (salary,managerid) = (select salary, managerid from emp where name = &#x27;张无忌&#x27;); #子查询为一行，相当于是一个元组；</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-表子查询"><a href="#4-表子查询" class="headerlink" title="4.表子查询"></a>4.表子查询</h4><blockquote><ol><li>子查询返回的结果是多行多列。 </li><li>常用的操作符：IN</li></ol></blockquote><ol><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (job,salary) in ( select job, salary from emp where name = &#x27;鹿杖客&#x27; or name = &#x27;宋远桥&#x27; );</span><br><span class="line"></span><br><span class="line">select e.*, d.* from (select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;) e left join dept d on e.dept_id = d.id ; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="5-exists子查询"><a href="#5-exists子查询" class="headerlink" title="5.exists子查询"></a>5.exists子查询</h4><blockquote><ol><li>不需要返回任何实际数据，只返回一个逻辑值（内层查询语句查询到满足记录时就返回true，否则为false）。</li><li>当返回值为true时，外层查询语句进行查询，否则不进行查询或者查询不出任何记录。</li></ol></blockquote><ol><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE [NOT] EXISTS (子查询)</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select xm</span><br><span class="line">from xsjbxxb</span><br><span class="line">where exists(select * from xsxkb where xsjbxxb.xh=xsxkb.xh);</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-用正则表达式模糊查询"><a href="#6-用正则表达式模糊查询" class="headerlink" title="6.用正则表达式模糊查询"></a>6.用正则表达式模糊查询</h4><blockquote><ol><li>regexp(不是sql标准的一部分)&#x2F;rlike：用来检索或者替换复合某个模式的文本内容。</li></ol></blockquote><ol><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Where 字段名 [not][regexp/rlike] 表达式</span><br></pre></td></tr></table></figure></li><li><p>匹配指定字符串：当查询多个字符串时，则需要符号“|”隔开，匹配这些字符串中的任意一个即可。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/12.MySQL/005.png?raw=true" alt="001.png"></p></li><li><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询以特定字符或字符串开头的记录</span><br><span class="line">select xh,xm,xb</span><br><span class="line">from xsjbxxb</span><br><span class="line">where xm regexp &#x27;^张&#x27;;</span><br><span class="line"></span><br><span class="line"># 查询以特定字符或字符串结尾的记录</span><br><span class="line">select kcmc</span><br><span class="line">from kcdmb</span><br><span class="line">where kcmc regexp &#x27;技术$&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="7-利用子查询插入，更新，删除数据"><a href="#7-利用子查询插入，更新，删除数据" class="headerlink" title="7.利用子查询插入，更新，删除数据"></a>7.利用子查询插入，更新，删除数据</h4><blockquote><p>就是利用一个嵌套在inster语句、update语句、delete语句的子查询select子查询可同时插入多行数据。</p></blockquote><ol><li><p>利用子查询插入记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Inster语句中的select子查询可用于一个或多个其他其他表或视图的数据添加到表中。使用select子查询可同时插入多行数据。</span><br><span class="line">Create table xs like xsjbxxb;</span><br><span class="line">Insert into xs select * from xsjbxxb where year(csrq) = 2000 ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>利用子查询更新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Update语句中的select子查询可用于一个或多个其他其他表或视图的数据进行更新。使用select子查询可同时更新多行数据。</span><br><span class="line">Update xs set jl = ‘优秀’ where xh in (select xh from xsxkb where cj &gt; 90);</span><br></pre></td></tr></table></figure></li><li><p>利用子查询删除数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在delete语句中利用子查询同样可以删除复合条件的行</span><br><span class="line">Delete from  xs where xh in (select xh from xsxkb where cj &lt; 60);</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-DCL语句"><a href="#7-DCL语句" class="headerlink" title="7.DCL语句"></a>7.DCL语句</h1><blockquote><p>用来管理数据库用户、控制数据库的访问权限。</p></blockquote><h2 id="1-管理用户"><a href="#1-管理用户" class="headerlink" title="1.管理用户"></a>1.管理用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 1.查询用户</span><br><span class="line">select * from mysql.user;</span><br><span class="line">-- Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以远程访问的。User代表的是访问该数据库的用户名。</span><br><span class="line"></span><br><span class="line"># 2.创建用户</span><br><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line"></span><br><span class="line"># 3.修改用户密码</span><br><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br><span class="line"></span><br><span class="line"># 4.删除用户</span><br><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br><span class="line"></span><br><span class="line"># 5.用户自己修改密码</span><br><span class="line">alter user user() identified by &#x27;111111&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>在MySQL中需要通过<em>用户名@主机名</em>的方式，来唯一标识一个用户。</li><li>主机名可以使用 % 通配。（代表所有）</li></ol></li></ul><h2 id="2-权限控制"><a href="#2-权限控制" class="headerlink" title="2.权限控制"></a>2.权限控制</h2><ol><li><p>权限：<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">官方文档</a></p><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL, ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td></tr><tr><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1.查询权限</span><br><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br><span class="line"></span><br><span class="line"># 2.授予权限</span><br><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line"># 3.撤销权限</span><br><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库</title>
      <link href="/2023/11/02/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E6%95%B0%E6%8D%AE%E5%BA%93/2.Oracle/"/>
      <url>/2023/11/02/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E6%95%B0%E6%8D%AE%E5%BA%93/2.Oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ZV411c7rs/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">千峰</a></p><p>与MySQL语法非常接近，学习速度会非常快。</p><h1 id="第一章-概论"><a href="#第一章-概论" class="headerlink" title="第一章 概论"></a>第一章 概论</h1><h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li><p>数据(Data)：是事物的符号表示，数据的种类有数字、文字、图像、声音等，可以用数字化后的二进制形式存入计算机来进行处理。数据的含义称为信息，数据是信息的载体，信息是数据的内涵，是对数据的语义解释。</p></li><li><p>数据库（DB）：是长期存放在计算机内的有组织的可共享的数据集合，数据库中的数据按一定的数据模型组织、描述和储存，具有尽可能小的冗余度、较高的数据独立性和易扩张性。</p><p>特性：</p><p>● 共享性，数据库中的数据能被多个应用程序的用户所使用。</p><p>● 独立性，提高了数据和程序的独立性，有专门的语言支持。</p><p>● 完整性，指数据库中数据的正确性、一致性和有效性。</p><p>● 减少数据冗余。</p></li><li><p>数据库管理系统(DBMS)：是数据库系统的核心组成部分，它是在操作系统支持下的系统软件，是对数据进行管理的大型系统软件，用户在数据库系统中的一些操作都是由数据库管理系统来实现的。</p></li><li><p>数据库系统(DBS)：是在计算机系统中引入数据库后的系统构成，数据库系统由数据库、操作系统、数据库管理系统、应用程序、用户、数据库管理员(DBA)组成。</p><ul><li>C&#x2F;S模式</li></ul><p>  应用程序直接与用户打交道，数据库管理系统不直接与用户打交道，因此，应用程序称为前台，数据库管理系统称为后台。</p><p>  <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/1.png?raw=true" alt="1.png"></p><ul><li>B&#x2F;S模式</li></ul><p>  基于Web的数据库应用采用三层客户-服务器模式( B&#x2F;S)，第一层为浏览器，第二层为Web服务器，第三层为数据库服务器。</p><p>  <img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/2.png?raw=true" alt="2.png"></p></li><li><p>数据管理技术的发展：</p><ul><li><p>人工管理阶段</p></li><li><p>文件系统阶段</p></li><li><p>数据库系统阶段</p><p>（1）数据结构化</p><p>（2）数据的共享度高，冗余度小</p><p>（3）有较高的数据独立性</p><p>（4）由数据库管理系统对数据进行管理</p></li></ul></li></ol><h2 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h2><h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p>模式(Schema)指对数据的逻辑结构或物理结构、数据特征，数据约束的定义和描述，它是对数据的一种抽象，模式反映数据的本质、核心或型的方面。</p><p>数据库系统的标准结构是三级模式结构，它包括：</p><ol><li>外模式（子模式或用户模式）：于三级模式的最外层，对应于用户级，它是某个或某几个用户所看到的数据视图，是与某一应用有关的数据的逻辑表示。（一个数据库可以有多个外模式，同一外模式也可以为某一用户的多个应用系统所用，但一个应用程序只能使用一个外模式）</li><li>模式（概念模式，逻辑模式）：位于三级模式的中间层，对应于概念级，它是由数据库设计者综合所有用户的数据，按照统一观点构造的全局逻辑结构。（一个数据库只有一个模式）</li><li>内模式（存储模式）：位于三级模式的底层，对应于物理级，它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。一个数据库只有一个内模式。</li></ol><h3 id="数据库的二级映像功能和数据独立性"><a href="#数据库的二级映像功能和数据独立性" class="headerlink" title="数据库的二级映像功能和数据独立性"></a>数据库的二级映像功能和数据独立性</h3><ol><li>外模式&#x2F;模式映象 ：保证数据逻辑独立性。</li><li>模式&#x2F;内模式映象 ：保证数据物理独立性。</li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h3><ol><li><p>第一类是概念模型</p><p>按用户的观点对数据和信息建模，是对现实世界的第一层抽象，又称信息模型，它通过各种概念来描述现实世界的事物以及事物之间的联系，主要用于数据库设计。</p></li><li><p>第二类是逻辑模型、物理模型。</p><ul><li><p>逻辑模型</p><p>是概念模型的数据化，是事物以及事物之间联系的数据描述，提供了表示和组织数据的方法，主要的逻辑模型有层次模型、网状模型、关系模型。</p></li><li><p>物理模型</p><p>是对数据最底层的抽象，它描述数据在系统内部的表示方式和存取方法，如数据在磁盘上的存储方式和存取方法，是面向计算机系统的，由数据库管理系统具体实现。</p></li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/3.png?raw=true" alt="3.png"></p><h3 id="数据模型组成要素"><a href="#数据模型组成要素" class="headerlink" title="数据模型组成要素"></a>数据模型组成要素</h3><ol><li>数据结构：用于描述系统的静态特性，是所研究的对象类型的集合，数据模型按其数据结构分为层次模型、网状模型和关系模型等。</li><li>数据操作：用于描述系统的动态特性，是指对数据库中各种对象及对象的实例允许执行的操作的集合，包括对象的创建、修改和删除，对对象实例的检索、插入、删除、修改及其它有关操作等。</li><li>数据完整性约束：是一组完整性约束规则的集合，完整性约束规则是给定数据模型中数据及其联系所具有的制约和依存的规则。</li></ol><h3 id="层次，网状，关系模型"><a href="#层次，网状，关系模型" class="headerlink" title="层次，网状，关系模型"></a>层次，网状，关系模型</h3><ol><li>层次模型：树</li><li>网状模型：图</li><li>关系模型：二维表。二维表由行和列组成。</li></ol><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>关系：关系就是表(Table),在关系数据库中，一个关系存储为一个数据表。 </p></li><li><p>元组：表中一行(Row)为一个元组（记录），元组的各个分量对应于关系的各个属性。</p></li><li><p>属性：表中的列称为属性，对应数据表中的字段。 </p></li><li><p>域：属性的取值范围。 </p></li><li><p>关系模式：对关系的描述称为关系模式。</p><p>格式：关系名(属性名1,属性名2,…属性名n)</p></li><li><p>候选码：属性或属性组，其值可唯一标识其对应元组。</p></li><li><p>主关键字（主键）：在候选码中选择一个作为主键(Primary Key)。</p></li><li><p>外关键字（外键）：在一个关系中的属性或属性组不是该关系的主键，但它是另一个关系的主键，称为外键(Foreign Key)。</p></li></ol><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><ol><li>选择：指选出满足给定条件的记录，它是从行的角度进行的单目运算，运算对象是一个表，运算结果形成一个新表。</li><li>投影：是选择表中满足条件的列，它是从列的角度进行的单目运算。</li><li>连接：是将两个表中的行按照一定的条件横向结合生成的新表。</li></ol><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库的设计基本步骤"><a href="#数据库的设计基本步骤" class="headerlink" title="数据库的设计基本步骤"></a>数据库的设计基本步骤</h3><ol><li>需求分析阶段</li><li>概念结构设计阶段：形成一个独立于具体数据库管理系统的概念模型，即设计E-R模型。</li><li>逻辑结构设计阶段：将概念结构转换为某个具体的数据库管理系统所支持的数据模型。</li><li>物理结构设计阶段：为逻辑数据模型选取一个最适合应用环境的物理结构，包括存储结构和存取方法等。</li><li>数据库实施阶段：根据逻辑设计和物理设计的结果建立数据库。</li><li>数据库运行和维护阶段</li></ol><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><ol><li>实体：客观存在并可相互区别的事物称为实体，实体用矩形框表示，框内为实体名。</li><li>属性：实体所具有的某一特性称为属性，属性采用椭圆框表示，框内为属性名，并用无向边与其相应实体连接。</li><li>实体型：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。例如，学生(学号, 姓名, 性别, 出生日期, 专业, 班号, 总学分)就是一个实体型。</li><li>实体集：同型实体的集合称为实体集，例如全体学生记录就是一个实体集。</li><li>联系：实体之间的联系，可分为一对一的联系、一对多的联系、多对多的联系。实体间的联系采用菱形框表示，联系以适当的含义命名，名字写在菱形框中，用无向边将参加联系的实体矩形框分别与菱形框相连，并在连线上标明联系的类型，即1—1、1—n或m—n。如果联系也具有属性，则将属性与菱形也用无向边连上。<ul><li>(1) 一对一的联系(1:1)例如，一个班只有一个正班长，而一个正班长只属于一个班，班级与正班长两个实体间具有一对一的联系。</li><li>(2) 一对多的联系(1:n)例如，一个班可有若干学生，一个学生只能属于一个班，班级与学生两个实体间具有一对多的联系。</li><li>(3) 多对多的联系(m:n)例如，一个学生可选多门课程，一门课程可被多个学生选修， 学生与课程两个实体间具有多对多的联系。</li></ul></li></ol><h1 id="第二章-Oracle数据库"><a href="#第二章-Oracle数据库" class="headerlink" title="第二章 Oracle数据库"></a>第二章 Oracle数据库</h1><h2 id="Oracle-12c数据库的特性"><a href="#Oracle-12c数据库的特性" class="headerlink" title="Oracle 12c数据库的特性"></a>Oracle 12c数据库的特性</h2><ol><li>. 云端数据库整合的全新多租户架构</li><li>支持行式存储与列式存储并存的内存数据库</li><li>与大数据的高度集成</li><li>使Oracle数据库成为私有云和公有云部署的理想平台</li><li>数据自动优化</li><li>深度安全防护</li><li></li></ol><h2 id="Oracle-12c数据库安装与卸载（未完成）"><a href="#Oracle-12c数据库安装与卸载（未完成）" class="headerlink" title="Oracle 12c数据库安装与卸载（未完成）"></a>Oracle 12c数据库安装与卸载（未完成）</h2><p>参考视频：</p><p><a href="https://www.bilibili.com/video/BV1fZ4y1C7HS/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">安装</a></p><p><a href="https://www.bilibili.com/video/BV1Hp4y1y7F9/?spm_id_from=333.337.search-card.all.click">卸载</a>：建议跟着书上卸载，亲测有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.保存脚本文件</span><br><span class="line">select name from score where grade = 92;</span><br><span class="line">save D:\name.sql</span><br><span class="line"></span><br><span class="line">2.调用脚本文件</span><br><span class="line">get D:\name.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-创建数据库"><a href="#第三章-创建数据库" class="headerlink" title="第三章 创建数据库"></a>第三章 创建数据库</h1><h2 id="Oracle-数据库的体系结构"><a href="#Oracle-数据库的体系结构" class="headerlink" title="Oracle 数据库的体系结构"></a>Oracle 数据库的体系结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>逻辑结构包括表空间、段、盘区、数据块、表、其他逻辑对象等。</p><ol><li>表空间：是Oracle数据库中数据的逻辑组织单位，通过表空间来组织数据库中的数据，数据库逻辑上由一个或多个表空间组成，表空间物理上是由一个或多个数据文件组成。</li><li>段、盘区和数据块<ul><li>段：是按照不同的处理性质，在表空间划分出不同区域，用于存放不同的数据。</li><li>盘区：由连续分配的相邻数据块组成。</li><li>数据块：是数据库中最小的、最基本的存储单位。</li></ul></li><li>表：是数据库中存放用户数据的对象，它包含一组固定的列，表中的列描述该表所跟踪的实体的属性，每个列都有一个名字和若干个属性。</li><li>索引：是帮助用户在表中快速地查找记录的数据库结构，既可以提高数据库性能，又能够保证列值的唯一性。</li><li>用户：账号虽然不是数据库中的一个物理结构，但它与数据库中的对象有着重要的关系，这是因为用户拥有数据库的对象。</li><li>用户的方案：用户账号拥有的对象集</li></ol><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><ol><li>数据文件：是用来存放数据库数据的物理文件,文件后缀名为”.DBF”。</li><li>重做日志文件</li><li>控制文件：用于记录和维护整个数据库的全局物理结构，它是一个二进制文件，文件后缀名为”.CTL”。</li></ol><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><ol><li>实例</li><li>内存结构</li><li>进程：是操作系统中一个独立的可以调度的活动，用于完成指定的任务，进程可看作由一段可执行的程序、程序所需要的相关数据和进程控制块组成。有用户进程、服务器进程、后台进程。</li></ol><h2 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h2><p>书上P63</p><h1 id="第四章-创建和使用表"><a href="#第四章-创建和使用表" class="headerlink" title="第四章 创建和使用表"></a>第四章 创建和使用表</h1><h2 id="表的基本概念"><a href="#表的基本概念" class="headerlink" title="表的基本概念"></a>表的基本概念</h2><h3 id="表与表结构"><a href="#表与表结构" class="headerlink" title="表与表结构"></a>表与表结构</h3><ol><li>表：是数据库中存储数据的数据库对象，每个数据库包含了若干个表，表由行和列组成。</li><li>表结构：包含一组固定的列，列由数据类型、长度、允许Null值等组成。</li><li>记录 ：每个表包含若干行数据，一行为一个记录。</li><li>字段： 表中每列称为字段。</li><li>空值(Null)：通常表示未知、不可用或将在以后添加的数据。</li><li>关键字：用于唯一标识记录</li><li>候选关键字：如果表中记录的某一字段或字段组合能唯一标识记录，则该字段或字段组合称为候选关键字。</li><li>主关键字（主键）：合能唯一标识记录，则该字段或字段组合称为候选关键字(Candidate Key)。如果一个表有多个候选关键字，则选定其中的一个为主关键字</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>数值型</li></ol><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>NUMBER[(&lt;总位数&gt;[, &lt;小数点右边的位数&gt;)]</td><td>可变长度数值列，允许值为0、正数和负数，总位数默认为38，小数点右边的位数默认为0。</td></tr><tr><td>float</td><td>FLOAT[(&lt;数值位数&gt;)]</td><td>浮点型数值列</td></tr></tbody></table><ol start="2"><li><p>字符型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>CHAR[(&lt;长度&gt;[BYTE|CHAR])]</td><td>固定长度字符域，最大长度为2000字节。</td></tr><tr><td>nchar</td><td>NCHAR[(&lt;长度&gt;)]</td><td>多字节字符集的固定长度字符域，最多为2000个字符或2000字节。</td></tr><tr><td>varchar2</td><td>VARCHAR2[(&lt;长度&gt;[BYTE|CHAR])]</td><td>可变长度字符域，最大长度为4000字节。</td></tr><tr><td>nvarchar2</td><td>NVARCHAR2[(&lt;长度&gt;)]</td><td>多字节字符集的可变长度字符域，最多为4000个字符或4000字节。</td></tr><tr><td>long</td><td>LONG</td><td>可变长度字符域，最大长度为2GB。</td></tr></tbody></table></li><li><p>日期型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>DATE</td><td>存储全部日期和时间的固定长度字符域，长度为7字节，查询时日期默认格式为DD-MON-RR，除非通过设置NLS_DATE_FORMAT参数取代默认格式。</td></tr><tr><td>timestamp</td><td>TIMESTAMP  [(&lt;位数&gt;)]</td><td>用亚秒的粒度存储一个日期和时间，参数是亚秒粒度的位数，默认为6，范围为0~9。</td></tr></tbody></table></li><li><p>其他数据类型</p><table><thead><tr><th>数据类型</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>blob</td><td>BLOB</td><td>二进制大对象，最大长度为4GB.</td></tr><tr><td>clob</td><td>CLOB</td><td>字符大对象，最大长度为4GB.</td></tr><tr><td>bfile</td><td>BFILE</td><td>外部二进制文件，大小由操作系统决定。</td></tr></tbody></table></li></ol><h3 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h3><p>创建表的核心是定义表结构及设置表和列的属性，创建表以前，首先要确定表名和表的属性，表所包含的列名、列的数据类型、长度、是否为空、是否主键等，这些属性构成表结构。</p><h2 id="创建表、修改表和删除表"><a href="#创建表、修改表和删除表" class="headerlink" title="创建表、修改表和删除表"></a>创建表、修改表和删除表</h2><p>图形化操作,比较简单：见P73-P77</p><h2 id="表数据的操作"><a href="#表数据的操作" class="headerlink" title="表数据的操作"></a>表数据的操作</h2><p>图形化操作,比较简单：见P77-P79</p><h1 id="第五章-PL-SQL基础"><a href="#第五章-PL-SQL基础" class="headerlink" title="第五章 PL&#x2F;SQL基础"></a>第五章 PL&#x2F;SQL基础</h1><h2 id="SQL-和-PL-SQL"><a href="#SQL-和-PL-SQL" class="headerlink" title="SQL 和 PL&#x2F;SQL"></a>SQL 和 PL&#x2F;SQL</h2><ol><li><p>SQL语言的分类</p><ul><li>数据定义语言（DDL）：用于定义数据库对象，对数据库、数据库中的表、视图、索引等数据库对象进行建立和删除，DDL包括CREATE、ALTER、DROP等语句。</li><li>数据操纵语言（DML）：用于对数据库中的数据进行插入、修改、删除等操作，DML包括INSERT、UPDATE、DELETE等语句。</li><li>数据查询语言（ DQL）：用于对数据库中的数据进行查询操作，例如用 SELECT语句进行查询操作。</li><li>数据控制语言（ DCL）：用于控制用户对数据库的操作权限，DCL包括GRANT、REVOKE等语句。</li></ul></li><li><p>SQL语言的特点：</p><ul><li>高度非过程化</li><li>应用于数据库的语言</li><li>面向集合的操作方式</li><li>既是自含式语言、又是嵌入式语言</li><li>综合统一</li><li>语言简洁，易学易用</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/4.png?raw=true" alt="4.png"></p></li></ol><h2 id="在PL-SQL中的数据定义语言"><a href="#在PL-SQL中的数据定义语言" class="headerlink" title="在PL&#x2F;SQL中的数据定义语言"></a>在PL&#x2F;SQL中的数据定义语言</h2><h3 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h3><p>一般情况下使用图形界面创建数据库</p><ol><li><p>创建数据库</p><ul><li>设定实例标识符</li><li>设定数据库管理员的验证方法</li><li>创建初始化参数</li><li>启动SQL*Plus并以SYSDBA连接到Oracle实例</li><li>启动实例</li><li>使用CREATE DATABASE语句创建数据库</li></ul></li><li><p>修改数据库 </p><p>修改数据库使用ALTER DATABASE语句</p></li><li><p>删除数据库，语法格式：</p><p>DROP DATABASE database_name</p></li></ol><h3 id="表空间操作语句"><a href="#表空间操作语句" class="headerlink" title="表空间操作语句"></a>表空间操作语句</h3><ol><li>创建表空间：CREATE TABLESPACE &lt;表空间名&gt;</li><li>管理表空间：ALTER TABLESPACE &lt;表空间名&gt;</li><li>删除表空间：DROP TABLESPACE &lt;表空间名&gt;</li></ol><h3 id="表操作语句"><a href="#表操作语句" class="headerlink" title="表操作语句"></a>表操作语句</h3><ol><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [&lt;用户方案名&gt;.] &lt;表名&gt;(    </span><br><span class="line"></span><br><span class="line">&lt;列名1&gt;  &lt;数据类型&gt;  [DEFAULT &lt;默认值&gt;]  [&lt;列约束&gt;] </span><br><span class="line"></span><br><span class="line">&lt;列名2&gt;  &lt;数据类型&gt;  [DEFAULT &lt;默认值&gt;]  [&lt;列约束&gt;]    </span><br><span class="line"></span><br><span class="line">[,…n]    </span><br><span class="line"></span><br><span class="line">&lt;表约束&gt;[,…n]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">create table student(</span><br><span class="line">  sno char(6) not null primary key,</span><br><span class="line">  sname char(12) not null,</span><br><span class="line">  ssex char(3) not null,</span><br><span class="line">  sbirthday date not null,</span><br><span class="line">  speciality char(18) null,</span><br><span class="line">  sclass char(6) null,</span><br><span class="line">  tc number null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE [&lt;用户方案名&gt;.] &lt;表名&gt;</span><br><span class="line">[ ADD(&lt;新列名&gt; &lt;数据类型&gt; [DEFAULT &lt;默认值&gt;][列约束],…n) ]/*增加新列*/</span><br><span class="line">[ MODIFY([ &lt;列名&gt; [&lt;数据类型&gt;] [DEFAULT &lt;默认值&gt;][列约束],…n) ]  /*修改已有列的属性*/</span><br><span class="line">[ STORAGE &lt;存储参数&gt; ]  /*修改存储特征*/</span><br><span class="line">[&lt;DROP子句&gt; ]/*删除列或约束条件*/</span><br><span class="line"></span><br><span class="line">其中，&lt;DROP子句&gt;用于从表中删除列或约束。</span><br><span class="line">&lt;DROP子句&gt;::=</span><br><span class="line">DROP </span><br><span class="line">&#123;</span><br><span class="line">COLUMN &lt;列名&gt;</span><br><span class="line">∣PRIMARY [KEY]</span><br><span class="line">∣UNIQUE (&lt;列名&gt;,…n) </span><br><span class="line">∣CONSTRAINT &lt;约束名&gt;</span><br><span class="line">∣[ CASCADE ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">(1)在student表中增加一列remarks(备注)。</span><br><span class="line">ALTER TABLE student ADD remarks varchar(100);</span><br><span class="line"></span><br><span class="line">(3)在student表中删除列remarks。</span><br><span class="line"></span><br><span class="line">ALTER TABLE student DROP COLUMN remarks;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP TABLE table_name</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure></li></ol><h2 id="在PL-SQL中的数据操作语言"><a href="#在PL-SQL中的数据操作语言" class="headerlink" title="在PL&#x2F;SQL中的数据操作语言"></a>在PL&#x2F;SQL中的数据操作语言</h2><ol><li><p>插入语句：INSERT语句用于向数据库的表插入一行，由VALUES给定该行各列的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">INSERT INTO &lt;表名&gt;[(&lt;列名1&gt;,&lt;列名2&gt;,…n)] VALUES(&lt;列值1&gt;,&lt;列值2&gt;,…n)</span><br><span class="line"></span><br><span class="line">INSERT INTO student VALUES(&#x27;181001&#x27;,&#x27;宋德成&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19971105&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,52);</span><br><span class="line">INSERT INTO student VALUES(&#x27;181002&#x27;,&#x27;何静&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19980427&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,50);</span><br><span class="line">INSERT INTO student VALUES(&#x27;181004&#x27;,&#x27;刘文韬&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19980513&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;计算机&#x27;,&#x27;201805&#x27;,52);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184001&#x27;,&#x27;李浩宇&#x27;,&#x27;男&#x27;,TO_DATE(&#x27;19971024&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,50);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184002&#x27;,&#x27;谢丽君&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19980116&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,48);</span><br><span class="line">INSERT INTO student VALUES(&#x27;184003&#x27;,&#x27;陈春玉&#x27;,&#x27;女&#x27;,TO_DATE(&#x27;19970809&#x27;,&#x27;YYYYMMDD&#x27;),&#x27;通信&#x27;,&#x27;201836&#x27;,52);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改语句：UPDATE语句用于修改表中指定记录的列值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">UPDATE &lt;表名&gt; </span><br><span class="line">SET &lt;列名&gt;=&#123;&lt;新值&gt;|&lt;表达式&gt;&#125; [,…n] </span><br><span class="line">[WHERE &lt;条件表达式&gt;]</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">update student set tc=tc+2;</span><br><span class="line"></span><br><span class="line">update student set tc=tc+2</span><br><span class="line">  WHERE sname=&#x27;谢丽君&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>删除语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.DELETE语句</span><br><span class="line">语法格式：</span><br><span class="line">DELETE FROM &lt;表名&gt; [WHERE &lt;条件表达式&gt;];</span><br><span class="line">若省略WHERE子句，则删除所有行。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">DELETE FROM student</span><br><span class="line">   WHERE sno=&#x27;184003&#x27;;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2.TRANCATE TABLE语句（不删除表）：删除一个表里的全部记录，释放表的存储空间</span><br><span class="line">语法格式：</span><br><span class="line">TRUNCATE TABLE &lt;表名&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="在PL-SQL中的数据查询语言"><a href="#在PL-SQL中的数据查询语言" class="headerlink" title="在PL&#x2F;SQL中的数据查询语言"></a>在PL&#x2F;SQL中的数据查询语言</h2><p>实现选择、投影和连接等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">SELECT &lt;列&gt;           /*SELECT子句，指定列*/</span><br><span class="line">   FROM  &lt;表或视图&gt;          /*FROM子句，指定表或视图*/</span><br><span class="line">   [ WHERE  &lt;条件表达式&gt; ]     /*WHERE子句，指定行*/</span><br><span class="line">   [ GROUP BY &lt;分组表达式&gt; ]      /*GROUP BY子句，指定分组表达式*/</span><br><span class="line">   [ HAVING &lt;分组条件表达式&gt; ]        /*HAVING子句，指定分组统计条件*/</span><br><span class="line">   [ ORDER BY &lt;排序表达式&gt; [ ASC | DESC ]]/*ORDER子句，指定排序表达式和顺序*/</span><br></pre></td></tr></table></figure><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><ol><li><p>投影指定的列：使用SELECT语句可选择表中的一个列或多个列，如果是多个列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式</span><br><span class="line">SELECT &lt;列名1&gt; [ , &lt;列名2&gt; [,…n] ]</span><br><span class="line">   FROM &lt;表名&gt;</span><br><span class="line">   [WHERE &lt;条件表达式&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT sno, sname, sclass</span><br><span class="line">  FROM student;</span><br></pre></td></tr></table></figure></li><li><p>投影全部列：使用*号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student;</span><br></pre></td></tr></table></figure></li><li><p>修改查询结果的列标题：取别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实例：：</span><br><span class="line">SELECT sno AS 学号, sname AS 姓名, speciality AS 专业</span><br><span class="line">  FROM student;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>计算列值：使用SELECT子句对列进行查询时，可以对数字类型的列进行计算，可以使用加(＋)、减(－)、乘(*)、除(&#x2F;)等算术运送符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">SELECT &lt;表达式&gt; [ , &lt;表达式&gt; ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>去掉重复行：掉结果集中的重复行可使用DISTINCT关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">SELECT DISTINCT &lt;列名&gt; [ , &lt;列名&gt;…]</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT DISTINCT sclass</span><br><span class="line">FROM student;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="选择查询"><a href="#选择查询" class="headerlink" title="选择查询"></a>选择查询</h3><p>投影查询用于选择行，选择查询通过WHERE子句实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">WHERE &lt;条件表达式&gt;</span><br><span class="line"></span><br><span class="line">（下面的不用看）</span><br><span class="line">其中，&lt;条件表达式&gt;为查询条件，格式为：</span><br><span class="line">&lt;条件表达式&gt;::=</span><br><span class="line">     &#123; [ NOT ] &lt;判定运算&gt; | (&lt;条件表达式&gt; ) &#125;</span><br><span class="line">     [ &#123; AND | OR &#125; [ NOT ] &#123; &lt;判定运算&gt; | (&lt;条件表达式&gt;) &#125; ]</span><br><span class="line">     [ ,…n ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>表达式比较：共有7个运算符：&#x3D;（等于）、&lt;（小于）、&lt;&#x3D;（小于等于）、&gt;（大于）、&gt;&#x3D;（大于等于）、&lt;&gt;（不等于）、!&#x3D;（不等于）</p></li><li><p>指定范围 ：BETWEEN、NOT BETWEEN、IN是用于指定范围的三个关键字，用于查找字段值在（或不在）指定范围的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">&lt;表达式&gt; [ NOT ] BETWEEN &lt;表达式1&gt; AND &lt;表达式2&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sbirthday NOT BETWEEN TO_DATE(&#x27;19980101&#x27;,&#x27;YYYYMMDD&#x27;) AND TO_DATE(&#x27;19981231&#x27;,&#x27;YYYYMMDD&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>模式匹配：使用LIKE谓词，LIKE谓词用于指出一个字符串是否与指定的字符串相匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">&lt;字符串表达式1&gt; [ NOT ] LIKE &lt;字符串表达式2&gt; [ ESCAPE &#x27;&lt;转义字符&gt;’ ]</span><br><span class="line"></span><br><span class="line">在使用LIKE谓词时，&lt;字符串表达式2&gt;可以含有通配符，通配符有以下两种（模糊查询）：</span><br><span class="line">    %：代表0或多个字符。</span><br><span class="line">    _：代表一个字符。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sname LIKE &#x27;谢%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>空值判断：判定一个表达式的值是否为空值时，使用IS NULL关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表达式&gt; IS [ NOT ] NULL</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT * </span><br><span class="line">  FROM score</span><br><span class="line">  WHERE grade IS null;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分组查询和统计计算"><a href="#分组查询和统计计算" class="headerlink" title="分组查询和统计计算"></a>分组查询和统计计算</h3><ol><li><p>聚合函数：包括COUNT、SUM、AVG、MAX、MIN等函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.COUNT函数;组中满足条件的行数或总行</span><br><span class="line">语法格式：</span><br><span class="line">COUNT ( &#123; [ ALL | DISTINCT ] &lt;表达式&gt; &#125; | * )</span><br><span class="line">    ALL表示对所有值进行计算，ALL为默认值，</span><br><span class="line">    DISTINCT指去掉重复值，</span><br><span class="line">    COUNT函数用于计算时忽略NULL值。</span><br><span class="line">实例：</span><br><span class="line">SELECT COUNT(*) AS 总人数</span><br><span class="line">  FROM student;</span><br><span class="line"></span><br><span class="line">2.SUM和AVG函数</span><br><span class="line">SUM函数用于求出一组数据的总和</span><br><span class="line">AVG函数用于求出一组数据的平均值</span><br><span class="line">SUM / AVG函数用于计算时忽略NULL值。</span><br><span class="line">语法格式：</span><br><span class="line">SUM / AVG ( [ ALL | DISTINCT ] &lt;表达式&gt; )</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT SUM(stockqt) AS课程1201总分</span><br><span class="line">  FROM score</span><br><span class="line">  WHERE cno=’1201’;</span><br><span class="line"></span><br><span class="line">3.MAX和MIN函数</span><br><span class="line">语法格式：</span><br><span class="line">MAX / MIN ( [ ALL | DISTINCT ] &lt;表达式&gt; )</span><br></pre></td></tr></table></figure></li><li><p>GROUP BY子句：用于指定需要分组的列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">GROUP BY [ ALL ] &lt;分组表达式&gt; [,…n]</span><br><span class="line">其中，分组表达式通常包含字段名，ALL显示所有分组。</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT cno AS 课程号, MAX(grade)AS 最高分,MIN (grade)AS 最低分, AVG(grade)AS 平均成绩</span><br><span class="line">  FROM score</span><br><span class="line">  WHERE NOT grade IS null</span><br><span class="line">  GROUP BY cno;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>HAVING子句：对分组按指定条件进一步进行筛选。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ HAVING &lt;条件表达式&gt; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当WHERE子句、GROUP BY子句、HAVING子句、ORDER BY子句在一个SELECT语句中时，执行顺序如下：</span><br><span class="line">（1）执行WHERE子句，在表中选择行。</span><br><span class="line">（2）执行GROUP BY子句，对选取行进行分组。</span><br><span class="line">（3）执行聚合函数。</span><br><span class="line">（4）执行HAVING子句，筛选满足条件的分组。</span><br><span class="line">（5）执行ORDER BY子句，进行排序。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>ORDER BY子句进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">order by &lt;排序表达式&gt; [asc|desc]</span><br><span class="line">asc为升序，desc为降序</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sclass=&#x27;201836&#x27;</span><br><span class="line">  ORDER BY sbirthday DESC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第六章-PL-SQL查询高级"><a href="#第六章-PL-SQL查询高级" class="headerlink" title="第六章 PL&#x2F;SQL查询高级"></a>第六章 PL&#x2F;SQL查询高级</h1><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ol><li><p>使用连接谓词指定的连接：连接条件由比较运算符在WHERE子句中给出（连接谓词）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[&lt;表名1.&gt;] &lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2.&gt;] &lt;列名2&gt;</span><br><span class="line"></span><br><span class="line">1.等值连接：表之间通过比较运算符“=”连接起来</span><br><span class="line">SELECT student.*, score.*</span><br><span class="line">  FROM student, score</span><br><span class="line">  WHERE student.sno=score.sno;</span><br><span class="line"></span><br><span class="line">2.自然连接：目标列中去除相同的字段名</span><br><span class="line">SELECT student.*, score.cno, score.grade</span><br><span class="line">  FROM student, score</span><br><span class="line">  WHERE student.sno=score.sno;</span><br><span class="line"></span><br><span class="line">3.自连接：将同一个表进行连接</span><br><span class="line">SELECT a.cno, a.sno, a.grade</span><br><span class="line">  FROM score a, score b</span><br><span class="line">  WHERE a.cno=&#x27;1201&#x27; AND a.grade&gt;b.grade AND b.sno=&#x27;181002&#x27; AND b.cno=&#x27;1201&#x27;</span><br><span class="line">  ORDER BY a.grade DESC;</span><br></pre></td></tr></table></figure></li><li><p>使用JOIN关键字指定的连接：增强了表的连接运算能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表名&gt; &lt;连接类型&gt; &lt;表名&gt; ON &lt;条件表达式&gt;</span><br><span class="line">| &lt;表名&gt; CROSS JOIN &lt;表名&gt;</span><br><span class="line">| &lt;连接表&gt;</span><br><span class="line"></span><br><span class="line">其中，&lt;连接类型&gt;的格式为：</span><br><span class="line">&lt;连接类型&gt;::=</span><br><span class="line">      [ INNER | &#123; LEFT | RIGHT | FULL &#125; [ OUTER ] CROSS JOIN</span><br><span class="line">用JOIN关键字指定连接的多个表的表名，用ON子句指定连接条件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.内连接（INNER）：内连接是系统默认的，可省略INNER关键字。</span><br><span class="line">SELECT a.sno, a.sname, c.cname, b.grade</span><br><span class="line">  FROM student a JOIN score b ON a.sno=b.sno JOIN course c ON b.cno=c.cno</span><br><span class="line">  WHERE c.cname=&#x27;数据库系统&#x27; AND b.grade&gt;=84;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.外连接（OUTER）</span><br><span class="line">●  左外连接（LEFT OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括左表的所有行；</span><br><span class="line">SELECT tname, cno</span><br><span class="line">  FROM teacher LEFT JOIN lecture ON (teacher.tno=lecture.tno);</span><br><span class="line"></span><br><span class="line">●  右外连接（RIGHT OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括右表的所有行；</span><br><span class="line">SELECT tno, cname</span><br><span class="line">  FROM lecture RIGHT JOIN course ON (course.cno=lecture.cno);</span><br><span class="line"></span><br><span class="line">●  完全外连接（FULL OUTER JOIN）：结果表中除了包括满足连接条件的行外，还包括两个表的所有行。</span><br><span class="line">SELECT EmplName, DeptName</span><br><span class="line">  FROM Employee FULL JOIN Department ON Employee.DeptID=Department.DeptID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.交叉连接（CROSS）</span><br><span class="line">SELECT EmplName, DeptName</span><br><span class="line">  FROM Employee CROSS JOIN Department;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><p>集合查询将两个或多个SQL语句的查询结果集合并起来，利用集合进行查询处理以完成特定的任务，使用四个集合操作符(Set Operator) UNION、UNION ALL、INTERSECT和MINUS，将两个或多个SQL查询语句结合成一个单独SQL查询语句。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/4.oracle/5.png?raw=true" alt="5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;SELECT查询语句1&gt;</span><br><span class="line">&#123;UNION | UNION A LL | INTERSECT | MINUS&#125;</span><br><span class="line">&lt;SELECT查询语句2&gt;</span><br><span class="line">说明：</span><br><span class="line">●  在集合查询中，需要遵循的规则为：</span><br><span class="line">●  在构成复合查询的各个单独的查询中，列数和列的顺序必须匹配，数据类型必须兼容。</span><br><span class="line">●  用户不许在复合查询所包含的任何单独的查询中使用ORDER BY子句</span><br><span class="line">●  用户不许在BLOB、LONG等大数据对象上使用集合操作符</span><br><span class="line">●  用户不许在集合操作符SELECT列表中使用嵌套表或者数组集合。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.UNION操作符：将第一个查询中的所有行与第二个查询的所有行相加，消除重复行并且返回结果。</span><br><span class="line">SELECT sno, sname, ssex</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE ssex=&#x27;女&#x27;</span><br><span class="line">UNION</span><br><span class="line">SELECT a.sno, a.sname, a.ssex </span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br><span class="line"></span><br><span class="line">2.INTERSECT操作符：获取两个查询，对值进行汇总，并且返回同时存在于两个结果集中的行。</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;8001&#x27;</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br><span class="line"></span><br><span class="line">3.MINUS操作符：返回所有从第一个查询中有但是第二个查询中没有的那些行。</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;8001&#x27;</span><br><span class="line">MINUS</span><br><span class="line">SELECT a.sno AS 学号, a.sname AS 姓名, a.ssex AS 性别</span><br><span class="line">  FROM student a, score b</span><br><span class="line">  WHERE a.sno=b.sno AND b.cno=&#x27;4002&#x27;;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询（嵌套查询）：将一个查询块嵌套在另一个查询块的子句指定条件中的查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">SELECT * </span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sno IN</span><br><span class="line">    (SELECT sno </span><br><span class="line">       FROM score </span><br><span class="line">       WHERE cno=&#x27;1004&#x27;</span><br><span class="line">     );</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>IN子查询：使用IN谓词实现子查询和父查询的连接。</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查询选修了课程号为8001的课程的学生情况。</span><br><span class="line"></span><br><span class="line">SELECT * </span><br><span class="line">FROM student</span><br><span class="line">WHERE sno IN</span><br><span class="line">  (SELECT sno </span><br><span class="line">    FROM score </span><br><span class="line">    WHERE cno=&#x27;8001&#x27; </span><br><span class="line">   );</span><br></pre></td></tr></table></figure><ol start="2"><li><p>比较子查询：比较子查询是指父查询与子查询之间用比较运算符进行关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;表达式&gt; &#123; &lt; | &lt;= | = | &gt; | &gt;= | != | &lt;&gt;  &#125; &#123; ALL | SOME | ANY &#125; ( &lt;子查询&gt; )</span><br><span class="line">ALL指定表达式要与子查询结果集中每个值都进行比较，当表达式与子查询结果集中每个值都满足比较关系时，才返回TRUE，否则返回FALSE；</span><br><span class="line">SOME和ANY指定表达式要只要与子查询结果集中某个值满足比较关系时，就返回TRUE，否则返回FALSE。</span><br><span class="line"></span><br><span class="line">查询比所有通信专业学生年龄都小的学生。</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE sbirthday &gt;ALL</span><br><span class="line">    (SELECT sbirthday </span><br><span class="line">       FROM student  </span><br><span class="line">       WHERE speciality=&#x27;通信&#x27;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>EXISTS子查询（NOT EXISTS相反）：只用于测试子查询是否返回行，若子查询返回一个或多个行，则EXISTS返回TRUE，否则返回FALSE。</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ NOT ] EXISTS ( &lt;子查询&gt; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询选修1004课程的学生姓名。</span><br><span class="line"></span><br><span class="line">SELECT sname AS 姓名</span><br><span class="line">  FROM student</span><br><span class="line">  WHERE EXISTS </span><br><span class="line">    (SELECT *</span><br><span class="line">       FROM score</span><br><span class="line">       WHERE score.sno=student.sno AND cno=&#x27;1004&#x27;</span><br><span class="line">     );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第七章-视图（View）"><a href="#第七章-视图（View）" class="headerlink" title="第七章 视图（View）"></a>第七章 视图（View）</h1><p>视图(View)通过SELECT查询语句定义，它是从一个或多个表(或视图)导出的，用来导出视图的表称为基表(Base Table)，导出的视图称为虚表。在数据库中，只存储视图的定义，不存放视图对应的数据，这些数据仍然存放在原来的基表中。</p><p>视图有以下优点:</p><ul><li>方便用户的查询和处理，简化数据操作。</li><li>简化用户的权限管理，增加安全性。</li><li>便于数据共享。</li><li>屏蔽数据库的复杂性。</li><li>可以重新组织数据。</li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CREATE [OR REPLACE] VIEW [ schema_name . ] view_name [ (column [ ,...n ] ) ]</span><br><span class="line">[ WITH &lt;view_attribute&gt;[ ,…n ] ]</span><br><span class="line">    AS select_statement</span><br><span class="line">    [ WITH CHECK OPTION ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"> ● view_name：视图名称；scheme是数据库架构名</span><br><span class="line"> ● column：列名，此为视图中包含的列，最多可引用1024个列。</span><br><span class="line"> ● WITH 子句：指出视图的属性</span><br><span class="line"> ● select_statement：定义视图的SELECT语句，可在该语句中使用多个表或视图。</span><br><span class="line"> ● WITH CHECK OPTION：指出在视图上进行的修改都要符合select_statement所指定的准则。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建vwStudentScore视图，包括学号、姓名、性别、专业、课程号、成绩，且专业为计算机。</span><br><span class="line">CREATE OR REPLACE VIEW vwStudentScore</span><br><span class="line">  AS </span><br><span class="line">  SELECT a.sno, a.sname, a.ssex, a.speciality, b.cno, b.grade </span><br><span class="line">    FROM student a, score b</span><br><span class="line">    WHERE a.sno=b.sno AND a.speciality=&#x27;计算机&#x27;</span><br><span class="line">    WITH CHECK OPTION;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用SELECT语句对vwStudentScore视图进行查询：</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">  FROM vwStudentScore;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改视图定义"><a href="#修改视图定义" class="headerlink" title="修改视图定义"></a>修改视图定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alter view 只是用于重新编译和验证视图，修改视图的定义就是重新创建视图。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW vwStudentScore</span><br><span class="line">  AS </span><br><span class="line">  SELECT a.sno, a.sname, a.ssex, a.speciality, b.cno, b.grade </span><br><span class="line">    FROM student a, score b</span><br><span class="line">    WHERE a.sno=b.sno</span><br><span class="line">    WITH CHECK OPTION;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP VIEW &lt;视图名&gt;</span><br><span class="line"></span><br><span class="line">DROP VIEW vwStudentCourseScore;</span><br></pre></td></tr></table></figure><p>注：删除视图时，应该由该视图导出的其他视图删去。删除基表时，应该由该视图导出的其他视图删去。</p><h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><ol><li><p>更新视图数据，可更新基表数据。但需要满足以下条件：</p><ul><li>视图没有包含只读属性</li><li>没有使用连接函数，集合函数，组函数。</li><li>创建视图的select语句中没有GROUP BY，ONNECT BY，START WITH子句，DISTINCT关键字。</li><li>创建视图的SELECT语句中不包含从基表列通过计算所得的列。</li></ul></li><li><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用INSERT语句通过视图向基表插入数据。</span><br><span class="line"></span><br><span class="line">INSERT INTO vwCommSpecialityStudent VALUES (&#x27;184006&#x27;,&#x27;吴维明&#x27;,&#x27;男&#x27;,&#x27;1998-03-14&#x27;,&#x27;通信&#x27;,&#x27;201836&#x27;,50);</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用UPDATE语句通过视图修改基表数据。</span><br><span class="line"></span><br><span class="line">UPDATE vwCommSpecialityStudent SET tc=tc+2 </span><br><span class="line">  WHERE sno=&#x27;184006&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用DELETE语句通过视图向基表删除数据。</span><br><span class="line"></span><br><span class="line">DELETE FROM vwCommSpecialityStudent</span><br><span class="line">  WHERE sno=&#x27;184006&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第八章-索引（INDEX）和序列（sequence）"><a href="#第八章-索引（INDEX）和序列（sequence）" class="headerlink" title="第八章 索引（INDEX）和序列（sequence）"></a>第八章 索引（INDEX）和序列（sequence）</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引与书中的目录类似，就像先找到书的目录章节的页数，然后根据页数找到正文中的章节一样，索引也先找到符合条件的行，再直接找到数据库行所对应个的物理地址，从而找到数据库行。</p><ol><li>索引的分类：<ul><li>按存储方法分类，索引可分为B*树索引和位图索引两类。</li><li>按功能和索引对象分类，索引可分为：<ul><li>唯一索引和非唯一索引</li><li>单列索引和复合索引</li><li>逆序索引</li><li>基于函数的索引</li></ul></li></ul></li><li>建立索引的原则：<ul><li>建立索引的作用如下：<ul><li>提高查询速度。</li><li>保证列值的唯一性。</li><li>查询优化依靠索引起作用。</li><li>提高ORDER BY、GROUP BY执行速度。</li></ul></li><li>代价：<ul><li>索引需要占用数据表以外的物理存储空间。</li><li>创建和维护索引要花费一定的时间。</li><li>当对表进行更新操作时，索引需要被重建，这样就降低了数据的维护速度。</li></ul></li><li>建立索引的一般原则<ul><li>根据列的特征合理创建索引</li><li>根据表的大小来创建索引</li><li>限制表中索引的数量</li><li>在表中插入数据后创建索引。</li></ul></li></ul></li></ol><h2 id="创建索引、修改索引和删除索引"><a href="#创建索引、修改索引和删除索引" class="headerlink" title="创建索引、修改索引和删除索引"></a>创建索引、修改索引和删除索引</h2><ol><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">CREATE [UNIQUE∣BITMAP] INDEX        /*索引类型*/</span><br><span class="line">      [&lt;用户方案名&gt;.]&lt;索引名&gt; </span><br><span class="line">  ON  &lt;表名&gt;(&lt;列名&gt; | &lt;列名表达式&gt; [ASC∣DESC] [,…n])</span><br><span class="line">[LOGGING | NOLOGGING]           /*指定是否创建相应的日志记录*/</span><br><span class="line">[COMPUTE STATISTICS]              /*生成统计信息*/</span><br><span class="line">[COMPAESS | NOCOMPRESS]     /*对复合索引进行压缩*/</span><br><span class="line">[TABLESPACE &lt;表空间名&gt;]           /*索引所属表空间*/</span><br><span class="line">[SORT | NOSORT]                      /*指定是否对表进行排序*/</span><br><span class="line">[REVERSE]</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">●  UNIQUE：指定所基于的列(或多列)值必须唯一，默认的索引是非唯一的。</span><br><span class="line">●  BITMAP：指定创建位图索引。</span><br><span class="line">●  &lt;用户方案名&gt;.：包含索引的方案。</span><br><span class="line">●  ON：在指定表的列中创建索引。</span><br><span class="line">●  &lt;列名表达式&gt;：用指定表的列、常数、SQL函数和自定义函数的表达式创建基于函数的索引。</span><br><span class="line">●  [LOGGING | NOLOGGING]：LOGGING选项指规定创建索引时，创建相应的日志。NO LOGGING选项在创建索引时不产生重做日志信息，默认为LOGGING。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">在stsys数据库中score表的grade列上，创建一个索引ixGrade。</span><br><span class="line">CREATE INDEX ixGrade ON score(grade);</span><br><span class="line"></span><br><span class="line">在stsys数据库中student表的sname列和tc列，创建一个复合索引ixNameTc。</span><br><span class="line">CREATE INDEX ixNameTc ON student(sname,tc);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line">ALTER INDEX [&lt;用户方案名&gt;.]&lt;索引名&gt;</span><br><span class="line">[LOGGING | NOLOGGING]</span><br><span class="line">[TABLESPACE &lt;表空间名&gt;]</span><br><span class="line">[SORT | NOSORT]</span><br><span class="line">[REVERSE]</span><br><span class="line">[RENAME TO &lt;新索引名&gt;]</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">RENAME TO子句用于修改索引的名称,其余选项与CREATE INDEX语句相同。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">修改创建的索引ixGrade。</span><br><span class="line">ALTER INDEX ixGrade</span><br><span class="line">  RENAME TO ixGradeScore;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP INDEX</span><br><span class="line">&#123; index_name ON  table_or_view_name [ ,...n ] </span><br><span class="line">  | table_or_view_name.index_name [ ,...n ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">删除已建索引ixGradeScore。</span><br><span class="line">DROP INDEX ixGradeScore;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="序列概述"><a href="#序列概述" class="headerlink" title="序列概述"></a>序列概述</h2><p>序列(sequence)是一种数据库对象，定义在数据字典中，用来自动产生一组唯一的序号。序列是一种共享式的对象，多个用户可以共同使用序列中的序号。</p><p>一般序列所生成的整数通常可以用来填充数字类型的主键列，这样当向表中插入数据时，主键列就使用了序列中的序号，从而保证主键的列值不会重复。</p><p>序列的类型:</p><ol><li><p>升序</p><p>序列值由初始值向最大值递增,此为创建序列的默认设置。</p></li><li><p>降序</p><p>序列值由初始值向最小值递减。</p></li></ol><h2 id="创建、使用、修改和删除序列"><a href="#创建、使用、修改和删除序列" class="headerlink" title="创建、使用、修改和删除序列"></a>创建、使用、修改和删除序列</h2><ol><li><p>创建序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">CREATE SEQUENCE [用户方案名.] &lt;序列名&gt;/*将要创建的序列名称*/</span><br><span class="line">  [INCREMENT BY &lt;数字值&gt;]        /*递增或递减值*/</span><br><span class="line">  [START WITH &lt;数字值&gt;]/*初始值*/</span><br><span class="line">  [MAXVALUE &lt;数字值&gt; | NOMAXVALUE]/*最大值*/</span><br><span class="line">  [MINVALUE &lt;数字值&gt; | NOMINVALUE]    /*最小值*/</span><br><span class="line">  [CYCLE | NOCYCLE]          /*是否循环*/</span><br><span class="line">  [CACHE &lt;数字值&gt; | NOCACHE]/*高速缓冲区设置*/</span><br><span class="line">  [ORDER | NOORDER]                  /*序列号是序列否，按照顺序生成*/</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">● INCREMENT BY</span><br><span class="line">指定该序列每次增加的整数增量。指定为正值则创建升序序列，负值则创建降序序列。</span><br><span class="line">● START WITH</span><br><span class="line">序列的起始值。如果不指定该值，对升序序列使用该序列默认的最小值，对降序序列使用该序列默认的最大值。</span><br><span class="line"> ● MAXVALUE</span><br><span class="line">序列可允许的最大值。如果指定为NOMAXVALUE，则对升序序列使用默认值1.0E27，对降序序序列使用默认值－1。</span><br><span class="line">● MINVALUE</span><br><span class="line">序列可允许的最小值。如果指定为NOMINVALUE，则对升序序列使用默认值1，对降序序序列使用默认值－1.0E26。</span><br><span class="line">● CYCLE</span><br><span class="line">指定该序列即使已经达到最大值或最小值也继续生成整数。当升序序列达到最大值时，下一个生成的值是最小值。当降序序列达到最小值时，下一个生成的值是最大值。如果指定为NOCYCLE，则序列在达到最大值或最小值之后停止生成任何值。</span><br><span class="line">● CACHE</span><br><span class="line">指定要保留在内存中整数的个数。默认要缓存的整数为20个，可以缓存的整数最少为2个。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">创建一个升序序列seqCustomer。</span><br><span class="line">CREATE SEQUENCE seqCustomer</span><br><span class="line">INCREMENT BY 1</span><br><span class="line">START WITH 100001</span><br><span class="line">MAXVALUE 999999</span><br><span class="line">NOCYCLE</span><br><span class="line">NOCACHE</span><br><span class="line">ORDER;</span><br><span class="line"></span><br><span class="line">简单方式：</span><br><span class="line">CREATE SEQUENCE seqCustomer;</span><br></pre></td></tr></table></figure></li><li><p>使用序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1.）nextval：用于获取序列的下一个序号值</span><br><span class="line">语法格式：</span><br><span class="line"> &lt;sequence_name&gt;.nextval</span><br><span class="line"></span><br><span class="line">（2）currval：用于获取序列的当前序号值。</span><br><span class="line">语法格式：</span><br><span class="line">&lt;sequence_name&gt;.currval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"> 向customer表添加记录时，使用创建的序列seqCustomer为表中的主键customerID自动赋值。</span><br><span class="line">创建customer表语句如下。</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer</span><br><span class="line">(</span><br><span class="line">customerID number(6) NOT NULL PRIMARY KEY,</span><br><span class="line">cname char(8) NOT NULL,</span><br><span class="line">address char(40) NULL</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改序列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改序列seqCustomer。</span><br><span class="line">ALTER SEQUENCE seqCustomer</span><br><span class="line">  INCREMENT BY 2;</span><br></pre></td></tr></table></figure></li><li><p>删除序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">DROP SEQUENCE &lt;序列名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">DROP SEQUENCE seqCustomer;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第九章-数据完整性"><a href="#第九章-数据完整性" class="headerlink" title="第九章 数据完整性"></a>第九章 数据完整性</h1><h2 id="数据完整性概述"><a href="#数据完整性概述" class="headerlink" title="数据完整性概述"></a>数据完整性概述</h2><p>通过完整性约束实现数据完整性规则有以下优点：</p><ul><li>完整性规则定义在表上，存储在数据字典中，应用程序的任何数据都必须遵守表的完整性约束。</li><li>当定义或修改完整性约束时，不需要额外编程。</li><li>用户可指定完整性约束是启用或禁用。</li><li>当由完整性约束所实施的事务规则改变时，只需改变完整性约束的定义，所有应用自动地遵守所修改的约束。</li></ul><ol><li><p>域完整性</p><p>域完整性指列数据输入的有效性，又称列完整性，通过CHECK约束、DEFALUT约束、NOT NULL约束、数据类型和规则等实现域完整性。</p></li><li><p>实体完整性</p><p>实体完整性要求表中有一个主键，其值不能为空且能唯一地标识对应的记录，又称为行完整性，通过PRIMARY KEY约束、UNIQUE约束、索引或 IDENTITY 属性等实现数据的实体完整性。</p></li><li><p>参照完整性</p><p>参照完整性保证主表中的数据与从表中数据的一致性，又称为引用完整性，参照完整性确保键值在所有表中一致，通过定义主键(PRIMARY KEY)与外键(FOREIGN KEY)之间的对应关系实现参照完整性。</p></li></ol><p>Oracle数据库中的数据完整性包括域完整性、实体完整性、参照完整性，和实现上述完整性的约束，其中：</p><ul><li>CHECK约束，检查约束，实现域完整性。</li><li>NOT NULL约束，非空约束，实现域完整性。</li><li>PRIMARY KEY约束，主键约束，实现实体完整性。</li><li>UNIQUE KEY约束，唯一性约束，实现实体完整性。</li><li>FOREIGN KEY约束，外键约束，实现参照完整性。</li></ul><h2 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h2><ol><li><p>在创建表时创建CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &lt;表名&gt;</span><br><span class="line">( &lt;列名&gt; &lt;数据类型&gt; [DEFAULT &lt;默认值&gt;] [NOT NULL | NULL]</span><br><span class="line">  [CONSTRAINT &lt;CHECK约束名&gt;] CHECK(&lt;CHECK约束表达式&gt;)      /*定义为列的约束*/</span><br><span class="line">  [,…n]</span><br><span class="line">  [CONSTRAINT &lt;CHECK约束名&gt;] CHECK(&lt;CHECK约束表达式&gt;)      /*定义为表的约束*/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CONSTRAINT关键字为CHECK约束定义名称，CHECK约束表达式为逻辑表达式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">CREATE TABLE goods2 </span><br><span class="line">(</span><br><span class="line">  gid char(6) NOT NULL PRIMARY KEY,              /*商品号*/</span><br><span class="line">  gname char(20) NOT NULL,                        /*商品名*/</span><br><span class="line">  gclass char(6) NOT NULL,                         /*类型*/</span><br><span class="line">  price number NOT NULL CHECK(price&lt;=8000),       /*价格*/</span><br><span class="line">  tradeprice number NOT NULL,                      /*批发价格*/</span><br><span class="line">  stockqt number NOT NULL,                        /*库存量*/</span><br><span class="line">  orderqt number NULL                             /*订货尚未到货商品数量*/</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在修改表时创建CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  ADD( CONSTRAINT &lt;CHECK约束名&gt; CHECK(&lt;CHECK约束表达式&gt;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods2 </span><br><span class="line">  ADD CONSTRAINT CK_tradeprice CHECK(tradeprice&lt;=6000);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除CHECK约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;CHECK约束名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods2</span><br><span class="line">  DROP CONSTRAINT CK_tradeprice;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p>实体完整性通过PRIMARY KEY约束、UNIQUE约束等实现。通过PRIMARY KEY约束定义主键，一个表只能有一个PRIMARY KEY约束，且PRIMARY KEY约束不能取空值，Oracle为主键自动创建唯一性索引，实现数据的唯一性。</p><p>PRIMARY KEY约束与UNIQUE约束主要区别如下：</p><ul><li>一个表只能创建一个PRIMARY KEY约束，但可创建多个UNIQUE约束。</li><li>PRIMARY KEY约束的列值不允许为NULL，UNIQUE约束的列值可取NULL。</li><li>创建PRIMARY KEY约束时，系统自动创建聚集索引，创建UNIQUE约束时，系统自动创建非聚集索引。</li></ul><ol><li><p>使用PL&#x2F;SQL语句在创建表时创建PRIMARY KEY约束、UNIQUE约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CREATE TABLE &lt;表名&gt;                           /*指定表名*/</span><br><span class="line">  (&lt;列名&gt; &lt;数据类型&gt; [NULL |NOT NULL]          /*定义字段*/</span><br><span class="line">    &#123;[CONSTRAINT &lt;约束名&gt;]                    /*定义约束名*/</span><br><span class="line">    PRIMARY KEY | UNIQUE  &#125;                  /*定义约束类型*/</span><br><span class="line">    [,…n]</span><br><span class="line">  [, [CONSTRAINT &lt;约束名&gt;] &#123;PRIMARY KEY | UNIQUE&#125;(&lt;列名&gt;,[,…n]) ] </span><br><span class="line">      /*在所有列定义完毕后定义约束名和约束类型*/</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">商品号列创建PRIMARY KEY约束，对商品名称列创建UNIQUE约束。</span><br><span class="line">CREATE TABLE goods3</span><br><span class="line">(</span><br><span class="line">  gid char(6) NOT NULL CONSTRAINT PK_gid PRIMARY KEY,</span><br><span class="line">  gname char(20) NOT NULL CONSTRAINT UK_gname UNIQUE,</span><br><span class="line">  gclass char(6) NOT NULL,</span><br><span class="line">  price number NOT NULL CONSTRAINT CK_price CHECK(price&lt;=8000),</span><br><span class="line">  tradeprice number NOT NULL,</span><br><span class="line">  stockqt number NOT NULL,</span><br><span class="line">  orderqt number NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改表时创建PRIMARY KEY约束或UNIQUE约束   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法格式：  </span><br><span class="line">ALTER TABLE &lt;表名&gt;  </span><br><span class="line">ADD([CONSTRAINT &lt;约束名&gt;] &#123;PRIMARY KEY | UNIQUE&#125; (&lt;列名&gt;[,…n])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  ADD (CONSTRAINT PK_goodsgid PRIMARY KEY (gid));</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  ADD (CONSTRAINT UK_goodsgname UNIQUE (gname));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除PRIMARY KEY约束、UNIQUE约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;约束名&gt;[,…n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  DROP CONSTRAINT PK_goodsgid;</span><br><span class="line">ALTER TABLE goods4</span><br><span class="line">  DROP CONSTRAINT UK_goodsgname;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><p>外键约束定义了表与表之间的关系，通过将一个表中一列或多列添加到另一个表中，创建两个表之间的连接，这个列就成为第二个表的外键，通过定义FOREIGN KEY约束来创建外键。</p><p>使用PRIMARY KEY约束或UNIQUE约束来定义主表主键或唯一键，FOREIGN KEY约束来定义从表外键，可实现主表与从表之间的参照完整性。</p><ol><li><p>创建表间参照关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：   </span><br><span class="line">CREATE TABLE &lt;从表名&gt;</span><br><span class="line">(   &lt;列定义&gt; [ CONSTRAINT &lt;约束名&gt; ] REFERENCES &lt;主表名&gt;[ ( &lt;列名&gt; [ ,...n ] ) ]</span><br><span class="line">   [,…n]</span><br><span class="line"> [ [ CONSTRAINT &lt;约束名&gt; ] [ FOREIGN KEY ( &lt;列名&gt; [,...n ] ) [&lt;参照表达式&gt;]]</span><br><span class="line">)</span><br><span class="line">其中</span><br><span class="line">&lt;参照表达式&gt;::=</span><br><span class="line">REFERENCES &lt;主表名&gt;[ ( &lt;列名&gt; [ ,...n ] ) ] </span><br><span class="line"> [ ON DELETE &#123; CASCADE | SET NULL &#125; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">(1)</span><br><span class="line"></span><br><span class="line">CREATE TABLE stu</span><br><span class="line">(</span><br><span class="line">  sno char(6) NOT NULL REFERENCES student(sno),</span><br><span class="line">  sname char(8) NOT NULL,</span><br><span class="line">  sbirthday date NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">(2)</span><br><span class="line">CREATE TABLE sco</span><br><span class="line">(</span><br><span class="line">  sno char(6)NOT NULL,</span><br><span class="line">  cno char(4)NOT NULL,</span><br><span class="line">  grade int NULL,</span><br><span class="line">  CONSTRAINT FK_sco FOREIGN KEY(sno,cno) REFERENCES score (sno,cno)</span><br><span class="line">     ON DELETE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表定义外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  ADD CONSTRAINT &lt;约束名&gt;</span><br><span class="line">    FOREIGN KEY( &lt;列名&gt;[,…n])</span><br><span class="line">    REFERENCES &lt;主表名&gt;(&lt;列名&gt;[,…n]) &lt;参照表达式&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE score</span><br><span class="line">  ADD CONSTRAINT FK_score_course FOREIGN KEY(cno)</span><br><span class="line">  REFERENCES course(cno);</span><br></pre></td></tr></table></figure></li><li><p>删除表间参照关系 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法格式： </span><br><span class="line">ALTER TABLE &lt;表名&gt;</span><br><span class="line">  DROP CONSTRAINT &lt;约束名&gt;[,…n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">ALTER TABLE score</span><br><span class="line">  DROP CONSTRAINT FK_score_course;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="第十章-PL-SQL程序设计"><a href="#第十章-PL-SQL程序设计" class="headerlink" title="第十章 PL&#x2F;SQL程序设计"></a>第十章 PL&#x2F;SQL程序设计</h1><h2 id="PL-SQL编程"><a href="#PL-SQL编程" class="headerlink" title="PL&#x2F;SQL编程"></a>PL&#x2F;SQL编程</h2><p>PL&#x2F;SQL具有以下优点：</p><ul><li><p>模块化</p><p>能够使一组SQL语句的功能更具模块化，便于维护。 </p></li><li><p>可移植性</p><p>PL&#x2F;SQL块可以被命名和存储在ORACLE服务器中，能被其他的PL&#x2F;SQL程序或SQL命令调用，具有很好的可移植性。 </p></li><li><p>安全性</p><p>可以使用ORACLE数据工具来管理存储在服务器中的PL&#x2F;SQL程序的安全性，可以对程序中的错误进行自动处理。 </p></li><li><p>便利性</p><p>集成在数据库中，调用更加方便快捷</p></li><li><p>高性能</p><p>PL&#x2F;SQL是一种高性能的基于事务处理的语言，能运行在ORACLE环境中，支持所有的数据处理命令，不占用额外的传输资源，降低了网络拥挤。</p></li></ul><h2 id="PL-SQL字符集"><a href="#PL-SQL字符集" class="headerlink" title="PL&#x2F;SQL字符集"></a>PL&#x2F;SQL字符集</h2><table><thead><tr><th><strong>符  号</strong></th><th><strong>意  义</strong></th><th><strong>样  例</strong></th></tr></thead><tbody><tr><td>()</td><td>列表分隔</td><td>(‘Edward’, ‘Jane’)</td></tr><tr><td>;</td><td>语句结束</td><td>Procedure_name(arg1,arg2);</td></tr><tr><td>.</td><td>项分离（在例子中分离area与table_name）</td><td>Select * from  ares.table_name</td></tr><tr><td>‘</td><td>字符串界定符</td><td>If var1&#x3D; ‘x+1’</td></tr><tr><td><strong>:&#x3D;</strong></td><td><strong>赋值</strong></td><td><strong>x:&#x3D;x+1</strong></td></tr><tr><td>| |</td><td>并置</td><td>Full_name:&#x3D; ‘Jane’|  | ‘ ‘ | | ‘Eyre’</td></tr><tr><td>- -</td><td>单行注释符</td><td>- -Success!</td></tr><tr><td>&#x2F;<em>和</em>&#x2F;</td><td>多行注释起始符和终止符</td><td>&#x2F;<em>Continue loop.</em>&#x2F;</td></tr></tbody></table><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ol><li>VARCHAR类型：VARCHAR与VARCHAR2均为可变长的字符数据类型，含义完全相同。</li><li>NUMBER类型：可用来表示所有的数值类型。</li><li>DATE类型：用来存放日期时间类型数据。</li><li>BOOLEAN类型：逻辑型（布尔型）变量的值为true（真）或false（假）。</li></ol><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li><p>自动转换</p></li><li><p>转换函数：</p><ol><li><p>TO_CHAR：将NUMBER类型转换成CHAR类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECLARE/*  自动将结束符转换为/  */</span><br><span class="line">  st_num CHAR (6);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT TO_CHAR(MAX(sno)) INTO st_num FROM student;</span><br><span class="line">END;</span><br><span class="line">/ /*在命令行输入时*/</span><br></pre></td></tr></table></figure></li><li><p>TO_DATE：CHAR转换为DATE</p></li><li><p>TO_NUMBER：CHAR转换NUMBER</p></li></ol></li></ul><h2 id="标识符、常量、变量"><a href="#标识符、常量、变量" class="headerlink" title="标识符、常量、变量"></a>标识符、常量、变量</h2><ol><li><p>标识符：</p><ul><li>标识符必须由字母开头。</li><li>标识符可以包含字母、数字、下划线、$、#。</li><li>标识符长度不能超过30个字符。</li><li>标识符不能是PL&#x2F;SQL的关键字。</li><li>标识符不区分大小写。</li></ul></li><li><p>常量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;常量名&gt; CONSTANT &lt;数据类型&gt;: = &lt;值&gt;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">num CONSTANT NUMBER(2):=80;</span><br><span class="line">str CONSTANT CHAR:= &#x27;World&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式： </span><br><span class="line">&lt;变量名&gt; &lt;数据类型&gt; [&lt;(宽度): = &lt;初始值&gt;]；</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">name VARCHAR2(10) : = ‘Smith’;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol><li>赋值表达式</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;变量&gt; := &lt;表达式&gt;</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">var_number:=200;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数值表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6*(var_number+2)-5</span><br></pre></td></tr></table></figure></li><li><p>关系表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_number &lt;500</span><br></pre></td></tr></table></figure></li><li><p>逻辑表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(var_number &gt;=150) AND (var_number &lt;=500) </span><br></pre></td></tr></table></figure></li></ol><h2 id="PL-SQL基本结构和控制语句"><a href="#PL-SQL基本结构和控制语句" class="headerlink" title="PL&#x2F;SQL基本结构和控制语句"></a>PL&#x2F;SQL基本结构和控制语句</h2><p>基本逻辑结构包括顺序结构、条件结构和循环结构。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>流程控制语句</strong></th><th><strong>说  明</strong></th></tr></thead><tbody><tr><td>1</td><td>IF-THEN</td><td>IF后条件表达式为TRUE，则执行THEN后的语句</td></tr><tr><td>2</td><td>IF-THEN-ELSE</td><td>IF后条件表达式为TRUE，则执行THEN后的语句；否则执行ELSE后的语句</td></tr><tr><td>3</td><td>IF-THEN-ELSIF-THEN-ELSE</td><td>IF-THEN-ELSE语句嵌套</td></tr><tr><td>4</td><td>LOOP-EXIT-END</td><td>在LOOP和END  LOOP中，IF后条件表达式为TRUE，执行EXIT退出循环；否则继续循环</td></tr><tr><td>5</td><td>LOOP-EXIT-WHEN-END</td><td>在LOOP和END LOOP中，WHEN后条件表达式为TRUE，执行EXIT退出循环；否则继续循环</td></tr><tr><td>6</td><td>WHILE-LOOP-END</td><td>WHILE后条件表达式为TRUE，继续循环；否则退出循环</td></tr><tr><td>7</td><td>FOR-IN-LOOP-END</td><td>FOR后循环变量的值小于终值，继续循环；否则退出循环</td></tr><tr><td>8</td><td>CASE</td><td>通过多分支结构作出选择</td></tr><tr><td>9</td><td>GOTO</td><td>将流程转移到标号指定的位置</td></tr></tbody></table><h3 id="程序块"><a href="#程序块" class="headerlink" title="程序块"></a>程序块</h3><ol><li><p>PL&#x2F;SQL块的基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">[ DECLARE ]</span><br><span class="line">--声明部分</span><br><span class="line">BEGIN</span><br><span class="line">--执行部分</span><br><span class="line">[EXCEPTION]</span><br><span class="line">--异常处理部分</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算8和9的乘积。</span><br><span class="line">SET SERVEROUTPUT ON;/*打开Oracle自带的输出方法DBMS_OUTPUT*/</span><br><span class="line">DECLARE</span><br><span class="line">  m NUMBER:=8;</span><br><span class="line">BEGIN</span><br><span class="line">  m:=m*9;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;乘积为：&#x27;||TO_CHAR(m));</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></li><li><p>将SQL语言查询结果存入变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">SELECT &lt;列名列表&gt; INTO &lt;变量列表&gt;</span><br><span class="line">FROM &lt;表名&gt;</span><br><span class="line">WHERE &lt;条件表达式&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例： </span><br><span class="line">将学生数存入变量v_count，将学号为184003学生姓名和性别分别存入变量v_name和v_sex。</span><br><span class="line">DECLARE</span><br><span class="line">  v_count NUMBER;</span><br><span class="line">  v_name student.sname%TYPE;</span><br><span class="line">  v_sex student.ssex%TYPE;</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO v_count         /* 一次存入一个变量 */</span><br><span class="line">    FROM student;</span><br><span class="line">  SELECT sname,ssex INTO v_name,v_sex     /* 一次存入两个变量 */</span><br><span class="line">    FROM student</span><br><span class="line">    WHERE sno=&#x27;184003&#x27;; </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;学生数为：&#x27; || v_count); </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;184003学生姓名为：&#x27; || v_name); </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;184003学生性别为：&#x27; || v_sex); </span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><ol><li><p>IF-THEN结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">IF &lt;条件表达式&gt; THEN          /*条件表达式*/ </span><br><span class="line">  &lt;PL/SQL语句&gt;;                     /*条件表达式为真时执行*/</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">查询总学分大于和等于50分的学生人数。</span><br><span class="line"></span><br><span class="line">DECLARE</span><br><span class="line">  p_no NUMBER (2);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO p_no</span><br><span class="line">    FROM student</span><br><span class="line">    WHERE tc&gt;=50;</span><br><span class="line">  IF p_no&lt;&gt;0 THEN</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;总学分&gt;=50的人数为：&#x27; || TO_CHAR(p_no));</span><br><span class="line">  END IF;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>IF-THEN-ELSIF-THEN-ELSE结构</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">IF &lt;条件表达式1&gt; THEN      </span><br><span class="line">  &lt;PL/SQL语句1&gt;;              </span><br><span class="line">ELSIF &lt;条件表达式2&gt; THEN  </span><br><span class="line">  &lt;PL/SQL语句2&gt;;             </span><br><span class="line">ELSE</span><br><span class="line">  &lt;PL/SQL语句3&gt;;            </span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">如果”高等数学”课程的平均成绩大于80分，则显示”高等数学平均成绩高于80”，否则显示”高等数学平均成绩低于80”。</span><br><span class="line"></span><br><span class="line">DECLARE </span><br><span class="line">  g_avg NUMBER(4,2);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT AVG(grade) INTO g_avg</span><br><span class="line">    FROM student a, course b, score c</span><br><span class="line">    WHERE a.sno=c.sno</span><br><span class="line">      AND b.cno=c.cno  </span><br><span class="line">      AND b.cname=&#x27;高等数学&#x27;;</span><br><span class="line">  IF g_avg &gt;80 THEN</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;高等数学平均成绩高于80&#x27;);</span><br><span class="line">ELSE </span><br><span class="line">    DBMS_OUTPUT.PUT_LINE (&#x27;高等数学平均成绩低于80&#x27;); </span><br><span class="line">  END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h3><ol><li><p>简单CASE语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CASE &lt;变量名&gt;</span><br><span class="line">  WHEN &lt;值1&gt; THEN &lt;语句1&gt;</span><br><span class="line">  WHEN &lt;值2&gt; THEN &lt;语句2&gt;</span><br><span class="line">  …</span><br><span class="line">  WHEN &lt;值n&gt; THEN &lt;语句n&gt;</span><br><span class="line">  [ELSE &lt;语句&gt;]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">将教师职称转变为职称类型。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  t_title CHAR(12);</span><br><span class="line">  t_op VARCHAR2(8);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT title INTO t_title</span><br><span class="line">    FROM teacher</span><br><span class="line">    WHERE tname=&#x27;李志远&#x27;;</span><br><span class="line">  CASE t_title</span><br><span class="line">    WHEN &#x27;教授&#x27; THEN t_op:=&#x27;高级职称&#x27;;</span><br><span class="line">    WHEN &#x27;副教授&#x27; THEN t_op:=&#x27;高级职称&#x27;;</span><br><span class="line">    WHEN &#x27;讲师&#x27; THEN t_op:=&#x27;中级职称&#x27;;</span><br><span class="line">    WHEN &#x27;助教&#x27; THEN t_op:=&#x27;初级职称&#x27;;</span><br><span class="line">    ELSE t_op:=&#x27;Nothing&#x27;;</span><br><span class="line">  END CASE;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;李志远的职是：&#x27;||t_op);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>搜索CASE语句</p></li></ol><p>   搜索CASE语句在WHEN关键字后设置布尔表达式，选择第一个为TRUE的布尔表达式，执行THEN关键字后的语句，并结束CASE语句。</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">CASE</span><br><span class="line">  WHEN &lt;布尔表达式1&gt; THEN &lt;语句1&gt;</span><br><span class="line">  WHEN &lt;布尔表达式2&gt; THEN &lt;语句2&gt;</span><br><span class="line">  …</span><br><span class="line">  WHEN &lt;布尔表达式n&gt; THEN &lt;语句n&gt;</span><br><span class="line">  [ELSE &lt;语句&gt;]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">将学生成绩转变为成绩等级。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_grade NUMBER;</span><br><span class="line">  v_result VARCHAR2(16);</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT AVG(grade) INTO v_grade</span><br><span class="line">    FROM score</span><br><span class="line">    WHERE sno=&#x27;184001&#x27;;</span><br><span class="line">  CASE</span><br><span class="line">    WHEN v_grade&gt;=90 AND v_grade&lt;=100 THEN v_result:=&#x27;优秀&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=80 AND v_grade&lt;90 THEN v_result:=&#x27;良好&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=70 AND v_grade&lt;80 THEN v_result:=&#x27;中等&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=60 AND v_grade&lt;70 THEN v_result:=&#x27;及格&#x27;;</span><br><span class="line">    WHEN v_grade&gt;=0 AND v_grade&lt;60 THEN v_result:=&#x27;不及格&#x27;;</span><br><span class="line">    ELSE v_result:= &#x27;Nothing&#x27;;</span><br><span class="line">  END CASE;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;学号为184001的平均成绩：&#x27;||v_result);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ol><li>LOOP-EXIT-END循环</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">LOOP</span><br><span class="line">  &lt;循环体&gt;                    /*执行循环体*/</span><br><span class="line">  IF &lt;条件表达式&gt; THEN        /*测试条件表达式是否符合退出条件*/</span><br><span class="line">    EXIT;                     /*满足退出条件，退出循环*/</span><br><span class="line">  END IF;</span><br><span class="line">END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1~100的整数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  LOOP</span><br><span class="line">    v_s:=v_s+v_n;</span><br><span class="line">    v_n:=v_n+1;</span><br><span class="line">    IF v_n&gt;100 THEN</span><br><span class="line">      EXIT;</span><br><span class="line">    END IF;</span><br><span class="line">  END LOOP;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;1~100的和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>LOOP-EXIT-WHEN-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">LOOP</span><br><span class="line">  &lt;循环体&gt;                       /*执行循环体*/</span><br><span class="line">  EXIT WHEN &lt;条件表达式&gt;        /*测试是否符合退出条件*/</span><br><span class="line">END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1~100的整数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  LOOP</span><br><span class="line">    v_s:=v_s+v_n;</span><br><span class="line">    v_n:=v_n+1;</span><br><span class="line">    EXIT WHEN v_n=101;</span><br><span class="line">  END LOOP;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;1~100的和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>WHILE-LOOP-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">WHILE &lt;条件表达式&gt;          /*测试是否符合循环条件*/</span><br><span class="line">  LOOP</span><br><span class="line">    &lt;循环体&gt;                 /*执行循环体*/</span><br><span class="line">  END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"> 计算1~100的奇数和。</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  WHILE v_n&lt;=100 </span><br><span class="line">    LOOP</span><br><span class="line">      IF MOD(v_n, 2)&lt;&gt;0 THEN</span><br><span class="line">        v_s:=v_s+v_n;</span><br><span class="line">      END IF;</span><br><span class="line">      v_n:=v_n+1;</span><br><span class="line">    END LOOP;</span><br><span class="line"> DBMS_OUTPUT.PUT_LINE(&#x27;1~100的奇数和为：&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>FOR-IN-LOOP-END循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">FOR &lt;循环变量名&gt; IN &lt;变量初值&gt;..&lt;变量终值&gt;     /*定义跟踪循环的变量*/</span><br><span class="line">  LOOP</span><br><span class="line">    &lt;循环体&gt;                                   /*执行循环体*/</span><br><span class="line">  END LOOP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算10的阶乘。</span><br><span class="line">   </span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER;</span><br><span class="line">  v_s NUMBER:=1;</span><br><span class="line">BEGIN</span><br><span class="line">  FOR v_n IN 1..10 </span><br><span class="line">    LOOP</span><br><span class="line">      v_s:=v_s*v_n;</span><br><span class="line">    END LOOP;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;10!=&#x27;||v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="GOTO语句"><a href="#GOTO语句" class="headerlink" title="GOTO语句"></a>GOTO语句</h3><p>GOTO语句用于实现无条件的跳转，将执行流程转移到标号指定的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">GOTO  &lt;标号&gt;</span><br><span class="line">   </span><br><span class="line">GOTO关键字后面的语句标号必须符合标识符规则。</span><br><span class="line">标号的定义形式如下：</span><br><span class="line">   </span><br><span class="line">&lt;&lt;标号&gt;&gt; 语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">计算1-100的整数和。</span><br><span class="line">DECLARE</span><br><span class="line">  v_n NUMBER:=1;</span><br><span class="line">  v_s NUMBER:=0;</span><br><span class="line">BEGIN</span><br><span class="line">  &lt;&lt;ls&gt;&gt;</span><br><span class="line">  v_s:= v_s+ v_n;</span><br><span class="line">  v_n:= v_n+1; </span><br><span class="line">  IF v_n&lt;=100 THEN</span><br><span class="line">    GOTO ls;</span><br><span class="line">  END IF;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(&#x27;1~100的整数和为：&#x27;|| v_s);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p>预定义异常</p><p>预定义异常是PL&#x2F;SQL已经预先定义好名称异常。</p><table><thead><tr><th><strong>异  常</strong></th><th><strong>说  明</strong></th></tr></thead><tbody><tr><td>NO_DATA_FOUND</td><td>如果一个SELECT语句试图基于其条件检索数据，此异常表示不存在满足条件的数据行</td></tr><tr><td>TOO_MANY_ROWS</td><td>检测到有多行数据存在</td></tr><tr><td>ZERO_DIVIDE</td><td>试图被零除</td></tr><tr><td>DUP_VAL_ON_INDEX</td><td>如果某索引中已有某键列值，若还要在该索引中创建该键码值的索引项时，出现此异常</td></tr><tr><td>VALUE_ERROR</td><td>指定目标域的长度小于待放入其中的数据的长度</td></tr><tr><td>CASE_NOT_FOUND</td><td>在CASE语句中发现不匹配的WHEN语句</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line">处理ZERO_DIVIDE异常。</span><br><span class="line">DECLARE</span><br><span class="line">  v_zero NUMBER:=0;</span><br><span class="line">  v_result NUMBER;</span><br><span class="line">BEGIN</span><br><span class="line">  v_result:=100/v_zero;          /*100除以v_zero，即100/0，产生除数为零异常*/</span><br><span class="line">  EXCEPTION                 /*异常处理部分*/</span><br><span class="line">    WHEN ZERO_DIVIDE THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#x27;除数为0异常&#x27;);</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用户定义异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"> </span><br><span class="line">EXCEPTION</span><br><span class="line">  WHEN exception_name THEN</span><br><span class="line">  sequence_of_statements1;</span><br><span class="line">  WHEN THEN</span><br><span class="line">    sequence_of_statements2;</span><br><span class="line">  [WHEN OTHERS THEN</span><br><span class="line">    sequence_of_statements3;]</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">对超出允许的学生数进行异常处理</span><br><span class="line"> </span><br><span class="line">DECLARE</span><br><span class="line">  e_overnum EXCEPTION;          /*定义异常处理变量*/</span><br><span class="line">  v_num NUMBER;</span><br><span class="line">  max_num NUMBER:=5;           /*定义最大允许学生数变量*/</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT COUNT(*) INTO v_num</span><br><span class="line">  FROM student;</span><br><span class="line">  IF max_num&lt;v_num THEN</span><br><span class="line">    RAISE e_overnum;             /*使用RAISE语句抛出用户定义异常*/</span><br><span class="line">  END IF;</span><br><span class="line">  EXCEPTION                    /*异常处理部分*/</span><br><span class="line">  WHEN e_overnum THEN</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#x27;现在学生数是：&#x27; || v_num||&#x27;  而最大允许数是：&#x27; ||max_num );</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NoSQL</title>
      <link href="/2023/11/02/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E6%95%B0%E6%8D%AE%E5%BA%93/3.NoSQL%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/"/>
      <url>/2023/11/02/4.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E6%95%B0%E6%8D%AE%E5%BA%93/3.NoSQL%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​“数据库非常的重要。”这是我遇到的10个学长，9个都是这样给我说的。不管是软件专业，还是大数据专业，还有计科的学长们，都在提醒我要学好数据库。上网查一下路线，就会发现，不管是Java软件开发，还是大数据等等都是会用到数据库的。</p><p>​NoSQL数据库实在是太多了，我查看了B站大部分的教程。也没有找到一个UP把我想学习的几个NoSQL数据库一起讲了的。所以，不出意外的话每一个章节的视频可能都会不一样。</p><p>​</p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p>不推荐视频，这部分大多是念PPT。</p><p>所有的关系型数据库，和非关系型数据库第一章都是在介绍数据库的概念。</p><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><ol><li>数据库系统（DBS） &#x3D;  数据库管理系统（DBMS）     +     数据库（DB）</li><li>数据库（DB）：是按照一定的数据模型来组织、存储和管理数据的仓库。</li><li>数据模型：把现实世界中的人、物、活动、概念等用【数据模型】来抽象、表示成计算机能识别和处理的数字。（传统数据库主要模型：层次型（树）、网状型（图），关系型（二维表））</li><li>数据库管理系统(DBMS)：是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。</li><li>SQL包含：<ul><li>数据定义语言（DDL）：供用户定义，创建和修改数据库的结构，包含CREATE，DROP，ALTER等。</li><li>数据查询语言（DQL）：负责数据查询</li><li>数据操作语言（DML）：INSERT，UPDATA，DELETE。即增删查改</li><li>数据控制语言（DCL）：对数据访问权进行控制的指令。</li></ul></li><li>关系型数据库：<ul><li>优点：容易理解。使用方便。易于维护。</li><li>缺点：高并发读写能力差。对海量数据的读写效率低。扩展性差。</li></ul></li><li>NoSQL数据库的特点：<ul><li>灵活的数据模型</li><li>可伸缩性强</li><li>自动分片</li><li>自动复制</li></ul></li></ol><h2 id="分布式数据库的数据管理"><a href="#分布式数据库的数据管理" class="headerlink" title="分布式数据库的数据管理"></a>分布式数据库的数据管理</h2><ol><li><p>分布式数据处理，特点：</p><ul><li><p>分布式的透明管理</p></li><li><p>复制数据的透明管理</p></li><li><p>事物的可靠性</p></li></ul></li><li><p>CAP理论：一致性（C）、可用性（A）、分区容错性（P）。三者不可兼得，并且最多只能满足其中两个。</p><ul><li>一致性（C）：更新操作成功后，所有节点在同一时间的数据完全一致性。</li><li>可用性（A）：每个请求都能在确定时间内返回一个响应，无论请求是成功或失败。</li><li>分区容错性（P）：指当出现网络分区故障时，仍然能够对外提供满足一致性和可用性的服务。</li></ul></li><li><p>相互关系：</p><ul><li>CA：也就是强调一致性（C）和可用性（A），放弃分区容忍性（P），最简单的做法是把所有与事务相关的内容都放到同一台机器上。</li><li>CP：也就是强调一致性（C）和分区容忍性（P），放弃可用性（A），当出现网络分区的情况时，受影响的服务需要等待数据一致，因此在等待期间就无法对外提供服务</li><li>AP：也就是强调可用性（A）和分区容忍性（P），放弃一致性（C），允许系统返回不一致的数据</li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/1.png?raw=true" alt="1.png"></p><h3 id="重新理解CAP："><a href="#重新理解CAP：" class="headerlink" title="重新理解CAP："></a>重新理解CAP：</h3><ol><li>P发生的概率很小，不应该在设计之初直接放弃A或者C。</li><li>即使在AC之间进行取舍，也不应该粗暴地在系统层面取A舍C或 取C舍A，应该针对不同粒度，子系统差异化。</li><li>三者之间也不是非此即彼，应看做连续互相影响，因此可以采用如下策略：绝大多数未分区的情况下，尽可能保证CA，当发生网络分区时，系统应能识别P状况，降低CA并进行相应处理。</li></ol><h2 id="ACID与BASE"><a href="#ACID与BASE" class="headerlink" title="ACID与BASE"></a>ACID与BASE</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ol><li>原子性（A）：一个事务的所有系列操作步骤被看成是一个动作，所有的步骤要么全部完成要么都不会完成。</li><li>一致性（C）：事务执行前后，数据库的状态都满足所有的完整性约束。不能发生表与表之间存在外键约束，但是有数据却违背这种约束性。</li><li>隔离性（I）：并发执行的事务是隔离的，保证多个事务互不影响，隔离能够确保并发执行的事务能够顺序一个接一个执行，通过隔离，一个未完成事务不会影响另外一个未完成事务。</li><li>持久性（D）：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，不会因为和其他操作冲突而取消这个事务。</li></ol><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>BASE原则 &#x3D;   基本可用性（Basically Available）  +  软状态（Soft state）  +  最终一致性（Eventuallyconsistent）</p><ol><li>基本可用性：分布式系统在出现故障的时候，允许损失部分可用性，即保证核心功能或者当前最重要功能可用，但是其他功能会被削弱。</li><li>软状态：允许系统数据存在中间状态，但不会影响到系统的整体可用性，即允许系统在不同节点的数据副本之间存在暂时的不一情况。</li><li>最终一致性：要求系统数据副本最终能够一致，而不需要实时保证数据副本一致。最终一致性是弱一致性的一种特殊情况。</li></ol><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>在实际工程实践中，最终一致性分为5种：因果一致性、读己之所写(因果一致性特例)、会话一致性、单调读一致性、单调写一致性。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/2.png?raw=true" alt="2.png"></p><p><strong>问题：</strong>用什么办法才能实现数据的一致性？</p><p><strong>答：</strong>Quorum系统NRW策略、SequoiaDB采用的Raft算法等。</p><p>NWR是一种在分布式存储系统中用于控制一致性级别的一种策略。</p><p>三个关键字N、R、W。</p><ol><li>N —  数据复制的份数 </li><li>W — 更新数据时需要保证写完成的节点数 </li><li>R —  读取数据时需要保证读完成的节点数</li></ol><p><strong>NRW策略：</strong></p><ol><li>如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。</li><li>如果W+R&lt;&#x3D;N，不能保证读写有重叠，则是弱一致性</li><li>如果W&#x3D;N,R&#x3D;1，全部节点写入成功才算有效，任何一个写节点失效，都会导致写失败，因此写可用性会降低。只读取1个节点，读性能提高，适合读比写多的场景。</li><li>如果R&#x3D;N,W&#x3D;1，全部节点读出成功才算有效，任何一个读节点失效，都会导致读失败，因此读可用性会降低。只写入1个节点就算成功，写性能提高，适合读取要求不高的场景。</li></ol><h2 id="NoSQL数据库的分类"><a href="#NoSQL数据库的分类" class="headerlink" title="NoSQL数据库的分类"></a>NoSQL数据库的分类</h2><table><thead><tr><th align="center"><strong>分类</strong></th><th align="center"><strong>举例</strong></th><th align="center"><strong>典型应用场景</strong></th><th align="center"><strong>数据模型</strong></th><th align="center"><strong>优点</strong></th><th align="center"><strong>缺点</strong></th></tr></thead><tbody><tr><td align="center">键值数据库</td><td align="center">Redis, Voldemort, Oracle BDB</td><td align="center">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td align="center">Key 指向 Value 的键值对，通常用hash table来实现</td><td align="center">查找速度快</td><td align="center">数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td align="center">列族数据库</td><td align="center">Cassandra, HBase, Riak</td><td align="center">分布式的文件系统</td><td align="center">以列簇式存储，将同一列族数据存在一起</td><td align="center">吞吐量大，可扩展性强，更容易进行分布式扩展</td><td align="center">功能相对局限</td></tr><tr><td align="center">文档型数据库</td><td align="center">CouchDB, MongoDB</td><td align="center">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td align="center">Key-Value对应的键值对，Value为结构化数据</td><td align="center">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td align="center">查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td align="center">图形数据库</td><td align="center">Neo4J, InfoGrid, Infinite Graph</td><td align="center">社交网络，推荐系统等。专注于构建关系图谱</td><td align="center">图结构</td><td align="center">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td align="center">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td></tr></tbody></table><ol><li>键值数据库：使用一个哈希表，这个表中有一个特定的key和一个指针指向特定的value</li><li>列族数据库：采用的是列族数据模型，由多个行构成，每行数据包含多个列族，不同行可以有不同数量的列族。</li><li>文档型数据库：数据模型是结构化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。</li><li>图型数据库：以图论为基础，一个图是一个数学概念，用来表示一个对象集合，包括顶点及连接顶点的边。图数据库使用图作为数据模型来存储数据。</li></ol><p><strong>问题：</strong>分别说出类型名称和代表产品？</p><p><strong>答：</strong></p><ol><li>键值数据库：Redis</li><li>列族数据库：HBase</li><li>文档数据库：MongoDB</li><li>图形数据库：Neo4j</li></ol><h1 id="第二章-MongoDB文档数据库"><a href="#第二章-MongoDB文档数据库" class="headerlink" title="第二章 MongoDB文档数据库"></a>第二章 MongoDB文档数据库</h1><p> 推荐视频1：<a href="https://www.bilibili.com/video/BV1bJ411x7mq/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>推荐视频2：<a href="https://www.bilibili.com/video/BV16u4y1y7Fm/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">Geek Hour</a></p><p>​MongoDB是一个开源文档数据库，是用C++语言编写的非关系型数据库。其特点是高性能、高可用、可伸缩、易部署、易使用，存储数据十分方便</p><p>​主要特性有：面向集合存储，易于存储对象类型的数据，模式自由，支持动态查询，支持完全索引，支持复制和故障恢复，使用高效的二进制数据存储，文件存储格式为BSON（一种JSON的扩展）等。</p><p>业务场景：</p><ol><li>对数据库高并发读写要求。</li><li>对海量数据的高效率存储和访问需求。</li><li>对数据库的高可扩展和高可用性的需求。</li></ol><p>​  </p><p>​MongoDB的Replication 集提供自动故障转移和数据冗余服务，Replication 结构可以保证数据库中的全部数据都会有多份备份，这与HDFS分布式文件系统的备份机制比较类似。采用副本集的集群中具有主（Master）、从（Slaver）、仲裁（Arbiter）三种角色。主从关系（Master-Slaver）负责数据的同步和读写分离；Arbiter服务负责心跳（Heartbeat）监控，Master宕机时可将Slaver切换到Master状态，继续提供数据的服务，完成了数据的高可用需求。</p><h2 id="MongoDB基础"><a href="#MongoDB基础" class="headerlink" title="MongoDB基础"></a>MongoDB基础</h2><h3 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h3><h4 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h4><ol><li>在文档数据库中，文档是处理信息的基本单位。</li><li>多个键及其关联的值有序地放置在一起便是文档。</li><li>文档是一个个键值(key-value)对(即BSON)。</li><li>MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别。</li></ol><p>文档的特点：</p><ol><li>文档中的键值对是有序的：</li><li>值区分字符串和数字</li><li>键区分大小写：</li></ol><h4 id="文档存储结构"><a href="#文档存储结构" class="headerlink" title="文档存储结构"></a>文档存储结构</h4><p>文档数据库的存储结构分为四个层次，从小到大依次是：键值对、文档（document）、集合（collection）、数据库（database）。</p><p>MongoDB中的文档、集合、数据库对应于关系数据库中的行数据、表、数据库。</p><ol><li><p>键值对：文档数据库存储结构的基本单位是键值对，具体包含数据和类型。键值对的数据包含键和值，键的格式一般为字符串，值的格式可以包含字符串、数值、数组、文档等类型。可以将键值对分为<strong>基本键值</strong>对和<strong>嵌套键值对</strong>。</p><ul><li>UTF-8格式字符串。</li><li>不用有“\0”的字符串，习惯上不用“. ”和“$”。</li><li>以“_”开头的多为保留键，自定义时一般不以“_”开头。</li><li>文档键值对是有序的，MongoDB中严格区分大小写。</li></ul></li><li><p>文档：一组有序的键值对集合。文档的数据结构与JSON基本相同，所有存储在集合中的数据都是BSON格式。BSON是一种类JSON的二进制存储格式。</p><p>文档与文档之间的关系包括嵌入和引用两种。</p></li><li><p>集合：是一些文档构成的对象。文档类似于关系型数据库中的“行”，那么集合就如同“表”。集合存在于数据库中，没有固定的结构，这意味着用户对集合可以插入不同格式和类型的数据。通常情况下插入集合的数据都会有一定的关联性，即一个集合中的文档应该具有相关性。</p></li><li><p>数据库：由集合组成。开发过程中，通常将一个应用的所有数据存储到同一个数据库中。</p></li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>​BSON目前主要用于MongoDB中，选择JSON进行改造的原因主要是JSON的通用性及JSON的schemaless的特性。BSON改进的主要特性有下面三点。</p><ul><li><p>更快的遍历速度</p></li><li><p>操作更简易</p></li><li><p>支持更多的数据类型</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/3.png?raw=true" alt="3.png"></p></li></ul><h4 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">windows版：</span><br><span class="line">下载安装包直接安装</span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">1.管理员运行cmd,输入：</span><br><span class="line">cd D:\mongodb\data\bin</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot;    # 命令行不能关闭</span><br><span class="line">2.另外打开一个cmd，输入：</span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">1.管理员运行cmd,输入：</span><br><span class="line">cd D:\mongodb\data\bin</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot; --install --serviceName &quot;MongoDB&quot;</span><br><span class="line"></span><br><span class="line">2.开启/关闭服务</span><br><span class="line">net start/stop MongoDB</span><br><span class="line"></span><br><span class="line">3.移除MongoDB开机自启（先关闭服务）：</span><br><span class="line">mongod -dbpath &quot;D:\mongodb\data\db&quot; -logpath &quot;D:\mongodb\data\log\mon.log&quot; --remove --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><h3 id="数据库与集合的基本操作"><a href="#数据库与集合的基本操作" class="headerlink" title="数据库与集合的基本操作"></a>数据库与集合的基本操作</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ol><li><p>数据库的命名规则：要符合UTF-8标准的字符串</p><table><thead><tr><th align="center"><strong>序号</strong></th><th align="center"><strong>注意事项</strong></th></tr></thead><tbody><tr><td align="center"><strong>1</strong></td><td align="center"><strong>不能是空串</strong></td></tr><tr><td align="center"><strong>2</strong></td><td align="center"><strong>不得含有&#x2F;、\、？、$、空格、空字符等，基本只能使用ASCII中的字母和数字</strong></td></tr><tr><td align="center"><strong>3</strong></td><td align="center"><strong>区分大小写，建议全部小写</strong></td></tr><tr><td align="center"><strong>4</strong></td><td align="center"><strong>名称最多为64字节</strong></td></tr><tr><td align="center"><strong>5</strong></td><td align="center"><strong>不得使用保留的数据库名，如：admin、local、config</strong></td></tr></tbody></table></li><li><p>MongoDB系统保留的数据库</p><table><thead><tr><th align="center"><strong>库名</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>admin</strong></td><td align="center"><strong>权限<strong><strong>数据库，添加用户到该数据库中，该用户会自动继承数据库</strong></strong>的所有****权限</strong></td></tr><tr><td align="center"><strong>local</strong></td><td align="center"><strong>数据库中的数据永远不会被复制</strong></td></tr><tr><td align="center"><strong>config</strong></td><td align="center"><strong>分片时，config数据库在内部使用，保存分片信息</strong></td></tr><tr><td align="center"><strong>test</strong></td><td align="center"><strong>默认数据库，可以用来做各种测试等</strong></td></tr><tr><td align="center"><strong>自定义数据库</strong></td><td align="center"><strong>根据应用系统的需要建立的业务数据库</strong></td></tr></tbody></table></li><li><p>数据库操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.查看数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">2.创建自定义数据库:如果数据库不存在，MongoDB会在第一次使用该数据库时创建数据库</span><br><span class="line">use test</span><br><span class="line"></span><br><span class="line">3.统计数据库信息:使用stats()方法查看,一定要用use切换至数据库</span><br><span class="line">use test</span><br><span class="line">db.stats()</span><br><span class="line"></span><br><span class="line">4.删除数据库:使用dropDatabase()方法</span><br><span class="line">db.dropDatabase()</span><br><span class="line"></span><br><span class="line">5.查看集合:使用getCollectionNames()方法</span><br><span class="line">use test</span><br><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure></li></ol><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><ol><li><p>集合命名规则：集合名称要求符合UTF-8标准的字符串</p><table><thead><tr><th><strong>序号</strong></th><th><strong>注意事项</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>集合名不能是空串</strong></td></tr><tr><td><strong>2</strong></td><td><strong>不能含有空字符\0</strong></td></tr><tr><td><strong>3</strong></td><td><strong>不能以“system.”开头，这是系统集合保留的前缀</strong></td></tr><tr><td><strong>4</strong></td><td><strong>集合名不能含保留字符$</strong></td></tr></tbody></table></li><li><p>集合操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.展示所有集合</span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line">2.创建集合</span><br><span class="line">显示：</span><br><span class="line">db.createCollection(name, options)</span><br><span class="line">options(可选项):</span><br><span class="line">            cappedBoolean（可选）如果为true，则启用封闭的集合。如果指定true，则还需要指定size参数</span><br><span class="line">            size数字（可选）指定上限集合的最大大小（以字节为单位）。如果capped为true，那么还需要指定此字段的值</span><br><span class="line">            max数字（可选）指定上限集合中允许的最大文档数</span><br><span class="line">        eg:db.createCollection(&quot;myDB&quot;,&#123;capped:true,size:6142800,max:10000&#125;)</span><br><span class="line">隐式：插入文档时，如果集合不存在，隐式自动创建</span><br><span class="line">db.myDB.insert(&#123;&quot;name&quot;:&quot;tom&quot;&#125;)</span><br><span class="line"></span><br><span class="line">3.集合重命名：renamecollection()方法</span><br><span class="line">Show collections；</span><br><span class="line">db.myDB.renameCollection( &quot;orders2014&quot; )；</span><br><span class="line"></span><br><span class="line">4.删除集合：使用drop()方法</span><br><span class="line">db.orders2014.drop()</span><br><span class="line"></span><br><span class="line">5.查看文档</span><br><span class="line">db.test.find()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="文档的基本操作"><a href="#文档的基本操作" class="headerlink" title="文档的基本操作"></a>文档的基本操作</h3><ul><li>文档是MongoDB中存储的基本单元，是一组有序的键值对集合。文档中存储的文档键的格式是符合UTF-8标准的字符串。</li></ul><table><thead><tr><th><strong>1</strong></th><th><strong>不能包含\0字符（空字符），因为这个字符表示键的结束</strong></th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>不能包含“$”和“.”，因为“.”和“$”是被保留的，只能在特定环境下使用</strong></td></tr><tr><td><strong>3</strong></td><td><strong>区分类型（如字符串和整数等），同时也区分大小写</strong></td></tr><tr><td><strong>4</strong></td><td><strong>键不能重复，在一条文档里起唯一的作用</strong></td></tr></tbody></table><ul><li>文档的操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1.插入操作</span><br><span class="line">(1)insert()方法</span><br><span class="line">    db.collection.insert(//collection为集合名，</span><br><span class="line">    &lt;document or array of documents&gt;,//表示可设置插入一条或多条文档</span><br><span class="line">    &#123;</span><br><span class="line">        writeConcern: &lt;document&gt;,//可选字段，自定义写出错级别</span><br><span class="line">        ordered: &lt;boolean&gt;     //可选字段</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    eg:</span><br><span class="line">        //插入不指定_id字段的文档</span><br><span class="line">        db.test.insert(&#123;&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        //插入不指定_id字段的文档</span><br><span class="line">        db.test.insert(&#123;_id:10,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        //使用变量方式插入文档</span><br><span class="line">        a=(&#123;&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">        db.test.insert(a)</span><br><span class="line">        //有序插入多条文档</span><br><span class="line">        db.test.insert([</span><br><span class="line">        &#123;_id:11,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;</span><br><span class="line">        &#123;_id:12,&quot;name&quot;:&quot;hbk&quot;,&quot;age&quot;:18&#125;</span><br><span class="line">        ],</span><br><span class="line">        &#123;ordered:true&#125;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        (2)insertOne(), 插入一条文档。</span><br><span class="line">        (3)insertMany(), 插入多条文档。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.更新操作：update()和save()方法</span><br><span class="line">(1)update()</span><br><span class="line">db.collection.update(</span><br><span class="line">    &lt;query&gt;,//设置查询条件</span><br><span class="line">    &lt;update&gt;,//更新操作符</span><br><span class="line">    &#123;</span><br><span class="line">      Upsert,//布尔可选项，</span><br><span class="line">        multi,</span><br><span class="line">        writeConcern,</span><br><span class="line">        collation</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    eg:</span><br><span class="line">    db.test.update(</span><br><span class="line">    &#123;</span><br><span class="line">    item:&quot;card&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;$set:&#123;qty:35&#125;&#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    (2)save()</span><br><span class="line">    db.collection.save（obj）// _id已存在则更新，不存在则插入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.删除操作：永久删除</span><br><span class="line">(1)remove()</span><br><span class="line">db.collection.remove( </span><br><span class="line">    &lt;query&gt;, //设置文档的删除条件</span><br><span class="line">    &#123; </span><br><span class="line">        justOne: &lt;boolean&gt;, writeConcern: &lt;document&gt; </span><br><span class="line">    &#125;)</span><br><span class="line">    eg:</span><br><span class="line">    db.test.remove(&#123;&quot;name&quot;:&quot;hbk&quot;&#125;)</span><br><span class="line">    </span><br><span class="line">(2)delete:deleteOne()和deleteMany()方法删除文档</span><br><span class="line">db.collection.deleteMany(&#123;&#125;)//删除集合下所有的文档</span><br><span class="line">    db.collection.deleteMany(&#123; status : &quot;A&quot; &#125;)//删除status等于A的全部文档</span><br><span class="line">    db.collection.deleteOne( &#123; status: &quot;D&quot; &#125;)//删除status等于D的一个文档 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.查询操作</span><br><span class="line">(1)find()方法,findOne()</span><br><span class="line">语法：db.collection.find(query, projection) </span><br><span class="line">query：设置条件</span><br><span class="line">projection：投影操作符，返回指定字段</span><br><span class="line">注：可使用.pretty()格式化显示所有文档，更直观</span><br><span class="line">eg: db.test.find()</span><br><span class="line"></span><br><span class="line">(2)查询条件</span><br><span class="line">见下表：</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>操作符</strong></th><th align="center"><strong>格式</strong></th><th align="center"><strong>实例</strong></th><th align="center"><strong>与RDBMS where语句比较</strong></th></tr></thead><tbody><tr><td align="center"><strong>等于(&#x3D;)</strong></td><td align="center"><strong>{<key>:{<value>}</strong></td><td align="center"><strong>db.test.find({price:24 })</strong></td><td align="center"><strong>where price&#x3D;24</strong></td></tr><tr><td align="center"><strong>大于(&gt;)</strong></td><td align="center"><strong>{<key>:{$gt:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$gt:24}})</strong></td><td align="center"><strong>where price&gt;24</strong></td></tr><tr><td align="center"><strong>小于(&lt;)</strong></td><td align="center"><strong>{<key>:{$lt:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$lt:24}})</strong></td><td align="center"><strong>where price&lt;24</strong></td></tr><tr><td align="center"><strong>大于等于(&gt;&#x3D;)</strong></td><td align="center"><strong>{<key>:{$gte:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$gte:24}})</strong></td><td align="center"><strong>where price&gt;&#x3D;24</strong></td></tr><tr><td align="center"><strong>小于等于(&lt;&#x3D;)</strong></td><td align="center"><strong>{<key>:{$lte:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$lte:24}})</strong></td><td align="center"><strong>where price&lt;&#x3D;24</strong></td></tr><tr><td align="center"><strong>不等于(!&#x3D;)</strong></td><td align="center"><strong>{<key>:{$ne:<value>}}</strong></td><td align="center"><strong>db.test.find({price:{$ne:24}})</strong></td><td align="center"><strong>where price!&#x3D;24</strong></td></tr><tr><td align="center"><strong>与(and)</strong></td><td align="center"><strong>{key01:value01,key02:value02,…}</strong></td><td align="center"><strong>db.test.find({name:”《MongoDB教程》”,price:24})</strong></td><td align="center"><strong>where name&#x3D;”《MongoDB教程》”and price&#x3D;24</strong></td></tr><tr><td align="center"><strong>或(or)</strong></td><td align="center"><strong>{$or:[{key01:value01},{key02:value02},…]}</strong></td><td align="center"><strong>db.test.find({$or:[{name:”《MongoDB教程》”},{price:24}]})</strong></td><td align="center"><strong>where name&#x3D;”《MongoDB教程》”or price&#x3D;24</strong></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(3)特定类型查询</span><br><span class="line"> //查询age为null的字段，还会返回不包含这个键的文档</span><br><span class="line"> db.test.find(&#123;age:null&#125;)  </span><br><span class="line"> //查询有3个元素的数组</span><br><span class="line"> db.test.find(&#123;tags:&#123;$size:3&#125;&#125;)</span><br><span class="line">     //查询数组里的某一个值代码</span><br><span class="line">     db.test.find(&#123;tags:&quot;MongoDB&quot;&#125;)</span><br><span class="line">     //限制查询个数</span><br><span class="line">     db.test.find().limit(3)</span><br><span class="line">     //掠过指定文档</span><br><span class="line">     db.test.find().skip(1)</span><br><span class="line">     //对查询结果进行排序，1是升序，-1是降序</span><br><span class="line">     db.test.find().sort(&#123;&quot;price&quot;:1&#125;)</span><br><span class="line">     //使用正则表达式</span><br><span class="line">     db.test.find(&#123;tags:&#123;$regex:&quot;MongoDB&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">5.游标：指对数据一行一行的进行操作</span><br><span class="line">三种情况会让游标被销毁。</span><br><span class="line">① 客户端保存的游标变量不在作用域内。</span><br><span class="line">② 游标遍历完成后，或者客户端主动发送终止消息。</span><br><span class="line">③ 在服务器端10分钟内未对游标进行操作。</span><br><span class="line"></span><br><span class="line">见下表</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>hasNext</strong></th><th align="center"><strong>判断是否有更多的文档</strong></th></tr></thead><tbody><tr><td align="center"><strong>next</strong></td><td align="center"><strong>用来获取下一条文档</strong></td></tr><tr><td align="center"><strong>toArray</strong></td><td align="center"><strong>将查询结果放到数组中</strong></td></tr><tr><td align="center"><strong>count</strong></td><td align="center"><strong>查询的结果为文档的总数量</strong></td></tr><tr><td align="center"><strong>limit</strong></td><td align="center"><strong>限制查询结果返回数量</strong></td></tr><tr><td align="center"><strong>skip</strong></td><td align="center"><strong>跳过指定数目的文档</strong></td></tr><tr><td align="center"><strong>sort</strong></td><td align="center"><strong>对查询结果进行排序</strong></td></tr><tr><td align="center"><strong>objsLeftlnBatch</strong></td><td align="center"><strong>查看当前批次剩余的未被迭代的文档数量</strong></td></tr><tr><td align="center"><strong>addOption</strong></td><td align="center"><strong>为游标设置辅助选项，修改游标的默认行为</strong></td></tr><tr><td align="center"><strong>hint</strong></td><td align="center"><strong>为查询强制使用指定索引</strong></td></tr><tr><td align="center"><strong>explain</strong></td><td align="center"><strong>用于获取查询执行过程报告</strong></td></tr><tr><td align="center"><strong>snapshot</strong></td><td align="center"><strong>对查询结果使用快照</strong></td></tr></tbody></table><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li><p>索引可以提升文档的查询速度，但建立索引的过程需要使用计算与存储资源，在已经建立索引的前提下，插入新的文档会引起索引顺序的重排</p></li><li><p>索引的类型大致包含单键索引、复合索引、多键值索引、地理索引、全文索引、散列索引等</p><ul><li><p>单键索引：对于单字段索引和排序操作，索引键的排序顺序（即升序或降序）无关紧要。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/4.png?raw=true" alt="4.png"></p></li><li><p>复合索引：复合索引可以支持在多个字段上进行的匹配查询。（db.collection.createIndex( { <key1>: <type>, <key2>: <type2>, … } )）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/5.png?raw=true" alt="5.png"></p></li><li><p>多键值索引</p></li><li><p>地理索引</p></li><li><p>其他索引：全文索引、散列索引（哈希索引）</p></li></ul></li><li><p>索引的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.创建索引单键索引</span><br><span class="line">db.collection.createIndex( &#123; key: 1 &#125; )//1为升序，-1为降序</span><br><span class="line"></span><br><span class="line">2.创建索引复合索引</span><br><span class="line">db.collection.createIndex( &#123; &lt;key1&gt;: 1, &lt;key2&gt;:-1, ... &#125; )</span><br><span class="line"></span><br><span class="line">3.查看现有的索引</span><br><span class="line">db.records.getIndexes()</span><br><span class="line"></span><br><span class="line">4.删除索引</span><br><span class="line">db.collection.dropIndex(&#123;score:1&#125;)</span><br><span class="line">db.collection.dropIndexes()//删除所有索引</span><br><span class="line"></span><br><span class="line">5.修改索引</span><br><span class="line">只能删除后，重新创建</span><br></pre></td></tr></table></figure></li></ol><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>具体见书P120</p><ol><li><p>聚合：用于处理数据并返回计算结果。聚合操作将来自多个文档的值组合在一起，按条件分组后，再进行一系列操作（如求和、平均值、最大值、最小值）以返回单个结果。</p></li><li><p>聚合的方法：聚合管道、map-reduce和单一目标聚合方法。</p><ul><li><p>聚合管道：最基本的管道阶段提供过滤器，其操作类似查询和文档转换，可以修改输出文档的形式。</p></li><li><p>map-reduce：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">db.collection.mapReduce(</span><br><span class="line">function() &#123;emit(key,value);&#125;,</span><br><span class="line">function(key,values) &#123;return reduceFunction&#125;</span><br><span class="line">&#123; query: document,out: collection&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="MongoDB进阶"><a href="#MongoDB进阶" class="headerlink" title="MongoDB进阶"></a>MongoDB进阶</h2><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><p>MongoDB有三种集群部署模式，分别为</p><ol><li>主从复制（Master-Slaver）：（目前已不推荐使用）集群中只能有一个主节点，主节点提供所有的增、删、查、改服务，从节点不提供任何服务，但是可以通过设置使从节点提供查询服务，这样可以减少主节点的压力。</li><li>副本集（Replica Set）：取代了Master-Slaver模式，是一种互为主从的关系。副本集与主从复制的区别在于，当集群中主节点发生故障时，副本集可以自动投票，选举出新的主节点，并引导其余的从节点连接新的主节点，而且这个过程对应用是透明的。</li><li>分片（Sharding）模式：是指将数据拆分并分散存放在不同机器上的过程。有时也用分区来表示这个概念。将数据分散到不同的机器上，不需要功能强大的大型计算机就可以存储更多的数据，处理更大的负载。适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。构建分片模式需要三个组件：分片服务器（Shard Server）、配置服务器（Config Server）和路由服务器（Route Server）。</li></ol><h3 id="MongoDB分布式集群部署"><a href="#MongoDB分布式集群部署" class="headerlink" title="MongoDB分布式集群部署"></a>MongoDB分布式集群部署</h3><h4 id="分布式集群架构"><a href="#分布式集群架构" class="headerlink" title="分布式集群架构"></a>分布式集群架构</h4><ol><li><p>在实际生产环境中，MongoDB的集群架构是分布式的，集群会结合副本集和分片机制保证生产过程的高可靠性和高可扩展性。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/3.NoSQL/6.png?raw=true" alt="6.png"></p></li><li><p>副本集和分片联合部署的基本思路是先建立副本集，然后将每个副本集作为整体建立分片</p></li></ol><h4 id="部署副本集"><a href="#部署副本集" class="headerlink" title="部署副本集"></a>部署副本集</h4><p>标准副本集一般会部署三个成员，即一个Primary和两个Secondary，实现数据的冗余和容错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.启动副本集</span><br><span class="line"></span><br><span class="line">（1）修改配置文件</span><br><span class="line">启动mongod实例前先修改配置文件/etc/mongodrs1.conf，主要是对path、dbpath、port的修改。</span><br><span class="line"></span><br><span class="line">（2）启动mongod副本集</span><br><span class="line">在Shell终端执行：mongod --shardsvr --replSet rs1 --config /etc/mongodrs1.conf </span><br><span class="line"></span><br><span class="line">（3）初始化副本集</span><br><span class="line"> 启动MongoDB的副本集服务后，可在任意一台机器上连接MongoDB的服务，例如，在Node1节点上执行以下命令连接Node2节点上的mongod服务。</span><br><span class="line">mongo --host 10.90.9.102 --port 27018</span><br><span class="line">使用rs.initiate()对副本集进行初始化，经过初始化后，执行rs.status()查看副本集状态</span><br><span class="line"></span><br><span class="line">（4）添加成员</span><br><span class="line">目前rs1副本集还只有Node2这个Primary节点，需要将Node1、Node3节点添加到副本集中，执行以下命令添加副本集成员：</span><br><span class="line">rs.add(&quot;10.90.9.101：27018&quot;)</span><br><span class="line">rs.add(&quot;10.90.9.103：27018&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.测试副本集复制功能</span><br><span class="line">（1）在Primary节点上添加数据</span><br><span class="line">在Primary节点上创建myDB数据库，在此数据库中创建集合myCollection，并插入5个文档.</span><br><span class="line"></span><br><span class="line">2）在Secondary节点上查看副本数据</span><br><span class="line">使用mongo命令连接Secondary节点，Secondary节点上的数据默认是不允许读写的，可以通过以下命令设置副本节点允许查询。</span><br><span class="line">db.getMongo().setSlaveOk() </span><br><span class="line"></span><br><span class="line">3）管理副本集</span><br><span class="line">通过rs.config()命令可以查看副本集中每个成员的属性</span><br><span class="line">修改副本集属性可通过如下命令实现：</span><br><span class="line">con=rs.conf()</span><br><span class="line">con.members[1].priority=2</span><br><span class="line">rs.reconfig(con)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="部署分片集群"><a href="#部署分片集群" class="headerlink" title="部署分片集群"></a>部署分片集群</h4><p>分片集群由配置服务器、路由服务器、分片服务器和客户端组成。客户端可以是Shell终端，也可以是具体的应用程序。配置服务器（Config Server）是普通的mongod服务器，保存着集群的配置信息：集群中有哪些分片、分片的是哪些集合，以及数据块的分布。分片服务器（Shard Server）存储具体的分片数据。启动集群后，路由服务器（Route Server）加载Config Server中的分片信息，客户端通过连接Route Server来获取集群中的数据信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.启动分片机制</span><br><span class="line">（1）配置Config Server</span><br><span class="line">Config Server相当于集群的大脑，保存着集群和分片的元数据，即各分片包含哪些数据的信息。鉴于它所包含数据的极端重要性，必须启用其日志功能，并确保其数据保存在非易失性驱动器上。</span><br><span class="line">配置服务器是独立的mongod进程，所以可以像启动“普通的”mongod进程一样启动配置服务器：</span><br><span class="line">mongod --replSet config --configsvr --dbpath /home/ubuntu/mongodb/data/config --port 27030 –logpath </span><br><span class="line">/home/ubuntu/mongodb/data/config.log --logappend --fork</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（2）配置Route Server</span><br><span class="line">三个配置服务器均处于运行状态后，启动一个mongos进程供应用程序连接。因为mongos进程需要知道配置服务器的地址，所以必须使用--configdb选项启动mongos：</span><br><span class="line">mongos --configdb config/10.90.9.101:27030,10.90.9.102:27030,10.90.9.103:27030 –logpath </span><br><span class="line">/home/ubuntu/mongodb/data/mongos.log --logappend --fork</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.测试分片机制</span><br><span class="line">（1）添加分片</span><br><span class="line">为了将副本集转换为分片，需告知mongos副本集名称和副本集成员列表。</span><br><span class="line">（2）数据分片</span><br><span class="line">除非明确指定规则，否则MongoDB不会自动对数据进行拆分。如有必要，必须明确告知数据库和集合。</span><br><span class="line">假设希望对myDB数据库中的Mytest集合按照_id键进行分片。首先对myDB数据库执行以下命令启用分片：</span><br><span class="line">sh.enableSharding(&quot;myDB&quot;)</span><br><span class="line">命令执行成功后，用sh.status()查询分片状态，数据库myDB的patitioned属性值为true。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MongoDB编程方法"><a href="#MongoDB编程方法" class="headerlink" title="MongoDB编程方法"></a>MongoDB编程方法</h3><h4 id="通过Java访问MongoDB"><a href="#通过Java访问MongoDB" class="headerlink" title="通过Java访问MongoDB"></a>通过Java访问MongoDB</h4><p>详细代码见P138</p><ol><li>安装Java语言驱动包<ul><li>（1）Maven方式</li><li>（2）手动导入</li></ul></li><li>编程实现<ul><li>（1）import基础类库</li><li>（2）连接数据库</li><li>（3）切换至集合</li><li>（4）插入文档</li><li>（5）删除文档</li><li>（6）更新数据</li><li>（7）查询数据</li><li>（8）其他方法</li></ul></li></ol><h4 id="通过Python访问MongoDB"><a href="#通过Python访问MongoDB" class="headerlink" title="通过Python访问MongoDB"></a>通过Python访问MongoDB</h4><p>详细代码见P141</p><ol><li><p>安装pymongo驱动可使用pip方式：</p><p>pip install pymongo</p></li><li><p>建立连接</p><ul><li>（1）模块引用</li><li>（2）访问数据库</li></ul></li><li><p>集合操作</p><ul><li>（1）插入文档</li><li>（2）检索文档</li><li>（3）更新数据</li><li>（4）删除数据</li></ul></li></ol><h4 id="MongoDB的可视化工具Robomongo"><a href="#MongoDB的可视化工具Robomongo" class="headerlink" title="MongoDB的可视化工具Robomongo"></a>MongoDB的可视化工具Robomongo</h4><p> Robomongo是一个界面友好且免费的MongoDB可视化工具，可在Robomongo官网下载此软件。</p><h1 id="第三章-HBase列族数据库"><a href="#第三章-HBase列族数据库" class="headerlink" title="第三章 HBase列族数据库"></a>第三章 HBase列族数据库</h1><h2 id="认识HBase"><a href="#认识HBase" class="headerlink" title="认识HBase"></a>认识HBase</h2><h2 id="HBase数据模型与使用"><a href="#HBase数据模型与使用" class="headerlink" title="HBase数据模型与使用"></a>HBase数据模型与使用</h2><h2 id="HBase原理实现"><a href="#HBase原理实现" class="headerlink" title="HBase原理实现"></a>HBase原理实现</h2><h1 id="第四章-Redis、Memcached键值数据库"><a href="#第四章-Redis、Memcached键值数据库" class="headerlink" title="第四章 Redis、Memcached键值数据库"></a>第四章 Redis、Memcached键值数据库</h1><h1 id="第五章-Neo4j图形数据库"><a href="#第五章-Neo4j图形数据库" class="headerlink" title="第五章 Neo4j图形数据库"></a>第五章 Neo4j图形数据库</h1><h1 id="第六章-New-SQL数据库"><a href="#第六章-New-SQL数据库" class="headerlink" title="第六章 New SQL数据库"></a>第六章 New SQL数据库</h1><h1 id="第七章-综合实验"><a href="#第七章-综合实验" class="headerlink" title="第七章 综合实验"></a>第七章 综合实验</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2023/11/01/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/11/01/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.bilibili.com/video/BV1kt411R7uW/?buvid=XX0E82E007C4293A9EF2A085AD987657C07A7&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=RITYc2lKabBrCMpg+dW2PQ==&p=1&plat_id=114&share_from=ugc&share_medium=android&share_plat=android&share_session_id=f7f95680-6e62-4b34-8e87-88260222cd4d&share_source=COPY&share_tag=s_i&spmid=main.ugc-video-detail.0.0&timestamp=1712307256&unique_k=cpYDX8C&up_id=384177380&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">视频</a></p><p>我发现最近需要使用到python的时候越发变得频繁，由于初学的时间至今的确实有点长了，于是想着是时候在复习一下以前的知识点了。正所谓“温故而知新，可以为师”，确实再次看到教材的时候，才发现很多的知识点都已经忘记了。</p><p>为了方便后面需要再次复习的时候能够节约自己的学习时间成本，所以写的比较简略，当然也有一些自己常用的东西在里面。</p><h1 id="第0章-环境"><a href="#第0章-环境" class="headerlink" title="第0章 环境"></a>第0章 环境</h1><p>正所谓磨刀不误砍柴功，Windows安装python的环境太简单，此处忽略。</p><h2 id="1-Linux环境"><a href="#1-Linux环境" class="headerlink" title="1.Linux环境"></a>1.Linux环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载所需要的依赖软件</span></span><br><span class="line">yum install wget zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make zlib zlib-devel libffi-devel -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载python</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压安装包</span></span><br><span class="line">tar -xvf Python-3.10.13.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码构建</span></span><br><span class="line">cd Python-3.10.13</span><br><span class="line">./configure --prefix=/usr/local/python3.10.13 # 指定安装路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译和安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/local/python3.10.13为编译好的路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/local/python3.10.13/bin路径下的python3.10即为解释器</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建软链接</span></span><br><span class="line">rm -f /usr/bin/python</span><br><span class="line">ln -s /usr/local/python3.10.13/bin/python3.10 /usr/bin/python</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改yum的依赖</span></span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br><span class="line">首行改为：#! /usr/bin/python2</span><br><span class="line">vim /usr/bin/yum</span><br><span class="line">首行改为：#! /usr/bin/python2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入python</span></span><br><span class="line">python</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出</span></span><br><span class="line">exit()</span><br></pre></td></tr></table></figure><h2 id="2-pycharm使用"><a href="#2-pycharm使用" class="headerlink" title="2.pycharm使用"></a>2.pycharm使用</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctrl + alt + s : 打开软件设置</span><br><span class="line">ctrl + d : 复制当前行代码</span><br><span class="line">shift + alt + 上/下 ： 当前行代码上下移动</span><br><span class="line">ctrl + shift + f10 : 运行代码</span><br><span class="line">ctrl + d : 文件重命名</span><br></pre></td></tr></table></figure><h1 id="第一章-变量及简单的数据类型"><a href="#第一章-变量及简单的数据类型" class="headerlink" title="第一章 变量及简单的数据类型"></a>第一章 变量及简单的数据类型</h1><h2 id="0-常用的函数（遇到新的时候更新）"><a href="#0-常用的函数（遇到新的时候更新）" class="headerlink" title="0.常用的函数（遇到新的时候更新）"></a>0.常用的函数（遇到新的时候更新）</h2><ul><li>map()函数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="built_in">map</span>(func,li)</span><br><span class="line"></span><br><span class="line">func:指一个函数</span><br><span class="line">li:指一个数据序列</span><br></pre></td></tr></table></figure><ul><li>help（）函数：考试和比赛时候的开挂神器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><h2 id="1-print-函数"><a href="#1-print-函数" class="headerlink" title="1.print()函数"></a>1.print()函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python&quot;</span>,end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h2><ul><li>命名规则<ol><li>数字，字母，下划线组成（不能数字开头）</li><li>不能使用关键字和函数名</li></ol></li><li>命名规范<ol><li>变量名,方法名,模块名小写，多个单词_分割。my_name</li><li>常量大写。MY_AGE</li><li>类名大驼峰。MyName</li></ol></li></ul><h2 id="3-type-返回数据类型"><a href="#3-type-返回数据类型" class="headerlink" title="3.type()返回数据类型"></a>3.type()返回数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iCount = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(iCount))</span><br></pre></td></tr></table></figure><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><p>字面量：在代码中，被写下来的的固定的值，称之为字面量</p><table><thead><tr><th>类型</th><th>描述</th><th></th></tr></thead><tbody><tr><td>数字（Number）</td><td>支持整数（int）浮点数（float）复数（complex）布尔（bool）</td><td>整数（int），浮点数（float），复数（complex），如：4+3j，以j结尾表示复数，布尔（bool）</td></tr><tr><td>字符串（String）</td><td>描述文本的一种数据类型</td><td>字符串（string）由任意数量的字符组成</td></tr><tr><td>列表（List）</td><td>有序的可变序列</td><td>可有序记录一堆数据</td></tr><tr><td>元组（Tuple）</td><td>有序的不可变序列</td><td>可有序记录一堆不可变的数据集合</td></tr><tr><td>集合（Set）</td><td>无序不重复集合</td><td>可无序记录一堆不重复的数据集合</td></tr><tr><td>字典（Dictionary）</td><td>无序Key-Value集合</td><td>可无序记录一堆Key-Value型的Python数据集合</td></tr></tbody></table><h2 id="5-转义字符"><a href="#5-转义字符" class="headerlink" title="5.转义字符"></a>5.转义字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\t制表符(Tab)</span><br><span class="line">\n换行符</span><br><span class="line">\<span class="string">&#x27;转义成&#x27;</span></span><br><span class="line">\<span class="string">&quot;转义成&quot;</span></span><br><span class="line">\\转义成\</span><br><span class="line">\r回到当前行的行首</span><br><span class="line"></span><br><span class="line">\可以做续行符使用</span><br></pre></td></tr></table></figure><h2 id="6-大小写转换"><a href="#6-大小写转换" class="headerlink" title="6.大小写转换"></a>6.大小写转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">皆返回新字符串对象</span><br><span class="line"></span><br><span class="line">title()首字母大写，其余小写</span><br><span class="line">upper()全部大写</span><br><span class="line">lower()全部小写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sStr = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">sStr.title()</span><br></pre></td></tr></table></figure><h2 id="7-去除空格"><a href="#7-去除空格" class="headerlink" title="7.去除空格"></a>7.去除空格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">皆返回新字符串对象</span><br><span class="line"></span><br><span class="line">strip()去除全部空格</span><br><span class="line">rstrip()去除右边空格</span><br><span class="line">lstrip()去除左边空格</span><br></pre></td></tr></table></figure><h1 id="第二章-语法初步"><a href="#第二章-语法初步" class="headerlink" title="第二章 语法初步"></a>第二章 语法初步</h1><h2 id="1-缩进与pass"><a href="#1-缩进与pass" class="headerlink" title="1.缩进与pass"></a>1.缩进与pass</h2><p>python遵循严格的缩进规则，指示代码之间的层级和包含关系。</p><p>pass：占位语句，不执行任何实际操作，保留代码形式上的完整性</p><h2 id="2-操作符-运算符"><a href="#2-操作符-运算符" class="headerlink" title="2.操作符&#x2F;运算符"></a>2.操作符&#x2F;运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>复合运算符: +=,-=,*=,/=</span><br><span class="line"><span class="number">2.</span>整除与求模: //,%</span><br><span class="line"><span class="number">3.</span>比较运算符: &gt;=,==,!=</span><br><span class="line"><span class="number">4.</span>逻辑运算符: <span class="keyword">and</span>,<span class="keyword">or</span>,<span class="keyword">not</span></span><br><span class="line"><span class="number">5.</span>求幂: **</span><br><span class="line"></span><br><span class="line">优先级：算术 &gt; 关系 &gt; 逻辑 &gt; 赋值</span><br></pre></td></tr></table></figure><h2 id="3-函数及函数的定义"><a href="#3-函数及函数的定义" class="headerlink" title="3.函数及函数的定义"></a>3.函数及函数的定义</h2><ol><li><p>函数使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">8</span>)<span class="comment">#2的8次方</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)<span class="comment">#绝对值</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">2.5</span>)<span class="comment">#四舍五入</span></span><br></pre></td></tr></table></figure></li><li><p>函数的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;函数名&gt;(&lt;形参&gt;):</span><br><span class="line">&lt;函数体&gt;</span><br><span class="line"><span class="keyword">return</span> &lt;返回值列表&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    sum_abc = a + b + c</span><br><span class="line">    <span class="keyword">return</span> sum_abc</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-占位符"><a href="#4-占位符" class="headerlink" title="4.占位符"></a>4.占位符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%d,%f,%s，%x(将以十六进制表示)</span><br><span class="line"></span><br><span class="line">iNum1 = <span class="number">10</span></span><br><span class="line">fNum2 = <span class="number">10.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%10d,%10.2f&quot;</span>%(iNum1,fNum2))</span><br></pre></td></tr></table></figure><h2 id="5-进制"><a href="#5-进制" class="headerlink" title="5.进制"></a>5.进制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0xff</span></span><br><span class="line">b = <span class="number">0b10111</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span>(a) <span class="comment"># 转二进制</span></span><br><span class="line"><span class="built_in">oct</span>(a) <span class="comment"># 转八进制</span></span><br><span class="line"><span class="built_in">hex</span>(a) <span class="comment"># 转十六进制</span></span><br></pre></td></tr></table></figure><p>注意：转换成的是字符串</p><h2 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="comment">#</span></span><br><span class="line"><span class="number">2.</span><span class="string">&#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;</span> <span class="comment"># 一般对：Python文件、类或方法进行解释</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">&quot;&quot;&quot;hello world&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-获取用户输入"><a href="#7-获取用户输入" class="headerlink" title="7.获取用户输入"></a>7.获取用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iNum_in = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个正整数：&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="8-time模块"><a href="#8-time模块" class="headerlink" title="8.time模块"></a>8.time模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">a = time.time() <span class="comment"># 获取当前时间，单位是秒。从1970年1月1日0时开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">b = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(b.year,b.month,b.day) <span class="comment"># hour,minute,second</span></span><br></pre></td></tr></table></figure><h2 id="9-math模块"><a href="#9-math模块" class="headerlink" title="9.math模块"></a>9.math模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">6.7</span>))<span class="comment"># 向下取整</span></span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">6.1</span>))<span class="comment"># 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="10-turtle模块"><a href="#10-turtle模块" class="headerlink" title="10.turtle模块"></a>10.turtle模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.pen()</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.backward(<span class="number">100</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>) <span class="comment"># 画圆</span></span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.right(<span class="number">180</span>)</span><br><span class="line">turtle.Screen().exitonclick() <span class="comment"># 点击才退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Turtle() <span class="comment"># 创建turtle对象</span></span><br><span class="line">t.circle(<span class="number">50</span>,<span class="number">180</span>) <span class="comment"># 画半圆</span></span><br></pre></td></tr></table></figure><h1 id="第三章-列表-list"><a href="#第三章-列表-list" class="headerlink" title="第三章 列表(list[])"></a>第三章 列表(list[])</h1><ol><li>列表的定义：列表是容纳一系列元素的容器。</li><li>列表的索引：<strong>0<del>n-1;-1</del>-n</strong>.</li></ol><h2 id="1-list的操作"><a href="#1-list的操作" class="headerlink" title="1.list的操作"></a>1.list的操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一、元素的增加</span><br><span class="line">a.append(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">a.insert(<span class="number">2</span>,<span class="string">&quot;male&quot;</span>)</span><br><span class="line"></span><br><span class="line">二、元素的删除</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line">a.pop(<span class="number">2</span>)<span class="comment"># 默认弹出最后一个元素</span></span><br><span class="line">a.remove(<span class="number">47</span>)</span><br></pre></td></tr></table></figure><h2 id="2-名字绑定"><a href="#2-名字绑定" class="headerlink" title="2.名字绑定"></a>2.名字绑定</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a<span class="comment"># a和b指向的是同一个列表对象</span></span><br></pre></td></tr></table></figure><h2 id="3-list排序"><a href="#3-list排序" class="headerlink" title="3.list排序"></a>3.list排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">a.sort()<span class="comment"># 递增排序</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>) <span class="comment"># 递减排序</span></span><br><span class="line">a.sort(key=<span class="built_in">len</span>)  <span class="comment"># 按照长度进行排序，key的参数可以是自定义函数</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">sorted</span>(a)<span class="comment">#对a进行排序，并且返回一个新的列表，也有reverse，key参数</span></span><br><span class="line"></span><br><span class="line">a.reverse()<span class="comment"># 将原列表顺序颠倒</span></span><br></pre></td></tr></table></figure><h2 id="4-range-函数"><a href="#4-range-函数" class="headerlink" title="4.range()函数"></a>4.range()函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">生成[,)区间的整数</span><br><span class="line"><span class="built_in">range</span>(x)</span><br><span class="line"><span class="built_in">range</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(x,y,z)<span class="comment"># [x,y)步长为z的整数数列</span></span><br></pre></td></tr></table></figure><h2 id="5-list统计"><a href="#5-list统计" class="headerlink" title="5.list统计"></a>5.list统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">max</span>(a)</span><br><span class="line"><span class="built_in">min</span>(a)</span><br><span class="line"><span class="built_in">sum</span>(a)</span><br></pre></td></tr></table></figure><h2 id="6-list快速生成"><a href="#6-list快速生成" class="headerlink" title="6.list快速生成"></a>6.list快速生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">a = [x**<span class="number">3</span>+<span class="number">100</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">a = [[<span class="number">0</span>]*<span class="number">8</span>]*<span class="number">10</span><span class="comment">#注意：名字绑定</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line">a = [[r*c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)] <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]<span class="comment"># 10 * 8的二维列表</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span></span><br><span class="line">a = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="7-list运算"><a href="#7-list运算" class="headerlink" title="7.list运算"></a>7.list运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+两个列表拼接</span><br><span class="line">*重复n次</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> 和 <span class="keyword">not</span> <span class="keyword">in</span> </span><br></pre></td></tr></table></figure><h2 id="8-list成员函数"><a href="#8-list成员函数" class="headerlink" title="8.list成员函数"></a>8.list成员函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.count(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">a.clear()</span><br><span class="line">a.extend([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment"># 将列表拼接到a列表后，与+不同的是，+会返回新列表</span></span><br><span class="line">a.index(<span class="number">47</span>)</span><br><span class="line">a.remove(<span class="number">47</span>)</span><br><span class="line">a.copy()<span class="comment">#复制列表并返回</span></span><br><span class="line"><span class="built_in">id</span>()<span class="comment">#获取地址</span></span><br></pre></td></tr></table></figure><h2 id="9-list切片"><a href="#9-list切片" class="headerlink" title="9.list切片"></a>9.list切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">a[<span class="number">1</span>:<span class="number">10</span>]</span><br><span class="line">a[:<span class="number">10</span>]</span><br><span class="line">a[<span class="number">0</span>:]</span><br><span class="line">a[<span class="number">0</span>::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h1 id="第四章-数据类型及名字绑定"><a href="#第四章-数据类型及名字绑定" class="headerlink" title="第四章 数据类型及名字绑定"></a>第四章 数据类型及名字绑定</h1><h2 id="1-元组-tuple-——只读的列表"><a href="#1-元组-tuple-——只读的列表" class="headerlink" title="1.元组(tuple())——只读的列表"></a>1.元组(tuple())——只读的列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法与用途与列表完全相同</span><br><span class="line">被创建后，其值可以获取但不能修改。所以不能使用remove(),sort()等</span><br><span class="line">(<span class="number">4</span>,)<span class="comment">#用于告知解释器，这是由一个元素构成的元组，而不是括号括起来的整数4</span></span><br></pre></td></tr></table></figure><h2 id="2-集合-set"><a href="#2-集合-set" class="headerlink" title="2.集合(set{})"></a>2.集合(set{})</h2><p>集合必须满足以下3点：</p><ol><li>不重复</li><li>无序</li><li>元素为可哈希类型（一般是只读的）</li><li>不可以使用下标索引</li></ol><h3 id="set创建"><a href="#set创建" class="headerlink" title="set创建"></a>set创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;hello&quot;</span>)<span class="comment"># h,e,l,o</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">a = <span class="built_in">set</span>([])<span class="comment">#创建空集合，否则为空字典</span></span><br></pre></td></tr></table></figure><h3 id="set的基本操作"><a href="#set的基本操作" class="headerlink" title="set的基本操作"></a>set的基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.add(<span class="number">20</span>)</span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line">a.pop() <span class="comment">#随机</span></span><br><span class="line"><span class="built_in">len</span>(),<span class="built_in">min</span>(),<span class="built_in">max</span>(),<span class="built_in">sum</span>()</span><br><span class="line"><span class="keyword">in</span>,<span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure><h3 id="set运算"><a href="#set运算" class="headerlink" title="set运算"></a>set运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>子集与超集</span><br><span class="line">s2任意元素是s1元素，则s2是s1子集。s1是s2超集。</span><br><span class="line">s2.issubset(s1)</span><br><span class="line">s1.issuperset(s2)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>交集(&amp;),并集(|),差集(-),补集(^)</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">s1 &amp; s2</span><br><span class="line">s1.intersection(s2)</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">s1 | s2</span><br><span class="line">s1.union(s2)</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">s1 - s2</span><br><span class="line">s1.difference(s2)</span><br><span class="line"><span class="comment"># 补集</span></span><br><span class="line">s1 ^ s2</span><br><span class="line">s1.symmetric_difference(s2)</span><br></pre></td></tr></table></figure><h2 id="3-字节串（bytes）"><a href="#3-字节串（bytes）" class="headerlink" title="3.字节串（bytes）"></a>3.字节串（bytes）</h2><p>背景：与硬件或其他计算机通信时，需要将其他数据类型转换成明确的二进制形式。</p><p>bytes是只读的“字节串”类型。</p><ul><li>bytes的定义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buffer = <span class="string">b&quot;abcde&quot;</span></span><br><span class="line"><span class="built_in">print</span>(buffer,<span class="built_in">type</span>(buffer),<span class="built_in">len</span>(buffer))</span><br><span class="line"></span><br><span class="line">buffer = <span class="string">b&quot;\x11\xff\x77&quot;</span> <span class="comment"># 表示3个字节构成的字节串为十六进制（0x）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%x&#x27;</span>%(buffer[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">buffer = <span class="built_in">bytes</span>(i+<span class="number">0x10</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(buffer)</span><br></pre></td></tr></table></figure><ul><li>bytes的转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">65534</span></span><br><span class="line">bufferLittle = x.to_bytes(<span class="number">2</span>,<span class="string">&quot;little&quot;</span>) <span class="comment"># int的to_bytes()成员函数，转换为指定的字节长度</span></span><br><span class="line"><span class="built_in">print</span>(bufferLittle)</span><br><span class="line"></span><br><span class="line">bufferLittle = x.to_bytes(<span class="number">2</span>,<span class="string">&quot;big&quot;</span>) <span class="comment"># little endian：高位字节存高地址</span></span><br><span class="line"><span class="built_in">print</span>(bufferLittle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;\xfe\xff&quot;</span>,<span class="string">&quot;little&quot;</span>) <span class="comment"># int的from_bytes()的成员函数将bytes重新打包成int对象</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="4-字节数组（bytearray）"><a href="#4-字节数组（bytearray）" class="headerlink" title="4.字节数组（bytearray）"></a>4.字节数组（bytearray）</h2><p>与bytes功能类似，可修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buffer = <span class="built_in">bytearray</span>(<span class="number">0x00</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(buffer)</span><br><span class="line"></span><br><span class="line">buffer = <span class="built_in">bytearray</span>(<span class="string">b&quot;abc&quot;</span>)</span><br><span class="line">buffer[<span class="number">1</span>] = <span class="built_in">ord</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(buffer)</span><br></pre></td></tr></table></figure><h2 id="5-位运算"><a href="#5-位运算" class="headerlink" title="5.位运算"></a>5.位运算</h2><p>按位与（&amp;）、或（|）、位移（&gt;&gt;,&lt;&lt;）、取反（~）、异或（^）</p><h2 id="6-名字绑定"><a href="#6-名字绑定" class="headerlink" title="6.名字绑定"></a>6.名字绑定</h2><h3 id="“垃圾回收”机制"><a href="#“垃圾回收”机制" class="headerlink" title="“垃圾回收”机制"></a><strong>“垃圾回收”</strong>机制</h3><p>解释器内部有专门的引用计数来指示当前对象有多少个名字绑定。当对象引用为0后，python解释器会在恰当的时候从内存中销毁这个对象。</p><p>注意：python解释器考虑到执行速度的优化，倾向于将名字尽可能绑定在系统已有的对象上，而不是创建对象。</p><h3 id="is和"><a href="#is和" class="headerlink" title="is和&#x3D;&#x3D;"></a>is和&#x3D;&#x3D;</h3><p>is（id是否相同）</p><p>&#x3D;&#x3D;（对象的值是否相同）</p><h3 id="只读-可修改数据类型"><a href="#只读-可修改数据类型" class="headerlink" title="只读&#x2F;可修改数据类型"></a>只读&#x2F;可修改数据类型</h3><ul><li><p><strong>只读数据类型</strong>(可忽略名字绑定)</p><p>int,float,str,bool,bytes,tuple</p></li><li><p><strong>可修改数据类型</strong>（有名字绑定）</p><p>list,bytearray,set</p><p>解决：使用copy() 浅拷贝和deepcopy() 深拷贝（deepcopy()需要导入copy模块）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import copy</span><br><span class="line">a = [1,2,[3,4],5]</span><br><span class="line">b = a.copy()</span><br><span class="line">c = copy.deepcopy(a)</span><br><span class="line">print(id(a),id(b),id(c))</span><br><span class="line"></span><br><span class="line">a[2][0] = 2</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7.其他"></a>7.其他</h2><ol><li>集合不是序列类型</li><li>ord()返回参数字符的Unicode编码</li><li>chr()将Unicode编码转换成字符</li></ol><h1 id="第五章-条件，循环和其他"><a href="#第五章-条件，循环和其他" class="headerlink" title="第五章 条件，循环和其他"></a>第五章 条件，循环和其他</h1><h2 id="1-序列解包"><a href="#1-序列解包" class="headerlink" title="1.序列解包"></a>1.序列解包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">a,b = b,c <span class="comment"># 两个数进行交换</span></span><br><span class="line">num = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment"># 打包成元组</span></span><br><span class="line">a,b,c = num <span class="comment"># 元组序列解包</span></span><br><span class="line">a,b,c = <span class="string">&quot;789&quot;</span> <span class="comment"># 字符串序列解包</span></span><br><span class="line"></span><br><span class="line">a,*b = <span class="string">&quot;123456&quot;</span> <span class="comment"># b是列表</span></span><br><span class="line">*a,b = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="comment"># a是列表</span></span><br><span class="line"><span class="built_in">print</span>(a,b) </span><br></pre></td></tr></table></figure><h2 id="2-链式赋值"><a href="#2-链式赋值" class="headerlink" title="2.链式赋值"></a>2.链式赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="3-条件"><a href="#3-条件" class="headerlink" title="3.条件"></a>3.条件</h2><ol><li><p>非零即真，非空即真</p></li><li><p>if</p></li><li><p>if-else</p></li><li><p>if-elif-else</p></li><li><p>startswith()和endswith()是str的成员函数，可以判断是否是以参数字符串开头&#x2F;结尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.startswith(<span class="string">&quot;12&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.endswith(<span class="string">&quot;23&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>条件语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_1 = <span class="number">1</span></span><br><span class="line">num_2 = <span class="number">2</span> <span class="keyword">if</span> num_1==<span class="number">1</span> <span class="keyword">else</span> <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(num_2)</span><br></pre></td></tr></table></figure></li><li><p>bool运算的短路</p></li></ol><h2 id="4-Python之禅与断言"><a href="#4-Python之禅与断言" class="headerlink" title="4.Python之禅与断言"></a>4.Python之禅与断言</h2><h3 id="断言（assert）"><a href="#断言（assert）" class="headerlink" title="断言（assert）"></a>断言（assert）</h3><p>可以通过断言进行检查函数内部，若assert后的逻辑判断不成立，程序报错并停止执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score = [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">101</span>] <span class="comment"># 101数据会出错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compAverageScore</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(score) &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">max</span>(score) &lt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">min</span>(score) &gt;= <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(score) / <span class="built_in">len</span>(score)</span><br><span class="line"><span class="built_in">print</span>(compAverageScore(score))</span><br></pre></td></tr></table></figure><h3 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><h2 id="5-循环"><a href="#5-循环" class="headerlink" title="5.循环"></a>5.循环</h2><ol><li>for循环</li><li>while循环</li><li>break跳出当层循环</li><li>continue结束当次迭代</li><li>循环else子句：仅当循环体内部的break未被调用时，else子句才会被执行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(a) &gt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(a[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-序列缝包与循环解包"><a href="#6-序列缝包与循环解包" class="headerlink" title="6.序列缝包与循环解包"></a>6.序列缝包与循环解包</h2><ul><li><p>zip():可以将两个序列缝合并返回一个由元组构成的序列</p><p>注：可以缝合任意序列，当最短序列用完时，停止缝合</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">name = [<span class="string">&quot;王&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;孙&quot;</span>]</span><br><span class="line">zip_number_name = <span class="built_in">zip</span>(number,name)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zip_number_name))</span><br></pre></td></tr></table></figure><ul><li>enumerate():将序列元素与元素的下标缝合成一个元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">&quot;王&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;孙&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> idx,name <span class="keyword">in</span> <span class="built_in">enumerate</span>(name):</span><br><span class="line">    <span class="built_in">print</span>(idx,name)</span><br></pre></td></tr></table></figure><ul><li>reversed()：接收一个序列，返回一个可迭代对象与原序列相反</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">&quot;王&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;李&quot;</span>,<span class="string">&quot;孙&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(name):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul><li>del</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> y <span class="comment"># 删除名字y以及y与对象的绑定</span></span><br></pre></td></tr></table></figure><ul><li><p>exec()：</p><p>接收一个字符串参数，当作代码执行（提供动态执行代码的能力）</p><p>第二个参数：指定一个名字空间（namespace）或作用域（scope）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scopeTemp = &#123;&#125;</span><br><span class="line">scopeTemp[<span class="string">&quot;x&quot;</span>] = <span class="number">30</span></span><br><span class="line">scopeTemp[<span class="string">&quot;y&quot;</span>] = <span class="number">20</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;sum = x + y&quot;</span>,scopeTemp)</span><br><span class="line"><span class="built_in">print</span>(scopeTemp[<span class="string">&quot;sum&quot;</span>])</span><br></pre></td></tr></table></figure><ul><li><p>eval()：接收一个字符串，和名字空间</p><p>与exec()区别：eval()有返回值，exec()没有返回值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">eval</span>(<span class="string">&quot;1 + 2 + 3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h1 id="第六章-字典（dict）"><a href="#第六章-字典（dict）" class="headerlink" title="第六章 字典（dict）"></a>第六章 字典（dict）</h1><p>键值对（key value pair）。</p><p>字典：能够高效地自动完成键到值的映射。字典同集合一样，不可以使用下标索引</p><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h2><ol><li><p>字典以一对大括号包裹，键值对以“，”分隔，键值用“：”分隔。</p></li><li><p>添加新的键值对：字典名[键] &#x3D; 值</p></li><li><p>获取给定键的值：字典名[键]</p></li><li><p>字典中的键值对没有先后顺序（字典不属于序列类型）</p></li><li><p>在键值对中：</p><p><strong>值</strong>可以是任意数据类型</p><p><strong>键</strong>必须是可哈希数据类型（通常可哈希数据类型都是只读类型）</p><ul><li>list,dict,set不是可哈希数据类型</li><li>int,float,str,tuple等是可哈希数据类型</li></ul></li></ol><h2 id="2-dict-函数"><a href="#2-dict-函数" class="headerlink" title="2.dict()函数"></a>2.dict()函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">items = [(<span class="string">&quot;id&quot;</span>,<span class="number">123</span>),(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王&quot;</span>),(<span class="string">&quot;age&quot;</span>,<span class="number">26</span>)]</span><br><span class="line">dorothy = <span class="built_in">dict</span>(items)</span><br><span class="line"><span class="built_in">print</span>(dorothy)</span><br><span class="line"></span><br><span class="line">dor = <span class="built_in">dict</span>(name=<span class="string">&quot;张&quot;</span>,age=<span class="number">26</span>)</span><br><span class="line"><span class="built_in">print</span>(dor)</span><br></pre></td></tr></table></figure><h2 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>()</span><br><span class="line">dro[<span class="string">&quot;key&quot;</span>] <span class="comment">#获取值，若没有则报错</span></span><br><span class="line">dro[<span class="string">&quot;key&quot;</span>] = value <span class="comment"># 若无key键则创建，若有则更新value</span></span><br><span class="line"><span class="keyword">del</span> dro[<span class="string">&quot;key&quot;</span>] <span class="comment">#删除键值对，若无则报错</span></span><br><span class="line"><span class="string">&quot;age&quot;</span> <span class="keyword">in</span> dro <span class="comment"># 判断age是否是dro的键</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>字典可嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span> :&#123;</span><br><span class="line">        <span class="string">&quot;ren&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;001&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>:<span class="string">&quot;王&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&quot;key&quot;</span>][<span class="string">&quot;ren&quot;</span>][<span class="string">&quot;001&quot;</span>][<span class="string">&quot;name&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="4-成员函数"><a href="#4-成员函数" class="headerlink" title="4.成员函数"></a>4.成员函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dor_1 = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">26</span>&#125;</span><br><span class="line">dor_2 = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">26</span>&#125;</span><br><span class="line"></span><br><span class="line">dor_1.clear() <span class="comment"># 将字典内容全部清空</span></span><br><span class="line">dorCopy = dor_1.copy() <span class="comment"># 与列表相似</span></span><br><span class="line"></span><br><span class="line">d1 = <span class="built_in">dict</span>.fromkeys([<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],<span class="string">&quot;NoValue&quot;</span>)</span><br><span class="line">d2 = &#123;&#125;.fromkeys([<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>],<span class="string">&quot;NoValue&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">两者运行结果：</span></span><br><span class="line"><span class="string">&#123;&#x27;id&#x27;: &#x27;NoValue&#x27;, &#x27;name&#x27;: &#x27;NoValue&#x27;, &#x27;age&#x27;: &#x27;NoValue&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;id&#x27;: &#x27;NoValue&#x27;, &#x27;name&#x27;: &#x27;NoValue&#x27;, &#x27;age&#x27;: &#x27;NoValue&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dor_1= &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">26</span>&#125;</span><br><span class="line">value = d1.get(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;Nokey&quot;</span>) <span class="comment"># 返回键id的值，若无id键，则返回第二个参数值，若无第二个参数，则返回&quot;N/A&quot;</span></span><br><span class="line"></span><br><span class="line">num = d1.pop(<span class="string">&quot;id&quot;</span>) <span class="comment"># 删除键为id的键值对</span></span><br><span class="line">d1.popitem() <span class="comment"># 随机删除</span></span><br><span class="line"></span><br><span class="line">dor_1.update(dor_2) <span class="comment"># 将dor_2更新到dor_1中，没有的键值对会加入，有的键值对值更新</span></span><br></pre></td></tr></table></figure><ul><li>字典的遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dor_1 = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">26</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dor_1.keys(): <span class="comment"># 返回一个dict_keys的特殊对象集合</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dor_1.values(): <span class="comment"># 返回一个dict_values的特殊集合</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dor_1.items(): <span class="comment"># 返回一个dict_items的特殊数据类型</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br></pre></td></tr></table></figure><h2 id="5-小练习"><a href="#5-小练习" class="headerlink" title="5.小练习"></a>5.小练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">问题描述：统计给出的任意字符串序列出现的次数</span></span><br><span class="line"><span class="string">asdfasdf</span></span><br><span class="line"><span class="string">输出格式：</span></span><br><span class="line"><span class="string">a:2</span></span><br><span class="line"><span class="string">s:2</span></span><br><span class="line"><span class="string">d:2</span></span><br><span class="line"><span class="string">f:2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">sList = <span class="string">&quot;asdfasdf&quot;</span></span><br><span class="line">dictList = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sList:</span><br><span class="line">    dictList[i] = dictList.get(i,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dictList.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(k) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(v))</span><br></pre></td></tr></table></figure><h2 id="6-容器的通用功能"><a href="#6-容器的通用功能" class="headerlink" title="6.容器的通用功能"></a>6.容器的通用功能</h2><table><thead><tr><th>通用for循环</th><th>遍历容器（字典是遍历key）</th></tr></thead><tbody><tr><td>max</td><td>容器内最大元素</td></tr><tr><td>min()</td><td>容器内最小元素</td></tr><tr><td>len()</td><td>容器元素个数</td></tr><tr><td>list()</td><td>转换为列表</td></tr><tr><td>tuple()</td><td>转换为元组</td></tr><tr><td>str()</td><td>转换为字符串</td></tr><tr><td>set()</td><td>转换为集合</td></tr><tr><td>sorted(序列, [reverse&#x3D;True])</td><td>排序，reverse&#x3D;True表示降序得到一个排好序的列表</td></tr></tbody></table><h1 id="第七章-函数与抽象"><a href="#第七章-函数与抽象" class="headerlink" title="第七章 函数与抽象"></a>第七章 函数与抽象</h1><p>函数：是组织好的，可重复使用的，用来实现特定功能的代码段。</p><h2 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="1.函数的定义"></a>1.函数的定义</h2><ul><li><strong>函数调用</strong>：调用并执行函数</li><li><strong>可执行性</strong>：callable()函数用于鉴别是否是函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure><ul><li><p>函数文档</p><p>属性命中的双下划线表明这是一个特殊属性</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">x=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;这是一个函数&quot;</span>  <span class="comment">#这是独立的字符串，称为函数文档，这个属性是__doc__</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">a()</span><br><span class="line"><span class="built_in">help</span>(a)</span><br></pre></td></tr></table></figure><h2 id="2-函数的参数"><a href="#2-函数的参数" class="headerlink" title="2.函数的参数"></a>2.函数的参数</h2><ul><li><p><strong>默认值参数</strong>：参位于参数列表尾部</p></li><li><p><strong>非只读类型参数</strong>：会修改函数外部值</p></li><li><p><strong>关键字参数</strong>：位置传参与关键字传参</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line">fun(b=<span class="number">4</span>,a=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>任意数量的参数</strong><ol><li>这些实参被组织成一个元组</li><li>一个函数中，带*号的参数只有一个，且只能放最后（自动合并为一个元组）</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一个“*”号的参数不会接收关键字参数，两个“*”可以，且只接受关键字参数</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myPrint</span>(<span class="params">title,*contents</span>):</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> contents:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,x)</span><br><span class="line">myPrint(<span class="string">&quot;Read-only data types&quot;</span>,<span class="string">&quot;int&quot;</span>,<span class="string">&quot;float&quot;</span>,<span class="string">&quot;str&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>分配参数</strong>：调用时给实参加上“*”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myPrint</span>(<span class="params">title,*contents</span>):</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> contents:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>,x)</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;Read-only data types&quot;</span>,<span class="string">&quot;int&quot;</span>,<span class="string">&quot;float&quot;</span>,<span class="string">&quot;str&quot;</span>]</span><br><span class="line">myPrint(*a) <span class="comment">#此处为分配参数，会变成元组传递，加**实际传递的是字典</span></span><br></pre></td></tr></table></figure><ul><li>函数做参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_to_compute</span>(<span class="params">fun_com</span>):</span><br><span class="line">    result = fun_com(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">fun_to_compute(compute)</span><br></pre></td></tr></table></figure><ul><li>匿名函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun = <span class="keyword">lambda</span> x,y:x+y <span class="comment"># 只能写一行代码</span></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h2><ul><li>函数的作用域：先局部变量，再全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">将函数内定义的变量声明为全局变量:global y</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> y <span class="comment"># 告诉解释器，这是全局变量</span></span><br><span class="line">    z[<span class="number">0</span>] = <span class="number">1000</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    y = <span class="number">3</span></span><br><span class="line">    z = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    func()</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">[1000, 2, 3]</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">[1000, 2, 3]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>globals()函数：返回一个包含全局变量的字典</p><p>globals()[“x”]：访问以x为键的值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;local x:&quot;</span>,x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;global x:&quot;</span>,<span class="built_in">globals</span>()[<span class="string">&quot;x&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    func()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>递归（汉诺塔）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归算法</span></span><br><span class="line"><span class="comment">#1.n-1个从A通过C移动到B</span></span><br><span class="line"><span class="comment">#2.第n个盘子从A移动到C</span></span><br><span class="line"><span class="comment">#3.将n-1个从B通过A移动到C</span></span><br><span class="line"></span><br><span class="line">s=<span class="number">0</span></span><br><span class="line">num = <span class="number">3</span><span class="comment">#有几个圆盘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">han</span>(<span class="params">n,a,b,c</span>):</span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        han(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">        <span class="keyword">global</span> s</span><br><span class="line">        s+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(a + <span class="string">&quot;-&gt;&quot;</span> + c,s)</span><br><span class="line">        han(n-<span class="number">1</span>,b,a,c)</span><br><span class="line">han (num,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-小练习"><a href="#4-小练习" class="headerlink" title="4.小练习"></a>4.小练习</h2><p>写一个进度条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\r是回到当前行的行首&quot;</span></span><br><span class="line">progressBefore = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printProgressBar</span>(<span class="params">percent,prefix=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> progressBefore</span><br><span class="line">    <span class="keyword">if</span> percent-progressBefore &lt; <span class="number">0.001</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    progressBefore = percent</span><br><span class="line">    percentStr = (<span class="string">&quot;&#123;0:.1f&#125;&quot;</span>).<span class="built_in">format</span>(percent * <span class="number">30</span>)</span><br><span class="line">    filledLength = <span class="built_in">int</span>(<span class="number">30</span> * percent)</span><br><span class="line">    bar = <span class="string">&quot;*&quot;</span> * filledLength + <span class="string">&quot; &quot;</span> * (<span class="number">30</span> - filledLength)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r%s |%s|%s%% &quot;</span>%(prefix,bar,percentStr),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        printProgressBar((i+<span class="number">1</span>)/<span class="number">1000</span>,prefix=<span class="string">&quot;Progress:&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><h1 id="第八章-面向对象"><a href="#第八章-面向对象" class="headerlink" title="第八章 面向对象"></a>第八章 面向对象</h1><ul><li>特征：<strong>封装，继承，多态</strong></li></ul><h2 id="1-面向对象程序设计（Object-Oriented-Programming）"><a href="#1-面向对象程序设计（Object-Oriented-Programming）" class="headerlink" title="1.面向对象程序设计（Object Oriented Programming）"></a>1.面向对象程序设计（Object Oriented Programming）</h2><ol><li><strong>类（class）</strong>：和数据类型（data type）是同义词。如：“人”这一个类</li><li><strong>对象（object）</strong>：在OO中，变量（variable），对象，实例（instance）三个术语概念大致相同。如：一个具体的人，小明</li><li><strong>属性（attribute）</strong>：也称数据成员（data member）。如：姓名，性别等</li><li><strong>方法（method）</strong>：也称成员函数。如：说话，吃饭</li><li><strong>消息（message）</strong>：执行一个对象的方法，也称向这个对象发送了一个消息。</li><li><strong>对象 &#x3D; 属性 + 方法</strong></li></ol><h2 id="2-创建类"><a href="#2-创建类" class="headerlink" title="2.创建类"></a>2.创建类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    male = <span class="number">0</span></span><br><span class="line">    female = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:   <span class="comment"># 用以指示类定义的过程的开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;user defined class: Person.&quot;</span>   <span class="comment"># 类的描述性文档：Person.__doc__</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,idNo=<span class="string">&quot;N/A&quot;</span>,name=<span class="string">&quot;N/A&quot;</span></span>):   <span class="comment"># __init__()是构造函数，</span></span><br><span class="line">        <span class="comment">#构造函数的作用：实例化一个对象的同时初始化这个对象，即创建或实例化对象时，该函数会被自动执行，确保对象经过恰当的实例化</span></span><br><span class="line">        self.sName = name</span><br><span class="line">        self.gender = Gender.male</span><br><span class="line">        self.sId = idNo</span><br><span class="line">        self.iWeight = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Person::speak():&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am&quot;</span>, self.sName + <span class="string">&quot;,&quot;</span>, <span class="string">&quot;Nice to meet you here.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, weight</span>):</span><br><span class="line">        self.iWeight += weight</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I just eat&quot;</span>, weight, <span class="string">&quot;gram&#x27;s food.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">description</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> self.gender <span class="keyword">in</span> (Gender.female,Gender.male)</span><br><span class="line">        s = <span class="string">&quot;ID:%s\tName:%s\n&quot;</span>%(self.sId,self.sName)</span><br><span class="line">        t = <span class="string">&quot;Gender:%s\tBody Weight:%d&quot;</span>%(<span class="string">&quot;Male&quot;</span> <span class="keyword">if</span> self.gender == Gender.male <span class="keyword">else</span> <span class="string">&quot;Female&quot;</span>,self.iWeight)</span><br><span class="line">        <span class="keyword">return</span> s+t</span><br></pre></td></tr></table></figure><ul><li>self参数：基本上是必须的（P125）</li><li>定义类的成员函数：第一个参数是self</li><li>在成员函数内部：应用对象的形式为<strong>self.属性名</strong></li><li>构造函数也是成员函数，由解释器自动调用。</li></ul><h2 id="3-枚举类型"><a href="#3-枚举类型" class="headerlink" title="3.枚举类型"></a>3.枚举类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    male = <span class="number">0</span></span><br><span class="line">    female = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>继承Enum类型，可以用Gender.male来表示男性</p><h2 id="4-创建对象"><a href="#4-创建对象" class="headerlink" title="4.创建对象"></a>4.创建对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dora = Person(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;Dora chen&quot;</span>)<span class="comment"># 理论上只有当构造函数执行完毕之后，对象才真正存在</span></span><br><span class="line">dora.gender = Gender.female</span><br><span class="line">dora.iWeight = <span class="number">100</span></span><br><span class="line">dora.eat(<span class="number">320</span>)</span><br><span class="line"><span class="built_in">print</span>(dora.description())</span><br></pre></td></tr></table></figure><p><strong>注：</strong>同一类型的多个对象，其属性是相互独立的，但方法却是共享的。</p><h2 id="5-封装、接口与实现"><a href="#5-封装、接口与实现" class="headerlink" title="5.封装、接口与实现"></a>5.封装、接口与实现</h2><ul><li><strong>复用（reuse）</strong>：利用他人代码的方式（from math import *）</li><li><strong>接口（interface）</strong>：告诉我们功能和使用方法</li><li><strong>实现（implementation）</strong>：不需要了解的部分（如功能具体的实现算法等）</li><li><strong>封装（encapsuation）</strong>：实现一个复杂系统并将其细节隐藏起来，只向使用者提供一个简洁易用的接口的工作模式。</li><li><strong>组合（composition）</strong>：将某些自定义类型的对象作为对象属性&#x2F;构成部分的方法，也是一种代码复用的手段。</li></ul><h2 id="6-继承"><a href="#6-继承" class="headerlink" title="6.继承"></a>6.继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Person <span class="keyword">import</span> Person, Gender   <span class="comment"># Person类定义在同一目录下的另一个文件中，通过from...import把Person类和Gender类引入进来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="title class_ inherited__">Person</span>): <span class="comment"># Employee是Person的子类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,emplNo,idNo,name</span>):</span><br><span class="line">        <span class="built_in">super</span>(Employee,self).__init__(idNo,name) <span class="comment"># 执行父类Person的构造函数</span></span><br><span class="line">        <span class="comment">#Person.__init__(self,idNo,name)更佳</span></span><br><span class="line">        <span class="comment"># super(Employee,self)用于获取Employee的父类对象</span></span><br><span class="line">        self.sEmployeeNo = emplNo</span><br><span class="line">        self.sJobTitle = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.sDepartment = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.iWeekSalary = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am a&quot;</span>, self.sJobTitle + <span class="string">&quot;, I am working with my partners in department:&quot;</span>,self.sDepartment)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Employee::speak():&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().speak() <span class="comment">#等价于Person.speak(self)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am happy to work for you.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">description</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> self.gender <span class="keyword">in</span> (Gender.female,Gender.male)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用decription方法&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>函数重载（override）</strong>：子类重新实现父类的同名函数的方式。调用父类可以使用（super().speak() #等价于Person.speak(self)）</li></ul><table><thead><tr><th>术语</th><th>同义术语</th></tr></thead><tbody><tr><td>父类（parent class）</td><td>超类（super class），基类（base class）</td></tr><tr><td>子类（sub class）</td><td>扩展类（derived class），继承类（inherited class）</td></tr></tbody></table><h2 id="7-多态、抽象类"><a href="#7-多态、抽象类" class="headerlink" title="7.多态、抽象类"></a>7.多态、抽象类</h2><ul><li><a href="https://hep-urc-thumb.hep.com.cn/preview/hep5/b27fb1190147497d833c77705cf1cb5d/index.html?Expires=1714017563&OSSAccessKeyId=LTAI5tHb6LUzL2mw4VudhmfK&Signature=/j4RhhjiELoIM8TTD/UDLd6K6kY="><strong>多态（polymorphism）</strong></a></li></ul><h2 id="8-继承链"><a href="#8-继承链" class="headerlink" title="8.继承链"></a>8.继承链</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承链有关的方法和属性</span></span><br><span class="line"><span class="built_in">issubclass</span>(D,A) <span class="comment">#确定D是否是A的子类</span></span><br><span class="line">D.__base__ <span class="comment">#返回D类的基类</span></span><br><span class="line"><span class="built_in">isinstance</span>(d,B) <span class="comment">#判断d对象是否是B类的实例</span></span><br><span class="line">d.__class__ <span class="comment">#返回对象d的类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-实现的隐藏"><a href="#9-实现的隐藏" class="headerlink" title="9.实现的隐藏"></a>9.实现的隐藏</h2><ul><li>在属性和方法前面加上两个”_“,可以将其私有化</li></ul><h2 id="10-万物皆对象"><a href="#10-万物皆对象" class="headerlink" title="10.万物皆对象"></a>10.万物皆对象</h2><ul><li>OO的五大特性<ol><li>万物皆对象</li><li>对象皆有类型</li><li>程序就是由一堆对象构成，对象间通过发送消息协同工作</li><li>每个对象均有自己的存储空间，并由其他对象来构成</li><li>相同类型的对象可以接收相同类型的消息</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;Function Foo.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(foo),foo)</span><br><span class="line"><span class="built_in">print</span>(foo.__doc__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;foo.dir():&quot;</span>,foo.__dir__())<span class="comment"># 列出对象的全部成员</span></span><br><span class="line">func = foo</span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dummy</span>:</span><br><span class="line">    <span class="string">&quot;Class Dummy.&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dummy.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Dummy), Dummy)</span><br><span class="line"><span class="built_in">print</span>(Dummy.__doc__)</span><br><span class="line">Dummy2 = Dummy</span><br><span class="line">d = Dummy2()</span><br><span class="line">d.say()</span><br></pre></td></tr></table></figure><h2 id="11-类的对象属性和方法"><a href="#11-类的对象属性和方法" class="headerlink" title="11.类的对象属性和方法"></a>11.类的对象属性和方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tomato</span>:</span><br><span class="line">    objectCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.objectCount += <span class="number">1</span></span><br><span class="line">        Tomato.objectCount += <span class="number">1</span></span><br><span class="line">t1 = Tomato()</span><br><span class="line">t2 = Tomato()</span><br><span class="line"><span class="built_in">print</span>(Tomato.objectCount)</span><br><span class="line"><span class="built_in">print</span>(t1.objectCount)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="12-多重继承"><a href="#12-多重继承" class="headerlink" title="12.多重继承"></a>12.多重继承</h2><p>不建议使用，会出现“并发症”。推荐看前言中的视频</p><h2 id="13-特殊-魔法方法"><a href="#13-特殊-魔法方法" class="headerlink" title="13.特殊&#x2F;魔法方法"></a>13.特殊&#x2F;魔法方法</h2><ul><li><strong>特殊方法（special method）</strong>:函数名前后各两个下划线，长具备特殊用途。</li><li><strong>析构函数（destructer）</strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__del__() <span class="comment">#正好与构造函数相反</span></span><br></pre></td></tr></table></figure><h2 id="14-property属性"><a href="#14-property属性" class="headerlink" title="14.property属性"></a>14.property属性</h2><p>property是一种特殊的属性，工作起来像属性，实际上是方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rect</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.area = self.width*self.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setSize</span>(<span class="params">self,size</span>):</span><br><span class="line">        self.width, self.height = size<span class="comment">#从size元组解包</span></span><br><span class="line">        self.area = self.width * self.height</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setSize(): I worked like a common property, but actually, I am a method.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getSize(): I am a method too.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.width,self.height</span><br><span class="line">    size = <span class="built_in">property</span>(getSize,setSize)</span><br><span class="line"></span><br><span class="line">r0 = Rect()</span><br><span class="line">r0.size = <span class="number">120</span>,<span class="number">20</span><span class="comment">#120,20被当作一个元组传递给setSize()函数</span></span><br><span class="line">r1 = Rect()</span><br><span class="line">r1.size = <span class="number">13</span>,<span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Rect:&quot;</span>, r0.size, <span class="string">&quot;Area =&quot;</span>,r0.area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Rect:&quot;</span>, r1.size, <span class="string">&quot;Area =&quot;</span>,r1.area)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.通过property()&quot;函数&quot;我们创造了一个size属性，并指定了这个属性的读取函数和设置函数</span></span><br><span class="line"><span class="string">2.对size属性的赋值会执行setSize()方法，对size取值则会执行getSize()方法</span></span><br><span class="line"><span class="string">3.size属性是虚拟的，它本身并不存储任何值。数据存储在对象的width,height,area属性中</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="15-其他函数"><a href="#15-其他函数" class="headerlink" title="15.其他函数"></a>15.其他函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>()函数用于检查对象是否拥有指定名称的属性，返回布尔型</span><br><span class="line"><span class="built_in">setattr</span>()函数给对象设定属性及其值。</span><br><span class="line"><span class="built_in">getattr</span>()函数则用于获取对象指定名称的属性的值，如果属性不存在，返回第三个参数给定的默认值。</span><br></pre></td></tr></table></figure><h2 id="16-类型的注解"><a href="#16-类型的注解" class="headerlink" title="16.类型的注解"></a>16.类型的注解</h2><ol><li><p>变量的类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">变量: 类型</span><br><span class="line">a:<span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">b:<span class="built_in">float</span> = <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">stu:Student = Student()</span><br><span class="line"></span><br><span class="line">li:<span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">li2:<span class="built_in">list</span>[<span class="built_in">int</span>,<span class="built_in">float</span>] = [<span class="number">1</span>,<span class="number">2.1</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数（方法）的类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法的注解：</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>Union注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> union</span><br><span class="line">li:<span class="built_in">list</span>[union[<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">float</span>]] = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.2</span>,<span class="number">8.2</span>,<span class="string">&quot;hello&quot;</span>]</span><br></pre></td></tr></table></figure></li></ol><h1 id="第九章-字符串进阶"><a href="#第九章-字符串进阶" class="headerlink" title="第九章 字符串进阶"></a>第九章 字符串进阶</h1><h2 id="1-浅尝辄止"><a href="#1-浅尝辄止" class="headerlink" title="1.浅尝辄止"></a>1.浅尝辄止</h2><p>字符串的字典映射替换：</p><ul><li>format()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sText = <span class="string">&quot;name:&#123;&#125;,age:&#123;age&#125;,sex:&#123;sex&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;小明&quot;</span>,age=<span class="number">20</span>,sex=<span class="string">&quot;male&quot;</span>) <span class="comment">#无名实参替换，有名实参替换。&#123;&#125;,&#123;sex&#125;前者是匿名替换字段，后者有指定名称</span></span><br><span class="line"><span class="built_in">print</span>(sText)</span><br></pre></td></tr></table></figure><ul><li>format_map()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dro = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span><br><span class="line">s = <span class="string">&quot;name:&#123;name&#125;,age:&#123;age&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.format_map(dro))</span><br></pre></td></tr></table></figure><h2 id="2-替代字段"><a href="#2-替代字段" class="headerlink" title="2.替代字段"></a>2.替代字段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">97</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;score=<span class="subst">&#123;score:<span class="number">10.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;score:10.2f&#125; 为替代字段</span></span><br><span class="line"><span class="string">score       为替代字段名</span></span><br><span class="line"><span class="string">:后面部分 格式说明符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>说明符</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">b</td><td align="center">整数以二进制展现。</td></tr><tr><td align="center">c</td><td align="center">整数按Unicode码转成对应符号，请试：”{num:c}”.format(num&#x3D;0x1f60a)</td></tr><tr><td align="center">d</td><td align="center">整数以十进制展现，如果格式说明符被省略，整数默认为十进制</td></tr><tr><td align="center">o</td><td align="center">整数以八进制展现(字母小o，不是数字0)</td></tr><tr><td align="center">x</td><td align="center">整数以十六进制展现且使用小写字母</td></tr><tr><td align="center">X</td><td align="center">整数以十六进制展现但使用大写字母</td></tr><tr><td align="center">e</td><td align="center">整数&#x2F;浮点数使用科学计数法展现，使用e表示指数</td></tr><tr><td align="center">E</td><td align="center">整数&#x2F;浮点数使用科学计数法展现，使用E表示指数</td></tr><tr><td align="center">f</td><td align="center">整数&#x2F;浮点数以定点小数展现，比如3.14，特殊值nan和inf，用小写表示。nan表示非数-not a number， inf表示正无穷，inf表示负无穷。</td></tr><tr><td align="center">F</td><td align="center">同f，但对于特殊值NAN和INF，使用大写表示</td></tr><tr><td align="center">g</td><td align="center">系统自行选择使用定点小数或者科学计数法表示整数&#x2F;浮点数</td></tr><tr><td align="center">G</td><td align="center">同g,但用大写字符表示指数及特殊值</td></tr><tr><td align="center">n</td><td align="center">同g, 但插入数字分隔符</td></tr><tr><td align="center">s</td><td align="center">字符串以字符串原始形式展现</td></tr><tr><td align="center">%</td><td align="center">整数&#x2F;浮点数以百分比展示</td></tr></tbody></table><h2 id="3-宽度、精度及分结符"><a href="#3-宽度、精度及分结符" class="headerlink" title="3.宽度、精度及分结符"></a>3.宽度、精度及分结符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;pi:<span class="number">10.2</span>f&#125;，说明定点小数宽度<span class="number">10</span>，精确到小数点第<span class="number">2</span>位</span><br><span class="line">&#123;num:<span class="number">10</span>&#125;，说明整数宽度<span class="number">10</span>，打印结果中明显看到<span class="number">1024</span>前的空格。</span><br><span class="line">&#123;:<span class="number">.5</span>&#125;，取了字符串的前<span class="number">5</span>个字符。</span><br><span class="line">&#123;:,&#125;，十进制整数中使用逗号作为千位分节符。</span><br><span class="line"></span><br><span class="line">&#123;pi:<span class="number">010.2</span>f&#125;，宽度<span class="number">10</span>，精度<span class="number">2</span>，<span class="number">10</span>前的<span class="number">0</span>表示补<span class="number">0</span>。</span><br><span class="line">&#123;pi:&lt;<span class="number">10.2</span>f&#125;，&lt;表示左对齐。</span><br><span class="line">&#123;pi:^<span class="number">10.2</span>f&#125;，^表示居中。</span><br><span class="line">&#123;pi:@&gt;<span class="number">10.2</span>f&#125;，&gt;表示右对齐，使用特殊字符@来填充。</span><br><span class="line">&#123;<span class="number">0</span>:+<span class="number">10.2</span>f&#125;，使用第<span class="number">0</span>个参数，+号表示要显示正号。</span><br><span class="line">&#123;<span class="number">1</span>:=+<span class="number">10.2</span>f&#125;，使用第<span class="number">1</span>个参数，=号表示通过在符号位和数之间插入填充字符（空格）来满足<span class="number">10</span>位宽度。</span><br></pre></td></tr></table></figure><h2 id="4-其他函数"><a href="#4-其他函数" class="headerlink" title="4.其他函数"></a>4.其他函数</h2><ul><li><p>center()函数：接受两个参数，第一个为目标宽度，第二个为填充字符，默认为空格。</p><p>相关函数有ljust()-右边补填充字符，rjust()-左端补填充字符,zfill()-左端补0。</p></li><li><p>find()函数：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s.find(<span class="string">&quot;to&quot;</span>,<span class="number">0</span>,<span class="built_in">len</span>(s))试图在s中找<span class="string">&quot;to&quot;</span>第一次出现的位置下标，如果找不到，返回-<span class="number">1</span>。参数<span class="number">2</span>，<span class="number">3</span>指明了搜索的开始下标和结束下标（不含结束下标），参数<span class="number">2</span>,<span class="number">3</span>可省略。</span><br><span class="line"></span><br><span class="line">rfind() - 找字符串中指定的子串的最后一次出现的位置下标；</span><br><span class="line"></span><br><span class="line">index() - 找指定子串的第一次出现的位置下标，找不到引发异常；</span><br><span class="line"></span><br><span class="line">rindex() - 找最后一个子串的索引，找不到引发异常；</span><br><span class="line"></span><br><span class="line">count() - 统计子串出现次数； </span><br><span class="line"></span><br><span class="line">startswidth() - 是否以子串开头；</span><br><span class="line"></span><br><span class="line">endswidth() - 是否以子串结尾。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>join()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.join(seq)中，s为指定的间隔字符串，seq可以是元组或者列表，但其中的元素必须是字符串</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>replace()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sText.replace(old,new,count=-<span class="number">1</span>)将字符串内的指定子串全部替换成另一个指定子串，不会导致sText被修改，函数会返回一个新的字符串作为结果。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>split()函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">split()函数的作用与join()函数相反，把一个字符串用指定的间隔符拆开成多个字符串，并放入一个列表中返回。</span><br><span class="line"></span><br><span class="line">相关函数：</span><br><span class="line"></span><br><span class="line">partition(sep)-使用子串划分字符串，返回一个元组，包括三个字符串：sep前的部分，sep，sep后的部分； </span><br><span class="line">  seq=“stringsthbig”</span><br><span class="line">  s=seq.partition(“sth”)</span><br><span class="line">  s的结果为(<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;sth&#x27;</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rpartition(sep)-同partition(sep)，搜索方向为右向左; </span><br><span class="line"></span><br><span class="line">rsplit()-同split()，方向右向左; </span><br><span class="line"></span><br><span class="line">splitlines()-分拆字符串为多行。  </span><br><span class="line"></span><br><span class="line">translate()-借助于转换表实现字符串内单字符的快速替换；</span><br><span class="line"></span><br><span class="line"><span class="keyword">is</span>系列函数，用于判断字符串是否具备某种特性，比如仅包含数字，全是大写之类：</span><br><span class="line">isspace(), isdigit(),isupper(),islower(),isdecimal(),</span><br><span class="line">isidentifier(),isnumeric(),isprintable(),istitle()。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第十章-文件读写"><a href="#第十章-文件读写" class="headerlink" title="第十章 文件读写"></a>第十章 文件读写</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;datafile.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;This is a file which is writable in text mode.\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;&#x27;w&#x27; means open file in write mode.\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;datafile.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">sLine1 = f.readline()</span><br><span class="line">sLine2 = f.readline()</span><br><span class="line"><span class="built_in">print</span>(sLine1,sLine2)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">open(file,mode,encoding=&#x27;utf-8&#x27;)函数用于打开一个文件，其中，file参数用于指定操作文件名，该文件名既可以是绝对路径，比如&quot;d:\\Python\\Test\\test.dat&quot;，也可以是相对路径，比如&quot;data\\test.dat&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">close(f)用于关闭已打开的文件f,好处有：</span></span><br><span class="line"><span class="string">    1.减少操作系统I/O资源占用；</span></span><br><span class="line"><span class="string">    2.避免因缓存/意外错误导致文件没有成功写入甚至损坏。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果不想关闭文件，同时又希望确保将缓存中的数据写入文件，可以执行f.flush()函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f.read()函数从文件读出全部内容并以字符串形式(文本模式时)返回</span></span><br><span class="line"><span class="string">f.read(5)则从文件读出5个字符</span></span><br><span class="line"><span class="string">f.readline()则从文件读出一行</span></span><br><span class="line"><span class="string">f.readlines()读取全部行，得到列表</span></span><br><span class="line"><span class="string">f.writeline()则负责向文件写入一行</span></span><br><span class="line"><span class="string">f.write()用于文件写入数据</span></span><br><span class="line"><span class="string">直接调用f.write，内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区</span></span><br><span class="line"><span class="string">当调用f.flush的时候，内容会真正写入文件</span></span><br><span class="line"><span class="string">with open() as f通过with open语法打开文件，可以自动关闭</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>mode参数：</p><table><thead><tr><th><strong>文件模式</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td>“r”</td><td align="left">读模式（默认）</td></tr><tr><td>“w”</td><td align="left">写模式</td></tr><tr><td>“x”</td><td align="left">独占写模式，这意味着不允许其它应用程序在该文件关闭前使用该文件; x来源于英文e<strong>x</strong>clusive-独占。</td></tr><tr><td>“a”</td><td align="left">附加模式 - append</td></tr><tr><td>“b”</td><td align="left">二进制模式，与其它模式配用</td></tr><tr><td>“t”</td><td align="left">文本模式（默认）</td></tr><tr><td>“+”</td><td align="left">读写模式，必须与r,w,a等配合使用</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当<span class="built_in">open</span>()函数省略了文件模式参数时，默认为<span class="string">&quot;rt“</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以 &quot;</span>w<span class="string">&quot;或&quot;</span>w+<span class="string">&quot;模式打开文件时，如果文件不存在，会自动新建一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>w<span class="string">b&quot;以写模式打开一个二进制文件，&quot;</span><span class="string">rb&quot;则以读模式打开一个二进制文件。如果又想读，又想写，可以使用&quot;</span>wb+<span class="string">&quot;或者&quot;</span>rb+<span class="string">&quot;。</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="2-随机存取"><a href="#2-随机存取" class="headerlink" title="2.随机存取"></a>2.随机存取</h2><p>文件可以看作是一个流(stream)。在流中，每一个元素（对于二进制文件而言，以字节为单位关）都有地址，这个地址称为偏移量(offset).</p><p>系统允许跳到某个特定偏移量读取或写入。写入时，该偏移量开始的文件原内容会被覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;randomaccess.txt&#x27;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">sText = <span class="string">&quot;&quot;</span>.join((<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)))</span><br><span class="line">f.write(<span class="string">&quot;汉&quot;</span> + sText)</span><br><span class="line">f.seek(<span class="number">6</span>)</span><br><span class="line">f.write(<span class="string">&quot;OFFSET_6_&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Current file position after seek and write:&quot;</span>, f.tell())</span><br><span class="line">f.close()</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;randomaccess.txt&#x27;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">seek(offset,whence=io.SEEK_SET)函数：</span></span><br><span class="line"><span class="string">    whence表明偏移量的参照物：io.SEEK_SET（值为0） - 相对于文件开头偏移，此时偏移量当为正数；</span></span><br><span class="line"><span class="string">       io.SEEK_END （值为2） - 相对于文件尾偏移，此时偏移量当为负数；</span></span><br><span class="line"><span class="string">       io.SEEK_CUR （值为1） - 相对于当前读写位置偏移，此时偏移量可为正数或负数。</span></span><br><span class="line"><span class="string">    当文件以文本模式工作时，seek()无法相对文件尾或者当前读写位置偏移。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-标准输入，输出及错误流"><a href="#3-标准输入，输出及错误流" class="headerlink" title="3.标准输入，输出及错误流"></a>3.标准输入，输出及错误流</h2><p>和UNIX操作系统的概念很像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys.stdin ： 标准输入，对应于键盘/控制台输入，使用<span class="built_in">input</span>()函数读取操作者输入时，数据即可认为“读取”自sys.stdin</span><br><span class="line"></span><br><span class="line">sys.stdout ： 标准输出，对应于显示器/控制台输出，使用<span class="built_in">print</span>()函数打印信息时，可视作数据被<span class="string">&quot;写入&quot;</span>至sys.stdout</span><br><span class="line"></span><br><span class="line">sys.stderr ： 标准错误，程序产生错误时，报错信息则被输出给sys.stderr，默认情况下，sys.stderr也对应显示器/控制台输出</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;Alex\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;27\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">fIn = <span class="built_in">open</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">sys.stdin = fIn</span><br><span class="line">fOut = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">sys.stdout = fOut</span><br><span class="line">fError = <span class="built_in">open</span>(<span class="string">&#x27;error.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">sys.stderr = fError</span><br><span class="line">sName = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">iAge = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;How old are you?&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hi,&quot;</span>, sName.title(), <span class="string">&quot;You are &#123;&#125; year&#x27;s old.&quot;</span>.<span class="built_in">format</span>(iAge))</span><br><span class="line">fIn.close()</span><br><span class="line">fOut.close()</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;ERROR INFO&quot;</span>)</span><br><span class="line">fError.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将sys.stdin, sys.stdout, sys.stderr重定向：</span></span><br><span class="line"><span class="string">sys.stdin = fIn </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sys.stdout = fOut </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sys.stderr = fError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-文件内容迭代"><a href="#4-文件内容迭代" class="headerlink" title="4.文件内容迭代"></a>4.文件内容迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;title.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        char = f.read(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> char:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        process(char) <span class="comment"># 某种字符串处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">read(1)每次从文件中读取一个字符，当读到文件尾时，返回空。按照非空即真，空即是假的原则，到达文件尾时，break语句将执行，循环结束，文件被自动关闭。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按行迭代：</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;title.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> f.readlines():</span><br><span class="line">        process(x)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;title.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="5-json文件格式"><a href="#5-json文件格式" class="headerlink" title="5.json文件格式"></a>5.json文件格式</h2><p>json的全称为JavaScript Object Notation ，是一种轻量级的跨语言、跨平台数据交换格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dora = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Dora CHEN&quot;</span>, <span class="string">&quot;no&quot;</span>:<span class="string">&quot;2018173&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">26</span>,<span class="string">&quot;married&quot;</span>:<span class="literal">False</span>,</span><br><span class="line"><span class="string">&quot;scores&quot;</span>:[&#123;<span class="string">&quot;C++&quot;</span>:<span class="number">76</span>&#125;,&#123;<span class="string">&quot;Data Structure&quot;</span>:<span class="number">99.5</span>&#125;,&#123;<span class="string">&quot;Home Econoics&quot;</span>:<span class="number">62</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(json.dumps(dora))</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dora.json&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(dora,f)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dora.json&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    doraLoaded = json.load(f)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> doraLoaded.items():</span><br><span class="line">    <span class="built_in">print</span>(key,<span class="string">&quot;:&quot;</span>, value)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">json模块和dump()函数把一个嵌套的字典以及内部列表，甚至列表内部的字典序列化并存储至一个文本文件: dora.json。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dora = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Dora CHEN&quot;</span>, <span class="string">&quot;no&quot;</span>:<span class="string">&quot;2018173&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">26</span>,<span class="string">&quot;married&quot;</span>:<span class="literal">False</span>,</span><br><span class="line"><span class="string">&quot;scores&quot;</span>:[&#123;<span class="string">&quot;C++&quot;</span>:<span class="number">76</span>&#125;,&#123;<span class="string">&quot;Data Structure&quot;</span>:<span class="number">99.5</span>&#125;,&#123;<span class="string">&quot;Home Econoics&quot;</span>:<span class="number">62</span>&#125;]&#125;</span><br><span class="line"><span class="comment">#print(json.dumps(dora))</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dora.json&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(dora,f)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dora.json&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    doraLoaded = json.load(f)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> doraLoaded.items():</span><br><span class="line">    <span class="built_in">print</span>(key,<span class="string">&quot;:&quot;</span>, value)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">借助于load()函数，从dora.json文件复原了一个doraLoaded字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br></pre></td></tr></table></figure><h1 id="第十一章-异常处理及单元测试"><a href="#第十一章-异常处理及单元测试" class="headerlink" title="第十一章 异常处理及单元测试"></a>第十一章 异常处理及单元测试</h1><h2 id="1-遇到过的异常"><a href="#1-遇到过的异常" class="headerlink" title="1.遇到过的异常"></a>1.遇到过的异常</h2><table><thead><tr><th><strong>异常类</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>ValueError</td><td>值与期望的不符</td></tr><tr><td>IndentationError</td><td>代码缩进错误</td></tr><tr><td>IndexError</td><td>序列索引不存在</td></tr><tr><td>AssertionError</td><td>断言失败</td></tr><tr><td>NameError</td><td>名字不存在</td></tr><tr><td>KeyError</td><td>映射（比如字典）中的键不存在</td></tr><tr><td>AttributeError</td><td>属性错误（对象无指定名字的属性)</td></tr><tr><td>TypeError</td><td>类型出错</td></tr><tr><td>SyntaxError</td><td>代码语法错误</td></tr><tr><td>OSError</td><td>操作系统未能执行指定任务</td></tr><tr><td>ZeroDivisionError</td><td>除0错误</td></tr></tbody></table><p>异常发现后的处理：</p><ol><li>捕获并处理异常，尝试将程序从异常中拯救出来，继续正常运行。</li><li>捕获并处理异常，至少做一些必要的紧急操作，避免严重后果的发生。</li><li>捕获并处理异常，将异常信息保存在错误日志中，以便程序员查找错误发生的原因。</li></ol><h2 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2.异常处理"></a>2.异常处理</h2><p>try-except-else-finally语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a/b</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sFirst = <span class="built_in">input</span>(<span class="string">&quot;First number:&quot;</span>)</span><br><span class="line">    sSecond = <span class="built_in">input</span>(<span class="string">&quot;Second number:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sFirst == <span class="string">&quot;q&quot;</span> <span class="keyword">or</span> sSecond == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iFirst = <span class="built_in">int</span>(sFirst)</span><br><span class="line">        iSecond = <span class="built_in">int</span>(sSecond)</span><br><span class="line">        fResult = divide(iFirst,iSecond)</span><br><span class="line">    <span class="keyword">except</span> (ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can not divide by 0:&quot;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> (ValueError,TypeError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Illegal value been inputted:&quot;</span>,e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line">    <span class="keyword">except</span> (Exception) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;An exception found, I do not know how to process it.&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>( sFirst, <span class="string">&quot;/&quot;</span>, sSecond, <span class="string">&quot;=&quot;</span>, fResult)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#x27;Finally&#x27; will be executed what ever happens.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.首先，解释器将会执行try子句内的代码</span></span><br><span class="line"><span class="string">2.try子句的执行没有发生异常，在try子句执行完毕后将执行else子句，然后再执行finally语句</span></span><br><span class="line"><span class="string">3.如果try子句的执行发生了异常，将从前往后逐一检查except子句括号里所包括的异常类型，当实际发生的异常属于该except子句括号内的异常类型时，该except子句将会被执行。最后，finally子句也会被执行。</span></span><br><span class="line"><span class="string">4.如果捕获的异常在当前情境下处理不了，也可以接着向外抛：raise即为该用途。如果直接raise，抛出的是原有异常。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    iFirst = int(sFirst)</span></span><br><span class="line"><span class="string">    iSecond = int(sSecond)</span></span><br><span class="line"><span class="string">    fResult = divide(iFirst,iSecond)</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    print(&quot;You can not divide by 0:&quot;,e)</span></span><br><span class="line"><span class="string">except (NameError, ZeroDivisionError):</span></span><br><span class="line"><span class="string">    print(&#x27;ZeroDivision错误...&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>        </span><br></pre></td></tr></table></figure><ul><li>异常是具有传递性的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当函数func01中发生异常, 并且没有捕获处理这个异常的时候, 异常</span></span><br><span class="line"><span class="string">会传递到函数func02, 当func02也没有捕获处理这个异常的时候</span></span><br><span class="line"><span class="string">main函数会捕获这个异常,  这就是异常的传递性.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个出现异常的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1 开始执行&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span>     <span class="comment"># 肯定有异常，除以0的异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1 结束执行&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个无异常的方法，调用上面的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2 开始执行&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2 结束执行&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个方法，调用上面的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func2()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;出现异常了，异常的信息是：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="3-警告"><a href="#3-警告" class="headerlink" title="3.警告"></a>3.警告</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> warnings <span class="keyword">import</span> warn</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a,b</span>):</span><br><span class="line">    fResult = a / b</span><br><span class="line">    <span class="keyword">if</span> fResult &lt; <span class="number">0.0000001</span>:</span><br><span class="line">        warn(<span class="string">&quot;The result is very close to Zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> fResult</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">0.1</span>, <span class="number">10000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Something else.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">warn()函数发出了警告，并把警告打印至屏幕，但程序的执行不会因为该警告而停止：print(&quot;Something else.&quot;)在警告之后继续执行了。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="第十二章-python的模块和包"><a href="#第十二章-python的模块和包" class="headerlink" title="第十二章 python的模块和包"></a>第十二章 python的模块和包</h1><h2 id="1-模块"><a href="#1-模块" class="headerlink" title="1.模块"></a>1.模块</h2><ul><li><p>模块</p><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾.  模块能定义函数，类和变量，模块里也能包含可执行的代码.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 类、变量、方法等</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能名 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure></li><li><p>自定义模块</p><p>每个Python文件都可以作为一个模块，模块的名字就是文件的名字. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">问题：</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line">    test(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行`test`函数的调用</span><br><span class="line">    </span><br><span class="line">解决：</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line">    <span class="comment"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行test函数调用</span></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        test (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">当导入多个模块的时候，且模块内有同名功能. 当调用这个同名功能的时候，调用到的是后面导入的模块的功能</span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> my_module2 <span class="keyword">import</span> test</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 调用的是my_module2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>__all__</span><br><span class="line">如果一个模块文件中有`__all__`变量，当使用`<span class="keyword">from</span> xxx <span class="keyword">import</span> *`导入时，只能导入这个列表中的元素</span><br><span class="line"><span class="comment"># __all__变量：__all__=[&quot;test_a&quot;]</span></span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> *</span><br><span class="line">test_a(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-包"><a href="#2-包" class="headerlink" title="2.包"></a>2.包</h2><ul><li><p>什么是包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从物理上看，包就是一个文件夹，在该文件夹下包含了一个 __init__.py 文件，该文件夹可用于包含多个模块文件</span><br><span class="line">从逻辑上看，包的本质依然是模块</span><br><span class="line">注意：新建包后，包内部会自动创建`__init__.py`文件，这个文件控制着包的导入行为</span><br></pre></td></tr></table></figure></li><li><p>导入包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.方式一</span><br><span class="line">    import 包名.模块名</span><br><span class="line">    包名.模块名.目标</span><br><span class="line"></span><br><span class="line">2.方式二</span><br><span class="line">  注意：必须在`__init__.py`文件中添加`__all__ = []`，控制允许导入的模块列表</span><br><span class="line">from 包名 import *</span><br><span class="line">模块名.目标</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装第三方包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称</span><br></pre></td></tr></table></figure></li></ul><h1 id="第十三章-python高阶技巧"><a href="#第十三章-python高阶技巧" class="headerlink" title="第十三章 python高阶技巧"></a>第十三章 python高阶技巧</h1><h2 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1.闭包"></a>1.闭包</h2><p>在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，把这个使用外部函数变量的内部函数称为闭包。</p><ul><li><p>优点：</p><ol><li>无需定义全局变量即可实现通过函数，持续的访问、修改某个值</li><li>闭包使用的变量的所用于在函数内，难以被错误的调用修改</li></ol></li><li><p>缺点：</p><ol><li>由于内部函数持续引用外部函数的值，所以会导致这一部分内存空间不被释放，一直占用内存</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.简单闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">logo</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&lt;<span class="subst">&#123;logo&#125;</span>&gt;<span class="subst">&#123;msg&#125;</span>&lt;<span class="subst">&#123;logo&#125;</span>&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn1 = outer(<span class="string">&quot;黑马程序员&quot;</span>)</span><br><span class="line">fn1(<span class="string">&quot;大家好&quot;</span>)</span><br><span class="line"></span><br><span class="line">fn2 = outer(<span class="string">&quot;传智教育&quot;</span>)</span><br><span class="line">fn2(<span class="string">&quot;大家好&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.使用nonlocal关键字修改外部函数的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">num1</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">num2</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> num1</span><br><span class="line">        num1 += num2</span><br><span class="line">        <span class="built_in">print</span>(num1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">fn = outer(<span class="number">10</span>)</span><br><span class="line">fn(<span class="number">10</span>)</span><br><span class="line">fn(<span class="number">10</span>)</span><br><span class="line">fn(<span class="number">10</span>)</span><br><span class="line">fn(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用闭包实现ATM小案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_create</span>(<span class="params">initial_amount=<span class="number">0</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">num, deposit=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> initial_amount</span><br><span class="line">        <span class="keyword">if</span> deposit:</span><br><span class="line">            initial_amount += num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;存款：+<span class="subst">&#123;num&#125;</span>， 账户余额：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            initial_amount -= num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款：-<span class="subst">&#123;num&#125;</span>， 账户余额：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line"></span><br><span class="line">atm = account_create()</span><br><span class="line"></span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">200</span>)</span><br><span class="line">atm(<span class="number">100</span>, deposit=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2.装饰器"></a>2.装饰器</h2><p>装饰器：也是一种闭包， 其功能就是在不破坏目标函数原有的代码和功能的前提下，为目标函数增加新功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.装饰器的一般写法（闭包）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我睡觉了&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我起床了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中......&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">fn = outer(sleep)</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.装饰器的快捷写法（语法糖）</span></span><br><span class="line"><span class="comment"># 常用写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我睡觉了&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我起床了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中......&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">sleep()</span><br></pre></td></tr></table></figure><h2 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h2><p>设计模式是一种编程套路，可以极大的方便程序的开发。最常见、最经典的设计模式，就是我们所学习的面向对象了。</p><p>除了面向对象外，在编程中也有很多既定的套路可以方便开发，称之为设计模式：</p><ul><li><p>单例、工厂模式</p></li><li><p>建造者、责任链、状态、备忘录、解释器、访问者、观察者、中介、模板、代理模式</p></li></ul><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p><p>定义:</p><ul><li>保证一个类只有一个实例,并提供一个访问它的全局访问点</li><li>适用场景:当一个类只能有一个实例，而客户可以从一个众所周知的访问点访问它时。</li></ul><p>优点：</p><ul><li>节省内存</li><li>节省创建对象的开销</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个str_tools_py.py文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrTools</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">str_tool = StrTools()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个test.py文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> str_tools_py <span class="keyword">import</span> str_tool</span><br><span class="line"></span><br><span class="line">s1 = str_tool</span><br><span class="line">s2 = str_tool</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure><h3 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2.工厂模式"></a>2.工厂模式</h3><p>当需要大量创建一个类的实例的时候， 可以使用工厂模式。即从原生的使用类的构造去创建对象的形式迁移到，基于工厂提供的方法去创建对象的形式。</p><p>优点：</p><ul><li>大批量创建对象的时候有统一的入口，易于代码维护</li><li>当发生修改，仅修改工厂类的创建方法即可</li><li>符合现实世界的模式，即由工厂来制作产品（对象）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_person</span>(<span class="params">self, p_type</span>):</span><br><span class="line">        <span class="keyword">if</span> p_type == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Worker()</span><br><span class="line">        <span class="keyword">elif</span> p_type == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Student()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Teacher()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pf = PersonFactory()</span><br><span class="line">worker = pf.get_person(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">stu = pf.get_person(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">teacher = pf.get_person(<span class="string">&#x27;t&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写到这里，基本上是把python的语法笔记写完了。最开始，我还以为就能够2天写完，没想到重新学了一遍收获颇多，大大小小花了两周多的时间。就例如<strong>OO</strong>程序设计，在平常用来学习写的代码，几乎是用不到的，这也以为着遗忘也是必然的。所以，希望这一片文档能够，快速帮我复习python的语法。</p><p>当然，对于教材后面的Numpy等知识点，还是去看前言中的视频。当然等有需要的时候，在去写数据分析与可视化的笔记。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫</title>
      <link href="/2023/11/01/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E7%88%AC%E8%99%AB/"/>
      <url>/2023/11/01/1.python/1.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/python%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习视频：<a href="https://www.bilibili.com/video/BV1Db4y1m7Ho?p=49&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">尚硅谷</a></p><p>学习前最好是有一定的python基础，学习的效率会更加的好。</p><p>CTRL + &#x2F; 快速注释</p><h1 id="1-前提知识"><a href="#1-前提知识" class="headerlink" title="1.前提知识"></a>1.前提知识</h1><h2 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>通过文件操作，可以将字符串写入到一个本地文件。但是，如果是一个对象(例如列表、字典、元组等)，就无法直接写入到一个文件里，需要对这个对象进行序列化，然后才能写入到文件里。</p><p>设计一套协议，按照某种规则，把内存中的数据转换为字节序列，保存到文件，这就是序列化，反之，从文件的字节序列恢复到内存中，就是反序列化。</p><ul><li>对象—&gt;字节序列 &#x3D;&#x3D;&#x3D; 序列化</li><li>字节序列—&gt;对象 &#x3D;&#x3D;&#x3D;反序列化</li></ul><p>Python中提供了JSON这个模块用来实现数据的序列化和反序列化。</p><h3 id="2-序列化的实现"><a href="#2-序列化的实现" class="headerlink" title="2.序列化的实现"></a>2.序列化的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对象 ---&gt; 字节序列 == 序列化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化有2种:dumps和dump</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种dumps</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">name_list = [<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">names = json.dumps(name_list)<span class="comment">#序列化</span></span><br><span class="line">fp.write(names)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="built_in">print</span>(names,<span class="built_in">type</span>(names)) <span class="comment"># 字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种dump</span></span><br><span class="line"><span class="comment">#在将对象转换成字符串的同时，指定一个文件的对象，然后把转换后的字符串写入到这个文件里</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">name_list = [<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line">json.dump(name_list,fp)<span class="comment">#序列化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">相当于将</span></span><br><span class="line"><span class="string">names = json.dumps(name_list)和</span></span><br><span class="line"><span class="string">fp.write(names)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h3 id="3-反序列化的实现"><a href="#3-反序列化的实现" class="headerlink" title="3.反序列化的实现"></a>3.反序列化的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字节序列 变为 对象 == 反序列化</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#反序列化:loads,load</span></span><br><span class="line"><span class="comment">#将json的字符串变成一个python对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种loads</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = fp.read()</span><br><span class="line">result = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种load</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">result = json.load(fp)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h2 id="2-异常"><a href="#2-异常" class="headerlink" title="2.异常"></a>2.异常</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>程序在运行过程中，由于编码不规范，或者其他原因一些客观原因，导致程序无法继续运行，此时，程序就会出现异常。如果我们不对异常进行处理，程序可能会由于异常直接中断掉。为了保证程序的健壮性，我们在程序设计里提出了异常处理这个概念。</p><h3 id="2-try…except语句"><a href="#2-try…except语句" class="headerlink" title="2.try…except语句"></a>2.try…except语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">可能会出现异常的代码块</span><br><span class="line"><span class="keyword">except</span> 异常的类型:</span><br><span class="line">出现异常以后的处理语句（友好的提示）</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例：</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件没有找到,请检查文件名称是否正确&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-网页页面结构的介绍"><a href="#3-网页页面结构的介绍" class="headerlink" title="3.网页页面结构的介绍"></a>3.网页页面结构的介绍</h2><h3 id="1-html文件"><a href="#1-html文件" class="headerlink" title="1.html文件"></a>1.html文件</h3><p>新建一个.html文件，初始的主体为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-html的标签介绍"><a href="#2-html的标签介绍" class="headerlink" title="2.html的标签介绍"></a>2.html的标签介绍</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    table    表格</span></span><br><span class="line"><span class="comment">    tr       行</span></span><br><span class="line"><span class="comment">    td       列</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    姓名</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    年龄</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    性别</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    你</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    好</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    啊</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ul li  无序列表（爬虫使用的场景非常的多）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我最帅<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ol li  有序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗衣<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 超链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://silent-wuhen.github.io/&quot;</span>&gt;</span>MyBlog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-URL（统一资源定位符）组成"><a href="#4-URL（统一资源定位符）组成" class="headerlink" title="4.URL（统一资源定位符）组成"></a>4.URL（统一资源定位符）组成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url的组成：协议(http/https)，主机(www.baidu.com)，端口号(80/443)，路径，参数，锚点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="comment">#协议：https    主机：www.baidu.com   端口号：443   路径：s  参数：？以后  锚点：#</span></span><br></pre></td></tr></table></figure><h2 id="5-什么是互联网爬虫"><a href="#5-什么是互联网爬虫" class="headerlink" title="5.什么是互联网爬虫"></a>5.什么是互联网爬虫</h2><ul><li>解释1：通过一个程序，根据Url(<a href="http://www.taobao.com)进行爬取网页,获取有用信息/">http://www.taobao.com)进行爬取网页，获取有用信息</a></li><li>解释2：使用程序模拟浏览器，去向服务器发送请求，获取响应信息</li></ul><h2 id="6-爬虫核心"><a href="#6-爬虫核心" class="headerlink" title="6.爬虫核心"></a>6.爬虫核心</h2><ol><li>爬取网页：爬取整个网页，包含了网页中所有的内容</li><li>解析数据：将网页中得到的数据进行解析</li><li>难点：爬虫与反爬虫之间的博弈</li></ol><h2 id="7-爬虫的用途"><a href="#7-爬虫的用途" class="headerlink" title="7.爬虫的用途"></a>7.爬虫的用途</h2><ol><li>数据分析&#x2F;人工数据集</li><li>社交软件冷启动</li><li>竞争对手的监控</li><li>舆情监控</li></ol><h2 id="8-爬虫的分类"><a href="#8-爬虫的分类" class="headerlink" title="8.爬虫的分类"></a>8.爬虫的分类</h2><h3 id="1-通用爬虫-不是我们学习的"><a href="#1-通用爬虫-不是我们学习的" class="headerlink" title="1.通用爬虫(不是我们学习的)"></a>1.通用爬虫(不是我们学习的)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">实例:</span><br><span class="line">百度、<span class="number">360</span>、google、sougou等搜索引擎‐‐‐伯乐在线</span><br><span class="line"></span><br><span class="line">功能:</span><br><span class="line">访问网页‐&gt;抓取数据‐&gt;数据存储‐&gt;数据处理‐&gt;提供检索服务</span><br><span class="line">    </span><br><span class="line">robots协议:</span><br><span class="line">一个约定俗成的协议，添加robots.txt文件，来说明本网站哪些内容不可以被抓取，起不到限制作用</span><br><span class="line">自己写的爬虫无需遵守</span><br><span class="line">    </span><br><span class="line">网站排名(SEO):</span><br><span class="line"><span class="number">1.</span> 根据pagerank算法值进行排名（参考个网站流量、点击率等指标）</span><br><span class="line"><span class="number">2.</span> 百度竞价排名</span><br><span class="line">    </span><br><span class="line">缺点:</span><br><span class="line"><span class="number">1.</span> 抓取的数据大多是无用的</span><br><span class="line"><span class="number">2.</span>不能根据用户的需求来精准获取数据</span><br></pre></td></tr></table></figure><h3 id="2-聚焦爬虫"><a href="#2-聚焦爬虫" class="headerlink" title="2.聚焦爬虫"></a>2.聚焦爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">功能：</span><br><span class="line">根据需求，实现爬虫程序，抓取需要的数据</span><br><span class="line">设计思路：</span><br><span class="line"><span class="number">1.</span>确定要爬取的url</span><br><span class="line">​如何获取url</span><br><span class="line"><span class="number">2.</span>模拟浏览器通过http协议访问url,获取服务器返回的html代码</span><br><span class="line">​如何访问</span><br><span class="line"><span class="number">3.</span>解析html字符串（根据一定的规则提取需要的数据）</span><br><span class="line">​如何解析</span><br></pre></td></tr></table></figure><h2 id="9-反爬虫手段？"><a href="#9-反爬虫手段？" class="headerlink" title="9.反爬虫手段？"></a>9.反爬虫手段？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>User‐Agent：</span><br><span class="line">    ​User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>代理IP</span><br><span class="line">    ​西次代理</span><br><span class="line">    ​快代理</span><br><span class="line">    ​什么是高匿名、匿名和透明代理？它们有什么区别？</span><br><span class="line">        ​<span class="number">1.</span>使用透明代理，对方服务器可以知道你使用了代理，并且也知道你的真实IP。</span><br><span class="line">        ​<span class="number">2.</span>使用匿名代理，对方服务器可以知道你使用了代理，但不知道你的真实IP。</span><br><span class="line">        ​<span class="number">3.</span>使用高匿名代理，对方服务器不知道你使用了代理，更不知道你的真实IP。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>验证码访问</span><br><span class="line">    ​打码平台</span><br><span class="line">    ​云打码平台</span><br><span class="line">    ​超级🦅</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>动态加载网页 </span><br><span class="line">    ​网站返回的是js数据 并不是网页的真实数据</span><br><span class="line">    ​selenium驱动真实的浏览器发送请求</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>数据加密</span><br><span class="line">    ​分析js代码</span><br></pre></td></tr></table></figure><h1 id="2-Urllib"><a href="#2-Urllib" class="headerlink" title="2.Urllib"></a>2.Urllib</h1><h2 id="1-urllib库使用"><a href="#1-urllib库使用" class="headerlink" title="1.urllib库使用"></a>1.urllib库使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen() 模拟浏览器向服务器发送请求</span><br><span class="line"></span><br><span class="line">response 服务器返回的数据</span><br><span class="line">    response的数据类型是HttpResponse</span><br><span class="line">    字节‐‐&gt;字符串</span><br><span class="line">    解码decode</span><br><span class="line">    字符串‐‐&gt;字节</span><br><span class="line">    编码encode</span><br><span class="line">    read() 字节形式读取二进制 扩展：rede(<span class="number">5</span>)返回前几个字节</span><br><span class="line">    readline() 读取一行</span><br><span class="line">    readlines() 一行一行读取 直至结束</span><br><span class="line">    getcode() 获取状态码</span><br><span class="line">    geturl() 获取url</span><br><span class="line">    getheaders() 获取headers</span><br><span class="line">    </span><br><span class="line">urllib.request.urlretrieve()</span><br><span class="line">    请求网页</span><br><span class="line">    请求图片</span><br><span class="line">    请求视频</span><br></pre></td></tr></table></figure><h3 id="1-urllib的基本使用"><a href="#1-urllib的基本使用" class="headerlink" title="1.urllib的基本使用"></a>1.urllib的基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用urllib来获取百度首页的源码</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># （1）定义一个url:就是要访问的地址</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （2）模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url) <span class="comment"># response响应：返回的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （3）获取响应中的页面源码  content 内容</span></span><br><span class="line">    <span class="comment"># read 返回的是字节形式的二进制数据</span></span><br><span class="line">    <span class="comment"># 二进制--&gt;字符串称为解码  使用的方法是decode(&#x27;解码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># （4）打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="2-Urllib的1个类型和6个方法"><a href="#2-Urllib的1个类型和6个方法" class="headerlink" title="2.Urllib的1个类型和6个方法"></a>2.Urllib的1个类型和6个方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类型和六个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类型：HTTPResponse</span></span><br><span class="line"><span class="comment"># response是HTTPResponse数据类型的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;response的数据类型：&#x27;</span>,<span class="built_in">type</span>(response))</span><br><span class="line"></span><br><span class="line"><span class="comment">#六个方法：read() readline() readlines() getcode() geturl() getheaders()</span></span><br><span class="line"><span class="comment"># read()按照一个字节一个字节的读</span></span><br><span class="line">content = response.read()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.返回多少个字节</span></span><br><span class="line">content = response.read(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.读取一行（只能读取一行）</span></span><br><span class="line">content = response.readline()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.一行一行的读，读取所有行，要编码使用decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">content = response.readlines()</span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.返回状态码 如果是200：证明逻辑正确（判断代码是否有问题）</span></span><br><span class="line"><span class="built_in">print</span>(response.getcode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.返回的是url的地址</span></span><br><span class="line"><span class="built_in">print</span>(response.geturl())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取的是状态信息</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br></pre></td></tr></table></figure><h3 id="3-Urllib的下载"><a href="#3-Urllib的下载" class="headerlink" title="3.Urllib的下载"></a>3.Urllib的下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urlretrieve(url,filename):url 下载路径，filename 文件的名字</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载网页</span></span><br><span class="line">url_page = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">urllib.request.urlretrieve(url_page,<span class="string">&#x27;baidu.html&#x27;</span>)</span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url=url_page,filename=&#x27;baidu.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line">url_img = <span class="string">&#x27;https://img2.baidu.com/it/u=2064031713,2731059264&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_img,<span class="string">&#x27;平泽唯.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line">url_video = <span class="string">&#x27;https://vd7.bdstatic.com/mda-pdjhxmd8mxyvgexz/cae_h264/1682010451294745439/mda-pdjhxmd8mxyvgexz.mp4?v_from_s=hkapp-haokan-hbf&amp;auth_key=1682077284-0-0-fbb39f9dcd76b70a58e232aa536a6a7b&amp;bcevod_channel=searchbox_feed&amp;pd=1&amp;cd=0&amp;pt=3&amp;logid=0684217152&amp;vid=9752895408415982948&amp;abtest=109432_2-109133_1&amp;klogid=0684217152&amp;sdk_xcdn=1&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_video,<span class="string">&#x27;测试视频.mp4&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-请求对象的定制"><a href="#2-请求对象的定制" class="headerlink" title="2.请求对象的定制"></a>2.请求对象的定制</h2><h3 id="1-UA介绍："><a href="#1-UA介绍：" class="headerlink" title="1.UA介绍："></a>1.UA介绍：</h3><p>User Agent中文名为<strong>用户代理</strong>，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">request = urllib.request.Request()</span><br></pre></td></tr></table></figure><h3 id="2-UA反爬"><a href="#2-UA反爬" class="headerlink" title="2.UA反爬"></a>2.UA反爬</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个反爬</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#url的组成：协议(http/https)，主机(www.baidu.com)，端口号(80/443)，路径，参数，锚点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="comment">#协议：https    主机：www.baidu.com   端口号：443   路径：s  参数：？后面  锚点：#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">端口号</span></span><br><span class="line"><span class="string">http    80</span></span><br><span class="line"><span class="string">https   443</span></span><br><span class="line"><span class="string">mysql   3306</span></span><br><span class="line"><span class="string">oracle  1521</span></span><br><span class="line"><span class="string">redis   6379</span></span><br><span class="line"><span class="string">mongodb 27017</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反爬</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#请求对象的定制</span></span><br><span class="line"><span class="comment">#注：因为参数顺序为url,data,headers，不能直接写url和headers</span></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="3-扩展：编码"><a href="#3-扩展：编码" class="headerlink" title="3.扩展：编码"></a>3.扩展：编码</h3><ol><li>ASCII编码：127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号。</li><li>GB2312编码：用来把中文编进去。</li><li>Unicode：最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</li></ol><h2 id="3-编-解码"><a href="#3-编-解码" class="headerlink" title="3.编&#x2F;解码"></a>3.编&#x2F;解码</h2><h3 id="1-get请求方式：urllib-parse-quote（）"><a href="#1-get请求方式：urllib-parse-quote（）" class="headerlink" title="1.get请求方式：urllib.parse.quote（）"></a>1.get请求方式：urllib.parse.quote（）</h3><p>将汉字变成Unicode编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br></pre></td></tr></table></figure><p>实际例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">需求</span></span><br><span class="line"><span class="string">获取 https://www.baidu.com/s?wd=周杰伦   的网页源码</span></span><br><span class="line"><span class="string">https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment">#将周杰伦转换为Unicode编码格式</span></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line">url = url + name</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决反爬的手段</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 请求对象的定制</span></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应的内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="2-get请求方式：urllib-parse-urlencode（）"><a href="#2-get请求方式：urllib-parse-urlencode（）" class="headerlink" title="2.get请求方式：urllib.parse.urlencode（）"></a>2.get请求方式：urllib.parse.urlencode（）</h3><ul><li>作用：将字典中多个中文转换成Unicode编码，并且键值之间使用“&#x3D;”连接，键值对之外使用&amp;连接。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import urllib.parse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data = &#123;</span></span><br><span class="line"><span class="string">    &#x27;wd&#x27; : &#x27;周杰伦&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;sex&#x27; : &#x27;男&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a = urllib.parse.urlencode(data) # 将各个键值对用&amp;连接起来</span></span><br><span class="line"><span class="string">print(a)</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">wd=%E5%91%A8%E6%9D%B0%E4%BC%A6&amp;sex=%E7%94%B7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>实际例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urlencode应用场景：多个中文参数</span></span><br><span class="line"><span class="comment"># https://www.baidu.com/s?wd=周杰伦&amp;sex=男</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span> : <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line">url = base_url + data</span><br><span class="line"><span class="comment"># print(url)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h3 id="3-post请求方式"><a href="#3-post请求方式" class="headerlink" title="3.post请求方式"></a>3.post请求方式</h3><p>步骤：</p><ol><li>找post 请求的接口</li><li>怎么执行post请求（请求参数进行编码。编码之后 必须调用encode方法。）</li><li>传参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数 必须要进行编码encode(&#x27;utf-8&#x27;)</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数是不会拼接在url的后面，而是需放在请求对象定制的参数中</span></span><br><span class="line">request = urllib.request.Request(url = url,data = data,headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应的数据</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#str数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">post请求的参数 必须要进行编码  data = urllib.parse.urlencode(data).encode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="string">参数是放在请求对象的定制方法中  request = urllib.request.Request(url = url,data = data,headers = headers)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串--&gt;json对象</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(content))</span><br><span class="line">obj = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(obj))</span><br></pre></td></tr></table></figure><h3 id="4-总结：post和get区别？"><a href="#4-总结：post和get区别？" class="headerlink" title="4.总结：post和get区别？"></a>4.总结：post和get区别？</h3><ol><li>get请求方式的参数必须编码，参数是拼接到url后面，编码之后不需要调用encode方法</li><li>post请求方式的参数必须编码，参数是放在请求对象定制的方法中，编码之后需要调用encode方法</li></ol><h3 id="5-百度翻译之详细翻译"><a href="#5-百度翻译之详细翻译" class="headerlink" title="5.百度翻译之详细翻译"></a>5.百度翻译之详细翻译</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, br&#x27;, # 这是编码格式，没有UTF-8，必须注释掉</span></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Acs-Token&#x27;</span>: <span class="string">&#x27;1705576134035_1705654546778_pgSxk6qRvhC4+gm1SagDeIwwKcAGC365pA/wc0YZZyri/YI6h/8LSa5pIQ1G2rdtWlVoV9ibHEqExlMbbtd8V/jAVJH2e8ZpisX3ddWOOmP/WnrBLhXD38MHyAwl5/XWsJffX33TRC4K9Vsz8zQOW4NPyG7kLTJZGPDTCv1iaYQWgr4WJbih1fOWAXb+MgTa15EDPWLWTw8+lVEQTvK8Oans77TkOwbjvcAE1l3a6YawdzjJI0NbYG+Xk9PnDmy3JAg+5r4cxuBhfc6K0mY+2mDbFQ3iQyEnSszmLxWvAo08dvBVc7m8I18SyiGbHzNdOPAu+Qep37iPKOklgqrShhz9+jQfQaeJ54E8N/HrV/9chA0aJqkqPcQyz1z8nXXn57TEFVZV8dhti5xv7lw0SJetoL8BGfInUYMtxOovg7VDvW4BI192MW2ocJaIu1NoDhrAtKSJb4I58Q3k0dxn/Pn40xyb35uXK1e5MUykZ3ThxdahuJLHaVch95PuMyG0GuWV1hcQc9Lq3jRLc/jrQw==&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;149&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其中去决定性作用的是Cookie，其他的都是可以注释掉的</span></span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=51D9D30414A922DDC3F952B560F37FC2; PSTM=1652673230; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; BAIDUID=2552FC12B56D5C63A22F4860676B0A88:FG=1; BDUSS=25aNHBtd2VxOUgyNnpkUkd-TFJSejZJMWlFYU10ZjlMMEt6LTBldnlPcEJqb3BsSVFBQUFBJCQAAAAAAAAAAAEAAACDPaTeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBY2VBAWNlb; BDUSS_BFESS=25aNHBtd2VxOUgyNnpkUkd-TFJSejZJMWlFYU10ZjlMMEt6LTBldnlPcEJqb3BsSVFBQUFBJCQAAAAAAAAAAAEAAACDPaTeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBY2VBAWNlb; H_WISE_SIDS=39999_40016_40041; H_PS_PSSID=39999_40016_40041; H_WISE_SIDS_BFESS=39999_40016_40041; BAIDUID_BFESS=2552FC12B56D5C63A22F4860676B0A88:FG=1; BDRCVFR[A7hGrXFW48R]=K7PavkeTFPTUAN8ULuEQhPEUi4WU6; PSINO=2; BA_HECTOR=24a40la4a50l052h202h8k2gdtqjju1iqkdv61s; ZFY=JxHMjLMptFSB0Fx6rLKcRUU:AIGXbEGxWGnIfnIlrcrY:C; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1705150908,1705654260; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1705654540; ab_sr=1.0.1_MjBlNjBiNGE0YjVmNGI4NTRjYzBjYzUyYzU2Mzg4ZTZiMzY4Zjc3ODU1MzgwMjEyZGUwYjhhNDliYzZlYzM5M2U2YzZiNzQyOGZhNjc3OTNhY2JmM2ExNjg5YTdlOWY5Y2ZmODUwODViMTJmNjc3NGYwNzA0MmUwZTVjMzZhNmNiOTI4ZTBmNTQzZTgyYjgxYWRjNmQxN2Q0NmFiYTk4ZmZjOTdlZTYyMmJkMzY4ZTAwYTJiZjBhOGFkNWMxMTJi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com/translate?query=&amp;keyfrom=baidu&amp;smartresult=dict&amp;lang=auto2zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;9&quot;, &quot;Not?A_Brand&quot;;v=&quot;8&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/105&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;enter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;198772.518981&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;7483d683cdef5a92727320d35cbcdbf3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ts&#x27;</span>: <span class="string">&#x27;1705654546761&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数是不会拼接在url的后面，而是需放在请求对象定制的参数中</span></span><br><span class="line">request = urllib.request.Request(url = url,data = data,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#str数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串--&gt;json对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = json.loads(content)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="4-ajax的get请求"><a href="#4-ajax的get请求" class="headerlink" title="4.ajax的get请求"></a>4.ajax的get请求</h2><ul><li>案例1：豆瓣电影第一页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="comment"># 获取第一页数据并且保存</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=6&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open默认使用的是gbk的编码</span></span><br><span class="line"><span class="comment"># fp = open(&quot;douban.json&quot;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># fp.write(content) # ctrl+alt+l 调整格式</span></span><br><span class="line"><span class="comment"># fp.close</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>案例2：豆瓣电影前10页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=0&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=20&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;</span></span><br><span class="line"><span class="string">start=40&amp;limit=20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规律：</span></span><br><span class="line"><span class="string">start : (page - 1) * 20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">步骤：</span></span><br><span class="line"><span class="string">1.请求对象的定制</span></span><br><span class="line"><span class="string">2.获取相应的数据</span></span><br><span class="line"><span class="string">3.数据下载</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span> : (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data)</span><br><span class="line">    url = base_url + data</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;豆瓣&quot;</span> + <span class="built_in">str</span>(page) + <span class="string">&quot;.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始的页码：&quot;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入结束的页码：&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end +<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 每页都需要进行请求对象的定制</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        <span class="comment"># 获取的响应的数据</span></span><br><span class="line">        content = get_content(request)</span><br><span class="line">        <span class="comment"># 下载</span></span><br><span class="line">        down_load(page,content)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-ajax的post请求"><a href="#5-ajax的post请求" class="headerlink" title="5.ajax的post请求"></a>5.ajax的post请求</h2><ul><li>案例：爬取肯德基官网</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">page 1</span></span><br><span class="line"><span class="string">http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="string">post请求</span></span><br><span class="line"><span class="string">cname: 北京</span></span><br><span class="line"><span class="string">pid:</span></span><br><span class="line"><span class="string">pageIndex: 1</span></span><br><span class="line"><span class="string">pageSize: 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">page 2</span></span><br><span class="line"><span class="string">http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname</span></span><br><span class="line"><span class="string">post请求</span></span><br><span class="line"><span class="string">cname: 北京</span></span><br><span class="line"><span class="string">pid:</span></span><br><span class="line"><span class="string">pageIndex: 2</span></span><br><span class="line"><span class="string">pageSize: 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">规律：pageIndex（第几页就是几）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    base_url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;请求&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>:<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=base_url,data=data,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;肯德基_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始页码：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入终止页码：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request()</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(page,content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-URLError-HTTPError"><a href="#6-URLError-HTTPError" class="headerlink" title="6.URLError\HTTPError"></a>6.URLError\HTTPError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">简介:</span><br><span class="line"><span class="number">1.</span>HTTPError类是URLError类的子类</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入的包urllib.error.HTTPError urllib.error.URLError</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>http错误：http错误是针对浏览器无法连接到服务器而增加出来的错误提示。引导并告诉浏览者该页是哪里出了问题。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>通过urllib发送请求的时候，有可能会发送失败，这个时候如果想让你的代码更加的健壮，可以通过<span class="keyword">try</span>‐<span class="keyword">except</span>进行捕获异常，异常有两类，URLError\HTTPError</span><br></pre></td></tr></table></figure><ul><li>案例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="comment"># import</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;https://blog.csdn.net/Purpleendurer/article/details/135156750&#x27; # 正确的url</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;https://blog.csdn.net/Purpleendurer/article/details/13515675011&#x27; # httperror</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.hqhwwww.com&#x27;</span>  <span class="comment"># urlerror</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;系统正在升级&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;嗯，还在升级&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-cookie登录"><a href="#7-cookie登录" class="headerlink" title="7.cookie登录"></a>7.cookie登录</h2><ul><li>案例：微博登录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">适用的场景：数据采集的时候，需要绕过登录，然后进入到某个页面</span></span><br><span class="line"><span class="string">个人信息页面是utf-8,但是还是保编码错误，因为没有登录信息页面，而是跳转到了登录页面，登录页面不是UTF-8，所以报错</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://m.weibo.cn/users/2906598961?set=1&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cookie中携带着登录信息，如果有登录之后的cookie 那么我们可以携带着cookie进入任何页面</span></span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_T_WM=f2795e7918b16c688965f9651943adf8; XSRF-TOKEN=f01dfc; MLOGIN=1; SUB=_2A25Ir4huDeRhGeRH61QU-SbFzT2IHXVrxIWmrDV6PUJbktAGLU_EkW1NTfzTjDYP_oJIck5f95UkomM2UsPW2zlt; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9W5FThBRqddjayf_HAMY69ZD5JpX5KzhUgL.Foz4ehqf1Kn4So22dJLoIX5LxK-L12qLB--LxK-LB.BL1KeLxKqLBoeL1K-LxKqL1-eLB-qLxK-L12qL1KnLxK-L12qL1KnLxK-L12qL1KnE; SSOLoginState=1705769022; ALF=1708361022&#x27;</span>,</span><br><span class="line">    <span class="comment"># referer（做防盗链） 判断当前路径是不是由上一个路径进来的，一般情况下是做图片的防盗链</span></span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/profile/2906598961&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;9&quot;, &quot;Not?A_Brand&quot;;v=&quot;8&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/105&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><h2 id="8-Handler处理器"><a href="#8-Handler处理器" class="headerlink" title="8.Handler处理器"></a>8.Handler处理器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为什么要学习handler？</span><br><span class="line">urllib.request.urlopen(url)</span><br><span class="line">不能定制请求头</span><br><span class="line">urllib.request.Request(url,headers,data)</span><br><span class="line">可以定制请求头</span><br><span class="line"></span><br><span class="line">    Handler</span><br><span class="line">    定制更高级的请求头（随着业务逻辑的复杂 请求对象的定制已经满足不了我们的需求（动态cookie和代理不能使用请求对象的定制）</span><br></pre></td></tr></table></figure><ul><li>案例：handler的基本使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># handler   build_opener    open</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）获取handler对象</span></span><br><span class="line">handler = urllib.request.HTTPHandler()</span><br><span class="line"><span class="comment">#（2）获取opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"><span class="comment">#（3）调用open方法</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="9-代理服务器"><a href="#9-代理服务器" class="headerlink" title="9.代理服务器"></a>9.代理服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>代理的常用功能?</span><br><span class="line">    <span class="number">1.</span>突破自身IP访问限制，访问国外站点。</span><br><span class="line">    <span class="number">2.</span>访问一些单位或团体内部资源</span><br><span class="line">        扩展：某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。</span><br><span class="line">    <span class="number">3.</span>提高访问速度</span><br><span class="line">    扩展：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。</span><br><span class="line"><span class="number">4.</span>隐藏真实IP</span><br><span class="line">扩展：上网者也可以通过这种方法隐藏自己的IP，免受攻击。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>代码配置代理</span><br><span class="line">    创建Reuqest对象</span><br><span class="line">    创建ProxyHandler对象</span><br><span class="line">    用handler对象创建opener对象</span><br><span class="line">    使用opener.<span class="built_in">open</span>函数发送请求</span><br></pre></td></tr></table></figure><ul><li>案例1：快代理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.ip138.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(request)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.kuaidaili.com/free/ 快代理的网址</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.167.21.80:23443&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">handler = urllib.request.ProxyHandler()</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><ul><li>案例2：代理池</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.167.21.80:23443&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.167.21.80:23443&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http:&#x27;</span>:<span class="string">&#x27;175.167.21.80:23443&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">proxies = random.choice(proxies_pool)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.ip138.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler()</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br></pre></td></tr></table></figure><h1 id="3-解析"><a href="#3-解析" class="headerlink" title="3.解析"></a>3.解析</h1><h2 id="1-xpath"><a href="#1-xpath" class="headerlink" title="1.xpath"></a>1.xpath</h2><ul><li>安装xpath</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xpath使用：</span><br><span class="line">    注意：提前安装xpath插件</span><br><span class="line">    （<span class="number">1</span>）ctrl + shift + x 启动扩展</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>安装lxml库</span><br><span class="line">pip install lxml -i https://pypi.douban.com/simple</span><br><span class="line"><span class="number">2.</span>导入lxml.etree</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="number">3.</span>etree.parse() 解析本地文件</span><br><span class="line">    html_tree = etree.parse(<span class="string">&#x27;XX.html&#x27;</span>)</span><br><span class="line"><span class="number">4.</span>etree.HTML() 服务器响应文件</span><br><span class="line">    html_tree = etree.HTML(response.read().decode(<span class="string">&#x27;utf‐8&#x27;</span>)</span><br><span class="line"><span class="number">4.</span>语法的格式：</span><br><span class="line">html_tree.xpath(xpath路径)</span><br></pre></td></tr></table></figure><ul><li>xpath的基本语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>路径查询</span><br><span class="line">    //：查找所有子孙节点，不考虑层级关系</span><br><span class="line">    / ：找直接子节点</span><br><span class="line"><span class="number">2.</span>谓词查询</span><br><span class="line">    //div[@<span class="built_in">id</span>]</span><br><span class="line">    //div[@<span class="built_in">id</span>=<span class="string">&quot;maincontent&quot;</span>]</span><br><span class="line"><span class="number">3.</span>属性查询</span><br><span class="line">    //@<span class="keyword">class</span></span><br><span class="line"><span class="number">4.</span>模糊查询</span><br><span class="line">    //div[contains(@<span class="built_in">id</span>, <span class="string">&quot;he&quot;</span>)]</span><br><span class="line">    //div[starts‐<span class="keyword">with</span>(@<span class="built_in">id</span>, <span class="string">&quot;he&quot;</span>)]</span><br><span class="line"><span class="number">5.</span>内容查询</span><br><span class="line">    //div/h1/text()</span><br><span class="line"><span class="number">6.</span>逻辑运算</span><br><span class="line">    //div[@<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span> <span class="keyword">and</span> @<span class="keyword">class</span>=<span class="string">&quot;s_down&quot;</span>]</span><br><span class="line">    //title | //price</span><br></pre></td></tr></table></figure><ul><li><p>例子演示：</p><ol><li><p>数据的准备</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c3&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c4&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大连<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>锦州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>沈阳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>演示的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xpath解析</span></span><br><span class="line"><span class="string">    (1)本地文件</span></span><br><span class="line"><span class="string">        html_tree = etree.parse(&#x27;XX.html&#x27;)</span></span><br><span class="line"><span class="string">    (2)服务器相应的数据</span></span><br><span class="line"><span class="string">        html_tree = etree.HTML(response.read().decode(&#x27;utf‐8&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xpath解析本地文件</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;1.解析_xpath的基本使用.html&#x27;</span>)</span><br><span class="line"><span class="comment"># tree.xpath(&#x27;xpath的路径&#x27;)</span></span><br><span class="line"><span class="comment"># （1）查找ul下的li</span></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//body/ul/li&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br><span class="line"><span class="comment"># （2）谓词查询 需求：查找所有id属性的li标签</span></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul/li[@id]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br><span class="line"><span class="comment"># （3）查找id为l1的li标签</span></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment"># （4）查找到id为l1的li标签的class的属性值</span></span><br><span class="line">li = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li,<span class="built_in">len</span>(li))</span><br><span class="line"><span class="comment"># （5）查询id中包含l的li标签</span></span><br><span class="line">li = tree.xpath(<span class="string">&#x27;//ul/li[contains(@id, &quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li,<span class="built_in">len</span>(li))</span><br><span class="line"><span class="comment"># （6）查询id的值以l开头的li标签</span></span><br><span class="line">li = tree.xpath(<span class="string">&#x27;//ul/li[starts-with(@id,&quot;c&quot;)]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li,<span class="built_in">len</span>(li))</span><br><span class="line"><span class="comment"># （7）逻辑运算 查询id为l1和class为c1的</span></span><br><span class="line">li = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot; and @class=&quot;c1&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li,<span class="built_in">len</span>(li))</span><br><span class="line"></span><br><span class="line">li = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text() | //ul/li[@id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li,<span class="built_in">len</span>(li))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>案例1：获取百度网站的:”百度一下”</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string">获取百度一下这4个字</span></span><br><span class="line"><span class="string">1.获取网页的源码</span></span><br><span class="line"><span class="string">2.解析</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析网页的源码 获取我们想要的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析服务器响应的文件</span></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取想要的数据，xpath返回的数据为列表数据类型</span></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;//input[@id=&quot;su&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>案例：站长素材</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">需求：https://sc.chinaz.com/下载前5页的地址</span></span><br><span class="line"><span class="string">第1页：https://sc.chinaz.com/tupian/qinglvtupian.html</span></span><br><span class="line"><span class="string">第2页：https://sc.chinaz.com/tupian/qinglvtupian_2.html</span></span><br><span class="line"><span class="string">第3页：https://sc.chinaz.com/tupian/qinglvtupian_3.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（1）请求对象的定制</span></span><br><span class="line"><span class="string">（2）获取网页的源码</span></span><br><span class="line"><span class="string">（3）下载</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/qinglvtupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/qinglvtupian_&#x27;</span> + <span class="built_in">str</span>(page) +<span class="string">&#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="comment"># 下载图片  urllib.request.urlretrieve(&#x27;图片的地址&#x27;,&#x27;图片的名字&#x27;)</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div//img/@alt&#x27;</span>)</span><br><span class="line">    <span class="comment"># 一般涉及到图片的时候都会进行懒加载（可能路径会发生变化）</span></span><br><span class="line">    Img_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;container&quot;]//img/@data-original&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span> + Img_list[i]</span><br><span class="line">        name = <span class="string">&#x27;./123/&#x27;</span> + name_list[i] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        urllib.request.urlretrieve(url,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始的页码：&quot;</span>))</span><br><span class="line">    end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入结束的页码：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d页下载完成&quot;</span>%(page))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-JsonPath"><a href="#2-JsonPath" class="headerlink" title="2.JsonPath"></a>2.JsonPath</h2><blockquote><ul><li>只能识别本地文件</li></ul></blockquote><ol><li><p>安装与使用</p><p><a href="https://blog.csdn.net/luxideyao/article/details/77802389">教程链接</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip安装：</span><br><span class="line">pip install jsonpath</span><br><span class="line">jsonpath的使用：</span><br><span class="line">    obj = json.load(open(&#x27;json文件路径&#x27;, &#x27;r&#x27;, encoding=&#x27;utf‐8&#x27;))</span><br><span class="line">    ret = jsonpath.jsonpath(obj, &#x27;jsonpath语法&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/5.python%E7%88%AC%E8%99%AB/001.png?raw=true" alt="001.png"></p></li><li><p>案例（淘票票）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1629789477003_137&amp;jsoncallback=jsonp138&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># &#x27;:authority&#x27;: &#x27;dianying.taobao.com&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:method&#x27;: &#x27;GET&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:path&#x27;: &#x27;/cityAction.json?activityId&amp;_ksTS=1629789477003_137&amp;jsoncallback=jsonp138&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:scheme&#x27;: &#x27;https&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;cna=UkO6F8VULRwCAXTqq7dbS5A8; miid=949542021157939863; sgcookie=E100F01JK9XMmyoZRigjfmZKExNdRHQqPf4v9NIWIC1nnpnxyNgROLshAf0gz7lGnkKvwCnu1umyfirMSAWtubqc4g%3D%3D; tracknick=action_li; _cc_=UIHiLt3xSw%3D%3D; enc=dA18hg7jG1xapfVGPHoQCAkPQ4as1%2FEUqsG4M6AcAjHFFUM54HWpBv4AAm0MbQgqO%2BiZ5qkUeLIxljrHkOW%2BtQ%3D%3D; hng=CN%7Czh-CN%7CCNY%7C156; thw=cn; _m_h5_tk=3ca69de1b9ad7dce614840fcd015dcdb_1629776735568; _m_h5_tk_enc=ab56df54999d1d2cac2f82753ae29f82; t=874e6ce33295bf6b95cfcfaff0af0db6; xlly_s=1; cookie2=13acd8f4dafac4f7bd2177d6710d60fe; v=0; _tb_token_=e65ebbe536158; tfstk=cGhRB7mNpnxkDmUx7YpDAMNM2gTGZbWLxUZN9U4ulewe025didli6j5AFPI8MEC..; l=eBrgmF1cOsMXqSxaBO5aFurza77tzIRb8sPzaNbMiInca6OdtFt_rNCK2Ns9SdtjgtfFBetPVKlOcRCEF3apbgiMW_N-1NKDSxJ6-; isg=BBoas2yXLzHdGp3pCh7XVmpja8A8S54lyLj1RySTHq14l7vRDNufNAjpZ2MLRxa9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://dianying.taobao.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;92&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;92&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line">content = content.split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;5._解析_jsonpath解析淘票票.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line">obj = json.load(<span class="built_in">open</span>(<span class="string">&#x27;5._解析_jsonpath解析淘票票.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">city_list = jsonpath.jsonpath(obj,<span class="string">&#x27;$..regionName&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(city_list)</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-BeautifulSoup"><a href="#3-BeautifulSoup" class="headerlink" title="3.BeautifulSoup"></a>3.BeautifulSoup</h2><ol><li><p>基本简介</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.BeautifulSoup简称：</span><br><span class="line">bs4</span><br><span class="line">2.什么是BeatifulSoup？</span><br><span class="line">    BeautifulSoup，和lxml一样，是一个html的解析器，主要功能也是解析和提取数据</span><br><span class="line">3.优缺点？</span><br><span class="line">    缺点：效率没有lxml的效率高</span><br><span class="line">    优点：接口设计人性化，使用方便</span><br></pre></td></tr></table></figure></li><li><p>安装以及创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装</span><br><span class="line">    pip install bs4</span><br><span class="line"><span class="number">2.</span>导入</span><br><span class="line">    <span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="number">3.</span>创建对象</span><br><span class="line">    服务器响应的文件生成对象</span><br><span class="line">        soup = BeautifulSoup(response.read().decode(), <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    本地文件生成对象</span><br><span class="line">        soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;6.解析_bs4的基本使用.html&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        注意：默认打开文件的编码格式gbk所以需要指定打开编码格式</span><br></pre></td></tr></table></figure></li><li><p>节点定位</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.根据标签名查找节点</span><br><span class="line">    soup.a 【注】只能找到第一个a</span><br><span class="line">        soup.a.name</span><br><span class="line">        soup.a.attrs # 获取标签的属性和属性值</span><br><span class="line">2.函数</span><br><span class="line">    (1).find(返回一个对象)</span><br><span class="line">        find(&#x27;a&#x27;)：只找到第一个a标签</span><br><span class="line">    (2).find_all(返回一个列表)</span><br><span class="line">        find_all(&#x27;a&#x27;) 查找到所有的a</span><br><span class="line">        find_all([&#x27;a&#x27;, &#x27;span&#x27;]) 返回所有的a和span</span><br><span class="line">        find_all(&#x27;a&#x27;, limit=2) 只找前两个a</span><br><span class="line">    (3).select(根据选择器得到节点对象)【推荐】</span><br><span class="line">        1.element</span><br><span class="line">            eg:p</span><br><span class="line">        2..class</span><br><span class="line">            eg:.firstname</span><br><span class="line">        3.#id</span><br><span class="line">            eg:#firstname</span><br><span class="line">        4.属性选择器</span><br><span class="line">            [attribute]</span><br><span class="line">                eg:li = soup.select(&#x27;li[class]&#x27;)</span><br><span class="line">            [attribute=value]</span><br><span class="line">                eg:li = soup.select(&#x27;li[class=&quot;hengheng1&quot;]&#x27;)</span><br><span class="line">        5.层级选择器</span><br><span class="line">            element element</span><br><span class="line">                div p</span><br><span class="line">            element&gt;element</span><br><span class="line">                div&gt;p</span><br><span class="line">            element,element</span><br><span class="line">                div,p</span><br><span class="line">                    eg:soup = soup.select(&#x27;a,span&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>节点信息</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1).获取节点内容：适用于标签中嵌套标签的结构</span><br><span class="line">    obj.string</span><br><span class="line">    obj.get_text()【推荐】</span><br><span class="line">(2).节点的属性</span><br><span class="line">    tag.name 获取标签名</span><br><span class="line">        eg:tag = find(&#x27;li)</span><br><span class="line">            print(tag.name)</span><br><span class="line">    tag.attrs将属性值作为一个字典返回</span><br><span class="line">(3).获取节点属性</span><br><span class="line">    obj.attrs.get(&#x27;title&#x27;)【常用】</span><br><span class="line">    obj.get(&#x27;title&#x27;)</span><br><span class="line">    obj[&#x27;title&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>案例(星巴克数据)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间问题,代码已经失效 </span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //ul[@class=&quot;grid padded-3 product&quot;]//strong/text()</span></span><br><span class="line">name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(name.get_text())</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-selenium"><a href="#4-selenium" class="headerlink" title="4.selenium"></a>4.selenium</h1><h2 id="1-selenium概述"><a href="#1-selenium概述" class="headerlink" title="1.selenium概述"></a>1.selenium概述</h2><ol><li><p>selenium概念</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）Selenium是一个用于Web应用程序测试的工具。</span><br><span class="line">（2）Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。</span><br><span class="line">（3）支持通过各种driver（FirfoxDriver，IternetExplorerDriver，OperaDriver，ChromeDriver）驱动真实浏览器完成测试。</span><br><span class="line">（4）selenium也是支持无界面浏览器操作的。</span><br></pre></td></tr></table></figure></li><li><p>为什么使用selenium</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模拟浏览器功能，自动执行网页中的js代码，实现动态加载</span><br></pre></td></tr></table></figure></li><li><p>安装selenium</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）操作谷歌浏览器驱动下载地址</span><br><span class="line">    http://chromedriver.storage.googleapis.com/index.html</span><br><span class="line">（2）谷歌驱动和谷歌浏览器版本之间的映射表</span><br><span class="line">    http://blog.csdn.net/huilan_same/article/details/51896672</span><br><span class="line">（3）查看谷歌浏览器版本</span><br><span class="line">    谷歌浏览器右上角‐‐&gt;帮助‐‐&gt;关于</span><br><span class="line">（4）pip install selenium</span><br></pre></td></tr></table></figure></li><li><p>selenium的使用步骤</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）导入：from selenium import webdriver</span><br><span class="line">（2）创建谷歌浏览器操作对象：</span><br><span class="line">    path = 谷歌浏览器驱动文件路径</span><br><span class="line">    browser = webdriver.Chrome(path)</span><br><span class="line">（3）访问网址</span><br><span class="line">    url = 要访问的网址</span><br><span class="line">    browser.get(url)</span><br></pre></td></tr></table></figure></li><li><p>selenium的元素定位</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">元素定位：自动化要做的就是模拟鼠标和键盘来操作来操作这些元素，点击、输入等等。操作这些元素前首先要找到它们，WebDriver提供很多定位元素的方法</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">1.find_element_by_id</span><br><span class="line">    eg:button = browser.find_element_by_id(&#x27;su&#x27;)</span><br><span class="line">2.find_elements_by_name</span><br><span class="line">    eg:name = browser.find_element_by_name(&#x27;wd&#x27;)</span><br><span class="line">3.find_elements_by_xpath</span><br><span class="line">    eg:xpath1 = browser.find_elements_by_xpath(&#x27;//input[@id=&quot;su&quot;]&#x27;)</span><br><span class="line">4.find_elements_by_tag_name</span><br><span class="line">    eg:names = browser.find_elements_by_tag_name(&#x27;input&#x27;)</span><br><span class="line">5.find_elements_by_css_selector</span><br><span class="line">    eg:my_input = browser.find_elements_by_css_selector(&#x27;#kw&#x27;)[0]</span><br><span class="line">6.find_elements_by_link_text</span><br><span class="line">    eg:browser.find_element_by_link_text(&quot;新闻&quot;)</span><br></pre></td></tr></table></figure></li><li><p>访问元素信息</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.获取元素属性</span><br><span class="line">    .get_attribute(&#x27;class&#x27;)</span><br><span class="line">2.获取元素文本</span><br><span class="line">    .text</span><br><span class="line">3.获取标签名</span><br><span class="line">    .tag_name</span><br></pre></td></tr></table></figure></li><li><p>交互</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">点击:click()</span><br><span class="line">输入:send_keys()</span><br><span class="line">后退操作:browser.back()</span><br><span class="line">前进操作:browser.forword()</span><br><span class="line">模拟JS滚动:</span><br><span class="line">    js=&#x27;document.documentElement.scrollTop=100000&#x27;</span><br><span class="line">    browser.execute_script(js) 执行js代码</span><br><span class="line">获取网页代码：page_source</span><br><span class="line">退出：browser.quit()</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-Chrome-handless"><a href="#2-Chrome-handless" class="headerlink" title="2.Chrome handless"></a>2.Chrome handless</h2><p>Chrome-headless 模式， Google 针对 Chrome 浏览器 59版 新增加的一种模式，可以不打开UI界面的情况下使用 Chrome 浏览器，所以运行效果与 Chrome 保持完美一致</p><ol><li><p>系统要求：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Chrome</span><br><span class="line">    Unix\Linux 系统需要 chrome &gt;= 59</span><br><span class="line">    Windows 系统需要 chrome &gt;= 60</span><br><span class="line">Python3.6</span><br><span class="line">Selenium==3.4.*</span><br><span class="line">ChromeDriver==2.31</span><br></pre></td></tr></table></figure></li><li><p>配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line">chrome_options.binary_location = path</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#这个是浏览器自带的 不需要再做额外的操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    <span class="comment">#初始化</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line">    <span class="comment">#浏览器的安装路径 打开文件位置</span></span><br><span class="line">    <span class="comment">#这个路径是你谷歌浏览器的路径</span></span><br><span class="line">    path = <span class="string">r&#x27;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#x27;</span></span><br><span class="line">    chrome_options.binary_location = path</span><br><span class="line">    browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure></li><li><p>封装调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> handless <span class="keyword">import</span> share_browser</span><br><span class="line"></span><br><span class="line">browser = share_browser()</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;handless1.png&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-requests"><a href="#5-requests" class="headerlink" title="5.requests"></a>5.requests</h1><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h2><ol><li><p>文档</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">官方文档</span><br><span class="line">    http://cn.python‐requests.org/zh_CN/latest/</span><br><span class="line">快速上手</span><br><span class="line">    http://cn.python‐requests.org/zh_CN/latest/user/quickstart.html</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li><li><p>response的属性以及类型</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类型   :models.Response</span><br><span class="line">r.text:获取网站源码</span><br><span class="line">r.encoding ：访问或定制编码方式</span><br><span class="line">r.url ：获取请求的url</span><br><span class="line">r.content ：响应的字节类型</span><br><span class="line">r.status_code ：响应的状态码</span><br><span class="line">r.headers ：响应的头信息</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-get请求"><a href="#2-get请求" class="headerlink" title="2.get请求"></a>2.get请求</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">requests.get()</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">import requests</span><br><span class="line">url = &#x27;http://www.baidu.com/s?&#x27;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&#x27;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;wd&#x27;:&#x27;北京&#x27;</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,params=data,headers=headers)</span><br><span class="line">    </span><br><span class="line">定制参数</span><br><span class="line">    参数使用params传递</span><br><span class="line">    参数无需urlencode编码</span><br><span class="line">    不需要请求对象的定制</span><br><span class="line">    请求资源路径中？可加可不加</span><br></pre></td></tr></table></figure><h2 id="3-post请求"><a href="#3-post请求" class="headerlink" title="3.post请求"></a>3.post请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">requests.post()</span><br><span class="line"></span><br><span class="line">百度翻译:</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">post_url = <span class="string">&#x27;http://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User‐Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: <span class="string">&#x27;eye&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url = post_url,headers=headers,data=data)</span><br></pre></td></tr></table></figure><ul><li>get和post区别？<ol><li>get请求的参数名字是params post请求的参数的名字是data</li><li>请求资源路径后面可以不加?</li><li>不需要手动编解码</li><li>不需要做请求对象的定制</li></ol></li></ul><h2 id="4-代理"><a href="#4-代理" class="headerlink" title="4.代理"></a>4.代理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">proxy定制</span></span><br><span class="line"><span class="string">    在请求中设置proxies参数</span></span><br><span class="line"><span class="string">    参数类型是一个字典类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user‐agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/65.0.3325.181 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;ip&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;219.149.59.250:9797&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,params=data,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;proxy.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf‐8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(r.text)</span><br></pre></td></tr></table></figure><h2 id="5-cookie定制"><a href="#5-cookie定制" class="headerlink" title="5.cookie定制"></a>5.cookie定制</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">应用案例：</span><br><span class="line">（1）古诗文网（需要验证）</span><br><span class="line">（2）云打码平台</span><br><span class="line">    用户登陆 actionuser action</span><br><span class="line">    开发者登陆 actioncode action</span><br></pre></td></tr></table></figure><h1 id="6-scrapy"><a href="#6-scrapy" class="headerlink" title="6.scrapy"></a>6.scrapy</h1><h2 id="1-scrapy概述"><a href="#1-scrapy概述" class="headerlink" title="1.scrapy概述"></a>1.scrapy概述</h2><h3 id="1-认识scrapy"><a href="#1-认识scrapy" class="headerlink" title="1.认识scrapy"></a>1.认识scrapy</h3><ol><li><p>scrapy是什么？</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</span><br></pre></td></tr></table></figure></li><li><p>安装scrapy：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line"></span><br><span class="line">(1)安装出错,且报错信息：</span><br><span class="line">    pip install Scrapy</span><br><span class="line">    building &#x27;twisted.test.raiser&#x27; extension</span><br><span class="line">    error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build Tools&quot;: http://landinghub.visualstudio.com/visual‐cpp‐build‐tools</span><br><span class="line">    </span><br><span class="line">解决方案：</span><br><span class="line">    1.进入：http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</span><br><span class="line">    2.下载twisted对应版本的whl文件（如Twisted‐17.5.0‐cp36‐cp36m‐win_amd64.whl），cp后面是    python版本，amd64代表64位</span><br><span class="line">    3.运行命令：</span><br><span class="line">    pip install C:\Users\...\Twisted‐17.5.0‐cp36‐cp36m‐win_amd64.whl # 本地文件</span><br><span class="line">    pip install Scrapy</span><br><span class="line">    </span><br><span class="line">(2)若再报错</span><br><span class="line">python ‐m pip install ‐‐upgrade pip</span><br><span class="line"></span><br><span class="line">(3)若再报错：win32</span><br><span class="line">解决方法：</span><br><span class="line">pip install pypiwin32</span><br><span class="line"></span><br><span class="line">(4)若再报错：使用anaconda</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-scrapy项目的创建以及运行"><a href="#2-scrapy项目的创建以及运行" class="headerlink" title="2.scrapy项目的创建以及运行"></a>2.scrapy项目的创建以及运行</h3><ol><li><p>创建scrapy项目，在终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure></li><li><p>项目组成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spiders <span class="comment"># 存储爬虫文件</span></span><br><span class="line">    __init__.py</span><br><span class="line">    自定义的爬虫文件.py <span class="comment"># 由我们自己创建，是实现爬虫核心功能的文件</span></span><br><span class="line">__init__.py</span><br><span class="line">items.py <span class="comment"># 定义数据结构的地方，是一个继承自scrapy.Item的类</span></span><br><span class="line">middlewares.py <span class="comment"># 中间件,代理</span></span><br><span class="line">pipelines.py <span class="comment"># 管道文件，里面只有一个类，用于处理下载数据的后续处理[默认是300优先级，值越小优先级越高（1‐1000）]</span></span><br><span class="line">settings.py <span class="comment"># 配置文件 比如：是否遵守robots协议，User‐Agent定义等</span></span><br></pre></td></tr></table></figure></li><li><p>创建爬虫文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">创建爬虫文件：</span><br><span class="line">    （1）跳转到spiders文件夹：cd 目录名字/目录名字/spiders</span><br><span class="line">    （2）scrapy genspider 爬虫名字 网页的域名（一般不写http://）</span><br><span class="line">    eg:scrapy genspider baidu www.baidu.com</span><br><span class="line"></span><br><span class="line">爬虫文件的基本组成(继承scrapy.Spider类)：</span><br><span class="line">    name = &#x27;baidu&#x27; # 运行爬虫文件时使用的名字</span><br><span class="line">    allowed_domains # 爬虫允许的域名，在爬取的时候，如果不是此域名之下的url，会被过滤掉</span><br><span class="line">    start_urls # 声明了爬虫的起始地址，可以写多个url，一般只有一个。注：html的url最后不能有/</span><br><span class="line">    parse(self, response) # 解析数据的回调函数</span><br><span class="line">        response.text # 响应的是字符串</span><br><span class="line">        response.body # 响应的是二进制文件</span><br><span class="line">        response.xpath() # xpath方法的返回值类型是selector列表</span><br><span class="line">        extract() # 提取的是selector对象的是data</span><br><span class="line">        extract_first() # 提取的是selector列表中的第一个数据</span><br></pre></td></tr></table></figure></li><li><p>运行爬虫文件，cmd输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：应在spiders文件夹内执行</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-scrapy架构组成"><a href="#3-scrapy架构组成" class="headerlink" title="3.scrapy架构组成"></a>3.scrapy架构组成</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（1）引擎：自动运行，无需关注，会自动组织所有的请求对象，分发给下载器</span><br><span class="line">（2）下载器：从引擎处获取到请求对象后，请求数据</span><br><span class="line">（3）spiders：Spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</span><br><span class="line">（4）调度器：有自己的调度规则，无需关注</span><br><span class="line">（5）管道（Item pipeline）：最终处理数据的管道，会预留接口供处理数据</span><br><span class="line">  当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。每个item pipeline组件(有时称之为“Item Pipeline”)是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</span><br><span class="line">以下是item pipeline的一些典型应用：</span><br><span class="line">    1. 清理HTML数据</span><br><span class="line">    2. 验证爬取的数据(检查item包含某些字段)</span><br><span class="line">    3. 查重(并丢弃)</span><br><span class="line">    4. 将爬取结果保存到数据库中</span><br></pre></td></tr></table></figure><h3 id="4-scrapy工作原理"><a href="#4-scrapy工作原理" class="headerlink" title="4.scrapy工作原理"></a>4.scrapy工作原理</h3><p><img src="https://cdn.jsdelivr.net/gh/silent-wuhen/Blog_picture01/H04_%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/4.python/5.python%E7%88%AC%E8%99%AB/002.png?raw=true" alt="001.png"></p><h2 id="2-scrapy-shell"><a href="#2-scrapy-shell" class="headerlink" title="2.scrapy shell"></a>2.scrapy shell</h2><ol><li><p>scrapy shell介绍</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scrapy终端，是一个交互终端，在未启动spider的情况下尝试及调试爬取代码。 其本意是用来测试提取数据的代码，可将其作为正常的Python终端，在上面测试任何的Python代码。</span><br><span class="line">该终端是用来测试XPath或CSS表达式，查看他们的工作方式及从爬取的网页中提取的数据。在编写spider时，该终端提供了交互性测试表达式代码的功能，免去了每次修改后运行spider的麻烦。一旦熟悉了Scrapy终端后，其在开发和调试spider时发挥的巨大作用。</span><br></pre></td></tr></table></figure></li><li><p>安装ipython</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure></li><li><p>应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)scrapy shell www.baidu.com</span><br><span class="line">(2)scrapy shell http://www.baidu.com</span><br><span class="line">(3) scrapy shell &quot;http://www.baidu.com&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-yield"><a href="#3-yield" class="headerlink" title="3.yield"></a>3.yield</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><ol><li>带有 yield 的函数不再是一个普通函数，而是一个生成器generator，可用于迭代</li><li>yield 是一个类似 return 的关键字，迭代一次遇到yield时就返回yield后面(右边)的值。重点是：下一次迭代时，从上一次迭代遇到的yield后面的代码(下一行)开始执行</li><li>简要理解：yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后(下一行)开始</li></ol><h3 id="2-案例1（按页下载）：爬取汇书网"><a href="#2-案例1（按页下载）：爬取汇书网" class="headerlink" title="2.案例1（按页下载）：爬取汇书网"></a>2.案例1（按页下载）：爬取<a href="https://www.huibooks.com/wx">汇书网</a></h3><ol><li><p>创建项目：切换到项目存放目录，创建项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\wuhen\Desktop</span><br><span class="line"></span><br><span class="line">scrapy startproject hsw</span><br></pre></td></tr></table></figure></li><li><p>创建爬虫文件：进入爬虫存储文件，创建爬虫。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd hsw/hsw/spiders</span><br><span class="line"></span><br><span class="line">scrapy genspider hsw_spider https://www.huibooks.com/wx</span><br></pre></td></tr></table></figure></li><li><p>爬虫运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行代码</span></span><br><span class="line">scrapy crawl hsw_spider</span><br></pre></td></tr></table></figure></li><li><p>编写爬虫：打开项目，检查hsw_spider.py的name、allowed_domains、start_urls，编写初步的爬虫.(若运行报错，关闭settings.py的ROBOTSTXT_OBEY)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HswSpiderSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;hsw_spider&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.huibooks.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.huibooks.com/wx&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        src_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@src&#x27;</span>)</span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@alt&#x27;</span>)</span><br><span class="line">        number_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-meta-views&quot;]/span/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src_list)):</span><br><span class="line">            src = src_list[i].extract()</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            number = number_list[i].extract()</span><br><span class="line">            <span class="built_in">print</span>(src,name,number)</span><br></pre></td></tr></table></figure></li><li><p>定义数据结构：在items.py编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HswItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    number = scrapy.Field()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>管道文件：在pipelines.py下，处理下载的数据。</p><p>在settings.py打开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&quot;hsw.pipelines.HswPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：只能是open_spider和close_spider。写入时只能是字符串对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HswPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spidre</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure></li><li><p>导入数据结构方面，创建数据结构，存储数据</p><p>在hsw_spider.py中输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> hsw.items <span class="keyword">import</span> HswItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HswSpiderSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;hsw_spider&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.huibooks.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.huibooks.com/wx&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        src_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@src&#x27;</span>)</span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@alt&#x27;</span>)</span><br><span class="line">        number_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-meta-views&quot;]/span/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src_list)):</span><br><span class="line">            src = src_list[i].extract()</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            number = number_list[i].extract()</span><br><span class="line"></span><br><span class="line">            book = HswItem(src=src, name=name, number=number)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure></li><li><p>开启多条管道(注意shell运行的路径)</p><ul><li><p>定义管道类：在pipelines.py下添加类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HswPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spidre</span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HswDownloadPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        url = item.get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">        filename = <span class="string">&#x27;./books/&#x27;</span> + item.get(<span class="string">&quot;name&quot;</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        </span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=filename)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中开启管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&quot;hsw.pipelines.HswPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="string">&quot;hsw.pipelines.HswDownloadPipeline&quot;</span>:<span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多页数据下载</p><ul><li><p>找到url的规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://www.huibooks.com/wx</span></span><br><span class="line"><span class="comment"># https://www.huibooks.com/wx/page/2</span></span><br><span class="line"><span class="comment"># https://www.huibooks.com/wx/page/3</span></span><br></pre></td></tr></table></figure></li><li><p>调用hsw_spider.py中的parse函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> hsw.items <span class="keyword">import</span> HswItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HswSpiderSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;hsw_spider&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.huibooks.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.huibooks.com/wx&quot;</span>]</span><br><span class="line"></span><br><span class="line">    base_url = <span class="string">&#x27;https://www.huibooks.com/wx/page/&#x27;</span></span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        src_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@src&#x27;</span>)</span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-item item-post-style-1&quot;]//img/@alt&#x27;</span>)</span><br><span class="line">        number_list = response.xpath(<span class="string">&#x27;//li[@class=&quot;post-list-meta-views&quot;]/span/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(src_list)):</span><br><span class="line">            src = src_list[i].extract()</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            number = number_list[i].extract()</span><br><span class="line"></span><br><span class="line">            book = HswItem(src=src, name=name, number=number)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> book</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># https://www.huibooks.com/wx</span></span><br><span class="line">        <span class="comment"># https://www.huibooks.com/wx/page/2</span></span><br><span class="line">        <span class="comment"># https://www.huibooks.com/wx/page/3</span></span><br><span class="line">        <span class="keyword">if</span> self.page &lt; <span class="number">3</span>:</span><br><span class="line">            self.page += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            url = self.base_url + <span class="built_in">str</span>(self.page)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用parse方法</span></span><br><span class="line">            <span class="comment"># scrapy.Request就是 scrapy 的get请求</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse) <span class="comment"># callback调用的函数，调用的函数不需要加()</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-案例2（多页下载）：电影天堂"><a href="#3-案例2（多页下载）：电影天堂" class="headerlink" title="3.案例2（多页下载）：电影天堂"></a>3.案例2（多页下载）：<a href="https://www.dyttcn.com/">电影天堂</a></h3><blockquote><p>需求：一个item包含多级页面的数据</p></blockquote><ol><li><p>创建项目：切换到项目存放目录，创建项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\wuhen\Desktop</span><br><span class="line"></span><br><span class="line">scrapy startproject dytt</span><br></pre></td></tr></table></figure></li><li><p>创建爬虫文件：进入爬虫存储文件，创建爬虫。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd dytt/dytt/spiders</span><br><span class="line"></span><br><span class="line">scrapy genspider dytt_spider https://www.dyttcn.com/dongzuopian/list_1_1.html</span><br></pre></td></tr></table></figure></li><li><p>爬虫运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行代码</span></span><br><span class="line">scrapy crawl hsw_spider</span><br></pre></td></tr></table></figure></li><li><p>定义数据结构：在items.py编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DyttItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    src = scrapy.Field()</span><br></pre></td></tr></table></figure></li><li><p>编写爬虫：打开项目，检查hsw_spider.py的name、allowed_domains、start_urls，编写初步的爬虫.(注意meta传参)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> dytt.items <span class="keyword">import</span> DyttItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DyttSpiderSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;dytt_spider&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dyttcn.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dyttcn.com/dongzuopian/list_1_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 要第一页的名字 和 第二页的图片</span></span><br><span class="line">        name_list = response.xpath(<span class="string">&#x27;//table[@class=&quot;tbspan&quot;]//a[@class=&quot;ulink&quot;][2]/text()&#x27;</span>)</span><br><span class="line">        href_list = response.xpath(<span class="string">&#x27;//table[@class=&quot;tbspan&quot;]//a[@class=&quot;ulink&quot;][1]/@href&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">            name = name_list[i].extract()</span><br><span class="line">            href = href_list[i].extract()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 第二页的地址</span></span><br><span class="line">            url = <span class="string">&#x27;https://www.dyttcn.com&#x27;</span> + href</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 访问第二页链接</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse_second,meta=&#123;<span class="string">&#x27;name&#x27;</span>:name&#125;) <span class="comment"># meta强行转换成字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self,response</span>):</span><br><span class="line">        <span class="comment"># 若没有数据，修改xpath</span></span><br><span class="line">        src = response.xpath(<span class="string">&#x27;//div[@id=&quot;Zoom&quot;]/div[1]/img/@src&#x27;</span>).extract_first()</span><br><span class="line">        name = response.meta[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        movie = DyttItem(name=name,src=src)</span><br><span class="line">        <span class="keyword">yield</span> movie</span><br></pre></td></tr></table></figure></li><li><p>管道文件：在pipelines.py下，处理下载的数据。</p><p>在settings.py打开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&quot;dytt.pipelines.DyttPipeline&quot;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：只能是open_spider和close_spider。写入时只能是字符串对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DyttPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;movie.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-CrawlSpider"><a href="#4-CrawlSpider" class="headerlink" title="4.CrawlSpider"></a>4.CrawlSpider</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h3><ol><li><p>继承自scrapy.Spider</p></li><li><p>独门秘笈</p><ul><li>CrawlSpider可以定义规则，再解析html内容的时候，可以根据链接规则提取出指定的链接，然后再向这些链接发送请求</li><li>所以，如果有需要跟进链接的需求，意思就是爬取了网页之后，需要提取链接再次爬取，使用CrawlSpider是非常合适的</li></ul></li><li><p>提取链接</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">链接提取器，在这里就可以写规则提取指定链接</span><br><span class="line">scrapy.linkextractors.LinkExtractor(</span><br><span class="line">    allow = (), # 正则表达式 提取符合正则的链接</span><br><span class="line">    deny = (), # (不用)正则表达式 不提取符合正则的链接</span><br><span class="line">    allow_domains = (), # （不用）允许的域名</span><br><span class="line">    deny_domains = (), # （不用）不允许的域名</span><br><span class="line">    restrict_xpaths = (), # xpath，提取符合xpath规则的链接</span><br><span class="line">    restrict_css = () # 提取符合选择器规则的链接</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>模拟使用</p><ul><li>正则用法：links1 &#x3D; LinkExtractor(allow&#x3D;r’list_23_\d+.html’)</li><li>xpath用法：links2 &#x3D; LinkExtractor(restrict_xpaths&#x3D;r’&#x2F;&#x2F;div[@class&#x3D;”x”]’)</li><li>css用法：links3 &#x3D; LinkExtractor(restrict_css&#x3D;’.x’)</li></ul></li><li><p>提取连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link.extract_links(response)</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li><p>callback只能写函数名字符串, callback&#x3D;’parse_item’</p></li><li><p>在基本的spider中，如果重新发送请求，那里的callback写的是 callback&#x3D;self.parse_item </p><p>**注:**follow&#x3D;true 是否跟进 就是按照提取连接规则进行提取</p></li></ul></li></ol><h3 id="2-案例：读书网"><a href="#2-案例：读书网" class="headerlink" title="2.案例：读书网"></a>2.案例：<a href="https://www.dushu.com/">读书网</a></h3><ol><li><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\wuhen\Desktop</span><br><span class="line"></span><br><span class="line">scrapy startproject readbook</span><br></pre></td></tr></table></figure></li><li><p>创建爬虫文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd readbook/readbook/spiders</span><br><span class="line"></span><br><span class="line">scrapy genspider -t crawl read https://www.dushu.com/book/1188.html</span><br></pre></td></tr></table></figure></li><li><p>定义数据结构：在items.py编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadbookItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    src = scrapy.Field()</span><br></pre></td></tr></table></figure></li><li><p>编写爬虫：read.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> readbook.items <span class="keyword">import</span> ReadbookItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;read&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;www.dushu.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://www.dushu.com/book/1188_1.html&quot;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&quot;/book/1188_\d+\.html&quot;</span>),</span><br><span class="line">             callback=<span class="string">&quot;parse_item&quot;</span>,</span><br><span class="line">             follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;bookslist&quot;]//img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> img_list:</span><br><span class="line">            name = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>).extract_first()</span><br><span class="line">            src = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            book = ReadbookItem(name=name,src=src)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> book</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>管道文件：在settings.py打开管道。在pipelines.py下，处理下载的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadbookPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;book.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建数据库与表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database spider01 charser<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">use spider01</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">    src <span class="type">varchar</span>(<span class="number">128</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>连接数据库：在settings.py任意位置输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库名字</span></span><br><span class="line">DB_HOST = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">DB_PORT = <span class="number">3306</span></span><br><span class="line">DB_USER = <span class="string">&quot;root&quot;</span></span><br><span class="line">DB_PASSWORD = <span class="string">&quot;root&quot;</span></span><br><span class="line">DB_NAME = <span class="string">&quot;spider01&quot;</span></span><br><span class="line">DB_CHARSER = <span class="string">&quot;utf8&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>管道处理数据：在pipelines.py下（注意安装pymysql）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadbookPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;book.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.fp.write(<span class="built_in">str</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self,spider</span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载settings文件</span></span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlPipeline</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        settings = get_project_settings()</span><br><span class="line">        self.host = settings[<span class="string">&#x27;DB_HOST&#x27;</span>]</span><br><span class="line">        self.port = settings[<span class="string">&#x27;DB_PORT&#x27;</span>]</span><br><span class="line">        self.user = settings[<span class="string">&#x27;DB_USER&#x27;</span>]</span><br><span class="line">        self.password =settings[<span class="string">&#x27;DB_PASSWORD&#x27;</span>]</span><br><span class="line">        self.name =settings[<span class="string">&#x27;DB_NAME&#x27;</span>]</span><br><span class="line">        self.charset =settings[<span class="string">&#x27;DB_CHARSER&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn = pymysql.connect(</span><br><span class="line">            host=self.host,</span><br><span class="line">            port=self.port,</span><br><span class="line">            user=self.user,</span><br><span class="line">            password=self.password,</span><br><span class="line">            db=self.name,</span><br><span class="line">            charset=self.charset</span><br><span class="line">        )</span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        sql = <span class="string">&#x27;insert into book(name,src) values(&quot;&#123;&#125;&quot;,&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-日志信息与日志级别"><a href="#5-日志信息与日志级别" class="headerlink" title="5.日志信息与日志级别"></a>5.日志信息与日志级别</h2><ol><li><p>日志级别：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL：严重错误</span><br><span class="line">ERROR： 一般错误</span><br><span class="line">WARNING： 警告</span><br><span class="line">INFO: 一般信息</span><br><span class="line">DEBUG： 调试信息</span><br><span class="line"></span><br><span class="line">1.从下到上级别越高</span><br><span class="line">2.默认的日志等级是DEBUG,只要出现了DEBUG或者DEBUG以上等级的日志那么这些日志将会打印</span><br></pre></td></tr></table></figure></li><li><p>settings.py文件设置：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOG_FILE : 将屏幕显示的信息全部记录到文件中，屏幕不再显示，注意文件后缀一定是.log</span><br><span class="line">    LOG_FILE=&#x27;logdemo.log&#x27;</span><br><span class="line"></span><br><span class="line">LOG_LEVEL : 设置日志显示的等级，就是显示哪些，不显示哪些</span><br><span class="line">LOG_LEVEL=&#x27;WARNING&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-scrapy的post请求"><a href="#6-scrapy的post请求" class="headerlink" title="6.scrapy的post请求"></a>6.scrapy的post请求</h2><h3 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）重写start_requests方法：</span><br><span class="line">    def start_requests(self)</span><br><span class="line">(2) start_requests的返回值：</span><br><span class="line">    scrapy.FormRequest(url=url, headers=headers, callback=self.parse_item, formdata=data)</span><br><span class="line">        url: 要发送的post地址</span><br><span class="line">        headers：可以定制头信息</span><br><span class="line">        callback: 回调函数</span><br><span class="line">        formdata: post所携带的数据，这是一个字典</span><br></pre></td></tr></table></figure><h3 id="2-案例：百度翻译"><a href="#2-案例：百度翻译" class="headerlink" title="2.案例：百度翻译"></a>2.案例：百度翻译</h3><ol><li><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\wuhen\Desktop</span><br><span class="line"></span><br><span class="line">scrapy startproject post_spider</span><br></pre></td></tr></table></figure></li><li><p>创建爬虫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd post_spider/post_spider/spiders</span><br><span class="line"></span><br><span class="line">scrapy genspider postDemo https://fanyi.baidu.com/sug</span><br></pre></td></tr></table></figure></li><li><p>编写爬虫：post请求没有参数，则请求无意义，所以start_urls无用，parse方法无用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostdemoSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;postDemo&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;fanyi.baidu.com&quot;</span>]</span><br><span class="line">    <span class="comment"># post请求没有参数，则请求无意义，所以start_urls无用，parse方法无用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;final&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.FormRequest(url=url,formdata=data,callback=self.parse_second)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_second</span>(<span class="params">self,response</span>):</span><br><span class="line">        content = response.text</span><br><span class="line">        obj = json.loads(content)</span><br><span class="line">        <span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="7-代理"><a href="#7-代理" class="headerlink" title="7.代理"></a>7.代理</h2><ol><li><p>到settings.py中，打开一个选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;postproject.middlewares.Proxy&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>到middlewares.py中写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">    request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;https://113.68.202.10:9999&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
