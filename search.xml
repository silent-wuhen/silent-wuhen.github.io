<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop大数据处理</title>
      <link href="/2023/11/18/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/18.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2023/11/18/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/18.Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频推荐：<a href="https://www.bilibili.com/video/BV1WY4y197g7/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">黑马程序员</a></p><p>为了让我快速搭建Hadoop集群，还有同学问了我很多次Hadoop集群的搭建，再加上Hadoop集群搭建一次需要消耗的时间实在是太长了，所以写了这个笔记。当然，我也省略了很多操作，比如打开vim之后，输入i开始编辑，按esc退出编辑模式，:wq保存退出。所以需要熟悉一点点Linux命令。</p><h1 id="第一章-搭建Hadoop集群"><a href="#第一章-搭建Hadoop集群" class="headerlink" title="第一章 搭建Hadoop集群"></a>第一章 搭建Hadoop集群</h1><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.下载vmware</span><br><span class="line">2.下载centos镜像</span><br><span class="line">3.配置vmware虚拟机的网络设置</span><br><span class="line">4.安装好centos，命名为hadoop01</span><br><span class="line">5.打开终端，输入：</span><br><span class="line">ping www.baidu.com</span><br><span class="line">6.有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br></pre></td></tr></table></figure><h2 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">以下正式开始，注意root登录：</span><br><span class="line"><span class="number">1.</span>创建/export目录，在export目录下创建data，servers,software三个目录：</span><br><span class="line">mkdir -p /export/data /export/servers /export/software</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>克隆两个虚拟机并命名为hadoop02，hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>配置主机名，修改后重新打开终端可以查看：(<span class="number">3</span>个都要操作)</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname 主机名</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>IP映射配置（<span class="number">3</span>个，IP地址参考自己的）</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span> hadoop01</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.135</span> hadoop02</span><br><span class="line"><span class="number">192.168</span><span class="number">.121</span><span class="number">.136</span> hadoop03</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>设置静态IP(最后ens33可能不同，输入en然后TAB键补齐),<span class="number">3</span>个修改：</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">修改（没有的需要自己打）：</span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.121</span><span class="number">.134</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.121</span><span class="number">.2</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">DNS1=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>可选，修改时区并配置自动时间同步（<span class="number">3</span>个）：</span><br><span class="line">安装ntp软件</span><br><span class="line">yum install -y ntp</span><br><span class="line">更新时区</span><br><span class="line">rm -f /etc/localtime;sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">同步时间</span><br><span class="line">ntpdate -u ntp.aliyun.com</span><br><span class="line">开启ntp服务并设置开机自启</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>重启（<span class="number">3</span>个），输入：</span><br><span class="line">reboot</span><br><span class="line">ping www.baidu.com</span><br><span class="line">有数据包传输，表明网络没有问题，输入：ctrl + c来终止</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>SSH免密登录，输入：</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">连续<span class="number">4</span>次回车</span><br><span class="line">cd ~/.ssh</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop01</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop02</span><br><span class="line">ssh-copy-<span class="built_in">id</span> hadoop03</span><br><span class="line">ssh hadoop01</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop02</span><br><span class="line">输入密码</span><br><span class="line">ssh hadoop03</span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line"><span class="number">9.J</span>DK和Hadoop安装,注意以下版本号请根据实际版本号：</span><br><span class="line">使用xFTP上传JDK和Hadoop安装包到/export/software/</span><br><span class="line">cd /export/software/</span><br><span class="line">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /export/servers/</span><br><span class="line">tar -zxvf hadoop-<span class="number">2.10</span><span class="number">.0</span>.tar.gz -C /export/servers/</span><br><span class="line">cd /export/servers/</span><br><span class="line">mv jdk-8u241-linux-x64 jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">mv hadoop-<span class="number">2.10</span><span class="number">.0</span> hadoop-<span class="number">2.10</span><span class="number">.0</span> (这里解压后文件名一样，可以不修改)</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>配置环境变量：</span><br><span class="line">vim /etc/profile</span><br><span class="line">在文件最底部输入：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-<span class="number">1.8</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/<span class="built_in">bin</span></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/export/servers/hadoop-<span class="number">2.10</span><span class="number">.0</span></span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/<span class="built_in">bin</span>:$HADOOP_HOME/sbin</span><br><span class="line">退出</span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p>到此没有出现错误的话，那么恭喜，可以接着往下一步进行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">接下来对主节点hadoop01进行配置：</span><br><span class="line">（1）</span><br><span class="line">cd /export/servers/hadoop-2.10.0/etc/hadoop</span><br><span class="line">vim hadoop-env.sh </span><br><span class="line">找到export JAVA_HOME，修改为：</span><br><span class="line">export JAVA_HOME=/export/servers/jdk-1.8.0</span><br><span class="line"></span><br><span class="line">（2）</span><br><span class="line">vim core-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/export/servers/hadoop-2.10.0/tmp&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（3）</span><br><span class="line">vim hdfs-site.xml </span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop02:5009&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（4）</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（5）</span><br><span class="line">vim yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">（6）</span><br><span class="line"> vim slaves </span><br><span class="line"> </span><br><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br><span class="line"></span><br><span class="line">（7）</span><br><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line">scp -r /export/ hadoop02:/</span><br><span class="line">scp -r /export/ hadoop03:/</span><br><span class="line"></span><br><span class="line">需要对主节点hadoop01操作</span><br><span class="line"></span><br><span class="line">（8）必须格式化处理一次</span><br><span class="line">cd /export/servers/hadoop-2.10.0</span><br><span class="line">ls -l</span><br><span class="line">如果有tmp目录</span><br><span class="line">需要输入：rm -rf /export/servers/hadoop-2.10.0/tmp/</span><br><span class="line">格式化：</span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>如果到此没有出错，那么需要进行一下最最最重要的一步：</p><p><strong>拍摄快照</strong></p><p><strong>拍摄快照</strong></p><p><strong>拍摄快照</strong></p><p>重要的事情说三遍。</p><h2 id="Hadoop集群测试"><a href="#Hadoop集群测试" class="headerlink" title="Hadoop集群测试"></a>Hadoop集群测试</h2><h3 id="每次开机需要启动一次服务"><a href="#每次开机需要启动一次服务" class="headerlink" title="*每次开机需要启动一次服务"></a>*每次开机需要启动一次服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）启动服务</span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">注：start换成stop停止服务</span><br><span class="line"></span><br><span class="line">（2）查看服务</span><br><span class="line">jps</span><br><span class="line"></span><br><span class="line">（3）通过UI查看Hadoop运行状态</span><br><span class="line">在浏览器网址栏输入：</span><br><span class="line">HDFS的UI端口：</span><br><span class="line">hadoop01:50070</span><br><span class="line">YARN的UI端口：</span><br><span class="line">hadoop01:8088</span><br></pre></td></tr></table></figure><h2 id="Hadoop集群初体验"><a href="#Hadoop集群初体验" class="headerlink" title="Hadoop集群初体验"></a>Hadoop集群初体验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">（1）在/export/data目录下，输入：</span><br><span class="line">cd /export/data</span><br><span class="line">vim word.txt</span><br><span class="line">编写内容：</span><br><span class="line">hello world</span><br><span class="line">hello computer</span><br><span class="line">hello hadoop</span><br><span class="line"></span><br><span class="line">（2）在HDFS上创建/wordcount/input,并上传word.txt:</span><br><span class="line">hadoop fs -mkdir -p /wordcount/input</span><br><span class="line">hadoop fs -put /export/data/word.txt /wordcount/input</span><br><span class="line"></span><br><span class="line">（3）HDFS的UI端口查看：</span><br><span class="line">hadoop01:50070</span><br><span class="line"></span><br><span class="line">（4）查看MapReduce实例程序：</span><br><span class="line">cd /export/servers/hadoop-2.10.0/share/hadoop/mapreduce</span><br><span class="line">ls -l</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.10.0.jar wordcount /wordcount/input /wordcount/output</span><br><span class="line"></span><br><span class="line">（5）HDFS的UI端口查看结果：</span><br><span class="line">hadoop01:50070</span><br></pre></td></tr></table></figure><h1 id="第二章-初识Hadoop"><a href="#第二章-初识Hadoop" class="headerlink" title="第二章 初识Hadoop"></a>第二章 初识Hadoop</h1><ol><li><p>什么是大数据？</p><p>大数据是数字化时代、信息化时代的基础（技术）支撑，以数据为生活赋能。</p></li><li><p>大数据的4个主要特征（4v）：</p><p>大量（volume）</p><p>多样（variety）：结构化数据，非结构化数据，半结构化数据</p><p>高速（velocity）：</p><p>价值（value）：价值密度的高低和数据总量的大小成反比。</p></li><li><p>大数据的应用场景：医疗行业的应用，金融行业的应用，零售业的应用</p></li><li><p>Hadoop的优势：</p><p>扩容能力强</p><p>成本低</p><p>高效率</p><p>可靠性</p><p>高容错率</p></li><li><p>Hadoop的生态体系：</p><ol><li><p>分布式存储系统（HDFS）：</p><p>Hadoop分布式文件系统的简称</p></li><li><p>MapReduce分布式计算框架：</p><p>是一种计算模型，用于大规模数据集的并行计算</p></li><li><p>YARN资源管理平台：</p><p>Hadoop2.0中的资源管理器，为上层的应用提供统一的资源管理和调度</p></li><li><p>Sqoop数据迁移工具：</p><p>用于Hadoop和传统数据库间进行数据的转换。</p></li><li><p>Mahout数据挖掘算法库：</p><p>方便快捷地创建智能应用程序</p></li><li><p>HBase分布式数据库：</p><p>针对结构化数据的可伸缩、高可靠、高性能、分布式和面向列的动态模型数据库</p></li><li><p>Zookeeper分布式协调服务：</p><p>分布式应用程序协调服务</p></li><li><p>Hive基于Hadoop的数据仓库：</p><p>可以将结构化的数据文件映射为一张数据表</p></li><li><p>Flume日志收集工具：</p><p>是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。支持在日志系统中定制各类数据发送方用于收集数据。</p></li></ol></li><li><p>大数据的核心工作：数据存储，数据计算，数据传输</p><ul><li><p>数据存储：</p><p>HDFS</p><p>HBase是大数据体系内使用非常广泛的NoSQL KV型数据库技术HBase是基于HDFS之上构建的。</p></li><li><p>数据计算：</p><p>MapReduce：组件是最早一代的大数据分布式计算引擎对大数据的发展做出了卓越的贡献</p><p> Hive：是一款以SQL为要开发语言的分布式计算框架。</p><p>Spark：是目前全球范围内最火热的分布式内存计算引擎。是大数据体系中的明星计算产品</p><p>Flink：同样也是一款明星级的大数据分布式内存计算引擎。</p></li><li><p>数据传输：</p><p>Flume：是一款流式数据采集工具，可以从非常多的数据源中完成数据采集传输的任务。</p><p> Sqoop：是一款ETL工具，可以协助大数据体系和关系型数据库之间进行数据传输。</p><p>Kafka：是一款分布式的消息系统，可以完成海量规模的数据传输工作。</p><p>Pulsar：同样是一款分布式的消息系统。</p></li></ul></li><li><p>大数据软件生态</p><ul><li>存储：Apache Hadoop HDFS、Apache HBase、Apache Kudu、云平台</li><li>计算：Apache Hadoop MapReduce、Apache Spark、Apache Flink</li><li>传输：Apache Kafka、Apache Pulsar、Apache Flume、Apache Sqoop</li></ul></li><li><p>商业发行版本：CDH，HDP，星环</p></li></ol><h1 id="第三章-HDFS分布式文件系统"><a href="#第三章-HDFS分布式文件系统" class="headerlink" title="第三章 HDFS分布式文件系统"></a>第三章 HDFS分布式文件系统</h1><p>Hadoop三大组件（HDFS，MapReduce，YARN）</p><h2 id="HDFS的基本概念"><a href="#HDFS的基本概念" class="headerlink" title="HDFS的基本概念"></a>HDFS的基本概念</h2><ol><li>NameNode（名称节点&#x2F;主节点）：是HDFS集群的主服务器</li><li>DataNode（数据节点）：是HDFS集群的从服务器</li><li>Secondary NameNode（辅助名称节点）：通过http从NameNode拉取数据（edits和fsimage）然后合并完成后提供给NameNode使用</li><li>Block（数据块）</li><li>Rack（机架）</li><li>Metadata（元数据）：<ul><li>维护HDFS中文件和目录的信息</li><li>记录文件内容，存储相关信息</li><li>用来记录HDFS中所有DataNode的信息</li></ul></li></ol><h2 id="HDFS的特点"><a href="#HDFS的特点" class="headerlink" title="HDFS的特点"></a>HDFS的特点</h2><ol><li>优点<ul><li>高容错</li><li>流式数据访问</li><li>支持超大文件</li><li>高数据吞吐量：一旦写入就不能进行修改了，只能追加或者删除。</li><li>可构建在廉价的机器上</li></ul></li><li>缺点<ul><li>高延迟</li><li>不适合小文件存取场景</li><li>不适合并发写入：不支持并发多用户的写操作</li></ul></li></ol><h2 id="HDFS存储架构"><a href="#HDFS存储架构" class="headerlink" title="HDFS存储架构"></a>HDFS存储架构</h2><ol><li><p>大数据体系中，分布式的调度主要有2类架构模式：</p><ul><li>去中心化模式</li><li>中心化模式（主从架构&#x2F;主从模式）：就是中心化模式，表示有一个主节点来作为管理者，管理协调下属一批从节点工作。</li></ul></li><li><p>NameNode：：存储的是元数据信息。</p><p>DataNode：存储真正的数据信息</p><p>SecondaryNameNode：主要帮助NameNode完成元数据整理工作。</p></li><li><p>HDFS文件的读写原理（略）</p></li></ol><h2 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h2><h3 id="一键启停脚本"><a href="#一键启停脚本" class="headerlink" title="一键启停脚本"></a>一键启停脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><h3 id="HDFS文件系统基本信息"><a href="#HDFS文件系统基本信息" class="headerlink" title="HDFS文件系统基本信息"></a>HDFS文件系统基本信息</h3><p>HDFS同Linux系统一样，均是以 &#x2F; 作为根目录的组织形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs 新版命令，只是前缀不同</span><br><span class="line"></span><br><span class="line">1.创建文件夹</span><br><span class="line">hadoop fs -mkdir [-p] &lt;path&gt; ...</span><br><span class="line">    path 为待创建的目录</span><br><span class="line">    -p选项的行为与Linux mkdir -p一致，它会沿着路径创建父目录。</span><br><span class="line"></span><br><span class="line">2.查看目录内容</span><br><span class="line">hadoop fs -ls [-h] [-R] [&lt;path&gt; ...] </span><br><span class="line">path 指定目录路径</span><br><span class="line">-h 人性化显示文件size</span><br><span class="line">-R 递归查看指定目录及其子目录</span><br><span class="line"></span><br><span class="line">3.上传文件到HDFS指定目录下</span><br><span class="line">hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">-f 覆盖目标文件（已存在下）</span><br><span class="line">-p 保留访问和修改时间，所有权和权限。</span><br><span class="line">localsrc 本地文件系统（客户端所在机器）</span><br><span class="line">dst 目标文件系统（HDFS）</span><br><span class="line"></span><br><span class="line">4.查看HDFS文件内容</span><br><span class="line">hadoop fs -cat &lt;src&gt; ... </span><br><span class="line">    读取指定文件全部内容，显示在标准输出控制台</span><br><span class="line">    </span><br><span class="line">    读取大文件可以使用管道符配合more</span><br><span class="line">        hadoop fs -cat &lt;src&gt; | more</span><br><span class="line">        hdfs dfs -cat &lt;src&gt; | more</span><br><span class="line"></span><br><span class="line">5.下载HDFS文件</span><br><span class="line">hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</span><br><span class="line">    下载文件到本地文件系统指定目录，localdst必须是目录</span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line">    -p 保留访问和修改时间，所有权和权限。</span><br><span class="line"></span><br><span class="line">6.拷贝HDFS文件</span><br><span class="line">hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt; </span><br><span class="line">    -f 覆盖目标文件（已存在下）</span><br><span class="line"></span><br><span class="line">7.追加数据到HDFS文件中</span><br><span class="line">hadoop fs -appendToFile &lt;localsrc&gt; ... &lt;dst&gt;</span><br><span class="line">    将所有给定本地文件的内容追加到给定dst文件。 </span><br><span class="line">    dst如果文件不存在，将创建该文件。 </span><br><span class="line">    如果&lt;localSrc&gt;为-，则输入为从标准输入中读取。</span><br><span class="line"></span><br><span class="line">8.HDFS数据移动操作</span><br><span class="line">hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</span><br><span class="line">    移动文件到指定文件夹下</span><br><span class="line">    可以使用该命令移动数据，重命名文件的名称</span><br><span class="line"></span><br><span class="line">9.HDFS数据删除操作</span><br><span class="line">hadoop fs -rm -r [-skipTrash] URI [URI ...]</span><br><span class="line">    删除指定路径的文件或文件夹</span><br><span class="line">    -skipTrash 跳过回收站，直接删除（默认回收站是关闭状态）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HDFS shell其它命令：<a href="https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html">官方命令指导文档</a></p><h2 id="HDFS分布式文件存储"><a href="#HDFS分布式文件存储" class="headerlink" title="HDFS分布式文件存储"></a>HDFS分布式文件存储</h2><ol><li><p>问题：文件大小不一，不利于统一管理</p><p>解决：设定统一的管理单位，block块</p></li><li><p>NameNode基于一批edits和一个fsimage文件的配合完成整个文件系统的管理和维护</p><ul><li>edits文件：是一个流水账文件，记录了hdfs中的每一次操作，以及本次操作影响的文件其对应的block</li><li>FSImage文件：将全部的edits文件，合并为最终结果</li></ul></li></ol><h1 id="第四章-MapReduce分布式计算框架"><a href="#第四章-MapReduce分布式计算框架" class="headerlink" title="第四章 MapReduce分布式计算框架"></a>第四章 MapReduce分布式计算框架</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><ol><li>MapReduce核心思想是：分而治之</li><li>MapReduce作为一种分布式计算模型，它主要用于解决海量数据的计算问题。<ul><li>Map阶段：负责将任务分解，并行处理</li><li>Reduce阶段：负责将任务合并，即把Map阶段的结果进行全局汇总</li></ul></li><li>从数据格式上看map（）函数接受键值对数据，输出键值对数据。reduce（）函数将map（）输出的键值对作为输入，把相同的key的value进行汇总输出新的键值对。</li></ol><h2 id="MapReduce工作原理"><a href="#MapReduce工作原理" class="headerlink" title="MapReduce工作原理"></a>MapReduce工作原理</h2><p>（见课本：P73页- P100）</p><h1 id="第五章-Zookeeper分布式协调服务"><a href="#第五章-Zookeeper分布式协调服务" class="headerlink" title="第五章 Zookeeper分布式协调服务"></a>第五章 Zookeeper分布式协调服务</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1M741137qY?p=74">黑马程序员</a></p><h2 id="初识Zookeeper"><a href="#初识Zookeeper" class="headerlink" title="初识Zookeeper"></a>初识Zookeeper</h2><ol><li><p>Zookeeper简介</p><ul><li>Zookeeper是进行分布式服务的协调</li><li>本质上是一个分布式的小文件存储系统</li></ul></li><li><p>Zookeeper的特性：其他特性都是为了满足Zookeeper全局数据一致性</p><ul><li>全局数据一致性：每个服务器都保存一份相同的数据副本，客户端连接到集群的任意节点上，看到的数据都是一致的。</li><li>可靠性</li><li>顺序性</li><li>数据更新原子性</li><li>实时性</li></ul></li><li><p>Zookeeper集群的角色</p><p>每一个Zookeeper都是由多台服务器节点组成，这些节点通过复制保证各个服务器节点之间的数据一致。<strong>只要这些服务器节点过半数可用，那么整个Zookeeper集群就可用。</strong></p><ol><li>leader：Zookeeper集群工作的核心，也是事务性请求的唯一调度者和处理者。</li><li>follower：负责处理客户端的非事务请求。</li><li>observer：负责观察Zookeeper集群的最新状态变化，并将这些状态进行同步。</li></ol></li></ol><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ol><li>数据采用树状层次结构</li><li>Znode的类型：<ul><li>临时节点：生命周期依赖于创建它们的会话</li><li>永久节点：生命周期<strong>不</strong>依赖于创建它们的会话</li></ul></li><li>Znode的属性：其中重要的概念是<code>Zxid(Zookeeper Transaction ID)</code>，<code>Zookeeper</code>结点的每一次更改都具有唯一的<code>Zxid</code>，如果<code>Zxid-1</code> 小于<code> Zxid-2</code> ，则<code>Zxid-1</code> 的更改发生在 <code>Zxid-2 </code>更改之前<ul><li><code>czxid</code>：数据结点创建时的事务ID——针对于<code>zookeeper</code>数据结点的管理：我们对结点数据的一些写操作都会导致<code>zookeeper</code>自动地为我们去开启一个事务，并且自动地去为每一个事务维护一个事务<code>ID</code></li><li><code>ctime</code>数据结点创建时的时间</li><li><code>mZxid</code>数据结点最后一次更新时的事务ID</li><li><code>mtime</code>数据结点最后一次更新时的时间</li><li><code>pZxid</code>数据节点最后一次修改此<code>znode</code>子节点更改的<code>zxid</code></li><li><code>cversion</code>子结点的更改次数</li><li><code>dataVersion</code>结点数据的更改次数</li><li><code>aclVersion</code>结点的ACL更改次数——类似<code>linux</code>的权限列表，维护的是当前结点的权限列表被修改的次数</li><li><code>ephemeralOwner</code>如果结点是临时结点，则表示创建该结点的会话的<code>SessionID</code>；如果是持久结点，该属性值为0</li><li><code>dataLength</code>数据内容的长度</li><li><code>numChildren</code>数据结点当前的子结点个数</li></ul></li></ol><h2 id="Zookeeper的Watch机制"><a href="#Zookeeper的Watch机制" class="headerlink" title="Zookeeper的Watch机制"></a>Zookeeper的Watch机制</h2><p>Watch机制：实现分布式的通知功能。</p><ol><li>Watch机制的特点<ul><li>一次性触发：后续发生同样的事件，也不会再次触发。</li><li>事件封装：</li><li>异步发送</li><li>先注册，再触发</li></ul></li><li>Watch机制的通知状态和事件类型（107）</li></ol><h2 id="Zookeeper的选举机制"><a href="#Zookeeper的选举机制" class="headerlink" title="Zookeeper的选举机制"></a>Zookeeper的选举机制</h2><ol><li>选举机制：<ul><li>服务器ID：设置myid参数文件，编号越大，在算法中的权重越大</li><li>选举状态：4种。竞选，随从，观察，领导者。</li><li>数据ID：选举过程中，数据越新，权重越大</li><li>逻辑时钟：投票次数。</li></ul></li><li>选举机制的类型<ul><li>全新集群选举</li><li>非全新集群选举</li></ul></li></ol><h2 id="Zookeeper的shell操作"><a href="#Zookeeper的shell操作" class="headerlink" title="Zookeeper的shell操作"></a>Zookeeper的shell操作</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crash Course Computer Science</title>
      <link href="/2023/11/07/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/3.%E8%87%AA%E5%AD%A6/1.Crash%20Course%20Computer%20Science/"/>
      <url>/2023/11/07/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/3.%E8%87%AA%E5%AD%A6/1.Crash%20Course%20Computer%20Science/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>视频1：<a href="https://www.bilibili.com/video/BV1EW411u7th/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">B站</a></p><p>视频2：<a href="https://github.com/1c7/crash-course-computer-science-chinese">GitHub</a></p><p>一个科普向系列视频，在短短 8 个小时里非常生动且全面地科普了关于计算机科学的方方面面：计算机的历史、计算机是如何运作的、组成计算机的各个重要模块、计算机科学中的重要思想等。正如它的口号所说的 <em>Computers are not magic!</em></p><h2 id="课程目标："><a href="#课程目标：" class="headerlink" title="课程目标："></a>课程目标：</h2><p>从高层次总览一系列计算机话题，快速入门计算机科学。</p><h1 id="第一课：计算机早期历史"><a href="#第一课：计算机早期历史" class="headerlink" title="第一课：计算机早期历史"></a>第一课：计算机早期历史</h1><h2 id="1、计算机技术的影响——进入信息时代"><a href="#1、计算机技术的影响——进入信息时代" class="headerlink" title="1、计算机技术的影响——进入信息时代"></a>1、计算机技术的影响——进入信息时代</h2><ul><li><p>出现自动化农业设备与医疗设备</p></li><li><p>全球通信和全球教育机会变得普遍</p></li><li><p>出现意想不到的虚拟现实&#x2F;无人驾驶&#x2F;人工智能等新领域</p></li></ul><h2 id="2、计算机的实质："><a href="#2、计算机的实质：" class="headerlink" title="2、计算机的实质："></a>2、计算机的实质：</h2><p>极其简单的组件，通过一层层的抽象，来做出复杂的操作。</p><p>计算机中的很多东西，底层其实都很简单，让人难以理解的，是一层层精妙的抽象。像一个越来越小的俄罗斯套娃。</p><h2 id="3、关于计算的历史："><a href="#3、关于计算的历史：" class="headerlink" title="3、关于计算的历史："></a>3、关于计算的历史：</h2><ol><li>公元前 2500 年：算盘出现，为十进制，功能类似一个计数器。</li><li>公元前 2500 年-公元 1500年：星盘、计算尺等依靠机械运动的计算设备出现</li><li>公元 1613 年：computer 的概念出现，当时指的是专门做计算的职业，</li><li>1694 年：步进计算器出现，是世界上第一台能自动完成加减乘除的计算器。</li><li>1694-1900 年：计算表兴起，类似于字典，可用于查找各种庞大的计算值。</li><li>1823 年：差分机的设想出现，可以做函数计算，但计划最后失败。</li><li>19 世纪中期：分析机的设想出现，设想存在可计算一切的通用计算机。</li><li>1890 年：打孔卡片制表机。原理：在纸上打孔→孔穿过针→针泡入汞→电路连通→齿轮使计数+1。</li></ol><h1 id="第二课：电子计算机的发展史"><a href="#第二课：电子计算机的发展史" class="headerlink" title="第二课：电子计算机的发展史"></a>第二课：电子计算机的发展史</h1><h2 id="1、电子计算机元器件变化："><a href="#1、电子计算机元器件变化：" class="headerlink" title="1、电子计算机元器件变化："></a>1、电子计算机元器件变化：</h2><p>继电器→真空管→晶体管</p><h2 id="2、计算机的出现背景："><a href="#2、计算机的出现背景：" class="headerlink" title="2、计算机的出现背景："></a>2、计算机的出现背景：</h2><p>20世纪人口暴增，科学与工程进步迅速，航天计划成形。以上导致数据的复杂度急剧上升、计算量暴增，对于计算的自动化、高速有迫切的需求。</p><h2 id="3、电子计算机的发展："><a href="#3、电子计算机的发展：" class="headerlink" title="3、电子计算机的发展："></a>3、电子计算机的发展：</h2><p>1945年 哈佛马克1：使用继电器，用电磁效应，控制机械开关，缺点为有磨损和延迟。</p><p>*最早还因为有虫子飞进去导致故障，引申出bug&#x3D;故障的意思。</p><p>1943年 巨人1号：使用真空管（三极管），制造出世界上第一个可编程的计算机。</p><p>1946年 ENIAC：第一个电子数值积分计算机，为第一台通用计算机。</p><p>1947年 晶体管出现：使用的是固态的半导体材料，相对真空管更可靠。</p><p>1950s 空军ANFSQ-7： 真空管到达计算极限。</p><p>1957年 IBM 608： 第一个消费者可购买的晶体管计算机出现。</p><h1 id="第三课：布尔逻辑与逻辑门"><a href="#第三课：布尔逻辑与逻辑门" class="headerlink" title="第三课：布尔逻辑与逻辑门"></a>第三课：布尔逻辑与逻辑门</h1><h2 id="1、计算机为什么使用二进制："><a href="#1、计算机为什么使用二进制：" class="headerlink" title="1、计算机为什么使用二进制："></a>1、计算机为什么使用二进制：</h2><ol><li>计算机的元器件晶体管只有2种状态，通电（1）&amp;  断电（0），用二进制可直接根据元器件的状态来设计计算机。</li><li>而且，数学中的“布尔代数”分支，可以用True和False（可用1代表True，0代表False）进行逻辑运算，代替实数进行计算。</li><li>进制数越多（十进制等），信号越容易混淆，影响计算。对于当时每秒运算百万次以上的晶体管，信号混淆是特别让人头疼的的。</li></ol><h2 id="2、布尔代数-布尔代数在计算机中的实现"><a href="#2、布尔代数-布尔代数在计算机中的实现" class="headerlink" title="2、布尔代数&amp;布尔代数在计算机中的实现"></a>2、布尔代数&amp;布尔代数在计算机中的实现</h2><ol><li>变量：没有常数，仅True和False这两个变量。</li><li>三个基本操作：NOT&#x2F;AND&#x2F;OR。</li></ol><h3 id="1）NOT操作："><a href="#1）NOT操作：" class="headerlink" title="1）NOT操作："></a>1）NOT操作：</h3><ol><li>命名：称为NOT门&#x2F;非门。</li><li>作用：将输入布尔值反转。输入的True或False，输出为False或True。</li><li>晶体管的实现方式：<ul><li>半导体通电True，则线路<strong>接地</strong>，无输出电流，为False。</li><li>半导体不通电False，则输出电流从右边输出，为True。</li></ul></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/1.png?raw=true" alt="1.png"></p><h3 id="2）AND操作"><a href="#2）AND操作" class="headerlink" title="2）AND操作"></a>2）AND操作</h3><ol><li><p>命名：AND门&#x2F;与门</p></li><li><p>作用：由2个输入控制输出，仅当2个输入input1和input2都为True时，输出才为True，2个输入的其余情况，输出均为False。</p><p>*可以理解为，输入有假，输出为假，反之（输入为真-真，输出才为真）。</p></li></ol><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/2.png?raw=true" alt="2.png"></p><p>3.用晶体管实现的方式：</p><p>串联两个晶体管，仅当2个晶体管都通电，输出才有电流（True）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/3.png?raw=true" alt="3.png"></p><h3 id="3）OR操作"><a href="#3）OR操作" class="headerlink" title="3）OR操作"></a>3）OR操作</h3><p>1.命名：OR门&#x2F;或门</p><p>2.作用：由2个输入控制输出，只要其中一个输入为True，则输出True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/4.png?raw=true" alt="4.png"></p><p>3.用晶体管实现的方式：</p><p>使用2个晶体管，将它们并联到电路中，只要有一个晶体管通电，则输出有电流（True）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/5.png?raw=true" alt="5.png"></p><h2 id="3、特殊的逻辑运算——异或"><a href="#3、特殊的逻辑运算——异或" class="headerlink" title="3、特殊的逻辑运算——异或"></a>3、特殊的逻辑运算——异或</h2><p>1.命名：XOR门&#x2F;异或门</p><p>2.作用：2个输入控制一个输出。当2个输入相同（均为True时，输出False），输出false。反之，输入不同（一个True时，一个False），输出为True。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/6.png?raw=true" alt="6.png"></p><p>3.图示：</p><p>先用一个OR门，将其与AND门并联，AND门与NOT门串联，最后让NOT与AND门并联，获得输出。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/7.png?raw=true" alt="7.png"></p><h2 id="4、逻辑门的符号表示"><a href="#4、逻辑门的符号表示" class="headerlink" title="4、逻辑门的符号表示"></a>4、逻辑门的符号表示</h2><p>1.作用：将逻辑门简化，将逻辑门用于构建更大的组件，而不至于太复杂。</p><p>2.图示：</p><ul><li><p>非门：用三角形+圆圈表示</p></li><li><p>与门：用D型图案表示</p></li><li><p>或门：用类似D向右弯曲的图案表示</p></li><li><p>异或门：用或门+一个圆弧表示</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/8.png?raw=true" alt="8.png"></p><h2 id="5、抽象的好处"><a href="#5、抽象的好处" class="headerlink" title="5、抽象的好处"></a>5、抽象的好处</h2><p>使得分工明确，不同职业的工程师各司其职,而不用担心其他细节。</p><h1 id="第四课：二进制"><a href="#第四课：二进制" class="headerlink" title="第四课：二进制"></a>第四课：二进制</h1><h2 id="1、二进制的原理，存储单元MB-GB-TB解释"><a href="#1、二进制的原理，存储单元MB-GB-TB解释" class="headerlink" title="1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释"></a>1、二进制的原理，存储单元MB&#x2F;GB&#x2F;TB解释</h2><p>0.计算机中的二进制表示：</p><p>单个数字1或0，1位二进制数字命名为位(bit),也称1比特。</p><p>1.字节（byte）的概念：</p><p>1byte&#x3D;8bit，即1byte代表8位二进制数。最早期的电脑为八位的，即以八位二进制为单位处理数据。为了方便，将八位二进制命名为1字节（1byte）.</p><p>2.十进制与二进制的区别：</p><p>十进制有10个数字，0-9，逢10进1（不存在10这个数字），则每向左进一位，数字大10倍。<br>二进制有2个数字，0-1，逢2进1,（不存在2这个数字），则每向左进一位，数字大2倍。</p><p>如何进行二进制与十进制联系起来？</p><p>将十进制与二进制的位数提取出来，编上单位：<br>eg：二进制的1011&#x3D;1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3&#x3D; 11（从右往左数）</p><p>eg：十进制的1045&#x3D; 1 * 10^3 + 0 * 10^2 + 4 * 10^1 + 5 *10^0</p><p>3.十进制与二进制的图示：</p><p>十进制的263</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/9.png?raw=true" alt="9.png"></p><p>二进制的10110111</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/10.png?raw=true" alt="10.png"></p><p>4.二进制的运算：</p><p>相同的位数相加，逢2进1</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/11.png?raw=true" alt="11.png"></p><p>5.byte在电脑中的单位换算：</p><p>1kb&#x3D;2^10bit &#x3D; 1024bit &#x3D;1000b</p><p>1TB&#x3D;1000GB</p><p>1GB&#x3D;十亿字节&#x3D;1000MB&#x3D;10^6KB</p><p>6.32位与64位电脑的区别</p><p>32位的最大数为43亿左右</p><p>64位的最大数为9.2*10^18</p><h2 id="2、正数、负数、正数、浮点数的表示"><a href="#2、正数、负数、正数、浮点数的表示" class="headerlink" title="2、正数、负数、正数、浮点数的表示"></a>2、正数、负数、正数、浮点数的表示</h2><p>1）计算机中表示数字的方法</p><p>1.整数：</p><p>表示方法:</p><p>第1位：表示正负 1是负，0是正（补码）<br>其余31位&#x2F;63位： 表示实数</p><p>2.浮点数（Floating Point Numbers）：</p><p>定义：小数点可在数字间浮动的数（非整数）</p><p>表示方法：IEEE 754标准下</p><p>用类似科学计数法的方式，存储十进制数值</p><p>浮点数&#x3D;有效位数<em>指数<br>32位数字中：第1位表示正负，第2-9位存指数。剩下23位存有效位数<br>eg：625.9&#x3D;0.6259（有效位数）</em>10^3（指数）</p><h2 id="3、美国信息交换标准代码-ASCⅡ，用来表示字符"><a href="#3、美国信息交换标准代码-ASCⅡ，用来表示字符" class="headerlink" title="3、美国信息交换标准代码-ASCⅡ，用来表示字符"></a>3、美国信息交换标准代码-ASCⅡ，用来表示字符</h2><p>1.全称：美国信息交换标准代码</p><p>2.作用：用数字给英文字母及符号编号</p><p>3.内容：7位代码，可存放128个不同的值。</p><p>4.图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/12.png?raw=true" alt="12.png"></p><h2 id="4、UNICODE，统一所有字符编码的标准"><a href="#4、UNICODE，统一所有字符编码的标准" class="headerlink" title="4、UNICODE，统一所有字符编码的标准"></a>4、UNICODE，统一所有字符编码的标准</h2><p>1.诞生背景：1992诞生，随着计算机在亚洲兴起，需要解决ASCⅡ不够表达所有语言的问题。</p><p>为提高代码的互用性，而诞生的编码标准。</p><p>2.内容：UNICODE为17组的16位数字，有超过100万个位置，可满足所有语言的字符需求。</p><h1 id="第五课：算术逻辑单元"><a href="#第五课：算术逻辑单元" class="headerlink" title="第五课：算术逻辑单元"></a>第五课：算术逻辑单元</h1><h2 id="1、什么是算术逻辑单元"><a href="#1、什么是算术逻辑单元" class="headerlink" title="1、什么是算术逻辑单元"></a>1、什么是算术逻辑单元</h2><p>1.命名：简称ALU，Arithmetic&amp;Logic Unit</p><p>2.组成：ALU有2个单元，1个算术单元和1个逻辑单元（Arithmetic Unit和Logic Unit）</p><p>3.作用：计算机中负责运算的组件，处理数字&#x2F;逻辑运算的最基本单元。</p><h2 id="2、算术单元"><a href="#2、算术单元" class="headerlink" title="2、算术单元"></a>2、算术单元</h2><p>1）基本组件：</p><ul><li><p>由半加器、全加器组成</p></li><li><p>半加器、全加器由AND、OR、NOT、XOR门组成</p></li></ul><p>2）加法运算</p><p>1.组件：AND、OR、NOT、XOR门</p><p>2.元素：输入A，输入B，输出（均为1个bit，即0或1）</p><p>3.半加器：</p><ul><li><p>作用：用于计算个位的数字加减。</p></li><li><p>输入：A，B</p></li><li><p>输出：总和，进位</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/13.png?raw=true" alt="13.png"></p><ul><li>抽象：</li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/14.png?raw=true" alt="14.png"></p><p>4.全加器：</p><p>作用：用于计算超过1位的加法，由于涉及进位，因此有3个输入（C充当进位）。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/15.png?raw=true" alt="15.png"></p><p>原理图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/16.png?raw=true" alt="16.png"></p><p>3）如何用半加器与全加器做8位数的加法</p><p>说明：以8位行波加法器为例</p><ol><li>用半加器处理第1位数（个位）的加法，得到的和为结果的第1位。</li><li>将输出的进位，输入到第2位用的全加器的输入C中。</li><li>将第2位的2个数用全加器计算，得到的和为结果的第2位（sum）。</li><li>将第2位计算的进位连接到百位的全加器输入C中。</li><li>在第3-8位上，循环第3-4步的操作。</li></ol><p>*现在电脑使用的加法器叫“超前进位加法器”</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/17.png?raw=true" alt="17.png"></p><p>4）算术单元支持的其他运算</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/18.png?raw=true" alt="18.png"></p><h2 id="3、溢出的概念"><a href="#3、溢出的概念" class="headerlink" title="3、溢出的概念"></a>3、溢出的概念</h2><p>内容：在有限的空间内，无法存储位数过大的数，则称为溢出。</p><p>说明：第8位的进位如果为1，则无法存储，此时容易引发错误，所以应该尽量避免溢出。</p><h2 id="4、逻辑单元"><a href="#4、逻辑单元" class="headerlink" title="4、逻辑单元"></a>4、逻辑单元</h2><p>作用：执行逻辑操作，如NOT、AND、OR等操作，以及做简单的数值测试。</p><h2 id="5、ALU的抽象"><a href="#5、ALU的抽象" class="headerlink" title="5、ALU的抽象"></a>5、ALU的抽象</h2><p>1）作用：ALU的抽象让工程师不再考虑逻辑门层面的组成，简化工作。</p><p>2）图示：</p><p>像一个大“V”。</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/19.png?raw=true" alt="19.png"></p><p>3）说明：</p><p>图示内容包括：</p><ul><li><p>输入A，B</p></li><li><p>输出</p></li><li><p>标志：溢出、零、负数</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/20.png?raw=true" alt="20.png"></p><h1 id="第六课-寄存器与内存"><a href="#第六课-寄存器与内存" class="headerlink" title="第六课 寄存器与内存"></a>第六课 寄存器与内存</h1><h2 id="0、课程导入"><a href="#0、课程导入" class="headerlink" title="0、课程导入"></a>0、课程导入</h2><p>当玩游戏、写文档时如果断电，进度会丢失，这是为什么？</p><ul><li><p>原因是这是电脑使用的是RAM（随机存取存储器），俗称内存，内存只能在通电情况下存储数据。</p></li><li><p>本节课程将讲述内存的工作原理。</p></li></ul><h2 id="1、概念梳理"><a href="#1、概念梳理" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><p>锁存器：锁存器是利用AND、OR、NOT逻辑门，实现存储1位数字的器件。</p><p>寄存器：1组并排的锁存器</p><p>矩阵：以矩阵的方式来存放锁存器的组合件，n<em>n门锁矩阵可存放n^2个锁存器，但同一时间只能写入&#x2F;读取1个数字。（早期为16</em>16矩阵）</p><p>位址：锁存器在矩阵中的行数与列数。eg.12行 8列</p><p>多路复用器：一组电线，输入2进制的行址&amp;列址，可启用矩阵中某个锁存器</p><p>内存（RAM）：随机存取存储器，由一系列矩阵以及电路组成的器件，可根据地址来写入、读取数据。类似于人类的短期记忆，记录当前在做什么事情。</p><h2 id="2、锁存器"><a href="#2、锁存器" class="headerlink" title="2、锁存器"></a>2、锁存器</h2><p>作用：存储1位数字。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/21.png?raw=true" alt="21.png"></p><h2 id="2-5、门锁："><a href="#2-5、门锁：" class="headerlink" title="2.5、门锁："></a>2.5、门锁：</h2><p>锁存器需要同时输入2个数字，不太方便。</p><p>为了使用更方便，只用1根电线控制数据输入，发展了门锁这个器件。另外，用另一根电线来控制整个结构的开关。（和复位作用不同）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/22.png?raw=true" alt="22.png"></p><h2 id="3、寄存器"><a href="#3、寄存器" class="headerlink" title="3、寄存器"></a>3、寄存器</h2><p>作用：并排使用门锁，存储多位数字</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/23.png?raw=true" alt="23.png"></p><h2 id="4、门锁矩阵"><a href="#4、门锁矩阵" class="headerlink" title="4、门锁矩阵"></a>4、门锁矩阵</h2><p>作用：</p><p>n*n的矩阵有n^2个位址，则可以存储n^2个数。但1个矩阵只可记录1位数字，n个矩阵组合在一起，才可记录n位数。如1个8位数，会按位数分成8个数，分别存储在8个矩阵的同一个位址中。</p><p>8个矩阵，则可以记录256个8位数字。</p><p>通俗理解：</p><p>16*16的门锁矩阵，可理解为1个公寓，1个公寓256个房间。</p><p>8个门锁矩阵并排放，则有了8个公寓。</p><p>规定每一个公寓同一个编号的房间，都有一样的标记（地址），共同组成8位数字。</p><p>那么8个公寓就能存 （8*256 &#x2F; 8）个数字。</p><p>原因：</p><p>16*16的门锁矩阵虽然有256个位置，但每次只能存&#x2F;取其中1个位置的数字。因此，要表示8位数字，就需要同时调用8个门锁矩阵。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/24.png?raw=true" alt="24.png"></p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/25.png?raw=true" alt="25.png"></p><p>使用方法：在多路复用器中输入位址，x行x列（2进制），即可点亮x行x列的锁存器。</p><p>举例：</p><table><thead><tr><th>行列数</th><th>矩阵1</th><th>矩阵2</th><th>矩阵3</th><th>矩阵4</th><th>矩阵5</th><th>矩阵6</th><th>矩阵7</th><th>矩阵8</th></tr></thead><tbody><tr><td>1行5列</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>2行3列</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><h2 id="5、内存"><a href="#5、内存" class="headerlink" title="5、内存"></a>5、内存</h2><p>粗略定义：将一堆独立的存储模块和电路看做1个单元，组成内存方块，n个内存方块组成内存模块。在一个电路板上所有的内存方块统称为内存(RAM)。</p><p>图示：</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/26.png?raw=true" alt="26.png"></p><h1 id="第七课-中央处理器（CPU）"><a href="#第七课-中央处理器（CPU）" class="headerlink" title="第七课 中央处理器（CPU）"></a>第七课 中央处理器（CPU）</h1><h2 id="1、概念梳理-1"><a href="#1、概念梳理-1" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>CPU（Central Processing Unit）：中央处理单元，负责执行程序。通常由寄存器&#x2F;控制单元&#x2F;ALU&#x2F;时钟组成。与RAM配合，执行计算机程序。CPU和RAM之间用“地址线”、“数据线”和“允许读&#x2F;写线”进行通信。</p></li><li><p>指令：指示计算机要做什么，多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>时钟：负责管理CPU运行的节奏，以精确地间隔，触发电信号，控制单元用这个信号，推动CPU的内部操作。</p></li><li><p>时钟速度：CPU执行“取指令→解码→执行”中每一步的速度叫做“时钟速度”，单位赫兹Hz，表示频率。</p></li><li><p>超频&#x2F;降频：</p></li><li><p>超频，修改时钟速度，加快CPU的速度，超频过多会让CPU过热或产生乱码。</p></li><li><p>降频，降低时钟速度，达到省电的效果，对笔记本&#x2F;手机很重要。</p></li><li><p>微体系框架：以高层次视角看计算机，如当我们用一条线链接2个组件时，这条线只是所有必须线路的抽象。</p></li></ul><h2 id="2、CPU工作原理"><a href="#2、CPU工作原理" class="headerlink" title="2、CPU工作原理"></a>2、CPU工作原理</h2><h3 id="1）必要组件："><a href="#1）必要组件：" class="headerlink" title="1）必要组件："></a>1）必要组件：</h3><ul><li><p>指令表：给CPU支持的所有指令分配ID</p></li><li><p>控制单元：像指挥部，有序的控制指令的读取、运行与写入。</p></li><li><p>指令地址寄存器：类似于银行取号。该器件只按顺序通报地址，让RAM按顺序将指令交给指令寄存器。</p></li><li><p>指令寄存器：存储具体的指令代码。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/27.png?raw=true" alt="27.png"></p><h3 id="2）过程"><a href="#2）过程" class="headerlink" title="2）过程"></a>2）过程</h3><ul><li><p>取指令：指令地址寄存器发地址给RAM→RAM发该地址内的数据给指令寄存器→指令寄存器接受数据</p></li><li><p>解码：指令寄存器根据数据发送指令给控制单元 →控制单元解码（逻辑门确认操作码）</p></li><li><p>执行阶段：控制单元执行指令(→涉及计算时→调用所需寄存器→传输入&amp;操作码给ALU执行）→调用RAM特定地址的数据→RAM将结果传入寄存器→指令地址寄存器+1</p></li></ul><h3 id="3）图示："><a href="#3）图示：" class="headerlink" title="3）图示："></a>3）图示：</h3><p>第一个CPU</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/28.png?raw=true" alt="28.png"></p><h1 id="第八课-指令和程序"><a href="#第八课-指令和程序" class="headerlink" title="第八课 指令和程序"></a>第八课 指令和程序</h1><h2 id="1、概念梳理-2"><a href="#1、概念梳理-2" class="headerlink" title="1、概念梳理"></a>1、概念梳理</h2><ul><li><p>指令：指示计算机要做什么的代码（机器码），多条指令共同组成程序。如数学指令，内存指令。</p></li><li><p>注:指令和数据都是存在同一个内存里的。</p></li><li><p>指令集：记录指令名称、用法、操作码以及所需RAM地址位数的表格。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/29.png?raw=true" alt="29.png"></p><p>程序</p><h2 id="2、指令的执行"><a href="#2、指令的执行" class="headerlink" title="2、指令的执行"></a>2、指令的执行</h2><ul><li><p>原则：</p></li><li><p>RAM每一个地址中，都存放0或1个数据。</p></li><li><p>特定的数字组合，就表示为一个指令，否则表示一个值。</p></li><li><p>LOAD指令：</p></li><li><p>计算机会按地址的顺序，读取RAM中所记录的指令&#x2F;数据。</p></li><li><p>计算机接受到指令后，如LOAD_A，则通过数据线将数据传至寄存器A。</p></li></ul><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/30.png?raw=true" alt="30.png"></p><ul><li><p>ADD指令：</p></li><li><p>ADD B A指令告诉ALU，把寄存器B和寄存器中的数字加起来，存到寄存器A中。</p></li><li><p>JUMP指令：</p></li><li><p>遇到JUMP指令，程序会跳转至对应的RAM地址读取数据。</p></li><li><p>JUMP指令可以有条件跳转（如JUMP-negative），也可以无条件跳转。</p></li></ul><h2 id="3、计算机指令长度"><a href="#3、计算机指令长度" class="headerlink" title="3、计算机指令长度"></a>3、计算机指令长度</h2><p>由于早期计算机每个字只有8位，指令只占4位，意味着只能有16个指令，这远远不够。</p><p>现代计算机有两种方式解决指令不够用的问题：</p><p>最直接的是用更多位来表示指令，如32位或64位。</p><p>采用“可变指令长度”，令不同的指令的长度不同，尽量节约位数。</p><p>假设1个字为16位，如果某指令不需要操作内存，则可以省去寻址的位数。</p><p>该情况下，部分指令后面需要跟数据，如JUMP，称为立即值。</p><h1 id="第九课-高级CPU设计"><a href="#第九课-高级CPU设计" class="headerlink" title="第九课 高级CPU设计"></a>第九课 高级CPU设计</h1><h2 id="0、概念梳理"><a href="#0、概念梳理" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><ul><li><p>缓存：在CPU中的小块RAM，用于存储批量指令。</p></li><li><p>缓存命中：想要的数据已经在缓存里</p></li><li><p>缓存未命中：想要的数据不在缓存里</p></li><li><p>脏位：缓存里每块空间，有个特殊标记，叫脏位，用于检测缓存内的数据是否与RAM一致。</p></li><li><p>多核处理器：一个CPU芯片中，有多个独立处理单元。</p></li></ul><h2 id="1、现代CPU如何提升性能："><a href="#1、现代CPU如何提升性能：" class="headerlink" title="1、现代CPU如何提升性能："></a>1、现代CPU如何提升性能：</h2><p>早期通过加快晶体管速度，来提升CPU速度。但很快该方法到达了极限。</p><p>后来给CPU设计了专门除法电路+其他电路来做复杂操作：如游戏，视频解码</p><h2 id="2、缓存："><a href="#2、缓存：" class="headerlink" title="2、缓存："></a>2、缓存：</h2><p>为了不让CPU空等数据，在CPU内部设置了一小块内存，称为缓存，让RAM可以一次传输一批数据到CPU中。（不加缓存，CPU没位置放大量数据）</p><p>缓存也可以当临时空间，存一些中间值，适合长&#x2F;复杂的运算。</p><p>空等原因：从RAM到CPU的数据传输有延迟（要通过总线，RAM还要时间找地址、取数据、配置、输出数据）。</p><h2 id="3、缓存同步："><a href="#3、缓存同步：" class="headerlink" title="3、缓存同步："></a>3、缓存同步：</h2><p>缓存同步一般发生在CPU缓存已满，但CPU仍需往缓存内输入数据。此时，被标记为脏位的数据会优先传输回RAM,腾出位置以防被覆盖，导致计算结果有误。</p><h2 id="4、指令流水线："><a href="#4、指令流水线：" class="headerlink" title="4、指令流水线："></a>4、指令流水线：</h2><p>作用：让取址→解码→执行三个步骤同时进行。并行执行指令，提升CPU性能。</p><p>原本需要3个时钟周期执行1个指令，现在只需要1个时钟周期。</p><p>设计难点：数据具有依赖性。</p><p>数据依赖性解决方法：</p><p>动态排序、乱序运行、预测分支（高端CPU）</p><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/31.png?raw=true" alt="31.png"></p><h2 id="5、一次性处理多条指令"><a href="#5、一次性处理多条指令" class="headerlink" title="5、一次性处理多条指令"></a>5、一次性处理多条指令</h2><p><img src="https://github.com/silent-wuhen/Blog_picture01/blob/main/3.%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E9%80%9F%E6%88%90/32.png?raw=true" alt="32.png"></p><h2 id="6、同时运行多个指令流（多核CPU）"><a href="#6、同时运行多个指令流（多核CPU）" class="headerlink" title="6、同时运行多个指令流（多核CPU）"></a>6、同时运行多个指令流（多核CPU）</h2><p>多核处理器：一个CPU芯片中，有多个独立处理单元。但因为它们整合紧密，可以共享一些资源。</p><h2 id="7、超级计算机（多个CPU）"><a href="#7、超级计算机（多个CPU）" class="headerlink" title="7、超级计算机（多个CPU）"></a>7、超级计算机（多个CPU）</h2><p>在一台计算机中，用无数个CPU，做怪兽级的复杂运算，如模拟宇宙形成。</p><h1 id="第十课-早期的编程方式"><a href="#第十课-早期的编程方式" class="headerlink" title="第十课 早期的编程方式"></a>第十课 早期的编程方式</h1><h2 id="1、早期，程序如何进入计算机"><a href="#1、早期，程序如何进入计算机" class="headerlink" title="1、早期，程序如何进入计算机"></a>1、早期，程序如何进入计算机</h2><p>程序必须人为地输入计算机。早期，电脑无内存的概念，人们通过打孔纸卡等物理手段，输入数据（数字），进入计算机。</p><h2 id="2、早期计算机的编程"><a href="#2、早期计算机的编程" class="headerlink" title="2、早期计算机的编程"></a>2、早期计算机的编程</h2><ul><li><p>打孔纸卡&#x2F;纸带：在纸卡上打孔，用读卡器读取连通电路，进行编程。原因，穿孔纸卡便宜、可靠也易懂。62500张纸卡&#x3D;5MB数据</p></li><li><p>插线板：通过插拔线路的方式，改变器件之间的连接方式，进行编程。</p></li><li><p>面板拨开关（1980s前）：通过拨动面板上的开关，进行编程。输入二进制操作码，按存储按钮，推进至下一个内存位，直至操作完内存，按运行键执行程序。（内存式电脑）</p></li></ul><h2 id="3、现代计算机基础结构——冯诺依曼计算机"><a href="#3、现代计算机基础结构——冯诺依曼计算机" class="headerlink" title="3、现代计算机基础结构——冯诺依曼计算机"></a>3、现代计算机基础结构——冯诺依曼计算机</h2><p>冯诺依曼计算机的标志是，一个处理器(有算术逻辑单元)+数据寄存器+指令寄存器+指令地址寄存器+内存</p><h1 id="第十一课-编程语言发展史"><a href="#第十一课-编程语言发展史" class="headerlink" title="第十一课 编程语言发展史"></a>第十一课 编程语言发展史</h1><h2 id="0、概念梳理-1"><a href="#0、概念梳理-1" class="headerlink" title="0、概念梳理"></a>0、概念梳理</h2><p>伪代码：用自然语言（中文、英语等）对程序的高层次描述，称为“伪代码”</p><p>汇编器：用于将汇编语言装换成机器语言。一条汇编语句对应一条机器指令。</p><p>助记符（汇编器）：</p><p>软件</p><h2 id="1、早期二进制写代码"><a href="#1、早期二进制写代码" class="headerlink" title="1、早期二进制写代码"></a>1、早期二进制写代码</h2><p>先前都是硬件层面的编程，硬件编程非常麻烦，所以程序员想要一种更通用的编程方法，就是软件。</p><p>早期，人们先在纸上写伪代码，用”操作码表”把伪代码转成二进制机器码，翻译完成后，程序可以喂入计算机并运行。</p><h2 id="2、汇编器-助记符"><a href="#2、汇编器-助记符" class="headerlink" title="2、汇编器&amp;助记符"></a>2、汇编器&amp;助记符</h2><p>背景：1940~1950s，程序员开发出一种新语言， 更可读 更高层次。每个操作码分配一个简单名字，叫”助记符”。但计算机不能读懂“助记符”，因此人们写了二进制程序“汇编器来帮忙”</p><p>作用：汇编器读取用”汇编语言”写的程序，然后转成”机器码”。</p><h2 id="3、最早高级编程语言“A-0”"><a href="#3、最早高级编程语言“A-0”" class="headerlink" title="3、最早高级编程语言“A-0”"></a>3、最早高级编程语言“A-0”</h2><p>汇编只是修饰了一下机器码，一般来说，一条汇编指令对应一条机器指令，所以汇编码和底层硬件的连接很紧密，汇编器仍然强迫程序员思考底层逻辑。</p><p>1950s，为释放超算潜力，葛丽丝·霍普博士，设计了一个高级编程语言，叫 “Arithmetic Language Version 0”，一行高级编程语言 可以转成几十条二进制指令。但由于当时人们认为，计算机只能做计算，而不能做程序，A-0未被广泛使用。</p><p>过程：高级编程语言→编译器→汇编码&#x2F;机器码</p><h2 id="4、开始广泛应用的高级编程语言FORTRAN"><a href="#4、开始广泛应用的高级编程语言FORTRAN" class="headerlink" title="4、开始广泛应用的高级编程语言FORTRAN"></a>4、开始广泛应用的高级编程语言FORTRAN</h2><p>1957年由IBM1957年发布，平均来说，FORTRAN 写的程序，比等同的手写汇编代码短 20 倍， FORTRAN 编译器会把代码转成机器码。</p><h2 id="5、通用编程语言——COBOL"><a href="#5、通用编程语言——COBOL" class="headerlink" title="5、通用编程语言——COBOL"></a>5、通用编程语言——COBOL</h2><p>1959年，研发可以在不同机器上通用编程语言。</p><p>最后研发出一门高级语言：”普通面向商业语言”，简称 COBOL</p><p>每个计算架构需要一个 COBOL 编译器，不管是什么电脑都可以运行相同的代码，得到相同结果。</p><h2 id="6、现代编程语言-1960s-2000"><a href="#6、现代编程语言-1960s-2000" class="headerlink" title="6、现代编程语言:1960s-2000"></a>6、现代编程语言:1960s-2000</h2><p>1960s起，编程语言设计进入黄金时代。</p><p>1960 ：LGOL, LISP 和 BASIC 等语言</p><p>70年代有：Pascal，C 和 Smalltalk</p><p>80年代有：C++，Objective-C 和 Perl</p><p>90年代有：Python，Ruby 和 Java</p><h2 id="7、安全漏洞-补丁由来："><a href="#7、安全漏洞-补丁由来：" class="headerlink" title="*7、安全漏洞&amp;补丁由来："></a>*7、安全漏洞&amp;补丁由来：</h2><p>在1940年代，是用打孔纸带进行的，但程序出现了问题（也就是漏洞），为了节约时间，只能贴上胶带也就是打补丁来填补空隙，漏洞和补丁因此得名。</p><h1 id="第十二课-编程基础-语句和函数"><a href="#第十二课-编程基础-语句和函数" class="headerlink" title="第十二课 编程基础-语句和函数"></a>第十二课 编程基础-语句和函数</h1><h2 id="1、变量、赋值语句"><a href="#1、变量、赋值语句" class="headerlink" title="1、变量、赋值语句"></a>1、变量、赋值语句</h2><p>如a&#x3D;5 ，其中a为可赋值的量，叫做变量。把数字 5 放a里面.这叫”赋值语句”，即把一个值赋给一个变量</p><h2 id="2、if判断"><a href="#2、if判断" class="headerlink" title="2、if判断"></a>2、if判断</h2><p>可以想成是 “如果 X 为真，那么执行 Y，反之，则不执行Y”，if语句就像岔路口，走哪条路取决于条件的真假。</p><h2 id="3、while循环"><a href="#3、while循环" class="headerlink" title="3、while循环"></a>3、while循环</h2><p>当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环。</p><h2 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h2><p>for循环不判断条件，判断次数，会循环特定次数，不判断条件。for 的特点是，每次结束， i 会 +1</p><h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><p>当一个代码很常用的时候，我们把它包装成一个函数（也叫方法或者子程序），其他地方想用这个代码，只需要写函数名即可。</p><h1 id="第13课-算法入门"><a href="#第13课-算法入门" class="headerlink" title="第13课 算法入门"></a>第13课 算法入门</h1><p>0、基本慨念</p><p> 算法：解决问题的基本步骤</p><h2 id="1、选择排序"><a href="#1、选择排序" class="headerlink" title="1、选择排序"></a>1、选择排序</h2><p>数组：一组数据</p><p>选择排序的复杂度为O(n²)</p><h2 id="2、大O表示法"><a href="#2、大O表示法" class="headerlink" title="2、大O表示法"></a>2、大O表示法</h2><p>大O表示法（算法）的复杂度：算法的输入大小和运行步骤之间的关系，来表示运行速度的量级</p><h2 id="3、归并排序"><a href="#3、归并排序" class="headerlink" title="3、归并排序"></a>3、归并排序</h2><p>归并排序的算法复杂度为O（n*log n），n是需要比较+合并的次数，和数组大小成正比，log n是合并步骤所需要的的次数，归并排序比选择排序更有效率</p><h2 id="4、Dijkstra算法"><a href="#4、Dijkstra算法" class="headerlink" title="4、Dijkstra算法"></a>4、Dijkstra算法</h2><p>一开始复杂度为O(n²)，后来复杂度为O（nlog n +I），在下图中，n表示节点数，I表示有多少条线。</p><p><img src="https://uploader.shimo.im/f/ImlyyiTnRAcamLST.PNG?sm_xform=image/crop,x_1,y_65,w_599,h_340/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第十四集-数据结构"><a href="#第十四集-数据结构" class="headerlink" title="第十四集 数据结构"></a>第十四集 数据结构</h1><h2 id="1、数组-下标"><a href="#1、数组-下标" class="headerlink" title="1、数组 下标"></a>1、数组 下标</h2><p>数组（Array），也叫列表（list）或向量（Vector），是一种数据结构。为了拿出数组中某个值，我们要指定一个下标（index），大多数编程语言里，数组下标都从 0 开始，用方括号 [ ] 代表访问数组。注意：很容易混淆 “数组中第 5 个数” 和 “数组下标为 5 的数”，数组下标为5的数是数组里面的第6个数</p><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><p>即字母 数字 标点等组成的数组，字符串在内存里以0结尾。</p><h2 id="3、矩阵"><a href="#3、矩阵" class="headerlink" title="3、矩阵"></a>3、矩阵</h2><p>可以把矩阵看成数组的数组</p><h2 id="4、结构体"><a href="#4、结构体" class="headerlink" title="4、结构体"></a>4、结构体</h2><p> 把几个有关系的变量存在一起叫做结构体</p><h2 id="5、指针"><a href="#5、指针" class="headerlink" title="5、指针"></a>5、指针</h2><p>指针是一种特殊变量，指向一个内存地址，因此得名。</p><h2 id="6、节点"><a href="#6、节点" class="headerlink" title="6、节点"></a>6、节点</h2><p>以指针为变量的结构体叫节点</p><h2 id="7、链表"><a href="#7、链表" class="headerlink" title="7、链表"></a>7、链表</h2><p>用节点可以做链表，链表是一种灵活数据结构，能存很多个 节点 (node)，灵活性是通过每个节点 指向 下一个节点实现的。链表可以是循环的也可以是非循环的，非循环的最后一个指针是0</p><h2 id="8、队列"><a href="#8、队列" class="headerlink" title="8、队列"></a>8、队列</h2><p>“队列” 就像邮局排队，谁先来就排前面，这叫 先进先出（FIFO——first in first out），可以把”栈”想成一堆松饼,做好一个新松饼，就堆在之前上面,吃的时候，是从最上面开始</p><h2 id="9、栈"><a href="#9、栈" class="headerlink" title="9、栈"></a>9、栈</h2><p>栈是后进先出(LIFO)</p><h2 id="10、树"><a href="#10、树" class="headerlink" title="10、树"></a>10、树</h2><p><img src="https://uploader.shimo.im/f/7atIzqy3EJk8PP9s.PNG!thumbnail" alt="img"></p><h2 id="11、图"><a href="#11、图" class="headerlink" title="11、图"></a>11、图</h2><p>如果数据随意连接，有循环，我们称之为图，如下图</p><p><img src="https://uploader.shimo.im/f/aTSwzmtN8HxXC9Pf.PNG?sm_xform=image/crop,x_0,y_72,w_605,h_333/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h1 id="第15课-阿兰图灵"><a href="#第15课-阿兰图灵" class="headerlink" title="第15课 阿兰图灵"></a>第15课 阿兰图灵</h1><h2 id="0-可判定性问题"><a href="#0-可判定性问题" class="headerlink" title="0.可判定性问题"></a>0.可判定性问题</h2><p>是否存在一种算法，输入正式逻辑语句 输出准确的”是”或”否”答案？</p><ol><li>阿隆佐邱奇，Lambda算子</li></ol><p>美国数学家 阿隆佐·丘奇，开发了一个叫”Lambda 算子”的数学表达系统，证明其不存在。</p><ol><li>图灵机</li></ol><p>只要有足够的规则，状态和纸带，图灵机可以解决一切<strong>计算</strong>问题。和图灵机一样完备，叫做图灵完备。</p><ol><li>停机问题</li></ol><p>证明图灵机不能解决所有问题。</p><ol><li>图灵测试</li></ol><p>向人和机器同时发信息，收到的回答无法判断哪个是人，哪个是计算机，则计算机达到了智能程度。</p><h1 id="第16课-软件工程"><a href="#第16课-软件工程" class="headerlink" title="第16课 软件工程"></a>第16课 软件工程</h1><h2 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h2><p>当任务庞大，函数太多，我们需要把函数打包成层级，把相关代码都放一起，打包成<strong>对象</strong>。对象可以包括其他对象，函数和变量。把函数打包成对象的思想叫做“面向对象编程”，面向对象的核心是隐藏复杂度，选择性的公布功能。</p><h2 id="3、API"><a href="#3、API" class="headerlink" title="3、API"></a>3、API</h2><p>当团队接收到子团队编写的对象时，需要文档和程序编程接口（API）来帮助合作。API控制哪些函数和数据让外部访问，哪些仅供内部。</p><h2 id="4、集成开发环境（IDE）"><a href="#4、集成开发环境（IDE）" class="headerlink" title="4、集成开发环境（IDE）"></a>4、集成开发环境（IDE）</h2><p>程序员用来专门写代码的工具</p><h2 id="6、调试（debug）"><a href="#6、调试（debug）" class="headerlink" title="6、调试（debug）"></a>6、调试（debug）</h2><p>IDE帮你检查错误，并提供信息，帮你解决问题，这个过程叫调试</p><h2 id="7、文档与注释"><a href="#7、文档与注释" class="headerlink" title="7、文档与注释"></a>7、文档与注释</h2><p>文档一般放在一个叫做README的文件里，文档也可以直接写成“注释”，放在源代码里，注释是标记过的一段文字，编译代码时，注释会被忽略。注释的唯一作用是帮助开发者理解代码。</p><h2 id="8、版本控制"><a href="#8、版本控制" class="headerlink" title="8、版本控制"></a>8、版本控制</h2><p>版本控制，又称源代码管理。大型软件公司会把会把代码放到一个中心服务器上，叫”代码仓库”，程序员可以把想修改的代码借出，修改后再提交回代码仓库。版本控制可以跟踪所有变化，如果发现bug，全部或部分代码，可以”回滚”到之前的稳定版。</p><h2 id="9、质量控制"><a href="#9、质量控制" class="headerlink" title="9、质量控制"></a>9、质量控制</h2><p>测试可以统称“质量保证测试”（QA），作用是找bug</p><h2 id="10、beta-alpha"><a href="#10、beta-alpha" class="headerlink" title="10、beta alpha"></a>10、beta alpha</h2><p>beta版软件，即是软件接近完成，但没有完全被测试过，公司有时会向公众发布beta版，以帮助发现问题。alpha是beta前的版本，一般很粗糙，只在内部测试</p><h1 id="第17课-集成电路与摩尔定律（硬件的发展）"><a href="#第17课-集成电路与摩尔定律（硬件的发展）" class="headerlink" title="第17课 集成电路与摩尔定律（硬件的发展）"></a>第17课 集成电路与摩尔定律（硬件的发展）</h1><ol><li>分立元件与数字暴政</li></ol><p>一开始，计算机都有独立组件构成，叫**”分立元件”** ， 然后不同组件再用线连在一起，这会导致计算机的构成很复杂，这个问题叫做<strong>数字暴政</strong>。</p><ol><li>集成电路与仙童半导体</li></ol><p>封装复杂性：与其把多个独立部件用电线连起来，拼装出计算机，不如把多个组件包在一起，变成一个新的独立组件。这种新的独立组件就叫集成电路（IC），仙童半导体（用硅做成）让集成电路变成了现实。为了不用焊接或用一大堆线，发明了印刷电路板（PCB），他通过蚀刻金属线的方式把零件连接到一起</p><ol><li>光刻0421</li></ol><p>即用光把复杂图案印到材料上。我们把一片薄片状的硅叫做<strong>晶圆</strong>，通过一系列生产步骤，将晶圆表面薄膜的特定部分除去的工艺叫做<strong>光刻</strong>。</p><p><img src="https://uploader.shimo.im/f/k5wCIRpRewG9dG8X.PNG!thumbnail" alt="img"></p><p>光刻组件示意图</p><p><img src="https://uploader.shimo.im/f/JGAgwsnJMLBk2L9Z.PNG!thumbnail" alt="img"></p><p>光刻成品示意图</p><ol><li>摩尔定律</li></ol><p>每两年左右，得益于材料和制造技术的发展 ，同样大小的空间，能塞进两倍数量的晶体管。</p><ol><li>进一步小型化会碰到的问题</li></ol><p>1、由于光的波长限制，精度已到极限。</p><p>2、量子隧穿效应：当晶体管非常小，电极之间可能只距离几个原子，电子会跳过间隙，会产生漏电问题</p><h1 id="第18课-操作系统"><a href="#第18课-操作系统" class="headerlink" title="第18课 操作系统"></a>第18课 操作系统</h1><ol><li>操作系统(OS)</li></ol><p>操作系统也是一种程序，不过它有操作硬件的特殊权限，可以运行和管理其他程序。</p><ol><li>批处理</li></ol><p>一个程序运行后会自动运行下一个程序。</p><ol><li>外部设备</li></ol><p>和计算机连着的其他设备，如打印机。</p><ol><li>设备驱动程序</li></ol><p>为了使所写程序和不同类型的电脑兼容，我们需要操作系统充当软件和硬件之间的媒介，更具体地说，操作系统提供程序编程接口(API)来抽象硬件,叫“设备驱动程序”。程序员可以用标准化机制，和输入输出硬件（I&#x2F;O）交互，</p><ol><li>多任务处理</li></ol><p>操作系统能使多个程序在单个CPU上同时进行的能力，叫做“多任务处理”</p><ol><li>虚拟内存</li></ol><p>多程序处理带来了一个程序所占用内存可能不连续的问题，导致程序员难以追踪一个程序，为了解决这个问题操作系统会把内存地址虚拟化，这叫“虚拟内存”。</p><ol><li>动态内存分配</li></ol><p>虚拟内存的机制使程序的内存大小可以灵活增减，叫做“动态内存分配”，对程序来说，内存看上去是连续的。</p><ol><li>内存保护</li></ol><p>给每个程序分配单独的内存，那当这个程序出现混乱时，它不会影响到其他程序的内存，同时也能有效地防止恶意程序篡改其他程序，这叫做内存保护。</p><ol><li>多用户分时操作系统（Multics）</li></ol><p>用来处理多用户同时使用一台计算机的情况，即每个用户只能用一小部分处理器，内存等，</p><ol><li>Unix</li></ol><p>把操作系统分成两个部分，一个是操作系统的核心部分，如内存管理，多任务和输入&#x2F;输出处理，这叫做“内核”，第二部分是一堆有用的工具，比如程序和运行库。</p><h1 id="第19课-内存和储存介质（存储技术的发展）"><a href="#第19课-内存和储存介质（存储技术的发展）" class="headerlink" title="第19课 内存和储存介质（存储技术的发展）"></a>第19课 内存和储存介质（存储技术的发展）</h1><ol><li>纸卡 纸带</li></ol><p>问题：读取慢 难修改 难存临时值</p><ol><li>延迟线存储器</li></ol><p>利用线的延迟在线里存储数据，又叫顺序存储器或者循环存储器。</p><p>存在问题：1 不能随意调出数据</p><p>​                 2 难以增加内存密度</p><ol><li>磁芯</li></ol><p>利用电磁感应原理</p><p>问题 成本高</p><ol><li>磁带</li></ol><p>问题 访问速度慢</p><ol><li>磁鼓</li></ol><p>与磁带相似</p><ol><li>硬盘</li></ol><p>与磁带相似</p><ol><li>内存层次结构</li></ol><p>在计算机中，高速昂贵和低速便宜的内存混合使用以取得一个平衡</p><ol><li>软盘</li></ol><p>除了磁盘是软的，其他都和硬盘一样，好处是便携</p><ol><li>光盘</li></ol><p>原理：光盘表面有很多小坑，造成光的不同反射，光学传感器会捕获到，并解码为 1 和 0</p><ol><li>固定硬盘（SSD）</li></ol><p>里面是集成电路</p><h1 id="第-20-课-文件系统"><a href="#第-20-课-文件系统" class="headerlink" title="第 20 课 文件系统"></a>第 20 课 文件系统</h1><h2 id="0-为什么要采用文件格式："><a href="#0-为什么要采用文件格式：" class="headerlink" title="0.为什么要采用文件格式："></a>0.为什么要采用文件格式：</h2><p>可以随便存文件数据，但按格式存会更方便</p><ol><li>TXT 文本文件</li></ol><p>用ASCII解码</p><ol><li>WAV 音频文件</li></ol><p>记录的是振幅</p><ol><li>BMP 图片文件：</li></ol><p>记录每个像素的红绿蓝 RGB 值</p><ol><li>目录文件：</li></ol><p>用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等</p><ol><li>平面文件系统 - Flat File System</li></ol><p>文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用</p><ol><li><p>解决文件紧密的排序造成的问题</p></li><li><p>把空间划分成一块块</p></li><li><p>文件拆分存在多个块里</p></li><li><p>碎片整理</p></li></ol><p>文件的增删改查会不可避免的造成文件散落在各个块里，如果是磁带这样的存储介质就会造成          问题，所以需要碎片整理——计算机把文件内容调换位置</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ol><li>分层文件系统 - Hierarchical File System：</li></ol><p>有不同文件夹，文件夹可以层层嵌套</p><h1 id="第21课-压缩"><a href="#第21课-压缩" class="headerlink" title="第21课 压缩"></a>第21课 压缩</h1><h2 id="0-压缩的好处"><a href="#0-压缩的好处" class="headerlink" title="0.压缩的好处"></a>0.压缩的好处</h2><p>能存更多文件，传输也更快</p><ol><li>游程编码 Run-Length Encoding</li></ol><p>适合经常出现相同值的文件，以吃豆人游戏为例：</p><p><img src="https://uploader.shimo.im/f/f8HTIVw8tvdIQPUI.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/C1HLIgWl3n3n7BQJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/A143LH7jFJEldvsg.PNG!thumbnail" alt="img"></p><ol><li>无损压缩 Lossless compression</li></ol><p>没有损失任何数据的压缩。</p><ol><li>霍夫曼树 Huffman Tree和字典编码 Dictionary coders</li></ol><p>一种高效的编码模式，以压缩图片为例</p><p><img src="https://uploader.shimo.im/f/aN7KFqbuHQoEQftu.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/SU1TRtYsTihjVmhx.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/B5CKTbb77ICVyY5T.PNG?sm_xform=image/crop,x_0,y_6,w_616,h_339/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/mBxWwpvw493swdbY.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/4C4ZzPs0GQUHOZgo.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/ThiTl2pFphNnofw1.PNG!thumbnail" alt="img"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><ol><li>感知编码 Perceptual coding和有损压缩 jpeg 格式</li></ol><p>删掉人类无法感知的数据的有损压缩方法，叫做“感知编码”，如音频文件，人类听不到超声波，所以可以舍去，MP3就是音频的一种压缩形式。</p><p>有损压缩的一个例子就是jpeg模式，如图：<img src="https://uploader.shimo.im/f/AyTzvKHDbR8xxbpk.png?sm_xform=image/crop,x_0,y_181,w_1920,h_1069/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/pkOTkVcNjH0MRgpJ.PNG!thumbnail" alt="img"></p><p><img src="https://uploader.shimo.im/f/NLikalps4ttAEWhr.PNG!thumbnail" alt="img"></p><ol><li>时间冗余 Temporal redundancy</li></ol><p>一个视频由很多图片构成，其中很多图片的背景一样，这就构成了时间冗余，很多视频编码格式，只存变化的部分。进阶的视频压缩模式会找到帧与帧的相似性，然后打补丁，MPEG-4 是视频压缩的常见标准。</p><h1 id="第-22-课-命令行界面"><a href="#第-22-课-命令行界面" class="headerlink" title="第 22 课 命令行界面"></a>第 22 课 命令行界面</h1><ol><li>人机交互 （Human-Computer Interaction）发展史</li></ol><p>计算机早期同时输入程序和数据（用纸卡&#x2F;纸带）</p><p>运行开始直到结束，中间没有人类进行操作，</p><p>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上 (02:34)</p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行</p><p>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机 (02:44~05:38)</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配 (07:24)</p><ol><li>人机交互工具的变化</li></ol><p>1 早期输出数据是打印到纸上，而输入是用纸卡&#x2F;纸带一次性把程序和数据都给进去</p><p>2 QWERTY 打字机的发展</p><p>3 电传打字机 Teletype machine</p><p>   作用：用于发电报，使两人可以远距离沟通</p><ol><li>命令行界面 Command line interface</li></ol><p>输入命令，计算机会给予回应</p><h1 id="第-23课-屏幕与-2D-图形显示"><a href="#第-23课-屏幕与-2D-图形显示" class="headerlink" title="第 23课 屏幕与 2D 图形显示"></a>第 23课 屏幕与 2D 图形显示</h1><ol><li><p>PDP-1 计算机、键盘和显示器分开，屏幕显示临时值</p></li><li><p>阴极射线管 Cathode Ray Tube (CRT)</p></li></ol><p> CRT 有两种绘图方式：</p><p>​       矢量扫描 Vector Scanning</p><p><img src="https://uploader.shimo.im/f/3mKGVA1g7c1eAaja.PNG!thumbnail" alt="img"></p><p>​       光栅扫描 Raster Scanning</p><p><img src="https://uploader.shimo.im/f/dmmLkIlqiFvUxzji.PNG!thumbnail" alt="img"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><ol><li>02:14 液晶显示器 Liquid Crystal Displays (LCD)，像素 (Pixel)</li></ol><p>随着显示技术的发展，出现了LCD，LCD 也用光栅扫描。在屏幕上显示的清晰的点，叫”像素”</p><ol><li>03:32 字符生成器 Character generator，</li></ol><p>相比于像素，为了减少内存，人们更喜欢使用字符，计算机需要额外硬件，来从内存读取字符，转换成光栅图形 \N 这样才能显示到屏幕上个硬件叫 “字符生成器”，基本算是第一代显卡。它内部有一小块只读存储器，简称 ROM，存着每个字符的图形，叫”点阵图案”，</p><ol><li>屏幕缓冲区 Screen buffer</li></ol><p>为了显示，”字符生成器” 会访问内存中一块特殊区域 这块区域专为图形保留，叫 屏幕缓冲区，程序想显示文字时，修改这块区域里的值就行。</p><ol><li>05:09 矢量命令画图</li></ol><p>概念非常简单：所有东西都由线组成,矢量指令可以画出线，把许多矢量指令存在硬盘上，就能画出很多由线组成的复杂图形。</p><ol><li>06:34 Sketchpad, 光笔 (Light pen)，位图显示和画矩形</li></ol><p><strong>Sketchpad</strong> ，一个交互式图形界面，用途是计算机辅助设计 (CAD)。</p><p><strong>光笔</strong>，就是一个有线连着电脑的触控笔，有了它们，用户可以画出很完美的线条并进行缩放等操作。</p><p><strong>位图显示</strong>，内存中的位对应着屏幕上显示的像素。</p><p>想画更复杂的图形，如<strong>画矩形</strong>，我们需要四个值，起点的x y坐标，高度和宽度。</p><h1 id="第-24-课-冷战和消费主义"><a href="#第-24-课-冷战和消费主义" class="headerlink" title="第 24 课 冷战和消费主义"></a>第 24 课 冷战和消费主义</h1><p>本课概括：政府和消费者推动了计算机的发展</p><p>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展</p><p>冷战导致美国往计算机领域投入大量资源 (00:00~01:43)</p><p>范内瓦·布什 预见了计算机的潜力，提出假想机器 Memex</p><p>帮助建立 国家科学基金会，给科学研究提供资金 (01:43~03:43)</p><p>1950 年代消费者开始买晶体管设备，收音机大卖</p><p>日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子 (03:43~04:29）</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月</p><p>NASA 预算大大增加，用集成电路来制作登月计算机 (04:29~06:27)</p><p>集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次</p><p>美国造超级计算机进一步推进集成电路 (04:29~07:11)</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败</p><p>很多公司倒闭，英特尔转型处理器 (07:11~08:23)</p><h1 id="第-25-课-个人计算机革命"><a href="#第-25-课-个人计算机革命" class="headerlink" title="第 25 课 个人计算机革命"></a>第 25 课 个人计算机革命</h1><p>本集概括：继续讲计算机发展史</p><p>00:18 1970年代初成本下降，个人计算机变得可行</p><p>​           RAM：random-access memory 随机访问存储器</p><p>​           ROM：read-only memory 只读存储器</p><p>01:51 Altair 8800 第一台取得商业成功的个人计算机</p><p>02:32 比尔·盖茨 和 保罗·艾伦写 BASIC 解释器，解释器和编译器类似，区别是解释器运行时转换，而编译器提前转换</p><p>03:45 乔布斯提议卖组装好的计算机，Apple-I 诞生</p><p>04:40 1977年出现3款开箱即用计算机：</p><p>“Apple-II”，”TRS-80 Model I”，”Commodore PET 2001”</p><p>06:26 IBM 意识到个人计算机市场</p><p>IBM PC 发布，采用<strong>开放架构</strong>，兼容的机器都叫 IBM Compatible (IBM 兼容)</p><p>生态系统产生雪球效应：</p><p>因为用户多，软硬件开发人员更愿意花精力在这个平台</p><p>因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机</p><p>08:44 苹果选<strong>封闭架构</strong>，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额</p><h1 id="第-26-集：图形用户界面-GUI"><a href="#第-26-集：图形用户界面-GUI" class="headerlink" title="第 26 集：图形用户界面 (GUI)"></a>第 26 集：图形用户界面 (GUI)</h1><p>——GUI是“事件驱动编程”，代码可以在任意时间执行以响应事件，而不像传统代码一样自上而下。</p><p>01:10 图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart）——设想计算机成为未来知识性员工应对问题的工具，并发明了鼠标。</p><p>03:20 1970年成立 帕洛阿尔托研究中心（Palo Alto Research Center）</p><p>03:29 1973年完成 Xerox Alto(施乐奥托) 计算机——创立了桌面，窗口等计算机概念</p><p>06:38 1981年的 Xerox Star system(<strong>施乐之星系统</strong>)</p><p>​         创建了文档概念</p><p>07:45 所见即所得 WYSIWYG——施乐打印出来的东西和计算机上一样，并发明了剪切 复制 黏贴等计算机概念</p><p>08:18 史蒂夫·乔布斯去施乐参观</p><p>09:15 1983年推出 Apple Lisa</p><p>09:31 1984年推出 Macintosh 成功</p><p>10:12 1985年推出 Windows 1.0，之后出到 3.1</p><p>10:43 1995年推出 Windows 95 提供新的图形界面，并有Mac没有的新功能，如多任务和受保护内存</p><p>11:08 1995年微软做失败的 Microsoft Bob——类似于房子的设计</p><h1 id="第-27-集：3D-图形"><a href="#第-27-集：3D-图形" class="headerlink" title="第 27 集：3D 图形"></a>第 27 集：3D 图形</h1><h2 id="1-线框渲染-Wireframe-Rendering"><a href="#1-线框渲染-Wireframe-Rendering" class="headerlink" title="1.线框渲染 Wireframe Rendering"></a>1.线框渲染 Wireframe Rendering</h2><p>有图形算法 负责把3D坐标”拍平”显示到2D屏幕上，这叫3D投影(包括正交投影和透视投影)，所有的点都从3D转成2D后，就可以用画2D线段的函数来连接这些点，这叫线框渲染，</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="2-网格-Mesh"><a href="#2-网格-Mesh" class="headerlink" title="2.网格 Mesh"></a>2.网格 Mesh</h2><p>如果我们需要画比立方体复杂的图形，三角形比线段更好，在3D图形学中我们叫三角形”多边形”(Polygons)，一堆多边形的集合叫 网格，网格越密，表面越光滑，细节越多，</p><h2 id="3-三角形更常用因为能定义唯一的平面"><a href="#3-三角形更常用因为能定义唯一的平面" class="headerlink" title="3.三角形更常用因为能定义唯一的平面"></a>3.三角形更常用因为能定义唯一的平面</h2><h2 id="4-扫描线渲染-Scanline-Rendering——填充图形的经典算法"><a href="#4-扫描线渲染-Scanline-Rendering——填充图形的经典算法" class="headerlink" title="4. 扫描线渲染 Scanline Rendering——填充图形的经典算法"></a>4. 扫描线渲染 Scanline Rendering——填充图形的经典算法</h2><p>​          填充的速度叫做<strong>填充速率</strong></p><p><img src="https://uploader.shimo.im/f/mr2JAWcJ3gFXXRwH.PNG!thumbnail" alt="img"></p><p>​          <strong>抗锯齿</strong>——边缘羽化，如果像素在多边形内部，就直接涂颜色，如果多边形划过像素，颜色就浅一些</p><p><img src="https://uploader.shimo.im/f/jkKX3F6kzl8i7qdw.PNG!thumbnail" alt="img"></p><h2 id="5-遮挡-Occlusion"><a href="#5-遮挡-Occlusion" class="headerlink" title="5.遮挡 Occlusion"></a>5.遮挡 Occlusion</h2><p>用排序算法，从远到近排列，然后从远到近渲染，这叫<strong>画家算法</strong></p><h2 id="6-深度缓冲-Z-Buffering"><a href="#6-深度缓冲-Z-Buffering" class="headerlink" title="6. 深度缓冲 Z Buffering"></a>6. 深度缓冲 Z Buffering</h2><p>另一种画遮挡的方法，简而言之，Z-buffering 算法会记录场景中每个像素和摄像机的距离，在内存里存一个数字矩阵，首先，每个像素的距离被初始化为”无限大”，然后 Z-buffering 从列表里第一个多边形开始处理，也就是A，它和扫描线算法逻辑相同，但不是给像素填充颜色，而是把多边形的距离和 Z-Buffer 里的距离进行对比，它总是记录更低的值，因为没对多边形排序，所以后处理的多边形并不总会覆盖前面的。</p><p>07:45 Z Fighting 错误</p><p>采用深度缓冲算法，哪个图形在前将会变化</p><p>07:51 背面剔除 Back Face Culling</p><p>由于游戏角色的头部或地面，只能看到朝外的一面，所以为了节省处理时间，会忽略多边形背面，这很好,但有个bug是 如果进入模型内部往外看，头部和地面会消失</p><p>08:53 表面法线 Surface Normal</p><p>在3D图形上任取一小个区域，它面对的方向叫“表面法线”</p><p>09:33 平面着色 Flat Shading</p><p>基本的照明算法，缺点是使多边形边界明显，看上去不光滑</p><p>09:43 高洛德着色 Gouraud shading, 冯氏着色 Phong Shading</p><p>不只用一种颜色上色</p><p>10:06 纹理映射 Texture Mapping</p><p>纹理在图形学中指外观，纹理有多种算法来达到花哨效果，最经典的是纹理映射。</p><p><img src="https://uploader.shimo.im/f/VXjgN5i6k5eDAh5n.PNG!thumbnail" alt="img"></p><p>纹理映射示意图</p><p>11:24 图形处理单元 GPU, Graphics Processing Unit</p><p>方便并行处理多个图形，并把图形分成一个个小块来处理。</p><p>（28-30：介绍网络的发展和支撑他们的基础原理和技术）</p><h1 id="第-28-集：计算机网络"><a href="#第-28-集：计算机网络" class="headerlink" title="第 28 集：计算机网络"></a>第 28 集：计算机网络</h1><h2 id="1-局域网-Local-Area-Networks-LAN"><a href="#1-局域网-Local-Area-Networks-LAN" class="headerlink" title="1. 局域网 Local Area Networks - LAN"></a>1. 局域网 Local Area Networks - LAN</h2><p>计算机近距离构成的小型网络，叫局域网（LAN），以太网是经典的局域网</p><h2 id="2-媒体访问控制地址-Media-Access-Control-address-MAC"><a href="#2-媒体访问控制地址-Media-Access-Control-address-MAC" class="headerlink" title="2.媒体访问控制地址 Media Access Control address - MAC"></a>2.媒体访问控制地址 Media Access Control address - MAC</h2><p>用于确认局域网和WiFi传输的对象</p><h2 id="3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA"><a href="#3-载波侦听多路访问-Carrier-Sense-Multiple-Access-CSMA" class="headerlink" title="3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA"></a>3.载波侦听多路访问 Carrier Sense Multiple Access - CSMA</h2><p>多台电脑共享一个传输媒介，叫做载波侦听多路访问，共享媒介又称载体，如WiFi的载体是空气，以太网的载体是电线。载体传输数据的速度叫带宽，</p><h2 id="4-指数退避-Exponential-Backoff"><a href="#4-指数退避-Exponential-Backoff" class="headerlink" title="4.指数退避 Exponential Backoff"></a>4.指数退避 Exponential Backoff</h2><p>当多台计算机同时想要传输数据时，就会发生冲突，当计算机检测到冲突 就会在重传之前等待一小段时间，，这一段时间包括固定时间+随机时间，再次堵塞时固定时间将会指数级增加，这叫做指数退避。</p><h2 id="5-冲突域-Collision-Domain"><a href="#5-冲突域-Collision-Domain" class="headerlink" title="5.冲突域 Collision Domain"></a>5.冲突域 Collision Domain</h2><p>载体和其中的设备总称为“冲突域”，为了避免冲突，可以用<strong>交换器</strong></p><p>07:08 电路交换 Circuit Switching</p><p>缺点：不灵活且数量昂贵</p><p><img src="https://uploader.shimo.im/f/hJq9a6Aagi0SsyRH.PNG!thumbnail" alt="img"></p><h2 id="6-报文交换-Message-Switching"><a href="#6-报文交换-Message-Switching" class="headerlink" title="6. 报文交换 Message Switching"></a>6. 报文交换 Message Switching</h2><p>报文的具体格式简称IP，每一个电脑都会有一个IP地址</p><p>好处，可以用不同路由，通信更可靠也更能容错。</p><p>坏处，当报文比较大的时候，会堵塞线路。解决方法是 将大报文分成很多小块，叫”<strong>数据包</strong>“，来进行运输，这叫“<strong>分组交换</strong>”。路由器会平衡与其他路由器之间的负载  以确保传输可以快速可靠，这叫”<strong>阻塞控制</strong>“</p><p>消息沿着路由跳转的次数 叫”<strong>跳数</strong>“(hop count)，看到哪条线路的跳数很高，说明出了故障，这叫跳数限制。</p><p><img src="https://uploader.shimo.im/f/aqKJCrYbYM99btzH.PNG!thumbnail" alt="img"></p><h1 id="第-29-集：互联网"><a href="#第-29-集：互联网" class="headerlink" title="第 29 集：互联网"></a>第 29 集：互联网</h1><h2 id="1。电脑连接互联网的过程"><a href="#1。电脑连接互联网的过程" class="headerlink" title="1。电脑连接互联网的过程"></a>1。电脑连接互联网的过程</h2><p>你所用的电脑首先要连接到局域网，家里WiFi路由器连着的所有设备，组成了<strong>局域网</strong>，局域网再连到<strong>广域网（WAN）</strong>，广域网的路由器一般属于你的<strong>互联网服务提供商（ISP）</strong>，再连更大的WAN，往复几次，最后连到互联网主干。</p><h2 id="2-IP-互联网协议-Internet-Protocol"><a href="#2-IP-互联网协议-Internet-Protocol" class="headerlink" title="2.IP - 互联网协议 - Internet Protocol"></a>2.IP - 互联网协议 - Internet Protocol</h2><p>IP负责把数据包送到正确的计算机</p><h2 id="3-UDP-用户数据报协议-User-Datagram-Protocol"><a href="#3-UDP-用户数据报协议-User-Datagram-Protocol" class="headerlink" title="3. UDP - 用户数据报协议 - User Datagram Protocol"></a>3. UDP - 用户数据报协议 - User Datagram Protocol</h2><p>UDP负责把数据包传送到正确的程序，有端口号（哪个程序），校验和（数据是否损坏）</p><h2 id="4-校验和-Checksum"><a href="#4-校验和-Checksum" class="headerlink" title="4.校验和 - Checksum"></a>4.校验和 - Checksum</h2><p>UDP校验和只有16位，超过这个数，弃高位。</p><h2 id="5-TCP-传输控制协议-Transmission-Control-Protocol"><a href="#5-TCP-传输控制协议-Transmission-Control-Protocol" class="headerlink" title="5.TCP - 传输控制协议 - Transmission Control Protocol"></a>5.TCP - 传输控制协议 - Transmission Control Protocol</h2><p>如果要控制所有数据必须到达，就用传输控制协议</p><h3 id="TCP的特点"><a href="#TCP的特点" class="headerlink" title="TCP的特点"></a>TCP的特点</h3><p>1 控制发送的文件按顺序到达</p><p>2 要求接收方确认无误后发送确认码（ACK），确认码的成功率和来回时间可以用来推测网络的拥堵程度，TCP可以根据这个调整传输率。由于这个特点，TCP对时间要求高的程序不适用</p><h2 id="6-DNS-域名系统-Domain-Name-System"><a href="#6-DNS-域名系统-Domain-Name-System" class="headerlink" title="6 DNS - 域名系统 - Domain Name System"></a>6 DNS - 域名系统 - Domain Name System</h2><p>计算机访问网站时需要两样，IP地址和端口号，但记数字很难，所以互联网通过域名系统把域名和IP地址一一对应。域名系统是树状结构</p><p><img src="https://uploader.shimo.im/f/FCIyLhtvPZsSZzCA.PNG!thumbnail" alt="img"></p><p>10:47 OSI - 开放式系统互联通信参考模型 - Open System Interconnection</p><p><img src="https://uploader.shimo.im/f/FOLq1XgUBomAvLQu.PNG!thumbnail" alt="img"></p><h1 id="第-30-集：万维网（WWW）"><a href="#第-30-集：万维网（WWW）" class="headerlink" title="第 30 集：万维网（WWW）"></a>第 30 集：万维网（WWW）</h1><h2 id="1-基本单位"><a href="#1-基本单位" class="headerlink" title="1.基本单位"></a>1.基本单位</h2><p>万维网在互联网上运行，它的基本单位是页面</p><h2 id="2-超链接-Hyperlinks"><a href="#2-超链接-Hyperlinks" class="headerlink" title="2.超链接 Hyperlinks"></a>2.超链接 Hyperlinks</h2><p>点超链接可以去到另一个页面，文字超链接又叫超文本</p><p><img src="https://uploader.shimo.im/f/LSiZMkwxeCJMvmby.PNG!thumbnail" alt="img"></p><p>超链接工作过程中示意</p><h2 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3.状态码"></a>3.状态码</h2><p>状态码代表所访问网页的状态</p><h2 id="4-URL-统一资源定位器-Uniform-Resource-Locator"><a href="#4-URL-统一资源定位器-Uniform-Resource-Locator" class="headerlink" title="4.URL - 统一资源定位器 - Uniform Resource Locator"></a>4.URL - 统一资源定位器 - Uniform Resource Locator</h2><p>网页的唯一网址</p><h2 id="5-HTTP-超文本传输协议-HyperText-Transfer-Protocol"><a href="#5-HTTP-超文本传输协议-HyperText-Transfer-Protocol" class="headerlink" title="5.HTTP - 超文本传输协议 - HyperText Transfer Protocol"></a>5.HTTP - 超文本传输协议 - HyperText Transfer Protocol</h2><h2 id="6-HTML-超文本标记语言-HyperText-Markup-Language"><a href="#6-HTML-超文本标记语言-HyperText-Markup-Language" class="headerlink" title="6.HTML - 超文本标记语言 - HyperText Markup Language"></a>6.HTML - 超文本标记语言 - HyperText Markup Language</h2><h2 id="7-万维网发展史"><a href="#7-万维网发展史" class="headerlink" title="7.万维网发展史"></a>7.万维网发展史</h2><p>1 第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的</p><p>2 1991年万维网就此诞生</p><p>3  Jerry 和 David 的万维网指南 后来改名成 Yahoo</p><p>4 搜索引擎 JumpStation</p><p>（包括爬虫 索引 用法）</p><p>5 搜索引擎 Google</p><p>   改进排序方法，按照链接指向的多少来排序</p><h2 id="8-网络中立性"><a href="#8-网络中立性" class="headerlink" title="8.网络中立性"></a>8.网络中立性</h2><p>平等地对待每个数据包</p><h1 id="第-31-集：计算机安全"><a href="#第-31-集：计算机安全" class="headerlink" title="第 31 集：计算机安全"></a>第 31 集：计算机安全</h1><h2 id="1-保密性-完整性-可用性-Secrecy-Integrity-Availability"><a href="#1-保密性-完整性-可用性-Secrecy-Integrity-Availability" class="headerlink" title="1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability"></a>1. 保密性, 完整性, 可用性 Secrecy, Integrity, Availability</h2><p>计算机为了安全，要实现三性</p><p>保密性：只有有权限的人，才能读取计算机系统和数据</p><p>完整性：只有有权限的人，才能使用和修改系统和数据</p><p>可用性：有权限的人，可以随时访问计算机系统和数据</p><h2 id="2-Threat-Model-威胁模型"><a href="#2-Threat-Model-威胁模型" class="headerlink" title="2.Threat Model 威胁模型"></a>2.Threat Model 威胁模型</h2><p>为了实现这三个目标，安全专家会从 \N 抽象层面想象”敌人”可能是谁，这叫”威胁模型分析”，模型会对攻击者有个大致描述：\N 能力如何，目标可能是什么，可能用什么手段，攻击手段又叫”攻击矢量”，”威胁模型分析”让你能为特定情境做准备，不被可能的攻击手段数量所淹没。</p><p>很多安全问题可以总结成两个：</p><p>你是谁？你能访问什么？</p><h2 id="3-身份验证-Authentication-的三种方式："><a href="#3-身份验证-Authentication-的三种方式：" class="headerlink" title="3.身份验证 (Authentication) 的三种方式："></a>3.身份验证 (Authentication) 的三种方式：</h2><p>What you know, 你知道什么 ex、用户名和密码</p><p>What you have, 你有什么      </p><p>What you are, 你是什么</p><h2 id="4-访问控制-Access-Control"><a href="#4-访问控制-Access-Control" class="headerlink" title="4.访问控制 Access Control"></a>4.访问控制 Access Control</h2><p>Bell LaPadula model <strong>不能向上读取，不能向下写入</strong></p><h2 id="5-安全内核"><a href="#5-安全内核" class="headerlink" title="5.安全内核"></a><strong>5.安全内核</strong></h2><p>安全内核应该有一组尽可能少的操作系统软件，和尽量少的代码。</p><h2 id="6-独立安全检查和质量验证"><a href="#6-独立安全检查和质量验证" class="headerlink" title="6.独立安全检查和质量验证"></a>6.独立安全检查和质量验证</h2><p>最有效的验证手段</p><h2 id="7-隔离-Isolation-沙盒-Sandbox"><a href="#7-隔离-Isolation-沙盒-Sandbox" class="headerlink" title="7.隔离 Isolation, 沙盒 Sandbox"></a>7.隔离 Isolation, 沙盒 Sandbox</h2><p>优秀的开发人员，应该计划当程序被攻破后，\N如何限制损害，控制损害的最大程度，并且不让它危害到计算机上其他东西，这叫”隔离”。要实现隔离，我们可以”沙盒”程序，这好比把生气的小孩放在沙箱里，他们只能摧毁自己的沙堡，不会影响到其他孩子，方法是给每个程序独有的内存块，其他程序不能动。一台计算机可以运行多个虚拟机，如果一个程序出错，最糟糕的情况是它自己崩溃，或者搞坏它处于的虚拟机。</p><h1 id="第-32-集：黑客与攻击"><a href="#第-32-集：黑客与攻击" class="headerlink" title="第 32 集：黑客与攻击"></a>第 32 集：黑客与攻击</h1><h2 id="1-社会工程学-Social-Engineering"><a href="#1-社会工程学-Social-Engineering" class="headerlink" title="1.社会工程学 Social Engineering"></a>1.社会工程学 Social Engineering</h2><p>欺骗别人获得信息，或让人安装易于攻击的系统</p><h2 id="2-钓鱼-Phishing"><a href="#2-钓鱼-Phishing" class="headerlink" title="2.钓鱼 Phishing"></a>2.钓鱼 Phishing</h2><h2 id="3-假托-Pretexting"><a href="#3-假托-Pretexting" class="headerlink" title="3.假托 Pretexting"></a>3.假托 Pretexting</h2><h2 id="4-木马-Trojan-Horses"><a href="#4-木马-Trojan-Horses" class="headerlink" title="4.木马 Trojan Horses"></a>4.木马 Trojan Horses</h2><h2 id="5-NAND镜像-NAND-Mirroring"><a href="#5-NAND镜像-NAND-Mirroring" class="headerlink" title="5.NAND镜像 NAND Mirroring"></a>5.NAND镜像 NAND Mirroring</h2><p>——来避免输错密码后等待</p><h2 id="6-漏洞利用-Exploit"><a href="#6-漏洞利用-Exploit" class="headerlink" title="6.漏洞利用 Exploit"></a>6.漏洞利用 Exploit</h2><h2 id="7-缓冲区溢出-Buffer-Overflow"><a href="#7-缓冲区溢出-Buffer-Overflow" class="headerlink" title="7. 缓冲区溢出 Buffer Overflow"></a>7. 缓冲区溢出 Buffer Overflow</h2><p>——一种常见的漏洞利用</p><h2 id="9-边界检查-Bounds-Checking和金丝雀"><a href="#9-边界检查-Bounds-Checking和金丝雀" class="headerlink" title="9.边界检查 Bounds Checking和金丝雀"></a>9.边界检查 Bounds Checking和金丝雀</h2><p>——防止缓冲区溢出的手段，金丝雀，留出一些不用的空间，当空间变少时，说明有攻击者乱来。</p><p>​      </p><h2 id="10-代码注入-Code-Injection"><a href="#10-代码注入-Code-Injection" class="headerlink" title="10. 代码注入 Code Injection"></a>10. 代码注入 Code Injection</h2><p>把代码注入到程序中，造成混乱</p><h2 id="11-零日漏洞-Zero-Day-Vulnerability"><a href="#11-零日漏洞-Zero-Day-Vulnerability" class="headerlink" title="11.零日漏洞 Zero Day Vulnerability"></a>11.零日漏洞 Zero Day Vulnerability</h2><p>当软件制造者不知道软件有新漏洞被发现了，这个漏洞被称为“零日漏洞”</p><h2 id="12-计算机蠕虫-Worms"><a href="#12-计算机蠕虫-Worms" class="headerlink" title="12.计算机蠕虫 Worms"></a>12.计算机蠕虫 Worms</h2><p>如果有足够多的电脑有漏洞，让恶意程序可以在电脑间互相传播，这种恶意程序叫做蠕虫</p><h2 id="13-僵尸网络-Botnet"><a href="#13-僵尸网络-Botnet" class="headerlink" title="13.僵尸网络 Botnet"></a>13.僵尸网络 Botnet</h2><p>如果黑客掌握足够多电脑，那他们可以组成“僵尸网络”</p><h1 id="第-33-集：加密"><a href="#第-33-集：加密" class="headerlink" title="第 33 集：加密"></a>第 33 集：加密</h1><h2 id="1-加密-Encryption，解密-Decryption"><a href="#1-加密-Encryption，解密-Decryption" class="headerlink" title="1. 加密 - Encryption，解密 - Decryption"></a>1. 加密 - Encryption，解密 - Decryption</h2><p>01:11 凯撒加密 Caesar cipher——一种替换加密  Substitution cipher，把字母替换成其他字母</p><p>01:59 移位加密 Permutation cipher</p><p><img src="https://uploader.shimo.im/f/nuMi5nxzR4tm7n0B.PNG!thumbnail" alt="img"></p><p> 列移位加密 Columnar transposition cipher</p><p>02:37 德国 Enigma 加密机 一种进阶的替换加密，每一次的映射都不同。</p><p>04:54 1977年”数据加密标准” - Data Encryption Standard (DES)</p><p>05:24 2001年”高级加密标准” - Advanced Encryption Standard (AES)</p><h2 id="2-密钥交换-Key-exchange"><a href="#2-密钥交换-Key-exchange" class="headerlink" title="2. 密钥交换 - Key exchange"></a>2. 密钥交换 - Key exchange</h2><p><img src="https://uploader.shimo.im/f/ZIH2mA0XASRyEZJ6.PNG!thumbnail" alt="img"></p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/tdQzQBGdJZeJ84Ch.PNG!thumbnail" alt="img"></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p><img src="https://uploader.shimo.im/f/LoC5ZUDOgkDD2qvT.PNG?sm_xform=image/crop,x_0,y_0,w_616,h_341/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p><img src="https://uploader.shimo.im/f/QFokhbpbQMRrmOqf.PNG!thumbnail" alt="img"></p><p> 用颜色来举例”单向函数”和”密钥加密”的原理</p><p>实例：迪菲-赫尔曼密钥交换 - Diffie-Hellman Key Exchange</p><p>用模幂计算来得到秘钥</p><h2 id="3-非对称加密-Asymmetric-encryption"><a href="#3-非对称加密-Asymmetric-encryption" class="headerlink" title="3. 非对称加密 - Asymmetric encryption"></a>3. 非对称加密 - Asymmetric encryption</h2><p>以上的例子，双方用一样的秘钥加密和解密信息，叫对称解密。也可以人们用公钥加密信息，只有有私钥的人能解密，或者反过来，这叫非对称解密。最有名的非对称加密算法是RSA</p><h1 id="第-34-集：机器学习与人工智能"><a href="#第-34-集：机器学习与人工智能" class="headerlink" title="第 34 集：机器学习与人工智能"></a>第 34 集：机器学习与人工智能</h1><h2 id="以区分飞蛾为例"><a href="#以区分飞蛾为例" class="headerlink" title="以区分飞蛾为例"></a>以区分飞蛾为例</h2><h3 id="1-分类-Classification"><a href="#1-分类-Classification" class="headerlink" title="1. 分类 Classification"></a>1. 分类 Classification</h3><h3 id="2-做分类的算法-分类器-Classifier"><a href="#2-做分类的算法-分类器-Classifier" class="headerlink" title="2.做分类的算法 分类器 Classifier"></a>2.做分类的算法 分类器 Classifier</h3><h3 id="3-用于分类的值是特征-Feature"><a href="#3-用于分类的值是特征-Feature" class="headerlink" title="3.用于分类的值是特征 Feature"></a>3.用于分类的值是特征 Feature</h3><h3 id="4-特征值-种类叫做标记数据-Labeled-data"><a href="#4-特征值-种类叫做标记数据-Labeled-data" class="headerlink" title="4. 特征值+种类叫做标记数据 Labeled data"></a>4. 特征值+种类叫做标记数据 Labeled data</h3><p><img src="https://uploader.shimo.im/f/a9Ah3JjIXKXZ28ni.PNG!thumbnail" alt="img"></p><p>标记数据</p><h3 id="5-决策边界-Decision-boundaries"><a href="#5-决策边界-Decision-boundaries" class="headerlink" title="5. 决策边界 Decision boundaries"></a>5. 决策边界 Decision boundaries</h3><p><img src="https://uploader.shimo.im/f/IzBKYfZaW7WtLbSj.PNG!thumbnail" alt="img"></p><p>虚线为决策边界</p><h3 id="6-混淆矩阵-Confusion-matrix"><a href="#6-混淆矩阵-Confusion-matrix" class="headerlink" title="6.混淆矩阵 Confusion matrix"></a>6.混淆矩阵 Confusion matrix</h3><p><img src="https://uploader.shimo.im/f/okVZ8JqZA6pWxhpS.PNG!thumbnail" alt="img"></p><p>右下角表为混淆矩阵</p><h3 id="7-03-49-决策树-Decision-tree"><a href="#7-03-49-决策树-Decision-tree" class="headerlink" title="7.03:49 决策树 Decision tree"></a>7.03:49 决策树 Decision tree</h3><p><img src="https://uploader.shimo.im/f/7uyq1kVlmi43tbqE.PNG!thumbnail" alt="img"></p><h3 id="8-支持向量机-Support-Vector-Machines"><a href="#8-支持向量机-Support-Vector-Machines" class="headerlink" title="8.支持向量机 Support Vector Machines"></a>8.支持向量机 Support Vector Machines</h3><p>本质上是用任意线段来切分决策空间，不一定是直线。</p><h3 id="9-人工神经网络-Artificial-Neural-Network"><a href="#9-人工神经网络-Artificial-Neural-Network" class="headerlink" title="9.人工神经网络 Artificial Neural Network"></a>9.人工神经网络 Artificial Neural Network</h3><p>不用统计学的算法。模拟人类学习的过程，将数据进行加权求和修正等一系列处理。</p><h3 id="10-深度学习-Deep-learning"><a href="#10-深度学习-Deep-learning" class="headerlink" title="10.深度学习 Deep learning"></a>10.深度学习 Deep learning</h3><p><img src="https://uploader.shimo.im/f/ukyADGkYjWhrb0pL.PNG!thumbnail" alt="img"></p><p>得名原因：有很多的隐藏层</p><ol start="11"><li>弱AI, 窄AI Weak AI, Narrow AI</li></ol><p>只能做指定内容的内容</p><h3 id="12-强AI-Strong-AI"><a href="#12-强AI-Strong-AI" class="headerlink" title="12. 强AI Strong AI"></a>12. 强AI Strong AI</h3><p>通用的，和人一样智能的AI叫做强AI，目前没有人能做到。</p><h3 id="14-强化学习-Reinforcement-Learning"><a href="#14-强化学习-Reinforcement-Learning" class="headerlink" title="14.强化学习 Reinforcement Learning"></a>14.强化学习 Reinforcement Learning</h3><p>学习什么管用，什么不管用，自己发现成功的策略，这叫强化学习。</p><h1 id="第-35-集：计算机视觉"><a href="#第-35-集：计算机视觉" class="headerlink" title="第 35 集：计算机视觉"></a>第 35 集：计算机视觉</h1><h2 id="1-颜色跟踪算法——跟踪一个像素"><a href="#1-颜色跟踪算法——跟踪一个像素" class="headerlink" title="1.颜色跟踪算法——跟踪一个像素"></a>1.颜色跟踪算法——跟踪一个像素</h2><h2 id="2-检测垂直边缘的算法"><a href="#2-检测垂直边缘的算法" class="headerlink" title="2. 检测垂直边缘的算法"></a>2. 检测垂直边缘的算法</h2><p>物体的边缘有多个色素，不适合颜色跟踪算法。要识别边缘，可以判断其两边像素的颜色差异程度</p><h2 id="3-核-过滤器-kernel-or-filter"><a href="#3-核-过滤器-kernel-or-filter" class="headerlink" title="3. 核&#x2F;过滤器 kernel or filter"></a>3. 核&#x2F;过滤器 kernel or filter</h2><p>——用来检测垂直边缘的算法的数学符号，如下绿色的图。</p><p><img src="https://uploader.shimo.im/f/k3LX2p7wLd9R8OlD.PNG!thumbnail" alt="img"></p><p>核或过滤器图示</p><p><img src="https://uploader.shimo.im/f/PsMwdbwYAM4fx6VN.PNG!thumbnail" alt="img"></p><p>算法示例</p><h2 id="4-卷积-convolution"><a href="#4-卷积-convolution" class="headerlink" title="4. 卷积 convolution"></a>4. 卷积 convolution</h2><p>把核应用于像素块</p><h2 id="5-Prewitt-算子-Prewitt-Operators"><a href="#5-Prewitt-算子-Prewitt-Operators" class="headerlink" title="5.Prewitt 算子 Prewitt Operators"></a>5.Prewitt 算子 Prewitt Operators</h2><p>水平和垂直边缘增强的核叫Prewitt 算子 </p><ol start="6"><li>维奥拉·琼斯 人脸检测 Viola-Jones Face Detection</li></ol><h2 id="7-卷积神经网络-Convolutional-Neural-Networks"><a href="#7-卷积神经网络-Convolutional-Neural-Networks" class="headerlink" title="7.卷积神经网络 Convolutional Neural Networks"></a>7.卷积神经网络 Convolutional Neural Networks</h2><p>用一层层不同的核来识别复杂场景，用脸来举例，先识别边缘，然后形状，器官…直至某一层把所有特征堆积在一起，识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息</p><h1 id="第-36-集：自然语言处理-NLP"><a href="#第-36-集：自然语言处理-NLP" class="headerlink" title="第 36 集：自然语言处理 NLP"></a>第 36 集：自然语言处理 NLP</h1><h2 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h2><p>通过<strong>词性 Parts of speech</strong>和<strong>短语结构规则 Phrase structure rules</strong>构建<strong>分析树 Parse tree，</strong>并结合<strong>语言模型 Language Model</strong>来实现<strong>语音识别 Speech recognition</strong></p><h2 id="2-实现原理："><a href="#2-实现原理：" class="headerlink" title="2.实现原理："></a>2.实现原理：</h2><p><strong>快速傅立叶变换 Fast Fourier Transform，</strong>把波形转换成频率 </p><h2 id="3-音素-Phonemes"><a href="#3-音素-Phonemes" class="headerlink" title="3. 音素 Phonemes"></a>3. 音素 Phonemes</h2><p>构成单词的声音片段</p><h2 id="4-语音合成-Speech-Synthesis"><a href="#4-语音合成-Speech-Synthesis" class="headerlink" title="4.语音合成 Speech Synthesis"></a>4.语音合成 Speech Synthesis</h2><h1 id="第-37-集：机器人"><a href="#第-37-集：机器人" class="headerlink" title="第 37 集：机器人"></a>第 37 集：机器人</h1><h2 id="1-机器人发展中的例子"><a href="#1-机器人发展中的例子" class="headerlink" title="1.机器人发展中的例子"></a>1.机器人发展中的例子</h2><p>02:08 法国吃饭鸭 - Digesting Duck, Canard Digerateur</p><p>02:23 土耳其行棋傀儡, 下国际象棋(假的，有人控制)</p><p>02:43 第一台计算机控制的机器出现在1940年代晚期，叫数控机器, Computer Numerical Control(CNC)</p><p>03:32 1960年 Unimate，第一个商业贩卖的 可编程工业机器人</p><h2 id="2-机器人控制的回路"><a href="#2-机器人控制的回路" class="headerlink" title="2.机器人控制的回路"></a>2.机器人控制的回路</h2><p>04:08 负反馈回路 negative feedback loop</p><p>05:17 比例-积分-导数控制器 Proportional–Integral–Derivative controller <strong>PID 控制器</strong></p><p> 通过控制三个值，比例值——实际值和理想值差多少，积分值——一段时间误差的总和，前两者用来修正错误：导数值（微分值）——期望值和实际值之间的变化率，用来避免未来的错误，这也叫预期控制，来控制进程。</p><h2 id="3-机器人三定律-Three-Laws-of-Robotics"><a href="#3-机器人三定律-Three-Laws-of-Robotics" class="headerlink" title="3. 机器人三定律 Three Laws of Robotics"></a>3. 机器人三定律 Three Laws of Robotics</h2><p>——让机器人不要伤害人类</p><h1 id="第38课-计算机心理学"><a href="#第38课-计算机心理学" class="headerlink" title="第38课 计算机心理学"></a>第38课 计算机心理学</h1><h2 id="0、计算机中用到的心理学原理"><a href="#0、计算机中用到的心理学原理" class="headerlink" title="0、计算机中用到的心理学原理"></a>0、计算机中用到的心理学原理</h2><p>社会心理学 认知心理学 行为心理学 感知信息学</p><h2 id="1、易用度"><a href="#1、易用度" class="headerlink" title="1、易用度"></a>1、易用度</h2><p>指人造物体，比如软件，达到目的的效率有多高</p><h2 id="2、颜色强度排序和颜色排序"><a href="#2、颜色强度排序和颜色排序" class="headerlink" title="2、颜色强度排序和颜色排序"></a>2、颜色强度排序和颜色排序</h2><p>人类擅长给颜色强度排序，所以颜色强度很适合现实连续值；而人类不擅长给颜色排序，所以如果数据没有顺序，用不同颜色就很合适，如分类数据。</p><h2 id="3、分组更好记"><a href="#3、分组更好记" class="headerlink" title="3、分组更好记"></a>3、分组更好记</h2><p>信息分块会更好记。分块是指把信息分成更小，更有意义的块，如电话号码分块，界面设计分块。</p><h2 id="4、直观功能"><a href="#4、直观功能" class="headerlink" title="4、直观功能"></a>4、直观功能</h2><p>直观功能为如何操作物体提供线索，如平板用于推，旋钮用来转，直观功能做得好，用户只需要看一眼就知道怎么搞，而不需要其他东西来说明。ex.门把手让人想拉开门，但如果门需要推开，那这就是个不好的直观功能，不如直接采用平板门来的好。</p><h2 id="5、认出VS回想"><a href="#5、认出VS回想" class="headerlink" title="5、认出VS回想"></a>5、认出VS回想</h2><p>和直观功能相关的一个心理学概念是认出和回想，这就是选择题比填空题简单的原因。一般来说，用感觉触发记忆会容易得多，比如文字、图片和声音，所以我们用图标表示功能，如垃圾桶表示回收站。但是，让所有菜单选项好找好记，有时候意味着用的时候会慢一些。这与另一个心理学概念冲突：”专业知识”，当你用界面熟悉之后，速度会更快一些，所以 好的界面应该提供多种方法来实现目标，一个好例子是复制粘贴，可以在”编辑”的下拉菜单中找到，也可以用快捷键，两者都不耽误，鱼与熊掌兼得。</p><h2 id="6、让机器有一定的情商以及Facebook的研究"><a href="#6、让机器有一定的情商以及Facebook的研究" class="headerlink" title="6、让机器有一定的情商以及Facebook的研究"></a>6、让机器有一定的情商以及Facebook的研究</h2><p>我们也希望电脑能有一点情商，能根据用户的状态做出合适地反应，让使用电脑更加愉快。因为情绪会影响日常活动，比如学习，沟通和决策，情感系统会用传感器，录声音，录像（你的脸）以及生物指标，比如出汗和心率，得到的数据和计算模型结合使用，模型会估算用户的情绪，给最好的回应用户。</p><h2 id="7、用软件修正注视位"><a href="#7、用软件修正注视位" class="headerlink" title="7、用软件修正注视位"></a>7、用软件修正注视位</h2><p>心理学研究也表明，如果想说服，讲课，或引起注意 ，眼神注视非常重要。为此，研究人员开发了计算机视觉和图形软件  来纠正头部和眼睛，看视频的人会觉得对方在直视他们</p><h2 id="8、把机器人做得像人"><a href="#8、把机器人做得像人" class="headerlink" title="8、把机器人做得像人"></a>8、把机器人做得像人</h2><p>人也喜欢像人的机器人。人机交互，简称HRI，是一个研究人类和计算机交互的领域。</p><p><img src="https://uploader.shimo.im/f/j4Yisrm3WQ3oxnYS.jpg?sm_xform=image/crop,x_0,y_143,w_1440,h_795/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><p>​                                                                  恐怖谷原理</p><h2 id="9、开放性问题"><a href="#9、开放性问题" class="headerlink" title="9、开放性问题"></a>9、开放性问题</h2><p>计算机该不该对人类说谎等</p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><h1 id="第-39-集：教育科技"><a href="#第-39-集：教育科技" class="headerlink" title="第 39 集：教育科技"></a>第 39 集：教育科技</h1><h2 id="1-通过调速，暂停等技巧，加强学习效率"><a href="#1-通过调速，暂停等技巧，加强学习效率" class="headerlink" title="1. 通过调速，暂停等技巧，加强学习效率"></a>1. 通过调速，暂停等技巧，加强学习效率</h2><h2 id="2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC"><a href="#2-大型开放式在线课程-Massive-Open-Online-Courses-MOOC" class="headerlink" title="2.大型开放式在线课程 - Massive Open Online Courses (MOOC)"></a>2.大型开放式在线课程 - Massive Open Online Courses (MOOC)</h2><h2 id="3-智能辅导系统-Intelligent-Tutoring-Systems"><a href="#3-智能辅导系统-Intelligent-Tutoring-Systems" class="headerlink" title="3.智能辅导系统 - Intelligent Tutoring Systems"></a>3.智能辅导系统 - Intelligent Tutoring Systems</h2><h2 id="4-判断规则-Production-rule"><a href="#4-判断规则-Production-rule" class="headerlink" title="4.判断规则 - Production rule"></a>4.判断规则 - Production rule</h2><h2 id="5-域模型-Domain-Model"><a href="#5-域模型-Domain-Model" class="headerlink" title="5.域模型 - Domain Model"></a>5.域模型 - Domain Model</h2><p>判断规则和选择算法，组合在一起成为域模型</p><h2 id="6-贝叶斯知识追踪-Bayesian-knowledge-tracing"><a href="#6-贝叶斯知识追踪-Bayesian-knowledge-tracing" class="headerlink" title="6.贝叶斯知识追踪 Bayesian knowledge tracing"></a>6.贝叶斯知识追踪 Bayesian knowledge tracing</h2><p>把学生的知识掌握当成隐藏变量，根据学生答题的正确度，更新学生掌握程度的估算值。具体而言，贝叶斯知识追踪有一组方程，会用这四个概率，更新学生模型，评估其掌握程度。</p><p>学生已经学会的概率</p><p>瞎猜的概率</p><p>失误的概率</p><p>做题过程中学会的概率</p><h2 id="7-自适应性程序"><a href="#7-自适应性程序" class="headerlink" title="7.自适应性程序"></a>7.自适应性程序</h2><p>一种算法，选择适合学生的问题，让学生学。</p><h2 id="8-教育数据挖掘-Educational-Data-Mining"><a href="#8-教育数据挖掘-Educational-Data-Mining" class="headerlink" title="8. 教育数据挖掘 Educational Data Mining"></a>8. 教育数据挖掘 Educational Data Mining</h2><p>看学生答题时停顿的时间，观察学生停顿和加速视频的时间段，看论坛问题，来评估学生的程度。</p><h1 id="第-40-集：奇点，天网，计算机的未来"><a href="#第-40-集：奇点，天网，计算机的未来" class="headerlink" title="第 40 集：奇点，天网，计算机的未来"></a>第 40 集：奇点，天网，计算机的未来</h1><h2 id="1-普适计算-Ubiquitous-Computing"><a href="#1-普适计算-Ubiquitous-Computing" class="headerlink" title="1. 普适计算 Ubiquitous Computing"></a>1. 普适计算 Ubiquitous Computing</h2><p>计算机融入生活的方方面面</p><h2 id="2-奇点-Singularity"><a href="#2-奇点-Singularity" class="headerlink" title="2.奇点 Singularity"></a>2.奇点 Singularity</h2><p>——智能科技的失控性发展</p><p><img src="https://uploader.shimo.im/f/N9exVZGxSDnTyUm1.PNG?sm_xform=image/crop,x_0,y_58,w_616,h_342/auto-orient,1/resize,m_lfit,w_1920/quality,q_75" alt="img"></p><h2 id="3-把工作分为4个象限，讨论自动化带来的影响"><a href="#3-把工作分为4个象限，讨论自动化带来的影响" class="headerlink" title="3.把工作分为4个象限，讨论自动化带来的影响"></a>3.把工作分为4个象限，讨论自动化带来的影响</h2><p><img src="https://uploader.shimo.im/f/mVxPWiKkDzby1Vt1.PNG!thumbnail" alt="img"></p><h2 id="4-机器人的存在时间可能长过人类，可以长时间探索宇宙"><a href="#4-机器人的存在时间可能长过人类，可以长时间探索宇宙" class="headerlink" title="4.机器人的存在时间可能长过人类，可以长时间探索宇宙"></a>4.机器人的存在时间可能长过人类，可以长时间探索宇宙</h2><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>整个视频看完后，感觉质量很高。对于计算机的结构了解更加的透彻了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幻想奇术师</title>
      <link href="/2023/11/04/3.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/"/>
      <url>/2023/11/04/3.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是看了B站UP：幻想奇术师，之后的逻辑问题思考和记录。</p><h1 id="1-黑白帽子之题"><a href="#1-黑白帽子之题" class="headerlink" title="1.黑白帽子之题"></a>1.黑白帽子之题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV1Uz4y1p7uH/?vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">外星人谜题</a></p><p><strong>问题分析：</strong>在允许错误为一的情况下，只需要有一个特定的编码来传递信息即可。</p><p>现在将问题简单化：首先假设只有4个人，身高从高到低编号1~4（1号身高最高），帽子和人对应为：</p><p>1（黑），2（白），3（黑），4（黑）</p><p><strong>问题解答：</strong>将黑帽子为奇数定义为黑色</p><p><strong>step1：</strong>1号看见前面有2个黑帽子，所以1号说<strong>白色</strong>（1号错误，但条件允许出错一个）</p><p><strong>step2：</strong>2号明白1号前有偶数个黑帽子，自己看见是偶数，所以2号是白色（正确）</p><p><strong>step3：</strong>3号明白2号前有偶数个黑帽子，自己看见是奇数，所以3号是黑色（正确）</p><p><strong>step4：</strong>4号明白从3号回答，判断3号前有奇数个黑帽子，自己看见是0（偶数），所以1号是黑色（正确）</p><p>综上所述：白-白-黑-黑（只有第一位出错）</p><h1 id="2-绿眼睛谜题"><a href="#2-绿眼睛谜题" class="headerlink" title="2.绿眼睛谜题"></a>2.绿眼睛谜题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV16z4y1p7aW/?spm_id_from=333.337.search-card.all.click">绿眼睛谜题</a></p><p><strong>问题分析：</strong>问题简化：首先假设只有2个人，那么眼睛颜色不排列只组合的话，有3种情况：</p><p>红-红，红-绿，绿-绿</p><p>只需要排除：红-红，绿-绿，中的一个情况问题就解决了</p><p><strong>问题解答：</strong>你的回答是：你们之中至少有一个绿眼睛</p><p><strong>step1：</strong>红-红（通过这句话，可以直接排除掉）</p><p><strong>step2：</strong>红-绿。假设1（红），2（绿）。2号看见1号为红色，可以断定自己是绿色。1号暂时不能判断，需要等到第二天2号是否离开判断（step3解答）</p><p><strong>step3：</strong>绿-绿。</p><ul><li>第一天白天：1号看见2号为绿色，如果2号看见自己是红色，那么2号晚上必定离开。</li><li>第二天白天：1号看见了2号，可以判断2号看见1号是绿。同理2号看见了1号，可以判断1号看见2号是绿。两人知道自己是绿色</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本博客搭建</title>
      <link href="/2023/11/03/2.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/11/03/2.DIY/1.%E7%BD%91%E9%A1%B5%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的搭建方法有两种：</p><ol><li>hexo + gitee（国内，网页加载速度快）</li><li>hexo + github（国外，网页加载速度慢）</li></ol><p><strong>安装工具：</strong></p><ol><li><p><strong>node.js：</strong><a href="https://nodejs.org/">https://nodejs.org</a></p></li><li><p><strong>git：</strong><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>（官网下载比较慢）</p></li><li><p><strong>Typora：</strong>编辑网页文档使用的工具</p></li></ol><p>注意修改安装路径。</p><h1 id="方法一：hexo-gitee"><a href="#方法一：hexo-gitee" class="headerlink" title="方法一：hexo + gitee"></a>方法一：hexo + gitee</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>服务器在国内，别人的访问自己的网页速度快。</p></li><li><p><strong>缺点：</strong></p><p>需要身份证验证（身份证正反面，手持身份证正反面），以及等待备案通过。</p></li></ul><h1 id="方法二：hexo-github"><a href="#方法二：hexo-github" class="headerlink" title="方法二：hexo + github"></a>方法二：hexo + github</h1><p>建议先看一遍：hexo + gitee 的推荐视频<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>只需要有邮箱，不需要身份验证。</p></li><li><p><strong>缺点：</strong></p><p>服务器在国外，不使用加速器可能连自己都访问不了。</p></li></ul><p>推荐加速器：watt toolkit（微软商店可以下载，无毒，开源）</p><p><strong>接下来是正式搭建：</strong></p><p>在安装好node.js，git，Typora，watt toolkit（可选）之后，</p><ul><li><strong>环境检测：</strong></li></ul><ol><li><p>在任意位置新建hexo文件夹</p></li><li><p>右键 - 显示更多选项 - Open Git Bash here</p><p>输入：</p><p>node -v<br>npm -v（这个是node附带的）<br>git -v </p></li><li><p>输入</p><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo s</p></li></ol><ul><li><strong>搭建仓库</strong></li></ul><p>1.注册登入github（提示注册名字和创建好的网站名有关）：<a href="https://github.com/">https://github.com/</a></p><p>2.点击Create a new repository进入新建仓库页面</p><p>​GitHub: Let’s build from here</p><p>3.点击Create a new repository进入新建仓库页面</p><p>​仓库名输入：用户名.github.io(我已经试过了，必须是这种格式后面才能够访问)</p><p>​勾选Public</p><p>​勾选 Add a README file</p><p>​拉到下面点击create创建</p><ul><li><p><strong>生成SSH Keys</strong></p><p>1.在任意文件夹，右键 - Git bush here</p><p>2.输入：ssh-keygen -t rsa -C “邮件地址”</p><p>3.敲4次Enter</p><p>4.进入C:\Users\用户名，在里面进入.ssh文件</p><p>5.用记事本打开id_rsa.pub,全选复制</p><p>6.打开github，点击头像 - setting - 左边找到SSH相关字样 - new SSH keys，名称随意，在下面粘贴代码，然后创建</p><p>7.测试是否成功，在Git bush here中输入：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>，回车，然后再输入yes</p></li><li><p><strong>本地生成博客内容</strong></p></li></ul><ol><li><p>关闭Git bush here，进入hexo,blog文件夹，右键打开Git bush here</p></li><li><p>输入：</p><p>hexo g<br>hexo s</p><p>然后会输出一个网址，该网址为本地网址（不能联网访问）</p></li></ol><ul><li><strong>上线博客</strong></li></ul><ol><li><p>进入blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><p> type: git<br> repository:<br> branch: main </p><p>（每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！）</p></li></ol><p>​    2.去github，在之前生成的仓库页面点code，复制https链接</p><p>​将其粘贴到我们记事本中的repository：后面</p><p>​然后保存退出</p><p>​3.在Git bush here中输入</p><p>​npm install hexo-deployer-git –save</p><p>​hexo g</p><p>​hexo d</p><p>​然后在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p>到这里我们就搭建好了自己的网站，</p><p>网址为：<strong>用户名.github.io</strong></p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>虽然，到现在网站已经搭建好了，但是博客的主题需要自己去hexo的官网探索，推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><p>下载好以后，就是个人博客的参数配置。每次配置完成在Git bush here中输入：</p><p>hexo clean  (清除以前网页初始化)</p><p>hexo g  (生成网页)</p><p>hexo d （上传网页到github）</p><p>hexo s  (本地运行网页)</p>]]></content>
      
      
      <categories>
          
          <category> DIY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark</title>
      <link href="/2023/11/03/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/12.Spark/"/>
      <url>/2023/11/03/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/12.Spark/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-大数据概述"><a href="#第一章-大数据概述" class="headerlink" title="第一章 大数据概述"></a>第一章 大数据概述</h1><h2 id="1-1-大数据的概述与关键技术"><a href="#1-1-大数据的概述与关键技术" class="headerlink" title="1.1 大数据的概述与关键技术"></a><strong>1.1</strong> 大数据的概述与关键技术</h2><h3 id="1-1-1-大数据的概念"><a href="#1-1-1-大数据的概念" class="headerlink" title="1.1.1 大数据的概念"></a>1.1.1 大数据的概念</h3><p>包含四个方面（4V）：</p><p>1.数据量大（volume）:T,P,E,Z,Y</p><p>2.数据类型繁多（variety）：结构化数据，非结构化数据</p><p>3.处理速度快（velocity）:1秒定律</p><p>4.价值密度低（value）</p><h3 id="1-1-2-大数据关键技术"><a href="#1-1-2-大数据关键技术" class="headerlink" title="1.1.2 大数据关键技术"></a>1.1.2 大数据关键技术</h3><p>大数据的基本流程：</p><p>1.数据采集与预处理：</p><p>2.数据存储和管理：</p><p>3.数据处理与分析：</p><p>4.数据可视化：</p><p>5.数据隐私和安全：</p><p>大数据两大核心技术：分布式存储、分布式处理</p><p>大数据计算模式：</p><table><thead><tr><th align="center">大数据计算模式</th><th align="center">解决问题</th><th align="center">代表产品</th></tr></thead><tbody><tr><td align="center"><strong>批处理计算</strong></td><td align="center">针对大规模数据的批量处理</td><td align="center">MapReduce、Spark等</td></tr><tr><td align="center"><strong>流计算</strong></td><td align="center">针对流数据的实时计算</td><td align="center">Flink、Storm、S4、Flume、Streams、Puma、DStream、Super Mario、银河流数据处理平台等</td></tr><tr><td align="center"><strong>图计算</strong></td><td align="center">针对大规模图结构数据的处理</td><td align="center">Pregrl,Grephx,Giraph,PowerGraph,Hama</td></tr><tr><td align="center"><strong>查询分析计算</strong></td><td align="center">大规模数据的存储管理和查询分析</td><td align="center">Dremel,Hive,Cassandra,Impala等</td></tr></tbody></table><h2 id="1-2-代表性大数据技术"><a href="#1-2-代表性大数据技术" class="headerlink" title="1.2 代表性大数据技术"></a>1.2 代表性大数据技术</h2><h3 id="1-2-1-Hadoop"><a href="#1-2-1-Hadoop" class="headerlink" title="1.2.1  Hadoop"></a>1.2.1  Hadoop</h3><p><img src="C:\Users\wuhen\AppData\Roaming\Typora\typora-user-images\image-20230918193738585.png" alt="image-20230918193738585"></p><p>1.HDFS:是Hadoop两大核心组成部分之一，提供了在服务器集群中进行大规模分布式文件存储的功能。</p><p>2.MapReduce:MapReduce将复杂的、运行于大规模集群上的并行计算过程高度地抽象到了两个函数：Map和Reduce</p><p>3.YARN:负责集群资源调度和管理的组件。</p><p>4.HBase:主要用来存储非结构化和半结构化的松散数据。</p><p>5.Hive:基于Hadoop的数据仓库工具，可用于对存储在Hadoop文件中的数据集进行数据整理、特殊查询和分析处理。</p><p>6.Flume:提供对数据进行简单处理并将其传输给各种数据接收方的功能。</p><p>7.Sqoop:用来在Hadoop和关系型数据库之间交换数据，可以改变数据的互操作性。</p><h3 id="1-2-2-Spark"><a href="#1-2-2-Spark" class="headerlink" title="1.2.2  Spark"></a>1.2.2  Spark</h3><p>Hadoop（MapReduce）存在如下一些缺点：</p><p>1.表达能力有限</p><p>2.磁盘IO开销大</p><p>3.延迟高</p><p>4.任务之间的衔接涉及IO开销</p><p>5.在前一个任务执行完成之前，其他任务就无法开始，难以胜任复杂、多阶段的计算任务</p><p>Spark优点：</p><p>1.多种数据集操作类型</p><p>2.编程模型更灵活</p><p>3.提供了内存计算</p><p>4.基于DAG的任务调度执行机制</p><p>Spark 作为计算框架，只是取代了Hadoop生态系统中的计算框架MapReduce，而Hadoop中的其他组件依然在企业大数据系统中发挥重要作用。</p><h3 id="1-2-3-Flink"><a href="#1-2-3-Flink" class="headerlink" title="1.2.3 Flink"></a>1.2.3 Flink</h3><p>Spark和Flink都是Apache软件基金会旗下的顶级项目，二者具有很多共同点，具体如下：</p><p>1.都是基于内存的计算框架，因此，都可以获得较好的实时计算性能；</p><p>2.都有统一的批处理和流处理APl，都支持类似SQL的编程接口；</p><p>3.都支持很多相同的转换操作，编程都是用类似于Scala Collection APl的函数式编程模式；</p><p>4.都有完善的错误恢复机制；</p><p>5.都支持“精确一次”（exactly once）的语义一致性。</p><h3 id="1-2-4-Beam（略）"><a href="#1-2-4-Beam（略）" class="headerlink" title="1.2.4 Beam（略）"></a>1.2.4 Beam（略）</h3><h2 id="1-3-问答"><a href="#1-3-问答" class="headerlink" title="1.3 问答"></a>1.3 问答</h2><p>Scala是一门类似Java的多范式语言，它整合了面向对象编程和函数式编程的最佳特性：</p><p>1.Scala具备强大的并发性，支持函数式编程，可以更好地支持分布式系统。</p><p>2.Scala兼容Java，可以与Java互操作。</p><p>3.Scala代码简洁优雅。</p><p>4.Scala支持高效的交互式编程。</p><p>5.Scala是Spark的开发语言。</p><p>问题：开发Spark程序应该使用什么编程语言？</p><p>开发Spark应用程序时，可以采用Scala、Python、Java和R等语言，首选语言是Scala，因为Spark这个软件本身就是使用Scala语言开发的，采用Scala语言编写Spark应用程序，可以获得最好的性能。</p><p>关于采用哪种语言编写Spark应用程序，这里强调两点：</p><p>（1）Java代码太繁琐。在大数据应用场景中，不太适合使用Java，因为，完成同样的任务，Scala只需要一行代码，而Java则可能需要10行代码；而且，Scala语言可以支持交互式编程，大大提高了程序开发效率，而Java则不支持交互式执行，必须编译以后运行。</p><p>（2）Python语言并发性能不好。在并发性能方面，Scala要明显优于</p><p>Python，而且，Scala是静态类型，可以在编译阶段就抛出错误，便于开发大型大数据项目，此外，Scala兼容Java，运行在JVM上，可以直接使用Java中的Hadoop API来和Hadoop进行交互，但是，Python与Hadoop之间的交互非常糟糕，通常都需要第三方库（比如hadoopy）。</p><h1 id="第二章-Scala语言基础"><a href="#第二章-Scala语言基础" class="headerlink" title="第二章 Scala语言基础"></a>第二章 Scala语言基础</h1><h2 id="2-1-Scala语言基础"><a href="#2-1-Scala语言基础" class="headerlink" title="2.1 Scala语言基础"></a>2.1 Scala语言基础</h2><p><strong>可变长参数：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(a:<span class="type">Int</span>*):<span class="type">Int</span>=&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-1-Scala简介"><a href="#2-1-1-Scala简介" class="headerlink" title="2.1.1 Scala简介"></a>2.1.1 Scala简介</h3><p>Scala是一门以Java虚拟机（JVM）为运行环境并将面向对象和函数式编程的最佳特性结合在一起的静态类型编程语言。（静态语言需要提前编译）</p><p>1.Scala是一门多范式的编程语言，Scala支持面向对象和函数式编程。（多范式：多种编程方法的意思。有面向过程，面向对象，泛型，函数式等）</p><p>2.Scala源代码（.Scala）会被编译成Java字节码（.class），然后运行于JVM之上，并可以调用现有的Java类库，实现两种语言的无缝对接。</p><p>3.Scala作为一门语言来看，非常的简洁高效。</p><h2 id="2-2-Scala基础知识"><a href="#2-2-Scala基础知识" class="headerlink" title="2.2 Scala基础知识"></a>2.2 Scala基础知识</h2><h3 id="2-2-1-注释："><a href="#2-2-1-注释：" class="headerlink" title="2.2.1 注释："></a>2.2.1 注释：</h3><p>1.&#x2F;&#x2F;</p><p>2.&#x2F;**&#x2F;</p><p>3.&#x2F;**</p><p>​*&#x2F;</p><h3 id="2-2-2-常量和变量"><a href="#2-2-2-常量和变量" class="headerlink" title="2.2.2 常量和变量"></a>2.2.2 常量和变量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> 常量名 [:常量类型] = 初始值</span><br><span class="line"><span class="keyword">val</span> i:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 [:变量类型] = 初始值</span><br><span class="line"><span class="keyword">var</span> j:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">注意：能用常量的地方不用变量</span><br></pre></td></tr></table></figure><p>变量：类型推断机制，根据初始值自动推断变量的类型。</p><h3 id="2-2-3-标识符的命名规范"><a href="#2-2-3-标识符的命名规范" class="headerlink" title="2.2.3 标识符的命名规范"></a>2.2.3 标识符的命名规范</h3><p>标识符：对各种变量、方法、函数等命名时使用的字符序列称为标识符。</p><p>1.字母、下划线、数字。（数字不能开头）</p><p>2.以操作符开头（+-*&#x2F;#！等）</p><p>3.用反引号包括的任意字符串。·if·</p><h3 id="2-2-4-数据类型"><a href="#2-2-4-数据类型" class="headerlink" title="2.2.4 数据类型"></a>2.2.4 数据类型</h3><p>Byte、Char、Short、Int、Long、Float、Double、String和Boolean（注意首字母大写）</p><p>1.一切结对象，都是Any的子类。</p><p>2.两大数据类型：数值类型（AnyVal）,引用类型（AnyRef）</p><p>3.低精度向高精度自动转换（隐式转换）</p><p>4.Scala的StringOps是对Java中的String增强</p><p>5.Unit：对应Java的void，用于方法返回值的位置；Unit是一个数据类型，只有一个对象就是（）。void是关键字，不是数据类型。</p><p>6.Null：是一个数据类型，只有一个对象null。他是所有引用类型（AnyRef）的子类。</p><p>7.Nothing：是所有数据类型的子类，主要在一个函数没有明确返回值时使用，因为这样我们可以把抛出的返回值(异常)，赋值给任何的变量或函数（兼容性）。</p><p>![屏幕截图 2023-09-20 173801](C:\Users\wuhen\AppData\Roaming\Typora\typora-user-images\屏幕截图 2023-09-20 173801.png)</p><h3 id="2-2-5-字符串输出"><a href="#2-2-5-字符串输出" class="headerlink" title="2.2.5 字符串输出"></a>2.2.5 字符串输出</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三种字符出输出形式</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">18</span></span><br><span class="line">    <span class="comment">//1.字符串用+连接</span></span><br><span class="line">    println(name + <span class="string">&quot;今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>)</span><br><span class="line">    <span class="comment">//2.通过%传值</span></span><br><span class="line">    printf(<span class="string">&quot;%s今年%d岁\n&quot;</span>,name,age)</span><br><span class="line">    <span class="comment">//3.通过$获取变量值</span></span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//三个引号表示字符串保持多行字符串的原格式输出</span></span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |name = $&#123;name&#125;</span></span><br><span class="line"><span class="string">       |age = $&#123;age&#125;</span></span><br><span class="line"><span class="string">       |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字面量：用户不指定变量类型的情况下，系统默认把变量定位某种类型。123，整数字面量。</p><h3 id="2-2-6-Unit、Null、Nothing代码实现"><a href="#2-2-6-Unit、Null、Nothing代码实现" class="headerlink" title="2.2.6 Unit、Null、Nothing代码实现"></a>2.2.6 Unit、Null、Nothing代码实现</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.返回值是空值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m1</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;m1被调用&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> a:<span class="type">Unit</span> = m1()</span><br><span class="line">    println(<span class="string">s&quot;a = <span class="subst">$&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//2.空引用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">var name:<span class="type">String</span>,var age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="type">Student</span>(name = <span class="string">&quot;xiaoming&quot;</span>,age = <span class="number">20</span>)</span><br><span class="line">    student = <span class="literal">null</span></span><br><span class="line">    println(student)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//3.nothing,当函数可能抛出异常时，可以定义返回类型是nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m2</span></span>():<span class="type">Nothing</span>=&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">    m2()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：</span></span><br><span class="line"><span class="comment">• 定义一个函数，含有一个整数输入参数</span></span><br><span class="line"><span class="comment">• 假设输入的整数为0，抛出NullPointerException异常</span></span><br><span class="line"><span class="comment">• 如果整数为其他，则输出该整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(a:<span class="type">Int</span>): <span class="type">Int</span> =&#123;</span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> b = fun(<span class="number">5</span>)</span><br><span class="line">    println(b)</span><br><span class="line">    <span class="keyword">val</span> c = fun(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-输入输出"><a href="#2-3-输入输出" class="headerlink" title="2.3 输入输出"></a>2.3 输入输出</h2><h3 id="2-3-1-控制台输入输出语句"><a href="#2-3-1-控制台输入输出语句" class="headerlink" title="2.3.1 控制台输入输出语句"></a>2.3.1 控制台输入输出语句</h3><p>1.从控制台读入数据方法：readInt、readDouble、readByte、readShort、readFloat、readLong、readChar、readBoolean及readLine，分别对应9种基本数据类型，其中前8种方法没有参数，readLine可以不提供参数，也可以带一个字符串参数的提示</p><p>2.所有这些函数都属于对象scala.io.StdIn的方法，使用前必须导入，或者直接用全称进行调用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入用例</span></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    print(<span class="string">&quot;姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> name = <span class="type">StdIn</span>.readLine()</span><br><span class="line">    print(<span class="string">&quot;年龄：&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> age = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    println(<span class="string">s&quot;hello,<span class="subst">$&#123;name&#125;</span>,你今年<span class="subst">$&#123;age&#125;</span>岁了&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-读写文件"><a href="#2-3-2-读写文件" class="headerlink" title="2.3.2 读写文件"></a>2.3.2 读写文件</h3><p><strong>一、读取文件</strong></p><p>可以使用scala.io.Source的fromFlie方法实现对文件中所有行的读取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    fromFile是读取文件，读出来后需要在控制台一行一行显示</span></span><br><span class="line"><span class="comment">    所以用foreach语句一行一行的输出，传入print函数作为</span></span><br><span class="line"><span class="comment">    foreach的参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">Source</span>.fromFile(<span class="string">&quot;D:\\cesi.txt&quot;</span>).foreach(print())</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二、写文件</strong></p><p>Scala需要使用java.io.PrintWriter实现把数据写入到文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span></span><br><span class="line"><span class="keyword">import</span> scala.reflect.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建输出流对象</span></span><br><span class="line">    <span class="keyword">val</span> writer = <span class="keyword">new</span> <span class="type">PrintWriter</span>()(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;D:\\shuchu.txt&quot;</span>))</span><br><span class="line">    <span class="comment">//操作流，写入数据</span></span><br><span class="line">    writer.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    writer.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-强制类型转换"><a href="#2-4-强制类型转换" class="headerlink" title="2.4 强制类型转换"></a>2.4 强制类型转换</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用强制转换函数</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="type">Int</span> = <span class="number">2.7</span>.toInt</span><br></pre></td></tr></table></figure><h2 id="2-5-操作符"><a href="#2-5-操作符" class="headerlink" title="2.5 操作符"></a>2.5 操作符</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span> + <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num2 = (<span class="number">5</span>).+(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//num1与num2等价</span></span><br></pre></td></tr></table></figure><p>&amp;&amp;，||，！（没有++，–）</p><h2 id="2-6-控制结构"><a href="#2-6-控制结构" class="headerlink" title="2.6 控制结构"></a>2.6 控制结构</h2><p>1.if 条件表达式</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scala中的if表达式的值可以赋值给变量</span></span><br><span class="line"><span class="keyword">val</span> i = <span class="number">6</span></span><br><span class="line"><span class="keyword">val</span> a = <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>2.while循环，do-while循环</p><p>3.for循环</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本语法：</span></span><br><span class="line"><span class="comment">for (变量 &lt;- 表达式) &#123;语句块&#125;</span></span><br><span class="line"><span class="comment">其中，“变量&lt;-表达式”被称为“生成器（generator）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">to[ ]</span></span><br><span class="line"><span class="comment">until[ )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span> by <span class="number">2</span> <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span>;j &lt;- <span class="number">1</span> until <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>for</strong>推导式：for结构可以在每次执行的时候创造一个值，然后将包含了所有产生值的集合作为for循环表达式的结果返回，集合的类型由生成器中的集合类型确定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span> (变量 &lt;- 表达式) <span class="keyword">yield</span> &#123;语句块&#125;</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="keyword">val</span> a = <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span>) <span class="keyword">yield</span> &#123;</span><br><span class="line">        println(i)</span><br><span class="line">        i*i</span><br><span class="line">      &#125;</span><br><span class="line">println(a)</span><br></pre></td></tr></table></figure><p>4.异常处理</p><p>使用try-catch结构来捕获异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileReader</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileNotFoundException</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>)</span><br><span class="line">      <span class="comment">// 文件操作</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt;</span><br><span class="line">        <span class="comment">// 文件不存在时的操作</span></span><br><span class="line">        <span class="keyword">case</span> ex: <span class="type">IOException</span> =&gt;</span><br><span class="line">        <span class="comment">// 发生I/O错误时的操作</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      file.close() <span class="comment">// 确保关闭文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.对循环控制</p><p>（1）Scala没有break和continue关键字，但提供了一个Breaks类（位于包scala.util.control）。Breaks类有两个方法用于对循环结构进行控制，即breakable和break。</p><p>（2）将需要控制的语句块作为参数放在breakable后面，然后，其内部在某个条件满足时调用break方法，程序将跳出breakable方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">breakable&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(...) <span class="keyword">break</span></span><br><span class="line">... &#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util.control.<span class="type">Breaks</span>._ <span class="comment">//导入Breaks类的所有方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    breakable&#123;</span><br><span class="line">      <span class="keyword">for</span>(i &lt;- array)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">5</span>) <span class="keyword">break</span> <span class="comment">//跳出breakable，终止for循环，相当于Java中的break</span></span><br><span class="line">        println(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 上面的for语句将输出1，3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i &lt;- array)&#123;</span><br><span class="line">      breakable&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">5</span>) <span class="keyword">break</span></span><br><span class="line">        <span class="comment">//跳出breakable，终止当次循环，相当于Java的continue</span></span><br><span class="line">        println(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="comment">// 上面的for语句将输出1，3，5，4</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-7-函数式编程"><a href="#2-7-函数式编程" class="headerlink" title="2.7 函数式编程"></a>2.7 函数式编程</h2><h3 id="2-7-1-函数的定义与使用"><a href="#2-7-1-函数的定义与使用" class="headerlink" title="2.7.1 函数的定义与使用"></a>2.7.1 函数的定义与使用</h3><p>定义函数最通用的方法是作为某个类或者对象的成员，这种函数被称为方法，语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        x</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.函数是一个变量，可以赋值给变量</span></span><br><span class="line"><span class="comment">//2.类似于方法，函数也有参数列表和返回值</span></span><br><span class="line"><span class="comment">//3.函数定义不需要使用def定义</span></span><br><span class="line"><span class="comment">//4.无需指定返回值类型</span></span><br><span class="line"><span class="keyword">val</span> a = (x:<span class="type">Int</span> , y:<span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) x</span><br><span class="line">    <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数式编程中，函数是“头等公民” ，可以像任何其他数据类型一样被传递和操作</p><h3 id="2-7-2-匿名函数（函数字面量）"><a href="#2-7-2-匿名函数（函数字面量）" class="headerlink" title="2.7.2 匿名函数（函数字面量）"></a>2.7.2 匿名函数（函数字面量）</h3><p>1.参数的类型可以省略，会根据形参自动推导</p><p>2.只有一个参数可省略圆括号</p><p>3.匿名函数只有一行，可省略花括号</p><p>4.参数只是用了一次，可以省略参数，用_代替</p><p>5.可以推断传入println函数体，而不是调用，可以直接传入函数本身</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">var</span> f = (name:<span class="type">String</span>) =&gt; &#123;</span><br><span class="line">    println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.参数的类型可以省略，会根据形参自动推导</span></span><br><span class="line">f = (name) =&gt; &#123;println(name)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///2.只有一个参数可省略圆括号</span></span><br><span class="line">f = name =&gt; &#123;println(name)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.匿名函数只有一行，可省略花括号</span></span><br><span class="line">f = name =&gt; println(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.参数只是用了一次，可以省略参数，和=&gt;，用_代替</span></span><br><span class="line">f = println(_)</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.可以推断传入println函数体，而不是调用，可以直接传入函数本身</span></span><br><span class="line">f = println</span><br><span class="line"></span><br><span class="line">f(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用时</span></span><br><span class="line"><span class="keyword">var</span> f2:<span class="type">Any</span> =&gt;<span class="type">Unit</span> = println</span><br><span class="line">f2(<span class="string">&quot;3&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7-3-高阶函数"><a href="#2-7-3-高阶函数" class="headerlink" title="2.7.3 高阶函数"></a>2.7.3 高阶函数</h3><p>高阶函数：当一个函数包含其它函数作为其参数或者返回结果为一个函数时，该函数被称为高阶函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例：假设需要分别计算从一个整数到另一个整数的“连加和” 、“平方和”以及“<span class="number">2</span>的幂次和”</span><br><span class="line"></span><br><span class="line">方案一：不采用高阶函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powerOfTwo</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span> * powerOfTwo(x<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumInts</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> a + sumInts(a + <span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumSquares</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> a*a + sumSquares(a + <span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumPowersOfTwo</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> powerOfTwo(a) + sumPowersOfTwo(a+<span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案二：采用高阶函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> f(a) + sum(f, a+<span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b = sum(x=&gt;x,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    println(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span> </span>=(name:<span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      println(name + <span class="string">&quot;\n这是func1函数&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(func:<span class="type">String</span> =&gt; <span class="type">Unit</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      func(<span class="string">&quot;调用func函数&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">f(func1)</span><br></pre></td></tr></table></figure><h3 id="2-7-4-闭包"><a href="#2-7-4-闭包" class="headerlink" title="2.7.4 闭包"></a>2.7.4 闭包</h3><p>闭包：当函数的执行依赖于声明在函数外部的一个或多个变量时。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> more = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> addmore = (x:<span class="type">Int</span>)=&gt;x + more</span><br><span class="line"><span class="keyword">var</span> num01 = addmore(<span class="number">5</span>)</span><br><span class="line">more = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num02 = addmore(<span class="number">5</span>)</span><br><span class="line">println(num01,num02)</span><br></pre></td></tr></table></figure><h3 id="2-7-5-偏应用函数和Curry化"><a href="#2-7-5-偏应用函数和Curry化" class="headerlink" title="2.7.5 偏应用函数和Curry化"></a>2.7.5 偏应用函数和Curry化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>偏应用函数：通过保留已知函数的部分参数来生成的新函数.</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>,c:<span class="type">Int</span>) = a + b + c</span><br><span class="line"><span class="keyword">val</span> a = sum(<span class="number">1</span>,_,_)</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">println(a(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">println(a(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">Curry</span>化：是指带有多个参数列表且每个参数列表只包含一个参数的函数。</span><br><span class="line">可以通过调用函数对象的curried方法，将一个普通多参数函数转化成一个<span class="type">Curry</span>化的函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> plain = (x:<span class="type">Int</span>,y:<span class="type">Int</span>) =&gt; x * y</span><br><span class="line"><span class="keyword">val</span> curried1 = plain.curried</span><br><span class="line">plain(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">curried1(<span class="number">2</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> a = curried1(<span class="number">2</span>)</span><br><span class="line">println(plain(<span class="number">2</span>,<span class="number">5</span>),curried1(<span class="number">2</span>)(<span class="number">5</span>),a(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>)(z:<span class="type">Int</span>) = x * y * z</span><br><span class="line">    <span class="keyword">val</span> add1 = add(<span class="number">2</span>) _</span><br><span class="line">    <span class="keyword">val</span> add2 = add1(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> add3 = add2(<span class="number">4</span>)</span><br><span class="line">    println(add3)</span><br></pre></td></tr></table></figure><h3 id="2-7-6-函数综合应用"><a href="#2-7-6-函数综合应用" class="headerlink" title="2.7.6 函数综合应用"></a>2.7.6 函数综合应用</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>函数作为值传递</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(n:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    print(<span class="string">&quot;f调用&quot;</span>)</span><br><span class="line">    n+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = f(<span class="number">123</span>)</span><br><span class="line"><span class="comment">//f1接受一个函数而不是接受函数的返回值，函数是可以作为值传递</span></span><br><span class="line"><span class="keyword">val</span> f1:<span class="type">Int</span> =&gt; <span class="type">Int</span> = f</span><br><span class="line"><span class="comment">//假设f是一个函数整体，而不是调用，可在f后面打一个空格加下划线</span></span><br><span class="line"><span class="keyword">val</span> f2 = f _ <span class="comment">//将方法转换成函数</span></span><br><span class="line">println(f1)</span><br><span class="line">println(f2)</span><br><span class="line">println(fi(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>函数可以作为输入参数</span><br><span class="line"><span class="number">3.</span>函数作为返回值返回</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span></span>():<span class="type">Int</span> =&gt; <span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f4</span></span>(a:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">        println(<span class="string">&quot;f4调用了&quot;</span>+a)</span><br><span class="line">    &#125;</span><br><span class="line">    f4 _</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> f5 = f3()</span><br><span class="line">println(f5)</span><br><span class="line">println(f5(<span class="number">123</span>))</span><br><span class="line">println(f3()(<span class="number">123</span>))</span><br></pre></td></tr></table></figure><h2 id="2-8-面向对象编程基础"><a href="#2-8-面向对象编程基础" class="headerlink" title="2.8 面向对象编程基础"></a>2.8 面向对象编程基础</h2><h3 id="2-8-1类"><a href="#2-8-1类" class="headerlink" title="2.8.1类"></a>2.8.1类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>类的定义</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line"><span class="comment">//这里定义类的字段和方法</span></span><br><span class="line">    字段定义：<span class="keyword">var</span> 或者 <span class="keyword">val</span></span><br><span class="line">    方法定义：<span class="function"><span class="keyword">def</span> <span class="title">方法名</span></span>(参数列表):返回结果类型=&#123;方法体&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> mycounter = <span class="keyword">new</span> counter</span><br><span class="line">    mycounter.value = <span class="number">5</span></span><br><span class="line">    mycounter.increment(<span class="number">3</span>)<span class="comment">//调用方法</span></span><br><span class="line">    println(mycounter.current)<span class="comment">//调用无参方法的时候可以省略括号</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increment</span></span>(step:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;value += step&#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>():<span class="type">Int</span> = &#123;value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 类成员的可见性</span><br><span class="line"></span><br><span class="line"><span class="type">Scala</span>类中所有成员的默认可见性为公有，任何作用域内都能直接访问公有成员。</span><br><span class="line">除了默认的公有可见性，<span class="type">Scala</span>也提供<span class="keyword">private</span>和<span class="keyword">protected</span>，其中，<span class="keyword">private</span>成员只对本类型和嵌套类型可见；<span class="keyword">protected</span>成员对本类型和其继承类型都可见</span><br><span class="line"></span><br><span class="line">对于<span class="keyword">private</span>字段，<span class="type">Scala</span>采用类似<span class="type">Java</span>中的getter和setter方法，定义了两个成对的方法value和value_进行读取和修改</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> privatevalue = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value</span> </span>= privatevalue</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value_</span> </span>= (newvalue:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(newvalue &gt; <span class="number">0</span>) privatevalue = newvalue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increment</span></span>(step:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    value += step</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>():<span class="type">Int</span> = &#123;value&#125;</span><br><span class="line">&#125;</span><br><span class="line">注：<span class="type">Scala</span>语法中有如下规范，当编译器看到以value和value_=这种成对形式出现的方法时，它允许用户去掉下划线_，而采用类似赋值表达式的形式myCounter.value= <span class="number">3</span> <span class="comment">// 等效于myCounter.value_=(3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 方法的定义方式</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>match使用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(num:<span class="type">Int</span>) :<span class="type">Int</span> = &#123;</span><br><span class="line">      num <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> i <span class="keyword">if</span> i &gt;= <span class="number">0</span> =&gt; i</span><br><span class="line">        <span class="keyword">case</span> i <span class="keyword">if</span> i &lt; <span class="number">0</span> =&gt; -i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(abs(<span class="number">67</span>))</span><br><span class="line">    println(abs(<span class="number">0</span>))</span><br><span class="line">    println(abs(<span class="number">-50</span>))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种定义</span></span><br><span class="line"><span class="keyword">var</span> arrr1 = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>)</span><br><span class="line">arrr1(<span class="number">0</span>) = <span class="number">100</span></span><br><span class="line">println(arrr1(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义</span></span><br><span class="line"><span class="keyword">var</span> array2 = <span class="type">Array</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line">println(array2.length)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变长数组</span></span><br><span class="line"><span class="keyword">val</span> arr3 = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">val</span> arr4 = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变长数组应用</span></span><br><span class="line"><span class="keyword">var</span> arr01 = <span class="type">ArrayBuffer</span>(<span class="string">&quot;hadoop&quot;</span>,<span class="string">&quot;spark&quot;</span>,<span class="string">&quot;flink&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//变长数组中添加一个元素</span></span><br><span class="line">arr01 += <span class="string">&quot;flume&quot;</span></span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//删除一个元素</span></span><br><span class="line">arr01 -= <span class="string">&quot;hadoop&quot;</span></span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//增加一个数组</span></span><br><span class="line">arr01 ++= <span class="type">Array</span>(<span class="string">&quot;hive&quot;</span>,<span class="string">&quot;sqoop&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//删除一个数组</span></span><br><span class="line">arr01 --= <span class="type">Array</span>(<span class="string">&quot;sqoop&quot;</span>,<span class="string">&quot;spark&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">0</span> until arr01.length)&#123;</span><br><span class="line">    println(arr01(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接获取</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- arr01)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组</span></span><br><span class="line"><span class="keyword">var</span> tuple1 = <span class="string">&quot;zhangsan&quot;</span> -&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组获取元素</span></span><br><span class="line">println(tuple1._1)</span><br><span class="line">println(tuple1._2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it = tuple1.productIterator</span><br><span class="line"><span class="keyword">for</span> (i &lt;- it)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> it = list1.iterator</span><br><span class="line"><span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">    println(it.next())</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;-&quot;</span> * <span class="number">15</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析与可视化</title>
      <link href="/2023/11/02/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/16.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/11/02/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/16.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-数据分析与可视化概述"><a href="#第一章-数据分析与可视化概述" class="headerlink" title="第一章 数据分析与可视化概述"></a>第一章 数据分析与可视化概述</h1><h1 id="第二章-python编程基础"><a href="#第二章-python编程基础" class="headerlink" title="第二章 python编程基础"></a>第二章 python编程基础</h1><ol><li>不可变数据类型：number 、string、tuple</li><li>变数据类型：list、dictionary 、set</li></ol><h1 id="第三章-NumPy数值计算基础"><a href="#第三章-NumPy数值计算基础" class="headerlink" title="第三章 NumPy数值计算基础"></a>第三章 NumPy数值计算基础</h1><p>NumPy是Python的一种开源的数值计算扩展库。</p><p>它提供了两种基本的对象：</p><ol><li>ndarray：是储存单一数据类型的多维数组。</li><li>ufunc：是一种能够对数组进行处理的函数。</li></ol><p>ndarray是一个通用的同构数据容器，即其中的所有元素都需要相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i : int8,int16,int32,int64</span><br><span class="line">f : float16,float32,float64</span><br><span class="line">复数 ： complex64,complex64</span><br><span class="line">u : unicode编码</span><br><span class="line">s : 固定字符串长度</span><br><span class="line">b : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h2 id="一-array函数创建数组对象"><a href="#一-array函数创建数组对象" class="headerlink" title="一. array函数创建数组对象"></a>一. array函数创建数组对象</h2><p>array函数的格式：np.array(object, dtype,ndmin)</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>接收array，表示想要创建的数组</td></tr><tr><td>dtype</td><td>接收data-type，表示数组所需的数据类型，未给定则选择保存对象所需的最小类型，默认为None</td></tr><tr><td>ndmin</td><td>接收int，制定生成数组应该具有的最小维数，默认为None</td></tr></tbody></table><p>注：在创建数组时，NumPy会为新建的数组推断出一个合适的数据类型，并保存在dtype中。</p><h2 id="二-专门创建数组的函数"><a href="#二-专门创建数组的函数" class="headerlink" title="二. 专门创建数组的函数"></a>二. 专门创建数组的函数</h2><p>1.arange函数：创建等差一维数组格式：np.arange([start, ]stop, [step, ]dtype)</p><p>2.linspace 函数：创建等差一维数组，接收元素数量作为参数。格式：np.linspace(start, stop, num, endpoint, retstep&#x3D;False, dtype&#x3D;None)</p><table><thead><tr><th><strong>参数</strong>名称</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>start:</td><td>起始值，默认从0开始;</td></tr><tr><td>stop:</td><td>结束值；生成的元素不包括结束值；</td></tr><tr><td>num</td><td>要生成的等间隔样例数量</td></tr></tbody></table><p>3.logspace函数：创建等比一维数组格式：np.logspace(start, stop, num, endpoint&#x3D;True, base&#x3D;10.0, dtype&#x3D;None))</p><p>logspace的参数中，start, stop代表的是10的幂,默认基数base为10，第三个参数元素个数。</p><p>4.zeros函数：创建指定长度或形状的全0数组格式：np.zeros(shape, dtype&#x3D;float, order&#x3D;’C’)</p><p>5.ones函数：创建指定长度或形状的全1数组格式：np. ones(shape, dtype&#x3D;None, order&#x3D;’C’)</p><p>6.diag函数：创建一个对角阵。格式：np.diag(v, k&#x3D;0)</p><p>此外，使用eye函数可创建一个对角线为 1 其他位置全为 0 的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一.</span><br><span class="line">num = np.array(data,dtype = <span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">二.</span><br><span class="line"><span class="number">1.</span></span><br><span class="line">num = np.arange(<span class="number">10</span>)</span><br><span class="line">warray = np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>)</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">warry = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">warry = np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)//生成<span class="number">1</span>-<span class="number">10</span>的<span class="number">5</span>个等比元素</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">num = np.zeros(<span class="number">4</span>)</span><br><span class="line"><span class="number">5.</span></span><br><span class="line">num = np.ones(<span class="number">4</span>)</span><br><span class="line"><span class="number">6.</span></span><br><span class="line">num = np.diag(data,k=<span class="number">0</span>)</span><br><span class="line">num = np.eye(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-ndarray对象属性和数据转换"><a href="#三-ndarray对象属性和数据转换" class="headerlink" title="三. ndarray对象属性和数据转换"></a>三. ndarray对象属性和数据转换</h2><p>NumPy创建的 ndarray对象属性及其说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndim</td><td>返回数组的轴的个数</td></tr><tr><td>shape</td><td>返回数组的维度</td></tr><tr><td>size</td><td>返回数组元素个数</td></tr><tr><td>dtype</td><td>返回数据类型</td></tr><tr><td>itemsize</td><td>返回数组中每个元素的字节大小</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">warray = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;秩为：&#x27;</span>,warray.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;形状为：&#x27;</span>,warray.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;元素个数为：&#x27;</span>,warray.size)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">&#x27;设置数组的shape属性。&#x27;</span></span><br><span class="line">warray.shape = <span class="number">3</span>,<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(warray)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">&#x27;数组的类型转换&#x27;</span></span><br><span class="line">arr1 = np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.dtype)</span><br><span class="line">arr2 = arr1.astype(np.float64)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四-生成随机数"><a href="#四-生成随机数" class="headerlink" title="四. 生成随机数"></a>四. 生成随机数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NumPy.random模块中，提供了多种随机数的生成函数。如randint函数生成指定范围的随机整数来构成指定形状的数组。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>用法：np.random.randint(low, high = <span class="literal">None</span>, size = <span class="literal">None</span>)</span><br><span class="line">arr = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,size = (<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>生成[<span class="number">0</span>,<span class="number">1</span>]之间的随机数组。</span><br><span class="line">arr1 = np.random.rand(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2 = np.random.rand(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>random模块的常用随机数生成函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>seed</td><td>确定随机数生成器的种子</td></tr><tr><td>permutation</td><td>返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td>shuffle</td><td>对一个序列进行随机排序</td></tr><tr><td>binomial</td><td>产生二项分布的随机数</td></tr><tr><td>normal</td><td>产生正态（高斯）分布的随机数</td></tr><tr><td>beta</td><td>产生beta分布的随机数</td></tr><tr><td>chisquare</td><td>产生卡方分布的随机数</td></tr><tr><td>gamma</td><td>产生gamma分布的随机数</td></tr><tr><td>uniform</td><td>产生在[0,1)中均匀分布的随机数</td></tr></tbody></table><h2 id="五-数组变换"><a href="#五-数组变换" class="headerlink" title="五. 数组变换"></a>五. 数组变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">数组重塑:数据重塑不会改变原来的数组</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">对于定义好的数组，可以通过reshape方法改变其数据维度。</span><br><span class="line">格式：np.reshape(data, newshape, order=<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">data需要处理的数据。</span><br><span class="line">newshape新维度——整数或整数元组，</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#reshape的参数中的其中一个可以设置为-1，表示数组的维度可以通过数据本身来推断。</span></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>np.resize(data,newshape)</span><br><span class="line">np.resize(np.arange(<span class="number">8</span>),[<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>与reshape相反的方法是数据散开（ravel）或数据扁平化（flatten）</span><br><span class="line">data.ravel()</span><br><span class="line">data.faltten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组的合并：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>hstack函数：实现横向合并</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.hstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>vstack函数：实现纵向组合是利用vstack将数组纵向合并；</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.vstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>concatenate函数：可以实现数组的横向或纵向合并，参数axis=<span class="number">1</span>时进行横向合并，axis=<span class="number">0</span>时进行纵向合并。</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组分割：与数组合并相反，hsplit函数、vsplit函数和split函数分别实现数组的横向、纵向和指定方向的分割。</span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向分割为:\n&#x27;</span>,np.hsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为:\n&#x27;</span>,np.vsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">split在参数axis = <span class="number">1</span>时实现数组的横向分割，axis = <span class="number">0</span>时则进行纵向分割。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组转置和轴对换</span><br><span class="line">数组转置是数组重塑的一种特殊形式，可以通过transpose方法进行转置。</span><br><span class="line"><span class="number">1.</span>转置transpose，或者T</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>，<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.transpose((<span class="number">1</span>,<span class="number">0</span>)))</span><br><span class="line"><span class="built_in">print</span>(arr.T)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>轴对换</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>，<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.swapaxes((<span class="number">0</span>,<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><h2 id="六-数组的索引和切片"><a href="#六-数组的索引和切片" class="headerlink" title="六. 数组的索引和切片"></a>六. 数组的索引和切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式arr[1:1:10,::1:20]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组的切片返回的是原始数据，并不会产生新的数据。</span></span><br><span class="line"><span class="string">可以使用copy方法实现</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">arr = np.array(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr1 = arr[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">arrr[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">3</span>)] <span class="comment"># 答案为：1，7 </span></span><br></pre></td></tr></table></figure><h2 id="七-数组的运算"><a href="#七-数组的运算" class="headerlink" title="七.数组的运算"></a>七.数组的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">一.数组和标量间的运算</span><br><span class="line">arr = np.array(<span class="number">4</span>)</span><br><span class="line">c = arr * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.ufunc函数:全称通用函数，针对数组进行操作，返回numpy数组，比math库效率高</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>常用的ufunc函数</span><br><span class="line">（<span class="number">1</span>）四则运算：+，-，*，/，**</span><br><span class="line">（<span class="number">2</span>）比较运算：&gt;,&lt;,!=,==</span><br><span class="line">（<span class="number">3</span>）逻辑运算：np.<span class="built_in">any</span>,np.<span class="built_in">all</span>相当于<span class="keyword">or</span>,<span class="keyword">and</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>ufunc函数的广播机制：广播指不同形状的数组之间执行算术运算。</span><br><span class="line">（<span class="number">1</span>）让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在左边加<span class="number">1</span>补齐。</span><br><span class="line">（<span class="number">2</span>）如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为<span class="number">1</span>的维度进行扩展，以匹配另一个数组的形状。</span><br><span class="line">（<span class="number">3</span>）输出数组的shape是输入数组shape的各个轴上的最大值。</span><br><span class="line">（<span class="number">4</span>）如果两个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度等于<span class="number">1</span>，则引发异常。</span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">arr2 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.条件逻辑运算</span><br><span class="line">语法：np.where(condition,x,y)</span><br><span class="line">满足条件输出x，否则y；若只有条件 (condition)，没有x和y，则输出满足条件元素的下标。</span><br><span class="line">w = np.array([<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">10</span>])</span><br><span class="line">np.where(w&gt;<span class="number">4</span>) <span class="comment"># 返回下标</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八-数组读写"><a href="#八-数组读写" class="headerlink" title="八.数组读写"></a>八.数组读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一.NumPy中读写二进制文件的方法有：</span><br><span class="line"><span class="number">1.</span> np.load(“文件名.npy<span class="string">&quot;)是从二进制文件中读取数据；</span></span><br><span class="line"><span class="string">2. np.save(“文件名[.npy]&quot;</span>, arr) 是以二进制格式保存数据。（很难使用其他语言读入）</span><br><span class="line"></span><br><span class="line">二. 读写文本文件</span><br><span class="line"><span class="number">1.</span> np.loadtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>,delimiter = <span class="string">&quot;,&quot;</span>)把文件加载到一个二维数组中；</span><br><span class="line"><span class="number">2.</span> np.savetxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, arr, fmt = <span class="string">&quot;%d&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是将数组写到某种分隔符隔开的文本文件中；</span><br><span class="line"><span class="number">3.</span> np.genfromtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是结构化数组和缺失数据。</span><br><span class="line">           </span><br><span class="line">       </span><br><span class="line">           </span><br><span class="line">三.读取CSV文件</span><br><span class="line">np.loadtxt(fname, dtype=, comments=’<span class="comment">#’, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=‘bytes’)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>fname</td><td>str，读取的CSV文件名</td></tr><tr><td>delimiter</td><td>str，数据的分割符</td></tr><tr><td>usecols</td><td>tuple(元组) ，执行加载数据文件中的哪些列</td></tr><tr><td>unpack</td><td>bool，是否将加载的数据拆分为多个组，True表示拆，False不拆</td></tr><tr><td>skipprows</td><td>int，跳过多少行，一般用于跳过前几行的描述性文字</td></tr><tr><td>encoding</td><td>bytes，编码格式</td></tr></tbody></table><h2 id="九-Numpy中的数据统计与分析"><a href="#九-Numpy中的数据统计与分析" class="headerlink" title="九.Numpy中的数据统计与分析"></a>九.Numpy中的数据统计与分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一.排序</span><br><span class="line">直接排序：</span><br><span class="line">Sort函数对数据直接进行排序，调用改变原始数组，无返回值。</span><br><span class="line">格式：numpy.sort(a, axis, kind, order) </span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>kind</td><td>排序算法，默认为“quicksort”</td></tr><tr><td>order</td><td>排序的字段名，可指定字段排序，默认为None</td></tr><tr><td>axis</td><td>使得sort函数可以沿着指定轴对数据集进行排序。axis&#x3D;1为沿横轴排序；axis&#x3D;0为沿纵轴排序；axis&#x3D;None,将数组平坦化之后进行排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">间接排序：</span><br><span class="line">np.argsort函数和np.lexsort函数根据一个或多个键值对数据集进行排序。</span><br><span class="line">np.argsort():  返回的是数组值从小到大的索引值;      </span><br><span class="line">np.lexsort():  返回值是按照最后一个传入数据排序的结果.</span><br></pre></td></tr></table></figure><h2 id="十-重复数据与去重"><a href="#十-重复数据与去重" class="headerlink" title="十.重复数据与去重"></a>十.重复数据与去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">一.对于一维数组或者列表，unique函数去除其中重复的元素，并按元素由大到小返回一个新的元组或者列表。</span><br><span class="line">names = np.array([<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>,<span class="string">&#x27;黄色&#x27;</span>,<span class="string">&#x27;白色&#x27;</span>,<span class="string">&#x27;红色&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>,names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重后的数组：&#x27;</span>,np.unique(names)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.统计分析中有时也需要把一个数据重复若干次，使用tile和repeat函数即可实现此功能。</span><br><span class="line">tile函数的格式：np.tile(A, reps)</span><br><span class="line">其中，参数A表示要重复的数组，reps表示重复次数。</span><br><span class="line"></span><br><span class="line">repeat函数的格式：np.repeat(A, reps, axis = <span class="literal">None</span>)</span><br><span class="line">“a”: 是需要重复的数组元素，</span><br><span class="line">“repeats”: 是重复次数</span><br><span class="line">“axis”: 指定沿着哪个轴进行重复，axis = <span class="number">0</span>表示按行进行元素重复；axis = <span class="number">1</span>表示按列进行元素重复。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.常用统计函数</span><br><span class="line">常见的有<span class="built_in">sum</span>、mean、std、var、<span class="built_in">min</span>和<span class="built_in">max</span>等。</span><br><span class="line">argmax索引最大</span><br><span class="line">cumsum累计和</span><br><span class="line">cumprod累计积</span><br><span class="line">log1plog(<span class="number">1</span>+p)</span><br></pre></td></tr></table></figure><h1 id="第四章-Pandas统计分析基础"><a href="#第四章-Pandas统计分析基础" class="headerlink" title="第四章 Pandas统计分析基础"></a>第四章 Pandas统计分析基础</h1><p> Pandas有三种数据结构：Series、DataFrame和Panel。</p><p>Series类似于一维数组；</p><p>DataFrame是类似表格的二维数组；</p><p>Panel可以视为Excel的多表单Sheet。</p><h2 id="一-Series"><a href="#一-Series" class="headerlink" title="一.Series"></a>一.Series</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Series 是一种一维数组对象，包含了一个值序列，并且包含了数据标签，称为索引（index），可通过索引来访问数组中的数据。</span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>Series的创建</span><br><span class="line">obj = pd.Series([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]) <span class="comment">#仅有一个数组构成</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建Series时指定索引</span><br><span class="line">i = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">v = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">t = pd.Series(v, index = i, name = <span class="string">&quot;col&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">尽管创建Series指定了index参数，实际Pandas还是有隐藏的index位置信息的。所以Series有两套描述某条数据的手段：位置和标签</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">val = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">idx1 = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">14</span>)</span><br><span class="line">idx2 = <span class="string">&#x27;hello the cruel world&#x27;</span>.split()</span><br><span class="line">s0 = pd.Series(val)</span><br><span class="line">s1 = pd.Series(val,index=idx1)</span><br><span class="line">t = pd.Series(val,index=idx2)</span><br><span class="line"><span class="built_in">print</span>(s0.index)</span><br><span class="line"><span class="built_in">print</span>(s1.index)</span><br><span class="line"><span class="built_in">print</span>(t.index)</span><br><span class="line"><span class="built_in">print</span>(s0[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>],t[<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过字典创建:如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series。</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj3 = pd.Series(sdata)</span><br><span class="line"><span class="built_in">print</span>(obj3)</span><br><span class="line">如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>键值和指定的索引不匹配</span><br><span class="line">sdata = &#123;<span class="string">&quot;a&quot;</span> : <span class="number">100</span>, <span class="string">&quot;b&quot;</span> : <span class="number">200</span>, <span class="string">&quot;e&quot;</span> : <span class="number">300</span>&#125;</span><br><span class="line">letter = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>  , <span class="string">&quot;e&quot;</span> ]</span><br><span class="line">obj =  pd.Series(sdata, index = letter)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>Series域重要的一个功能是：它在算术运算中会自动对齐不同索引的数据。</span><br><span class="line">不同索引数据的自动对齐</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj1 = pd.Series(sdata)</span><br><span class="line">states = [<span class="string">&#x27;California&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>]</span><br><span class="line">obj2 = pd.Series(sdata, index = states)</span><br><span class="line"><span class="built_in">print</span>(obj1+obj2) <span class="comment"># 实值 + 空值 = 空值</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>Series索引的修改</span><br><span class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">obj.index = [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Jeff&#x27;</span>, <span class="string">&#x27;Ryan&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-DataFrame"><a href="#二-DataFrame" class="headerlink" title="二.DataFrame"></a>二.DataFrame</h2><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">格式：pd.DataFrame(data=<span class="literal">None</span>, index=<span class="literal">None</span>, columns=<span class="literal">None</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DataFrame的创建</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:[<span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;male&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>:[<span class="number">2001</span>, <span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2002</span>],</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">DataFrame会自动加上索引（跟Series一样），且全部列会被有序排列。如果指定了列序列，则DataFrame的列就会按照指定顺序迸行排列。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>指定索引顺序：跟Series一样，如果传入的列在数据中找不到，就会产生NA值</span><br><span class="line">df1 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;city&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>DataFrame创建时指定列名</span><br><span class="line">DataFrame构造函数的columns函数给出列的名字，index给出label标签</span><br><span class="line">df3 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;city&#x27;</span>],index = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DataFrame的属性:</p><table><thead><tr><th><strong>函数</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td>values</td><td>元素</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>columns</td><td>列名</td></tr><tr><td>dtypes</td><td>类型</td></tr><tr><td>size</td><td>元素个数</td></tr><tr><td>ndim</td><td>维度数</td></tr><tr><td>shape</td><td>数据形状（行列数目）</td></tr></tbody></table><h2 id="三-索引对象"><a href="#三-索引对象" class="headerlink" title="三.索引对象"></a>三.索引对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>索引对象</span><br><span class="line"><span class="built_in">print</span>(df) </span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>DataFrame的Index</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> df.columns)</span><br><span class="line"><span class="built_in">print</span>(‘<span class="string">f&#x27; in df.index)</span></span><br></pre></td></tr></table></figure><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。Index的常用方法和属性：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>append</td><td>连接另一个Index对象，产生一个新的Index</td></tr><tr><td>diff</td><td>计算差集，并得到一个Index</td></tr><tr><td>intersection</td><td>计算交集</td></tr><tr><td>union</td><td>计算并集</td></tr><tr><td>isin</td><td>计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td>delete</td><td>删除索引i处的元素，并得到新的Index</td></tr><tr><td>drop</td><td>删除传入的值，并得到新的Index</td></tr><tr><td>insert</td><td>将元素插入到索引i处，并得到新的Index</td></tr><tr><td>is_monotonic</td><td>当各元素均大于等于前一个元素时，返回True</td></tr><tr><td>is.unique</td><td>当Index没有重复值时，返回True</td></tr><tr><td>unique</td><td>计算Index中唯一值的数组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>插入索引值</span><br><span class="line">df3.index.insert(<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p>DataFrame的基础属性有values、index、columns、dtypes、ndim和shape，分别可以获取DataFrame的元素、索引、列名、类型、维度和形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br><span class="line">df.columns</span><br></pre></td></tr></table></figure><h2 id="四-Pandas索引操作"><a href="#四-Pandas索引操作" class="headerlink" title="四.Pandas索引操作"></a>四.Pandas索引操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>重建索引</span><br><span class="line">重建索引是指对索引重新排序而不是重新命名，如果某个索引值不存在的话，会引入缺失值。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
