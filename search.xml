<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>幻想奇术师</title>
      <link href="/2023/11/04/3.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/"/>
      <url>/2023/11/04/3.%E6%97%A5%E5%B8%B8/1.%E9%80%BB%E8%BE%91%E6%80%9D%E8%80%83/1.%E5%B9%BB%E6%83%B3%E5%A5%87%E6%9C%AF%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是看了B站UP：幻想奇术师，之后的逻辑问题思考和记录。</p><h1 id="1-黑白帽子之题"><a href="#1-黑白帽子之题" class="headerlink" title="1.黑白帽子之题"></a>1.黑白帽子之题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV1Uz4y1p7uH/?vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">外星人谜题</a></p><p><strong>问题分析：</strong>在允许错误为一的情况下，只需要有一个特定的编码来传递信息即可。</p><p>现在将问题简单化：首先假设只有4个人，身高从高到低编号1~4（1号身高最高），帽子和人对应为：</p><p>1（黑），2（白），3（黑），4（黑）</p><p><strong>问题解答：</strong>将黑帽子为奇数定义为黑色</p><p><strong>step1：</strong>1号看见前面有2个黑帽子，所以1号说<strong>白色</strong>（1号错误，但条件允许出错一个）</p><p><strong>step2：</strong>2号明白1号前有偶数个黑帽子，自己看见是偶数，所以2号是白色（正确）</p><p><strong>step3：</strong>3号明白2号前有偶数个黑帽子，自己看见是奇数，所以3号是黑色（正确）</p><p><strong>step4：</strong>4号明白从3号回答，判断3号前有奇数个黑帽子，自己看见是0（偶数），所以1号是黑色（正确）</p><p>综上所述：白-白-黑-黑（只有第一位出错）</p><h1 id="2-绿眼睛谜题"><a href="#2-绿眼睛谜题" class="headerlink" title="2.绿眼睛谜题"></a>2.绿眼睛谜题</h1><p><strong>题目描述：</strong><a href="https://www.bilibili.com/video/BV16z4y1p7aW/?spm_id_from=333.337.search-card.all.click">绿眼睛谜题</a></p><p><strong>问题分析：</strong>问题简化：首先假设只有2个人，那么眼睛颜色不排列只组合的话，有3种情况：</p><p>红-红，红-绿，绿-绿</p><p>只需要排除：红-红，绿-绿，中的一个情况问题就解决了</p><p><strong>问题解答：</strong>你的回答是：你们之中至少有一个绿眼睛</p><p><strong>step1：</strong>红-红（通过这句话，可以直接排除掉）</p><p><strong>step2：</strong>红-绿。假设1（红），2（绿）。2号看见1号为红色，可以断定自己是绿色。1号暂时不能判断，需要等到第二天2号是否离开判断（step3解答）</p><p><strong>step3：</strong>绿-绿。</p><ul><li>第一天白天：1号看见2号为绿色，如果2号看见自己是红色，那么2号晚上必定离开。</li><li>第二天白天：1号看见了2号，可以判断2号看见1号是绿。同理2号看见了1号，可以判断1号看见2号是绿。两人知道自己是绿色</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本博客搭建</title>
      <link href="/2023/11/03/2.DIY/1.%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/11/03/2.DIY/1.%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/1.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的搭建方法有两种：</p><ol><li>hexo + gitee（国内，网页加载速度快）</li><li>hexo + github（国外，网页加载速度慢）</li></ol><p><strong>安装工具：</strong></p><ol><li><p><strong>node.js：</strong><a href="https://nodejs.org/">https://nodejs.org</a></p></li><li><p><strong>git：</strong><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>（官网下载比较慢）</p></li><li><p><strong>Typora：</strong>编辑网页文档使用的工具</p></li></ol><p>注意修改安装路径。</p><h1 id="方法一：hexo-gitee"><a href="#方法一：hexo-gitee" class="headerlink" title="方法一：hexo + gitee"></a>方法一：hexo + gitee</h1><p>推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>布置十分简单</p><p>服务器在国内，别人的访问自己的网页速度快。</p></li><li><p><strong>缺点：</strong></p><p>需要身份证验证（身份证正反面，手持身份证正反面），以及等待备案通过。</p></li></ul><h1 id="方法二：hexo-github"><a href="#方法二：hexo-github" class="headerlink" title="方法二：hexo + github"></a>方法二：hexo + github</h1><p>建议先看一遍：hexo + gitee 的推荐视频<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><ul><li><p><strong>优点：</strong></p><p>只需要有邮箱，不需要身份验证。</p></li><li><p><strong>缺点：</strong></p><p>服务器在国外，不使用加速器可能连自己都访问不了。</p></li></ul><p>推荐加速器：watt toolkit（微软商店可以下载，无毒，开源）</p><p><strong>接下来是正式搭建：</strong></p><p>在安装好node.js，git，Typora，watt toolkit（可选）之后，</p><ul><li><strong>环境检测：</strong></li></ul><ol><li><p>在任意位置新建hexo文件夹</p></li><li><p>右键 - 显示更多选项 - Open Git Bash here</p><p>输入：</p><p>node -v<br>npm -v（这个是node附带的）<br>git -v </p></li><li><p>输入</p><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo s</p></li></ol><ul><li><strong>搭建仓库</strong></li></ul><p>1.注册登入github（提示注册名字和创建好的网站名有关）：<a href="https://github.com/">https://github.com/</a></p><p>2.点击Create a new repository进入新建仓库页面</p><p>​GitHub: Let’s build from here</p><p>3.点击Create a new repository进入新建仓库页面</p><p>​仓库名输入：用户名.github.io(我已经试过了，必须是这种格式后面才能够访问)</p><p>​勾选Public</p><p>​勾选 Add a README file</p><p>​拉到下面点击create创建</p><ul><li><p><strong>生成SSH Keys</strong></p><p>1.在任意文件夹，右键 - Git bush here</p><p>2.输入：ssh-keygen -t rsa -C “邮件地址”</p><p>3.敲4次Enter</p><p>4.进入C:\Users\用户名，在里面进入.ssh文件</p><p>5.用记事本打开id_rsa.pub,全选复制</p><p>6.打开github，点击头像 - setting - 左边找到SSH相关字样 - new SSH keys，名称随意，在下面粘贴代码，然后创建</p><p>7.测试是否成功，在Git bush here中输入：ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#x63;&#x6f;&#109;</a>，回车，然后再输入yes</p></li><li><p><strong>本地生成博客内容</strong></p></li></ul><ol><li><p>关闭Git bush here，进入hexo,blog文件夹，右键打开Git bush here</p></li><li><p>输入：</p><p>hexo g<br>hexo s</p><p>然后会输出一个网址，该网址为本地网址（不能联网访问）</p></li></ol><ul><li><strong>上线博客</strong></li></ul><ol><li><p>进入blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><p> type: git<br> repository:<br> branch: main </p><p>（每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！）</p></li></ol><p>​    2.去github，在之前生成的仓库页面点code，复制https链接</p><p>​将其粘贴到我们记事本中的repository：后面</p><p>​然后保存退出</p><p>​3.在Git bush here中输入</p><p>​npm install hexo-deployer-git –save</p><p>​hexo g</p><p>​hexo d</p><p>​然后在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p>到这里我们就搭建好了自己的网站，</p><p>网址为：<strong>用户名.github.io</strong></p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>虽然，到现在网站已经搭建好了，但是博客的主题需要自己去hexo的官网探索，推荐视频：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.337.search-card.all.click&vd_source=bd0b10b1a89eeb70aae017bf4b5233c3">小宇Boi</a></p><p>下载好以后，就是个人博客的参数配置。每次配置完成在Git bush here中输入：</p><p>hexo clean  (清除以前网页初始化)</p><p>hexo g  (生成网页)</p><p>hexo d （上传网页到github）</p><p>hexo s  (本地运行网页)</p>]]></content>
      
      
      <categories>
          
          <category> DIY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark</title>
      <link href="/2023/11/03/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/7..Spark/"/>
      <url>/2023/11/03/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/7..Spark/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-大数据概述"><a href="#第一章-大数据概述" class="headerlink" title="第一章 大数据概述"></a>第一章 大数据概述</h1><h2 id="1-1-大数据的概述与关键技术"><a href="#1-1-大数据的概述与关键技术" class="headerlink" title="1.1 大数据的概述与关键技术"></a><strong>1.1</strong> 大数据的概述与关键技术</h2><h3 id="1-1-1-大数据的概念"><a href="#1-1-1-大数据的概念" class="headerlink" title="1.1.1 大数据的概念"></a>1.1.1 大数据的概念</h3><p>包含四个方面（4V）：</p><p>1.数据量大（volume）:T,P,E,Z,Y</p><p>2.数据类型繁多（variety）：结构化数据，非结构化数据</p><p>3.处理速度快（velocity）:1秒定律</p><p>4.价值密度低（value）</p><h3 id="1-1-2-大数据关键技术"><a href="#1-1-2-大数据关键技术" class="headerlink" title="1.1.2 大数据关键技术"></a>1.1.2 大数据关键技术</h3><p>大数据的基本流程：</p><p>1.数据采集与预处理：</p><p>2.数据存储和管理：</p><p>3.数据处理与分析：</p><p>4.数据可视化：</p><p>5.数据隐私和安全：</p><p>大数据两大核心技术：分布式存储、分布式处理</p><p>大数据计算模式：</p><table><thead><tr><th align="center">大数据计算模式</th><th align="center">解决问题</th><th align="center">代表产品</th></tr></thead><tbody><tr><td align="center"><strong>批处理计算</strong></td><td align="center">针对大规模数据的批量处理</td><td align="center">MapReduce、Spark等</td></tr><tr><td align="center"><strong>流计算</strong></td><td align="center">针对流数据的实时计算</td><td align="center">Flink、Storm、S4、Flume、Streams、Puma、DStream、Super Mario、银河流数据处理平台等</td></tr><tr><td align="center"><strong>图计算</strong></td><td align="center">针对大规模图结构数据的处理</td><td align="center">Pregrl,Grephx,Giraph,PowerGraph,Hama</td></tr><tr><td align="center"><strong>查询分析计算</strong></td><td align="center">大规模数据的存储管理和查询分析</td><td align="center">Dremel,Hive,Cassandra,Impala等</td></tr></tbody></table><h2 id="1-2-代表性大数据技术"><a href="#1-2-代表性大数据技术" class="headerlink" title="1.2 代表性大数据技术"></a>1.2 代表性大数据技术</h2><h3 id="1-2-1-Hadoop"><a href="#1-2-1-Hadoop" class="headerlink" title="1.2.1  Hadoop"></a>1.2.1  Hadoop</h3><p><img src="C:\Users\wuhen\AppData\Roaming\Typora\typora-user-images\image-20230918193738585.png" alt="image-20230918193738585"></p><p>1.HDFS:是Hadoop两大核心组成部分之一，提供了在服务器集群中进行大规模分布式文件存储的功能。</p><p>2.MapReduce:MapReduce将复杂的、运行于大规模集群上的并行计算过程高度地抽象到了两个函数：Map和Reduce</p><p>3.YARN:负责集群资源调度和管理的组件。</p><p>4.HBase:主要用来存储非结构化和半结构化的松散数据。</p><p>5.Hive:基于Hadoop的数据仓库工具，可用于对存储在Hadoop文件中的数据集进行数据整理、特殊查询和分析处理。</p><p>6.Flume:提供对数据进行简单处理并将其传输给各种数据接收方的功能。</p><p>7.Sqoop:用来在Hadoop和关系型数据库之间交换数据，可以改变数据的互操作性。</p><h3 id="1-2-2-Spark"><a href="#1-2-2-Spark" class="headerlink" title="1.2.2  Spark"></a>1.2.2  Spark</h3><p>Hadoop（MapReduce）存在如下一些缺点：</p><p>1.表达能力有限</p><p>2.磁盘IO开销大</p><p>3.延迟高</p><p>4.任务之间的衔接涉及IO开销</p><p>5.在前一个任务执行完成之前，其他任务就无法开始，难以胜任复杂、多阶段的计算任务</p><p>Spark优点：</p><p>1.多种数据集操作类型</p><p>2.编程模型更灵活</p><p>3.提供了内存计算</p><p>4.基于DAG的任务调度执行机制</p><p>Spark 作为计算框架，只是取代了Hadoop生态系统中的计算框架MapReduce，而Hadoop中的其他组件依然在企业大数据系统中发挥重要作用。</p><h3 id="1-2-3-Flink"><a href="#1-2-3-Flink" class="headerlink" title="1.2.3 Flink"></a>1.2.3 Flink</h3><p>Spark和Flink都是Apache软件基金会旗下的顶级项目，二者具有很多共同点，具体如下：</p><p>1.都是基于内存的计算框架，因此，都可以获得较好的实时计算性能；</p><p>2.都有统一的批处理和流处理APl，都支持类似SQL的编程接口；</p><p>3.都支持很多相同的转换操作，编程都是用类似于Scala Collection APl的函数式编程模式；</p><p>4.都有完善的错误恢复机制；</p><p>5.都支持“精确一次”（exactly once）的语义一致性。</p><h3 id="1-2-4-Beam（略）"><a href="#1-2-4-Beam（略）" class="headerlink" title="1.2.4 Beam（略）"></a>1.2.4 Beam（略）</h3><h2 id="1-3-问答"><a href="#1-3-问答" class="headerlink" title="1.3 问答"></a>1.3 问答</h2><p>Scala是一门类似Java的多范式语言，它整合了面向对象编程和函数式编程的最佳特性：</p><p>1.Scala具备强大的并发性，支持函数式编程，可以更好地支持分布式系统。</p><p>2.Scala兼容Java，可以与Java互操作。</p><p>3.Scala代码简洁优雅。</p><p>4.Scala支持高效的交互式编程。</p><p>5.Scala是Spark的开发语言。</p><p>问题：开发Spark程序应该使用什么编程语言？</p><p>开发Spark应用程序时，可以采用Scala、Python、Java和R等语言，首选语言是Scala，因为Spark这个软件本身就是使用Scala语言开发的，采用Scala语言编写Spark应用程序，可以获得最好的性能。</p><p>关于采用哪种语言编写Spark应用程序，这里强调两点：</p><p>（1）Java代码太繁琐。在大数据应用场景中，不太适合使用Java，因为，完成同样的任务，Scala只需要一行代码，而Java则可能需要10行代码；而且，Scala语言可以支持交互式编程，大大提高了程序开发效率，而Java则不支持交互式执行，必须编译以后运行。</p><p>（2）Python语言并发性能不好。在并发性能方面，Scala要明显优于</p><p>Python，而且，Scala是静态类型，可以在编译阶段就抛出错误，便于开发大型大数据项目，此外，Scala兼容Java，运行在JVM上，可以直接使用Java中的Hadoop API来和Hadoop进行交互，但是，Python与Hadoop之间的交互非常糟糕，通常都需要第三方库（比如hadoopy）。</p><h1 id="第二章-Scala语言基础"><a href="#第二章-Scala语言基础" class="headerlink" title="第二章 Scala语言基础"></a>第二章 Scala语言基础</h1><h2 id="2-1-Scala语言基础"><a href="#2-1-Scala语言基础" class="headerlink" title="2.1 Scala语言基础"></a>2.1 Scala语言基础</h2><p><strong>可变长参数：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(a:<span class="type">Int</span>*):<span class="type">Int</span>=&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-1-Scala简介"><a href="#2-1-1-Scala简介" class="headerlink" title="2.1.1 Scala简介"></a>2.1.1 Scala简介</h3><p>Scala是一门以Java虚拟机（JVM）为运行环境并将面向对象和函数式编程的最佳特性结合在一起的静态类型编程语言。（静态语言需要提前编译）</p><p>1.Scala是一门多范式的编程语言，Scala支持面向对象和函数式编程。（多范式：多种编程方法的意思。有面向过程，面向对象，泛型，函数式等）</p><p>2.Scala源代码（.Scala）会被编译成Java字节码（.class），然后运行于JVM之上，并可以调用现有的Java类库，实现两种语言的无缝对接。</p><p>3.Scala作为一门语言来看，非常的简洁高效。</p><h2 id="2-2-Scala基础知识"><a href="#2-2-Scala基础知识" class="headerlink" title="2.2 Scala基础知识"></a>2.2 Scala基础知识</h2><h3 id="2-2-1-注释："><a href="#2-2-1-注释：" class="headerlink" title="2.2.1 注释："></a>2.2.1 注释：</h3><p>1.&#x2F;&#x2F;</p><p>2.&#x2F;**&#x2F;</p><p>3.&#x2F;**</p><p>​*&#x2F;</p><h3 id="2-2-2-常量和变量"><a href="#2-2-2-常量和变量" class="headerlink" title="2.2.2 常量和变量"></a>2.2.2 常量和变量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> 常量名 [:常量类型] = 初始值</span><br><span class="line"><span class="keyword">val</span> i:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 [:变量类型] = 初始值</span><br><span class="line"><span class="keyword">var</span> j:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">注意：能用常量的地方不用变量</span><br></pre></td></tr></table></figure><p>变量：类型推断机制，根据初始值自动推断变量的类型。</p><h3 id="2-2-3-标识符的命名规范"><a href="#2-2-3-标识符的命名规范" class="headerlink" title="2.2.3 标识符的命名规范"></a>2.2.3 标识符的命名规范</h3><p>标识符：对各种变量、方法、函数等命名时使用的字符序列称为标识符。</p><p>1.字母、下划线、数字。（数字不能开头）</p><p>2.以操作符开头（+-*&#x2F;#！等）</p><p>3.用反引号包括的任意字符串。·if·</p><h3 id="2-2-4-数据类型"><a href="#2-2-4-数据类型" class="headerlink" title="2.2.4 数据类型"></a>2.2.4 数据类型</h3><p>Byte、Char、Short、Int、Long、Float、Double、String和Boolean（注意首字母大写）</p><p>1.一切结对象，都是Any的子类。</p><p>2.两大数据类型：数值类型（AnyVal）,引用类型（AnyRef）</p><p>3.低精度向高精度自动转换（隐式转换）</p><p>4.Scala的StringOps是对Java中的String增强</p><p>5.Unit：对应Java的void，用于方法返回值的位置；Unit是一个数据类型，只有一个对象就是（）。void是关键字，不是数据类型。</p><p>6.Null：是一个数据类型，只有一个对象null。他是所有引用类型（AnyRef）的子类。</p><p>7.Nothing：是所有数据类型的子类，主要在一个函数没有明确返回值时使用，因为这样我们可以把抛出的返回值(异常)，赋值给任何的变量或函数（兼容性）。</p><p>![屏幕截图 2023-09-20 173801](C:\Users\wuhen\AppData\Roaming\Typora\typora-user-images\屏幕截图 2023-09-20 173801.png)</p><h3 id="2-2-5-字符串输出"><a href="#2-2-5-字符串输出" class="headerlink" title="2.2.5 字符串输出"></a>2.2.5 字符串输出</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三种字符出输出形式</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">18</span></span><br><span class="line">    <span class="comment">//1.字符串用+连接</span></span><br><span class="line">    println(name + <span class="string">&quot;今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>)</span><br><span class="line">    <span class="comment">//2.通过%传值</span></span><br><span class="line">    printf(<span class="string">&quot;%s今年%d岁\n&quot;</span>,name,age)</span><br><span class="line">    <span class="comment">//3.通过$获取变量值</span></span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//三个引号表示字符串保持多行字符串的原格式输出</span></span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |name = $&#123;name&#125;</span></span><br><span class="line"><span class="string">       |age = $&#123;age&#125;</span></span><br><span class="line"><span class="string">       |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字面量：用户不指定变量类型的情况下，系统默认把变量定位某种类型。123，整数字面量。</p><h3 id="2-2-6-Unit、Null、Nothing代码实现"><a href="#2-2-6-Unit、Null、Nothing代码实现" class="headerlink" title="2.2.6 Unit、Null、Nothing代码实现"></a>2.2.6 Unit、Null、Nothing代码实现</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.返回值是空值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m1</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;m1被调用&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> a:<span class="type">Unit</span> = m1()</span><br><span class="line">    println(<span class="string">s&quot;a = <span class="subst">$&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//2.空引用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">var name:<span class="type">String</span>,var age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="type">Student</span>(name = <span class="string">&quot;xiaoming&quot;</span>,age = <span class="number">20</span>)</span><br><span class="line">    student = <span class="literal">null</span></span><br><span class="line">    println(student)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//3.nothing,当函数可能抛出异常时，可以定义返回类型是nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m2</span></span>():<span class="type">Nothing</span>=&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">    m2()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：</span></span><br><span class="line"><span class="comment">• 定义一个函数，含有一个整数输入参数</span></span><br><span class="line"><span class="comment">• 假设输入的整数为0，抛出NullPointerException异常</span></span><br><span class="line"><span class="comment">• 如果整数为其他，则输出该整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(a:<span class="type">Int</span>): <span class="type">Int</span> =&#123;</span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NullPointerException</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> b = fun(<span class="number">5</span>)</span><br><span class="line">    println(b)</span><br><span class="line">    <span class="keyword">val</span> c = fun(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-输入输出"><a href="#2-3-输入输出" class="headerlink" title="2.3 输入输出"></a>2.3 输入输出</h2><h3 id="2-3-1-控制台输入输出语句"><a href="#2-3-1-控制台输入输出语句" class="headerlink" title="2.3.1 控制台输入输出语句"></a>2.3.1 控制台输入输出语句</h3><p>1.从控制台读入数据方法：readInt、readDouble、readByte、readShort、readFloat、readLong、readChar、readBoolean及readLine，分别对应9种基本数据类型，其中前8种方法没有参数，readLine可以不提供参数，也可以带一个字符串参数的提示</p><p>2.所有这些函数都属于对象scala.io.StdIn的方法，使用前必须导入，或者直接用全称进行调用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入用例</span></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    print(<span class="string">&quot;姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> name = <span class="type">StdIn</span>.readLine()</span><br><span class="line">    print(<span class="string">&quot;年龄：&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> age = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    println(<span class="string">s&quot;hello,<span class="subst">$&#123;name&#125;</span>,你今年<span class="subst">$&#123;age&#125;</span>岁了&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-读写文件"><a href="#2-3-2-读写文件" class="headerlink" title="2.3.2 读写文件"></a>2.3.2 读写文件</h3><p><strong>一、读取文件</strong></p><p>可以使用scala.io.Source的fromFlie方法实现对文件中所有行的读取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    fromFile是读取文件，读出来后需要在控制台一行一行显示</span></span><br><span class="line"><span class="comment">    所以用foreach语句一行一行的输出，传入print函数作为</span></span><br><span class="line"><span class="comment">    foreach的参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">Source</span>.fromFile(<span class="string">&quot;D:\\cesi.txt&quot;</span>).foreach(print())</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二、写文件</strong></p><p>Scala需要使用java.io.PrintWriter实现把数据写入到文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span></span><br><span class="line"><span class="keyword">import</span> scala.reflect.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建输出流对象</span></span><br><span class="line">    <span class="keyword">val</span> writer = <span class="keyword">new</span> <span class="type">PrintWriter</span>()(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;D:\\shuchu.txt&quot;</span>))</span><br><span class="line">    <span class="comment">//操作流，写入数据</span></span><br><span class="line">    writer.write(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    writer.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-强制类型转换"><a href="#2-4-强制类型转换" class="headerlink" title="2.4 强制类型转换"></a>2.4 强制类型转换</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用强制转换函数</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="type">Int</span> = <span class="number">2.7</span>.toInt</span><br></pre></td></tr></table></figure><h2 id="2-5-操作符"><a href="#2-5-操作符" class="headerlink" title="2.5 操作符"></a>2.5 操作符</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span> + <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> num2 = (<span class="number">5</span>).+(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//num1与num2等价</span></span><br></pre></td></tr></table></figure><p>&amp;&amp;，||，！（没有++，–）</p><h2 id="2-6-控制结构"><a href="#2-6-控制结构" class="headerlink" title="2.6 控制结构"></a>2.6 控制结构</h2><p>1.if 条件表达式</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scala中的if表达式的值可以赋值给变量</span></span><br><span class="line"><span class="keyword">val</span> i = <span class="number">6</span></span><br><span class="line"><span class="keyword">val</span> a = <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>2.while循环，do-while循环</p><p>3.for循环</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本语法：</span></span><br><span class="line"><span class="comment">for (变量 &lt;- 表达式) &#123;语句块&#125;</span></span><br><span class="line"><span class="comment">其中，“变量&lt;-表达式”被称为“生成器（generator）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">to[ ]</span></span><br><span class="line"><span class="comment">until[ )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span> by <span class="number">2</span> <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span>;j &lt;- <span class="number">1</span> until <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>for</strong>推导式：for结构可以在每次执行的时候创造一个值，然后将包含了所有产生值的集合作为for循环表达式的结果返回，集合的类型由生成器中的集合类型确定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span> (变量 &lt;- 表达式) <span class="keyword">yield</span> &#123;语句块&#125;</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="keyword">val</span> a = <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span>) <span class="keyword">yield</span> &#123;</span><br><span class="line">        println(i)</span><br><span class="line">        i*i</span><br><span class="line">      &#125;</span><br><span class="line">println(a)</span><br></pre></td></tr></table></figure><p>4.异常处理</p><p>使用try-catch结构来捕获异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileReader</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileNotFoundException</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>)</span><br><span class="line">      <span class="comment">// 文件操作</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt;</span><br><span class="line">        <span class="comment">// 文件不存在时的操作</span></span><br><span class="line">        <span class="keyword">case</span> ex: <span class="type">IOException</span> =&gt;</span><br><span class="line">        <span class="comment">// 发生I/O错误时的操作</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      file.close() <span class="comment">// 确保关闭文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.对循环控制</p><p>（1）Scala没有break和continue关键字，但提供了一个Breaks类（位于包scala.util.control）。Breaks类有两个方法用于对循环结构进行控制，即breakable和break。</p><p>（2）将需要控制的语句块作为参数放在breakable后面，然后，其内部在某个条件满足时调用break方法，程序将跳出breakable方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">breakable&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(...) <span class="keyword">break</span></span><br><span class="line">... &#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> util.control.<span class="type">Breaks</span>._ <span class="comment">//导入Breaks类的所有方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    breakable&#123;</span><br><span class="line">      <span class="keyword">for</span>(i &lt;- array)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">5</span>) <span class="keyword">break</span> <span class="comment">//跳出breakable，终止for循环，相当于Java中的break</span></span><br><span class="line">        println(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 上面的for语句将输出1，3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i &lt;- array)&#123;</span><br><span class="line">      breakable&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">5</span>) <span class="keyword">break</span></span><br><span class="line">        <span class="comment">//跳出breakable，终止当次循环，相当于Java的continue</span></span><br><span class="line">        println(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="comment">// 上面的for语句将输出1，3，5，4</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-7-函数式编程"><a href="#2-7-函数式编程" class="headerlink" title="2.7 函数式编程"></a>2.7 函数式编程</h2><h3 id="2-7-1-函数的定义与使用"><a href="#2-7-1-函数的定义与使用" class="headerlink" title="2.7.1 函数的定义与使用"></a>2.7.1 函数的定义与使用</h3><p>定义函数最通用的方法是作为某个类或者对象的成员，这种函数被称为方法，语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">        x</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.函数是一个变量，可以赋值给变量</span></span><br><span class="line"><span class="comment">//2.类似于方法，函数也有参数列表和返回值</span></span><br><span class="line"><span class="comment">//3.函数定义不需要使用def定义</span></span><br><span class="line"><span class="comment">//4.无需指定返回值类型</span></span><br><span class="line"><span class="keyword">val</span> a = (x:<span class="type">Int</span> , y:<span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) x</span><br><span class="line">    <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数式编程中，函数是“头等公民” ，可以像任何其他数据类型一样被传递和操作</p><h3 id="2-7-2-匿名函数（函数字面量）"><a href="#2-7-2-匿名函数（函数字面量）" class="headerlink" title="2.7.2 匿名函数（函数字面量）"></a>2.7.2 匿名函数（函数字面量）</h3><p>1.参数的类型可以省略，会根据形参自动推导</p><p>2.只有一个参数可省略圆括号</p><p>3.匿名函数只有一行，可省略花括号</p><p>4.参数只是用了一次，可以省略参数，用_代替</p><p>5.可以推断传入println函数体，而不是调用，可以直接传入函数本身</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">var</span> f = (name:<span class="type">String</span>) =&gt; &#123;</span><br><span class="line">    println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.参数的类型可以省略，会根据形参自动推导</span></span><br><span class="line">f = (name) =&gt; &#123;println(name)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///2.只有一个参数可省略圆括号</span></span><br><span class="line">f = name =&gt; &#123;println(name)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.匿名函数只有一行，可省略花括号</span></span><br><span class="line">f = name =&gt; println(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.参数只是用了一次，可以省略参数，和=&gt;，用_代替</span></span><br><span class="line">f = println(_)</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.可以推断传入println函数体，而不是调用，可以直接传入函数本身</span></span><br><span class="line">f = println</span><br><span class="line"></span><br><span class="line">f(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用时</span></span><br><span class="line"><span class="keyword">var</span> f2:<span class="type">Any</span> =&gt;<span class="type">Unit</span> = println</span><br><span class="line">f2(<span class="string">&quot;3&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7-3-高阶函数"><a href="#2-7-3-高阶函数" class="headerlink" title="2.7.3 高阶函数"></a>2.7.3 高阶函数</h3><p>高阶函数：当一个函数包含其它函数作为其参数或者返回结果为一个函数时，该函数被称为高阶函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例：假设需要分别计算从一个整数到另一个整数的“连加和” 、“平方和”以及“<span class="number">2</span>的幂次和”</span><br><span class="line"></span><br><span class="line">方案一：不采用高阶函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powerOfTwo</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span> * powerOfTwo(x<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumInts</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> a + sumInts(a + <span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumSquares</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> a*a + sumSquares(a + <span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumPowersOfTwo</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> powerOfTwo(a) + sumPowersOfTwo(a+<span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案二：采用高阶函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &gt; b) <span class="number">0</span> <span class="keyword">else</span> f(a) + sum(f, a+<span class="number">1</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b = sum(x=&gt;x,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    println(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span> </span>=(name:<span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      println(name + <span class="string">&quot;\n这是func1函数&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(func:<span class="type">String</span> =&gt; <span class="type">Unit</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      func(<span class="string">&quot;调用func函数&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">f(func1)</span><br></pre></td></tr></table></figure><h3 id="2-7-4-闭包"><a href="#2-7-4-闭包" class="headerlink" title="2.7.4 闭包"></a>2.7.4 闭包</h3><p>闭包：当函数的执行依赖于声明在函数外部的一个或多个变量时。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> more = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> addmore = (x:<span class="type">Int</span>)=&gt;x + more</span><br><span class="line"><span class="keyword">var</span> num01 = addmore(<span class="number">5</span>)</span><br><span class="line">more = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num02 = addmore(<span class="number">5</span>)</span><br><span class="line">println(num01,num02)</span><br></pre></td></tr></table></figure><h3 id="2-7-5-偏应用函数和Curry化"><a href="#2-7-5-偏应用函数和Curry化" class="headerlink" title="2.7.5 偏应用函数和Curry化"></a>2.7.5 偏应用函数和Curry化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>偏应用函数：通过保留已知函数的部分参数来生成的新函数.</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>,c:<span class="type">Int</span>) = a + b + c</span><br><span class="line"><span class="keyword">val</span> a = sum(<span class="number">1</span>,_,_)</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">println(a(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">println(a(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">Curry</span>化：是指带有多个参数列表且每个参数列表只包含一个参数的函数。</span><br><span class="line">可以通过调用函数对象的curried方法，将一个普通多参数函数转化成一个<span class="type">Curry</span>化的函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> plain = (x:<span class="type">Int</span>,y:<span class="type">Int</span>) =&gt; x * y</span><br><span class="line"><span class="keyword">val</span> curried1 = plain.curried</span><br><span class="line">plain(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">curried1(<span class="number">2</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> a = curried1(<span class="number">2</span>)</span><br><span class="line">println(plain(<span class="number">2</span>,<span class="number">5</span>),curried1(<span class="number">2</span>)(<span class="number">5</span>),a(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>)(z:<span class="type">Int</span>) = x * y * z</span><br><span class="line">    <span class="keyword">val</span> add1 = add(<span class="number">2</span>) _</span><br><span class="line">    <span class="keyword">val</span> add2 = add1(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> add3 = add2(<span class="number">4</span>)</span><br><span class="line">    println(add3)</span><br></pre></td></tr></table></figure><h3 id="2-7-6-函数综合应用"><a href="#2-7-6-函数综合应用" class="headerlink" title="2.7.6 函数综合应用"></a>2.7.6 函数综合应用</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>函数作为值传递</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(n:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    print(<span class="string">&quot;f调用&quot;</span>)</span><br><span class="line">    n+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = f(<span class="number">123</span>)</span><br><span class="line"><span class="comment">//f1接受一个函数而不是接受函数的返回值，函数是可以作为值传递</span></span><br><span class="line"><span class="keyword">val</span> f1:<span class="type">Int</span> =&gt; <span class="type">Int</span> = f</span><br><span class="line"><span class="comment">//假设f是一个函数整体，而不是调用，可在f后面打一个空格加下划线</span></span><br><span class="line"><span class="keyword">val</span> f2 = f _ <span class="comment">//将方法转换成函数</span></span><br><span class="line">println(f1)</span><br><span class="line">println(f2)</span><br><span class="line">println(fi(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>函数可以作为输入参数</span><br><span class="line"><span class="number">3.</span>函数作为返回值返回</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span></span>():<span class="type">Int</span> =&gt; <span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f4</span></span>(a:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">        println(<span class="string">&quot;f4调用了&quot;</span>+a)</span><br><span class="line">    &#125;</span><br><span class="line">    f4 _</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> f5 = f3()</span><br><span class="line">println(f5)</span><br><span class="line">println(f5(<span class="number">123</span>))</span><br><span class="line">println(f3()(<span class="number">123</span>))</span><br></pre></td></tr></table></figure><h2 id="2-8-面向对象编程基础"><a href="#2-8-面向对象编程基础" class="headerlink" title="2.8 面向对象编程基础"></a>2.8 面向对象编程基础</h2><h3 id="2-8-1类"><a href="#2-8-1类" class="headerlink" title="2.8.1类"></a>2.8.1类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>类的定义</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line"><span class="comment">//这里定义类的字段和方法</span></span><br><span class="line">    字段定义：<span class="keyword">var</span> 或者 <span class="keyword">val</span></span><br><span class="line">    方法定义：<span class="function"><span class="keyword">def</span> <span class="title">方法名</span></span>(参数列表):返回结果类型=&#123;方法体&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">lianxi2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> mycounter = <span class="keyword">new</span> counter</span><br><span class="line">    mycounter.value = <span class="number">5</span></span><br><span class="line">    mycounter.increment(<span class="number">3</span>)<span class="comment">//调用方法</span></span><br><span class="line">    println(mycounter.current)<span class="comment">//调用无参方法的时候可以省略括号</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increment</span></span>(step:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;value += step&#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>():<span class="type">Int</span> = &#123;value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 类成员的可见性</span><br><span class="line"></span><br><span class="line"><span class="type">Scala</span>类中所有成员的默认可见性为公有，任何作用域内都能直接访问公有成员。</span><br><span class="line">除了默认的公有可见性，<span class="type">Scala</span>也提供<span class="keyword">private</span>和<span class="keyword">protected</span>，其中，<span class="keyword">private</span>成员只对本类型和嵌套类型可见；<span class="keyword">protected</span>成员对本类型和其继承类型都可见</span><br><span class="line"></span><br><span class="line">对于<span class="keyword">private</span>字段，<span class="type">Scala</span>采用类似<span class="type">Java</span>中的getter和setter方法，定义了两个成对的方法value和value_进行读取和修改</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> privatevalue = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value</span> </span>= privatevalue</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value_</span> </span>= (newvalue:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(newvalue &gt; <span class="number">0</span>) privatevalue = newvalue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increment</span></span>(step:<span class="type">Int</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    value += step</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current</span></span>():<span class="type">Int</span> = &#123;value&#125;</span><br><span class="line">&#125;</span><br><span class="line">注：<span class="type">Scala</span>语法中有如下规范，当编译器看到以value和value_=这种成对形式出现的方法时，它允许用户去掉下划线_，而采用类似赋值表达式的形式myCounter.value= <span class="number">3</span> <span class="comment">// 等效于myCounter.value_=(3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 方法的定义方式</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>match使用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(num:<span class="type">Int</span>) :<span class="type">Int</span> = &#123;</span><br><span class="line">      num <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> i <span class="keyword">if</span> i &gt;= <span class="number">0</span> =&gt; i</span><br><span class="line">        <span class="keyword">case</span> i <span class="keyword">if</span> i &lt; <span class="number">0</span> =&gt; -i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(abs(<span class="number">67</span>))</span><br><span class="line">    println(abs(<span class="number">0</span>))</span><br><span class="line">    println(abs(<span class="number">-50</span>))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种定义</span></span><br><span class="line"><span class="keyword">var</span> arrr1 = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>)</span><br><span class="line">arrr1(<span class="number">0</span>) = <span class="number">100</span></span><br><span class="line">println(arrr1(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义</span></span><br><span class="line"><span class="keyword">var</span> array2 = <span class="type">Array</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line">println(array2.length)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变长数组</span></span><br><span class="line"><span class="keyword">val</span> arr3 = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">val</span> arr4 = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变长数组应用</span></span><br><span class="line"><span class="keyword">var</span> arr01 = <span class="type">ArrayBuffer</span>(<span class="string">&quot;hadoop&quot;</span>,<span class="string">&quot;spark&quot;</span>,<span class="string">&quot;flink&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//变长数组中添加一个元素</span></span><br><span class="line">arr01 += <span class="string">&quot;flume&quot;</span></span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//删除一个元素</span></span><br><span class="line">arr01 -= <span class="string">&quot;hadoop&quot;</span></span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//增加一个数组</span></span><br><span class="line">arr01 ++= <span class="type">Array</span>(<span class="string">&quot;hive&quot;</span>,<span class="string">&quot;sqoop&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"><span class="comment">//删除一个数组</span></span><br><span class="line">arr01 --= <span class="type">Array</span>(<span class="string">&quot;sqoop&quot;</span>,<span class="string">&quot;spark&quot;</span>)</span><br><span class="line">println(arr01)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">0</span> until arr01.length)&#123;</span><br><span class="line">    println(arr01(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接获取</span></span><br><span class="line"><span class="keyword">for</span>(i &lt;- arr01)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组</span></span><br><span class="line"><span class="keyword">var</span> tuple1 = <span class="string">&quot;zhangsan&quot;</span> -&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元组获取元素</span></span><br><span class="line">println(tuple1._1)</span><br><span class="line">println(tuple1._2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it = tuple1.productIterator</span><br><span class="line"><span class="keyword">for</span> (i &lt;- it)&#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> it = list1.iterator</span><br><span class="line"><span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">    println(it.next())</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;-&quot;</span> * <span class="number">15</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析与可视化</title>
      <link href="/2023/11/02/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/11.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/11/02/1.%E8%AE%A1%E7%AE%97%E6%9C%BA/2.%E5%A4%A7%E6%95%B0%E6%8D%AE/11.Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-数据分析与可视化概述"><a href="#第一章-数据分析与可视化概述" class="headerlink" title="第一章 数据分析与可视化概述"></a>第一章 数据分析与可视化概述</h1><h1 id="第二章-python编程基础"><a href="#第二章-python编程基础" class="headerlink" title="第二章 python编程基础"></a>第二章 python编程基础</h1><ol><li>不可变数据类型：number 、string、tuple</li><li>变数据类型：list、dictionary 、set</li></ol><h1 id="第三章-NumPy数值计算基础"><a href="#第三章-NumPy数值计算基础" class="headerlink" title="第三章 NumPy数值计算基础"></a>第三章 NumPy数值计算基础</h1><p>NumPy是Python的一种开源的数值计算扩展库。</p><p>它提供了两种基本的对象：</p><ol><li>ndarray：是储存单一数据类型的多维数组。</li><li>ufunc：是一种能够对数组进行处理的函数。</li></ol><p>ndarray是一个通用的同构数据容器，即其中的所有元素都需要相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i : int8,int16,int32,int64</span><br><span class="line">f : float16,float32,float64</span><br><span class="line">复数 ： complex64,complex64</span><br><span class="line">u : unicode编码</span><br><span class="line">s : 固定字符串长度</span><br><span class="line">b : <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h2 id="一-array函数创建数组对象"><a href="#一-array函数创建数组对象" class="headerlink" title="一. array函数创建数组对象"></a>一. array函数创建数组对象</h2><p>array函数的格式：np.array(object, dtype,ndmin)</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>接收array，表示想要创建的数组</td></tr><tr><td>dtype</td><td>接收data-type，表示数组所需的数据类型，未给定则选择保存对象所需的最小类型，默认为None</td></tr><tr><td>ndmin</td><td>接收int，制定生成数组应该具有的最小维数，默认为None</td></tr></tbody></table><p>注：在创建数组时，NumPy会为新建的数组推断出一个合适的数据类型，并保存在dtype中。</p><h2 id="二-专门创建数组的函数"><a href="#二-专门创建数组的函数" class="headerlink" title="二. 专门创建数组的函数"></a>二. 专门创建数组的函数</h2><p>1.arange函数：创建等差一维数组格式：np.arange([start, ]stop, [step, ]dtype)</p><p>2.linspace 函数：创建等差一维数组，接收元素数量作为参数。格式：np.linspace(start, stop, num, endpoint, retstep&#x3D;False, dtype&#x3D;None)</p><table><thead><tr><th><strong>参数</strong>名称</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>start:</td><td>起始值，默认从0开始;</td></tr><tr><td>stop:</td><td>结束值；生成的元素不包括结束值；</td></tr><tr><td>num</td><td>要生成的等间隔样例数量</td></tr></tbody></table><p>3.logspace函数：创建等比一维数组格式：np.logspace(start, stop, num, endpoint&#x3D;True, base&#x3D;10.0, dtype&#x3D;None))</p><p>logspace的参数中，start, stop代表的是10的幂,默认基数base为10，第三个参数元素个数。</p><p>4.zeros函数：创建指定长度或形状的全0数组格式：np.zeros(shape, dtype&#x3D;float, order&#x3D;’C’)</p><p>5.ones函数：创建指定长度或形状的全1数组格式：np. ones(shape, dtype&#x3D;None, order&#x3D;’C’)</p><p>6.diag函数：创建一个对角阵。格式：np.diag(v, k&#x3D;0)</p><p>此外，使用eye函数可创建一个对角线为 1 其他位置全为 0 的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一.</span><br><span class="line">num = np.array(data,dtype = <span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">二.</span><br><span class="line"><span class="number">1.</span></span><br><span class="line">num = np.arange(<span class="number">10</span>)</span><br><span class="line">warray = np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>)</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">warry = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">warry = np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)//生成<span class="number">1</span>-<span class="number">10</span>的<span class="number">5</span>个等比元素</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">num = np.zeros(<span class="number">4</span>)</span><br><span class="line"><span class="number">5.</span></span><br><span class="line">num = np.ones(<span class="number">4</span>)</span><br><span class="line"><span class="number">6.</span></span><br><span class="line">num = np.diag(data,k=<span class="number">0</span>)</span><br><span class="line">num = np.eye(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-ndarray对象属性和数据转换"><a href="#三-ndarray对象属性和数据转换" class="headerlink" title="三. ndarray对象属性和数据转换"></a>三. ndarray对象属性和数据转换</h2><p>NumPy创建的 ndarray对象属性及其说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>ndim</td><td>返回数组的轴的个数</td></tr><tr><td>shape</td><td>返回数组的维度</td></tr><tr><td>size</td><td>返回数组元素个数</td></tr><tr><td>dtype</td><td>返回数据类型</td></tr><tr><td>itemsize</td><td>返回数组中每个元素的字节大小</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">warray = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;秩为：&#x27;</span>,warray.ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;形状为：&#x27;</span>,warray.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;元素个数为：&#x27;</span>,warray.size)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">&#x27;设置数组的shape属性。&#x27;</span></span><br><span class="line">warray.shape = <span class="number">3</span>,<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(warray)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">&#x27;数组的类型转换&#x27;</span></span><br><span class="line">arr1 = np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.dtype)</span><br><span class="line">arr2 = arr1.astype(np.float64)</span><br><span class="line"><span class="built_in">print</span>(arr2.dtype)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四-生成随机数"><a href="#四-生成随机数" class="headerlink" title="四. 生成随机数"></a>四. 生成随机数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NumPy.random模块中，提供了多种随机数的生成函数。如randint函数生成指定范围的随机整数来构成指定形状的数组。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>用法：np.random.randint(low, high = <span class="literal">None</span>, size = <span class="literal">None</span>)</span><br><span class="line">arr = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,size = (<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>生成[<span class="number">0</span>,<span class="number">1</span>]之间的随机数组。</span><br><span class="line">arr1 = np.random.rand(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2 = np.random.rand(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>random模块的常用随机数生成函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>seed</td><td>确定随机数生成器的种子</td></tr><tr><td>permutation</td><td>返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td>shuffle</td><td>对一个序列进行随机排序</td></tr><tr><td>binomial</td><td>产生二项分布的随机数</td></tr><tr><td>normal</td><td>产生正态（高斯）分布的随机数</td></tr><tr><td>beta</td><td>产生beta分布的随机数</td></tr><tr><td>chisquare</td><td>产生卡方分布的随机数</td></tr><tr><td>gamma</td><td>产生gamma分布的随机数</td></tr><tr><td>uniform</td><td>产生在[0,1)中均匀分布的随机数</td></tr></tbody></table><h2 id="五-数组变换"><a href="#五-数组变换" class="headerlink" title="五. 数组变换"></a>五. 数组变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">数组重塑:数据重塑不会改变原来的数组</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">对于定义好的数组，可以通过reshape方法改变其数据维度。</span><br><span class="line">格式：np.reshape(data, newshape, order=<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">data需要处理的数据。</span><br><span class="line">newshape新维度——整数或整数元组，</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#reshape的参数中的其中一个可以设置为-1，表示数组的维度可以通过数据本身来推断。</span></span><br><span class="line">data = np.arange(<span class="number">8</span>)</span><br><span class="line">data.reshape(<span class="number">4</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>np.resize(data,newshape)</span><br><span class="line">np.resize(np.arange(<span class="number">8</span>),[<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>与reshape相反的方法是数据散开（ravel）或数据扁平化（flatten）</span><br><span class="line">data.ravel()</span><br><span class="line">data.faltten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组的合并：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>hstack函数：实现横向合并</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.hstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>vstack函数：实现纵向组合是利用vstack将数组纵向合并；</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line">arr3 = np.vstack((arr1,arr2))</span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>concatenate函数：可以实现数组的横向或纵向合并，参数axis=<span class="number">1</span>时进行横向合并，axis=<span class="number">0</span>时进行纵向合并。</span><br><span class="line">arr1 = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">arr2 = arr1*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为：&#x27;</span>,np.concatenate((arr1,arr2),axis = <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组分割：与数组合并相反，hsplit函数、vsplit函数和split函数分别实现数组的横向、纵向和指定方向的分割。</span><br><span class="line">arr = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;横向分割为:\n&#x27;</span>,np.hsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;纵向组合为:\n&#x27;</span>,np.vsplit(arr,<span class="number">2</span>))</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">split在参数axis = <span class="number">1</span>时实现数组的横向分割，axis = <span class="number">0</span>时则进行纵向分割。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组转置和轴对换</span><br><span class="line">数组转置是数组重塑的一种特殊形式，可以通过transpose方法进行转置。</span><br><span class="line"><span class="number">1.</span>转置transpose，或者T</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>，<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.transpose((<span class="number">1</span>,<span class="number">0</span>)))</span><br><span class="line"><span class="built_in">print</span>(arr.T)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>轴对换</span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>，<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.swapaxes((<span class="number">0</span>,<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><h2 id="六-数组的索引和切片"><a href="#六-数组的索引和切片" class="headerlink" title="六. 数组的索引和切片"></a>六. 数组的索引和切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式arr[1:1:10,::1:20]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组的切片返回的是原始数据，并不会产生新的数据。</span></span><br><span class="line"><span class="string">可以使用copy方法实现</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">arr = np.array(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr1 = arr[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">arrr[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">3</span>)] <span class="comment"># 答案为：1，7 </span></span><br></pre></td></tr></table></figure><h2 id="七-数组的运算"><a href="#七-数组的运算" class="headerlink" title="七.数组的运算"></a>七.数组的运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">一.数组和标量间的运算</span><br><span class="line">arr = np.array(<span class="number">4</span>)</span><br><span class="line">c = arr * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.ufunc函数:全称通用函数，针对数组进行操作，返回numpy数组，比math库效率高</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>常用的ufunc函数</span><br><span class="line">（<span class="number">1</span>）四则运算：+，-，*，/，**</span><br><span class="line">（<span class="number">2</span>）比较运算：&gt;,&lt;,!=,==</span><br><span class="line">（<span class="number">3</span>）逻辑运算：np.<span class="built_in">any</span>,np.<span class="built_in">all</span>相当于<span class="keyword">or</span>,<span class="keyword">and</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>ufunc函数的广播机制：广播指不同形状的数组之间执行算术运算。</span><br><span class="line">（<span class="number">1</span>）让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在左边加<span class="number">1</span>补齐。</span><br><span class="line">（<span class="number">2</span>）如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为<span class="number">1</span>的维度进行扩展，以匹配另一个数组的形状。</span><br><span class="line">（<span class="number">3</span>）输出数组的shape是输入数组shape的各个轴上的最大值。</span><br><span class="line">（<span class="number">4</span>）如果两个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度等于<span class="number">1</span>，则引发异常。</span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">arr2 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.条件逻辑运算</span><br><span class="line">语法：np.where(condition,x,y)</span><br><span class="line">满足条件输出x，否则y；若只有条件 (condition)，没有x和y，则输出满足条件元素的下标。</span><br><span class="line">w = np.array([<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">10</span>])</span><br><span class="line">np.where(w&gt;<span class="number">4</span>) <span class="comment"># 返回下标</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八-数组读写"><a href="#八-数组读写" class="headerlink" title="八.数组读写"></a>八.数组读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一.NumPy中读写二进制文件的方法有：</span><br><span class="line"><span class="number">1.</span> np.load(“文件名.npy<span class="string">&quot;)是从二进制文件中读取数据；</span></span><br><span class="line"><span class="string">2. np.save(“文件名[.npy]&quot;</span>, arr) 是以二进制格式保存数据。（很难使用其他语言读入）</span><br><span class="line"></span><br><span class="line">二. 读写文本文件</span><br><span class="line"><span class="number">1.</span> np.loadtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>,delimiter = <span class="string">&quot;,&quot;</span>)把文件加载到一个二维数组中；</span><br><span class="line"><span class="number">2.</span> np.savetxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, arr, fmt = <span class="string">&quot;%d&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是将数组写到某种分隔符隔开的文本文件中；</span><br><span class="line"><span class="number">3.</span> np.genfromtxt(<span class="string">&quot;../tmp/arr.txt&quot;</span>, delimiter = <span class="string">&quot;,&quot;</span>)是结构化数组和缺失数据。</span><br><span class="line">           </span><br><span class="line">       </span><br><span class="line">           </span><br><span class="line">三.读取CSV文件</span><br><span class="line">np.loadtxt(fname, dtype=, comments=’<span class="comment">#’, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=‘bytes’)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>fname</td><td>str，读取的CSV文件名</td></tr><tr><td>delimiter</td><td>str，数据的分割符</td></tr><tr><td>usecols</td><td>tuple(元组) ，执行加载数据文件中的哪些列</td></tr><tr><td>unpack</td><td>bool，是否将加载的数据拆分为多个组，True表示拆，False不拆</td></tr><tr><td>skipprows</td><td>int，跳过多少行，一般用于跳过前几行的描述性文字</td></tr><tr><td>encoding</td><td>bytes，编码格式</td></tr></tbody></table><h2 id="九-Numpy中的数据统计与分析"><a href="#九-Numpy中的数据统计与分析" class="headerlink" title="九.Numpy中的数据统计与分析"></a>九.Numpy中的数据统计与分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一.排序</span><br><span class="line">直接排序：</span><br><span class="line">Sort函数对数据直接进行排序，调用改变原始数组，无返回值。</span><br><span class="line">格式：numpy.sort(a, axis, kind, order) </span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>使用说明</strong></th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>kind</td><td>排序算法，默认为“quicksort”</td></tr><tr><td>order</td><td>排序的字段名，可指定字段排序，默认为None</td></tr><tr><td>axis</td><td>使得sort函数可以沿着指定轴对数据集进行排序。axis&#x3D;1为沿横轴排序；axis&#x3D;0为沿纵轴排序；axis&#x3D;None,将数组平坦化之后进行排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">间接排序：</span><br><span class="line">np.argsort函数和np.lexsort函数根据一个或多个键值对数据集进行排序。</span><br><span class="line">np.argsort():  返回的是数组值从小到大的索引值;      </span><br><span class="line">np.lexsort():  返回值是按照最后一个传入数据排序的结果.</span><br></pre></td></tr></table></figure><h2 id="十-重复数据与去重"><a href="#十-重复数据与去重" class="headerlink" title="十.重复数据与去重"></a>十.重复数据与去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">一.对于一维数组或者列表，unique函数去除其中重复的元素，并按元素由大到小返回一个新的元组或者列表。</span><br><span class="line">names = np.array([<span class="string">&#x27;红色&#x27;</span>,<span class="string">&#x27;蓝色&#x27;</span>,<span class="string">&#x27;黄色&#x27;</span>,<span class="string">&#x27;白色&#x27;</span>,<span class="string">&#x27;红色&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组：&#x27;</span>,names)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;去重后的数组：&#x27;</span>,np.unique(names)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二.统计分析中有时也需要把一个数据重复若干次，使用tile和repeat函数即可实现此功能。</span><br><span class="line">tile函数的格式：np.tile(A, reps)</span><br><span class="line">其中，参数A表示要重复的数组，reps表示重复次数。</span><br><span class="line"></span><br><span class="line">repeat函数的格式：np.repeat(A, reps, axis = <span class="literal">None</span>)</span><br><span class="line">“a”: 是需要重复的数组元素，</span><br><span class="line">“repeats”: 是重复次数</span><br><span class="line">“axis”: 指定沿着哪个轴进行重复，axis = <span class="number">0</span>表示按行进行元素重复；axis = <span class="number">1</span>表示按列进行元素重复。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三.常用统计函数</span><br><span class="line">常见的有<span class="built_in">sum</span>、mean、std、var、<span class="built_in">min</span>和<span class="built_in">max</span>等。</span><br><span class="line">argmax索引最大</span><br><span class="line">cumsum累计和</span><br><span class="line">cumprod累计积</span><br><span class="line">log1plog(<span class="number">1</span>+p)</span><br></pre></td></tr></table></figure><h1 id="第四章-Pandas统计分析基础"><a href="#第四章-Pandas统计分析基础" class="headerlink" title="第四章 Pandas统计分析基础"></a>第四章 Pandas统计分析基础</h1><p> Pandas有三种数据结构：Series、DataFrame和Panel。</p><p>Series类似于一维数组；</p><p>DataFrame是类似表格的二维数组；</p><p>Panel可以视为Excel的多表单Sheet。</p><h2 id="一-Series"><a href="#一-Series" class="headerlink" title="一.Series"></a>一.Series</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Series 是一种一维数组对象，包含了一个值序列，并且包含了数据标签，称为索引（index），可通过索引来访问数组中的数据。</span><br><span class="line">pd.Series(data=<span class="literal">None</span>, index=<span class="literal">None</span>, dtype=<span class="literal">None</span>, name=<span class="literal">None</span>, copy=<span class="literal">False</span>, fastpath=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>Series的创建</span><br><span class="line">obj = pd.Series([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]) <span class="comment">#仅有一个数组构成</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建Series时指定索引</span><br><span class="line">i = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">v = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">t = pd.Series(v, index = i, name = <span class="string">&quot;col&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">尽管创建Series指定了index参数，实际Pandas还是有隐藏的index位置信息的。所以Series有两套描述某条数据的手段：位置和标签</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">val = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">idx1 = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">14</span>)</span><br><span class="line">idx2 = <span class="string">&#x27;hello the cruel world&#x27;</span>.split()</span><br><span class="line">s0 = pd.Series(val)</span><br><span class="line">s1 = pd.Series(val,index=idx1)</span><br><span class="line">t = pd.Series(val,index=idx2)</span><br><span class="line"><span class="built_in">print</span>(s0.index)</span><br><span class="line"><span class="built_in">print</span>(s1.index)</span><br><span class="line"><span class="built_in">print</span>(t.index)</span><br><span class="line"><span class="built_in">print</span>(s0[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>],t[<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过字典创建:如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series。</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj3 = pd.Series(sdata)</span><br><span class="line"><span class="built_in">print</span>(obj3)</span><br><span class="line">如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>键值和指定的索引不匹配</span><br><span class="line">sdata = &#123;<span class="string">&quot;a&quot;</span> : <span class="number">100</span>, <span class="string">&quot;b&quot;</span> : <span class="number">200</span>, <span class="string">&quot;e&quot;</span> : <span class="number">300</span>&#125;</span><br><span class="line">letter = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>  , <span class="string">&quot;e&quot;</span> ]</span><br><span class="line">obj =  pd.Series(sdata, index = letter)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>Series域重要的一个功能是：它在算术运算中会自动对齐不同索引的数据。</span><br><span class="line">不同索引数据的自动对齐</span><br><span class="line">sdata = &#123;<span class="string">&#x27;Ohio&#x27;</span>: <span class="number">35000</span>, <span class="string">&#x27;Texas&#x27;</span>: <span class="number">71000</span>, <span class="string">&#x27;Oregon&#x27;</span>: <span class="number">16000</span>, <span class="string">&#x27;Utah&#x27;</span>: <span class="number">5000</span>&#125;</span><br><span class="line">obj1 = pd.Series(sdata)</span><br><span class="line">states = [<span class="string">&#x27;California&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Oregon&#x27;</span>, <span class="string">&#x27;Texas&#x27;</span>]</span><br><span class="line">obj2 = pd.Series(sdata, index = states)</span><br><span class="line"><span class="built_in">print</span>(obj1+obj2) <span class="comment"># 实值 + 空值 = 空值</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>Series索引的修改</span><br><span class="line">obj = pd.Series([<span class="number">4</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">obj.index = [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Jeff&#x27;</span>, <span class="string">&#x27;Ryan&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-DataFrame"><a href="#二-DataFrame" class="headerlink" title="二.DataFrame"></a>二.DataFrame</h2><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">格式：pd.DataFrame(data=<span class="literal">None</span>, index=<span class="literal">None</span>, columns=<span class="literal">None</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>DataFrame的创建</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>:[<span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;male&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>:[<span class="number">2001</span>, <span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2002</span>],</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>:[<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">DataFrame会自动加上索引（跟Series一样），且全部列会被有序排列。如果指定了列序列，则DataFrame的列就会按照指定顺序迸行排列。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>指定索引顺序：跟Series一样，如果传入的列在数据中找不到，就会产生NA值</span><br><span class="line">df1 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;city&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>DataFrame创建时指定列名</span><br><span class="line">DataFrame构造函数的columns函数给出列的名字，index给出label标签</span><br><span class="line">df3 = pd.DataFrame(data, columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;city&#x27;</span>],index = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DataFrame的属性:</p><table><thead><tr><th><strong>函数</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td>values</td><td>元素</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>columns</td><td>列名</td></tr><tr><td>dtypes</td><td>类型</td></tr><tr><td>size</td><td>元素个数</td></tr><tr><td>ndim</td><td>维度数</td></tr><tr><td>shape</td><td>数据形状（行列数目）</td></tr></tbody></table><h2 id="三-索引对象"><a href="#三-索引对象" class="headerlink" title="三.索引对象"></a>三.索引对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>索引对象</span><br><span class="line"><span class="built_in">print</span>(df) </span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>DataFrame的Index</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> df.columns)</span><br><span class="line"><span class="built_in">print</span>(‘<span class="string">f&#x27; in df.index)</span></span><br></pre></td></tr></table></figure><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。Index的常用方法和属性：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>append</td><td>连接另一个Index对象，产生一个新的Index</td></tr><tr><td>diff</td><td>计算差集，并得到一个Index</td></tr><tr><td>intersection</td><td>计算交集</td></tr><tr><td>union</td><td>计算并集</td></tr><tr><td>isin</td><td>计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td>delete</td><td>删除索引i处的元素，并得到新的Index</td></tr><tr><td>drop</td><td>删除传入的值，并得到新的Index</td></tr><tr><td>insert</td><td>将元素插入到索引i处，并得到新的Index</td></tr><tr><td>is_monotonic</td><td>当各元素均大于等于前一个元素时，返回True</td></tr><tr><td>is.unique</td><td>当Index没有重复值时，返回True</td></tr><tr><td>unique</td><td>计算Index中唯一值的数组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>插入索引值</span><br><span class="line">df3.index.insert(<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p>DataFrame的基础属性有values、index、columns、dtypes、ndim和shape，分别可以获取DataFrame的元素、索引、列名、类型、维度和形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br><span class="line">df.columns</span><br></pre></td></tr></table></figure><h2 id="四-Pandas索引操作"><a href="#四-Pandas索引操作" class="headerlink" title="四.Pandas索引操作"></a>四.Pandas索引操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>重建索引</span><br><span class="line">重建索引是指对索引重新排序而不是重新命名，如果某个索引值不存在的话，会引入缺失值。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
